(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["common"],{

/***/ "+HbH":
/*!****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Paranoia.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Paranoia');
        var $nesting = [self].concat($parent_nesting),
            $Paranoia_initialize$1,
            $Paranoia_eval_game_system_specific_command$2,
            $Paranoia_getaRoll$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Paranoia");
        Opal.const_set($nesting[0], 'NAME', "パラノイア");
        Opal.const_set($nesting[0], 'SORT_KEY', "はらのいあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "※「パラノイア」は完璧なゲームであるため特殊なダイスコマンドを必要としません。\n" + "※このダイスボットは部屋のシステム名表示用となります。\n");
        self.$register_prefix("geta");
        Opal.def(self, '$initialize', $Paranoia_initialize$1 = function $$initialize(command) {
          var $iter = $Paranoia_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Paranoia_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Paranoia_initialize$1, false, true), 'initialize', [command], null);
          return self.enabled_upcase_input = false;
        }, $Paranoia_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Paranoia_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil,
              $case = nil;
          self.$debug("eval_game_system_specific_command command", command);
          result = "";
          $case = command;

          if (/geta/i['$===']($case)) {
            result = self.$getaRoll();
          }

          ;

          if ($truthy(result['$empty?']())) {
            return nil;
          }

          ;
          return "" + command + " ＞ " + result;
        }, $Paranoia_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$getaRoll', $Paranoia_getaRoll$3 = function $$getaRoll() {
          var self = this,
              result = nil,
              dice = nil,
              getaString = nil,
              $case = nil;
          result = "";
          dice = self.randomizer.$roll_once(2);
          result = $rb_plus(result, "幸福ですか？ ＞ ");
          getaString = "";
          $case = dice;

          if (1['$===']($case)) {
            getaString = "幸福です";
          } else if (2['$===']($case)) {
            getaString = "幸福ではありません";
          }

          ;
          result = $rb_plus(result, getaString);
          return result;
        }, $Paranoia_getaRoll$3.$$arity = 0), nil) && 'getaRoll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "22xI":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/HarnMaster.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'HarnMaster');
        var $nesting = [self].concat($parent_nesting),
            $HarnMaster_result_1d100$1,
            $HarnMaster_eval_game_system_specific_command$2,
            $HarnMaster_getCheckShockResult$3,
            $HarnMaster_getStrikeLocationHuman$4,
            $HarnMaster_getLocationSide$5,
            $HarnMaster_getFaceLocation$6,
            $HarnMaster_getStrikeLocationHumanUpperTable$7,
            $HarnMaster_getStrikeLocationHumanNormalTable$8,
            $HarnMaster_getStrikeLocationHumanDownTable$9;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "HarnMaster");
        Opal.const_set($nesting[0], 'NAME', "ハーンマスター");
        Opal.const_set($nesting[0], 'SORT_KEY', "はあんますたあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定\n" + "　1D100<=XX の判定時に致命的失敗・決定的成功を判定\n" + "・ショック判定（SHKx）\n" + "　例）SHK13,3\n" + "・人型用　中段命中部位表 (SLH)／上段命中部位 (SLHU)／上段命中部位 (SLHD)\n");
        self.$register_prefix("SHK", "SLH", "SLHU", "SLHD");
        Opal.def(self, '$result_1d100', $HarnMaster_result_1d100$1 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this;

          if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_le(total, target))) {
            if (total['$%'](5)['$=='](0)) {
              return $$($nesting, 'Result').$critical("決定的成功");
            } else {
              return $$($nesting, 'Result').$success("成功");
            }
          } else if (total['$%'](5)['$=='](0)) {
            return $$($nesting, 'Result').$fumble("致命的失敗");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $HarnMaster_result_1d100$1.$$arity = 4);
        Opal.def(self, '$eval_game_system_specific_command', $HarnMaster_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil,
              $case = nil,
              toughness = nil,
              damage = nil,
              type = nil,
              e = nil;

          try {
            result = nil;
            $case = command;

            if (/^SHK(\d*),(\d+)/i['$===']($case)) {
              toughness = $$($nesting, 'Regexp').$last_match(1).$to_i();
              damage = $$($nesting, 'Regexp').$last_match(2).$to_i();
              result = self.$getCheckShockResult(damage, toughness);
            } else if (/SLH(U|D)?/i['$===']($case)) {
              type = $$($nesting, 'Regexp').$last_match(1);
              result = self.$getStrikeLocationHuman(type);
            } else {
              result = nil;
            }

            ;
            return result;
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              e = $err;

              try {
                return e.$message();
              } finally {
                Opal.pop_exception();
              }
            } else {
              throw $err;
            }
          }
        }, $HarnMaster_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$getCheckShockResult', $HarnMaster_getCheckShockResult$3 = function $$getCheckShockResult(damage, toughness) {
          var self = this,
              dice_list = nil,
              dice = nil,
              diceText = nil,
              result = nil,
              text = nil;
          dice_list = self.randomizer.$roll_barabara(damage, 6);
          dice = dice_list.$sum();
          diceText = dice_list.$join(",");

          result = function () {
            if ($truthy($rb_le(dice, toughness))) {
              return "成功";
            } else {
              return "失敗";
            }

            ;
            return nil;
          }();

          text = "" + "ショック判定(ダメージ:" + damage + ", 耐久力:" + toughness + ") ＞ (" + dice + "[" + diceText + "]) ＞ " + result;
          return text;
        }, $HarnMaster_getCheckShockResult$3.$$arity = 2);
        Opal.def(self, '$getStrikeLocationHuman', $HarnMaster_getStrikeLocationHuman$4 = function $$getStrikeLocationHuman(type) {
          var self = this,
              typeName = nil,
              table = nil,
              $case = nil,
              number = nil,
              part = nil,
              result = nil;
          typeName = "";
          table = nil;
          $case = type;

          if ("U"['$===']($case)) {
            typeName = "命中部位(人型 上段)";
            table = self.$getStrikeLocationHumanUpperTable();
          } else if ("D"['$===']($case)) {
            typeName = "命中部位(人型 下段)";
            table = self.$getStrikeLocationHumanDownTable();
          } else if (nil['$===']($case)) {
            typeName = "命中部位(人型 中段)";
            table = self.$getStrikeLocationHumanNormalTable();
          } else {
            self.$raise("" + "unknow atak type " + type);
          }

          ;
          number = self.randomizer.$roll_once(100);
          part = self.$get_table_by_number(number, table);
          part = self.$getLocationSide(part, number);
          part = self.$getFaceLocation(part);
          result = "" + typeName + " ＞ (" + number + ")" + part;
          return result;
        }, $HarnMaster_getStrikeLocationHuman$4.$$arity = 1);
        Opal.def(self, '$getLocationSide', $HarnMaster_getLocationSide$5 = function $$getLocationSide(part, number) {
          var self = this,
              side = nil;

          if ($truthy(part['$=~'](/^\*/))) {} else {
            self.$debug("part has NO side", part);
            return part;
          }

          ;
          self.$debug("part has side", part);

          side = function () {
            if ($truthy(number['$odd?']())) {
              return "左";
            } else {
              return "右";
            }

            ;
            return nil;
          }();

          return part.$sub(/\*/, side);
        }, $HarnMaster_getLocationSide$5.$$arity = 2);
        Opal.def(self, '$getFaceLocation', $HarnMaster_getFaceLocation$6 = function $$getFaceLocation(part) {
          var self = this,
              table = nil,
              number = nil,
              faceLocation = nil,
              result = nil;
          self.$debug("getFaceLocation part", part);

          if ($truthy(part['$=~'](/\+$/))) {} else {
            self.$debug("is NOT Face");
            return part;
          }

          ;
          self.$debug("is Face");
          table = [[15, "顎"], [30, "*目"], [64, "*頬"], [80, "鼻"], [90, "*耳"], [100, "口"]];
          number = self.randomizer.$roll_once(100);
          faceLocation = self.$get_table_by_number(number, table);
          self.$debug("faceLocation", faceLocation);
          self.$debug("number", number);
          faceLocation = self.$getLocationSide(faceLocation, number);
          result = part.$sub(/\+$/, "" + " ＞ (" + number + ")" + faceLocation);
          return result;
        }, $HarnMaster_getFaceLocation$6.$$arity = 1);
        Opal.def(self, '$getStrikeLocationHumanUpperTable', $HarnMaster_getStrikeLocationHumanUpperTable$7 = function $$getStrikeLocationHumanUpperTable() {
          var self = this,
              table = nil;
          table = [[15, "頭部"], [30, "顔+"], [45, "首"], [57, "*肩"], [69, "*上腕"], [73, "*肘"], [81, "*前腕"], [85, "*手"], [95, "胸部"], [100, "腹部"]];
          return table;
        }, $HarnMaster_getStrikeLocationHumanUpperTable$7.$$arity = 0);
        Opal.def(self, '$getStrikeLocationHumanNormalTable', $HarnMaster_getStrikeLocationHumanNormalTable$8 = function $$getStrikeLocationHumanNormalTable() {
          var self = this,
              table = nil;
          table = [[5, "頭部"], [10, "顔+"], [15, "首"], [27, "*肩"], [33, "*上腕"], [35, "*肘"], [39, "*前腕"], [43, "*手"], [60, "胸部"], [70, "腹部"], [74, "股間"], [80, "*臀部"], [88, "*腿"], [90, "*膝"], [96, "*脛"], [100, "*足"]];
          return table;
        }, $HarnMaster_getStrikeLocationHumanNormalTable$8.$$arity = 0);
        return (Opal.def(self, '$getStrikeLocationHumanDownTable', $HarnMaster_getStrikeLocationHumanDownTable$9 = function $$getStrikeLocationHumanDownTable() {
          var self = this,
              table = nil;
          table = [[6, "*前腕"], [12, "*手"], [19, "胸部"], [29, "腹部"], [35, "股間"], [49, "*臀部"], [70, "*腿"], [78, "*膝"], [92, "*脛"], [100, "*足"]];
          return table;
        }, $HarnMaster_getStrikeLocationHumanDownTable$9.$$arity = 0), nil) && 'getStrikeLocationHumanDownTable';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "33cW":
/*!**********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/YearZeroEngine.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'YearZeroEngine');
        var $nesting = [self].concat($parent_nesting),
            $YearZeroEngine_dice_info_init$1,
            $YearZeroEngine_eval_game_system_specific_command$2,
            $YearZeroEngine_make_result_text$3,
            $YearZeroEngine_make_result_with_yze$4,
            $YearZeroEngine_make_result_with_myz$5,
            $YearZeroEngine_make_dice_roll$6;
        self.$$prototype.total_success_dice = self.$$prototype.total_botch_dice = self.$$prototype.base_botch_dice = self.$$prototype.push_dice = self.$$prototype.skill_botch_dice = self.$$prototype.gear_botch_dice = self.$$prototype.difficulty = self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "YearZeroEngine");
        Opal.const_set($nesting[0], 'NAME', "YearZeroEngine");
        Opal.const_set($nesting[0], 'SORT_KEY', "いやあせろえんしん");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定コマンド(nYZEx+x+x)\n" + "  (難易度)YZE(能力ダイス数)+(技能ダイス数)+(アイテムダイス数)  # (6のみを数える)\n" + "\n" + "・判定コマンド(nMYZx+x+x)\n" + "  (難易度)MYZ(能力ダイス数)+(技能ダイス数)+(アイテムダイス数)  # (1と6を数え、プッシュ可能数を表示)\n" + "\n" + "  ※ 難易度と技能、アイテムダイス数は省略可能\n");
        Opal.const_set($nesting[0], 'DIFFICULTY_INDEX', 1);
        Opal.const_set($nesting[0], 'COMMAND_TYPE_INDEX', 2);
        Opal.const_set($nesting[0], 'ABILITY_INDEX', 3);
        Opal.const_set($nesting[0], 'SKILL_INDEX', 5);
        Opal.const_set($nesting[0], 'MODIFIED_INDEX', 7);
        self.$register_prefix("(\\d+)?(YZE|MYZ)");
        Opal.def(self, '$dice_info_init', $YearZeroEngine_dice_info_init$1 = function $$dice_info_init() {
          var self = this;
          self.total_success_dice = 0;
          self.total_botch_dice = 0;
          self.base_botch_dice = 0;
          self.skill_botch_dice = 0;
          self.gear_botch_dice = 0;
          self.push_dice = 0;
          return self.difficulty = 0;
        }, $YearZeroEngine_dice_info_init$1.$$arity = 0);
        Opal.def(self, '$eval_game_system_specific_command', $YearZeroEngine_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              command_type = nil,
              dice_pool = nil,
              ability_dice_text = nil,
              success_dice = nil,
              botch_dice = nil,
              dice_count_text = nil,
              dice_text = nil,
              skill_dice_text = nil,
              modified_dice_text = nil;
          m = /^(\d+)?(YZE|MYZ)(\d+)(\+(\d+))?(\+(\d+))?/.$match(command);

          if ($truthy(m)) {} else {
            return "";
          }

          ;
          self.$dice_info_init();
          self.difficulty = m['$[]']($$($nesting, 'DIFFICULTY_INDEX')).$to_i();
          command_type = m['$[]']($$($nesting, 'COMMAND_TYPE_INDEX'));
          self.total_success_dice = 0;
          dice_pool = m['$[]']($$($nesting, 'ABILITY_INDEX')).$to_i();
          $b = self.$make_dice_roll(dice_pool), $a = Opal.to_ary($b), ability_dice_text = $a[0] == null ? nil : $a[0], success_dice = $a[1] == null ? nil : $a[1], botch_dice = $a[2] == null ? nil : $a[2], $b;
          self.total_success_dice = $rb_plus(self.total_success_dice, success_dice);
          self.total_botch_dice = $rb_plus(self.total_botch_dice, botch_dice);
          self.base_botch_dice = $rb_plus(self.base_botch_dice, botch_dice);
          self.push_dice = $rb_plus(self.push_dice, $rb_minus(dice_pool, $rb_plus(success_dice, botch_dice)));
          dice_count_text = "" + "(" + dice_pool + "D6)";
          dice_text = ability_dice_text;

          if ($truthy(m['$[]']($$($nesting, 'SKILL_INDEX')))) {
            dice_pool = m['$[]']($$($nesting, 'SKILL_INDEX')).$to_i();
            $b = self.$make_dice_roll(dice_pool), $a = Opal.to_ary($b), skill_dice_text = $a[0] == null ? nil : $a[0], success_dice = $a[1] == null ? nil : $a[1], botch_dice = $a[2] == null ? nil : $a[2], $b;
            self.total_success_dice = $rb_plus(self.total_success_dice, success_dice);
            self.total_botch_dice = $rb_plus(self.total_botch_dice, botch_dice);
            self.skill_botch_dice = $rb_plus(self.skill_botch_dice, botch_dice);
            self.push_dice = $rb_plus(self.push_dice, $rb_minus(dice_pool, success_dice));
            dice_count_text = $rb_plus(dice_count_text, "" + "+(" + dice_pool + "D6)");
            dice_text = $rb_plus(dice_text, "" + "+" + skill_dice_text);
          }

          ;

          if ($truthy(m['$[]']($$($nesting, 'MODIFIED_INDEX')))) {
            dice_pool = m['$[]']($$($nesting, 'MODIFIED_INDEX')).$to_i();
            $b = self.$make_dice_roll(dice_pool), $a = Opal.to_ary($b), modified_dice_text = $a[0] == null ? nil : $a[0], success_dice = $a[1] == null ? nil : $a[1], botch_dice = $a[2] == null ? nil : $a[2], $b;
            self.total_success_dice = $rb_plus(self.total_success_dice, success_dice);
            self.total_botch_dice = $rb_plus(self.total_botch_dice, botch_dice);
            self.gear_botch_dice = $rb_plus(self.gear_botch_dice, botch_dice);
            self.push_dice = $rb_plus(self.push_dice, $rb_minus(dice_pool, $rb_plus(success_dice, botch_dice)));
            dice_count_text = $rb_plus(dice_count_text, "" + "+(" + dice_pool + "D6)");
            dice_text = $rb_plus(dice_text, "" + "+" + modified_dice_text);
          }

          ;
          return self.$make_result_text(command_type, dice_count_text, dice_text);
        }, $YearZeroEngine_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$make_result_text', $YearZeroEngine_make_result_text$3 = function $$make_result_text(command_type, dice_count_text, dice_text) {
          var self = this;

          if (command_type['$==']("YZE")) {
            return self.$make_result_with_yze(dice_count_text, dice_text);
          } else if (command_type['$==']("MYZ")) {
            return self.$make_result_with_myz(dice_count_text, dice_text);
          }

          ;
          return "Error";
        }, $YearZeroEngine_make_result_text$3.$$arity = 3);
        Opal.def(self, '$make_result_with_yze', $YearZeroEngine_make_result_with_yze$4 = function $$make_result_with_yze(dice_count_text, dice_text) {
          var self = this,
              result_text = nil;
          result_text = "" + dice_count_text + " ＞ " + dice_text + " 成功数:" + self.total_success_dice;

          if ($truthy($rb_gt(self.difficulty, 0))) {
            if ($truthy($rb_ge(self.total_success_dice, self.difficulty))) {
              result_text = "" + result_text + " 難易度=" + self.difficulty + ":判定成功！";
            } else {
              result_text = "" + result_text + " 難易度=" + self.difficulty + ":判定失敗！";
            }
          }

          ;
          return result_text;
        }, $YearZeroEngine_make_result_with_yze$4.$$arity = 2);
        Opal.def(self, '$make_result_with_myz', $YearZeroEngine_make_result_with_myz$5 = function $$make_result_with_myz(dice_count_text, dice_text) {
          var self = this,
              result_text = nil;
          result_text = self.$make_result_with_yze(dice_count_text, dice_text);
          return "" + result_text + "\n出目1：[能力：" + self.base_botch_dice + ",技能：" + self.skill_botch_dice + ",アイテム：" + self.gear_botch_dice + ") プッシュ可能=" + self.push_dice + "ダイス";
        }, $YearZeroEngine_make_result_with_myz$5.$$arity = 2);
        return (Opal.def(self, '$make_dice_roll', $YearZeroEngine_make_dice_roll$6 = function $$make_dice_roll(dice_pool) {
          var self = this,
              dice_list = nil,
              success_dice = nil,
              botch_dice = nil;
          dice_list = self.randomizer.$roll_barabara(dice_pool, 6);
          success_dice = dice_list.$count(6);
          botch_dice = dice_list.$count(1);
          return ["" + "[" + dice_list.$join(",") + "]", success_dice, botch_dice];
        }, $YearZeroEngine_make_dice_roll$6.$$arity = 1), nil) && 'make_dice_roll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "3h5d":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/DarkSouls.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DarkSouls');
        var $nesting = [self].concat($parent_nesting),
            $DarkSouls_eval_game_system_specific_command$1,
            $DarkSouls_checkRoll$2,
            $DarkSouls_getValue$4,
            $DarkSouls_getValueText$5;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "DarkSouls");
        Opal.const_set($nesting[0], 'NAME', "ダークソウルTRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "たあくそうるTRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定：[n]DS[a±b][@t]　　[]内のコマンドは省略可\n" + "・能動判定：[n]ADS[a±b][@t]　　FP消費を判定\n" + "　n：ダイス数。省略時は「2」\n" + "　a±b：修正値。「1+2-1」のように、複数定可\n" + "　@t：目標値。省略時は達成値を、指定時は判定の正否を表示\n" + "例）DS → 2D6の達成値を表示\n" + "　　1DS → 1D6の達成値を表示\n" + "　　ADS+2-2 → 2D6+2の達成値を表示（能動判定）\n" + "　　DS+2@10 → 2D6+2で目標値10の判定\n");
        self.$register_prefix("(\\d+)?(A)?DS([-+\\d]*)(@\\d+)?");
        Opal.def(self, '$eval_game_system_specific_command', $DarkSouls_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              m = nil,
              diceCount = nil,
              $ret_or_1 = nil,
              isActive = nil,
              modify = nil,
              target = nil,
              $ret_or_2 = nil,
              output = nil;

          if ($truthy(m = /(\d+)?(A)?DS([-+\d]*)(@(\d+))?$/i.$match(command.$upcase()))) {} else {
            return nil;
          }

          ;

          diceCount = function () {
            if ($truthy($ret_or_1 = m['$[]'](1))) {
              return $ret_or_1;
            } else {
              return 2;
            }

            ;
            return nil;
          }().$to_i();

          isActive = m['$[]'](2)['$nil?']()['$!']();
          modify = self.$getValue(m['$[]'](3));

          target = function () {
            if ($truthy($ret_or_2 = m['$[]'](5))) {
              return $ret_or_2;
            } else {
              return 0;
            }

            ;
            return nil;
          }().$to_i();

          output = self.$checkRoll(diceCount, isActive, modify, target);
          return output;
        }, $DarkSouls_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$checkRoll', $DarkSouls_checkRoll$2 = function $$checkRoll(diceCount, isActive, modify, target) {
          var _$$,
              self = this,
              dice_list = nil,
              dice = nil,
              diceText = nil,
              successValue = nil,
              modifyText = nil,
              targetText = nil,
              diceArray = nil,
              focusDamage = nil,
              focusText = nil,
              result = nil;

          dice_list = self.randomizer.$roll_barabara(diceCount, 6);
          dice = dice_list.$sum();
          diceText = dice_list.$join(",");
          successValue = $rb_plus(dice, modify);
          modifyText = self.$getValueText(modify);

          targetText = function () {
            if (target['$=='](0)) {
              return "";
            } else {
              return "" + ">=" + target;
            }

            ;
            return nil;
          }();

          if ($truthy(isActive)) {
            diceArray = $send(diceText.$split(/,/), 'map', [], "to_i".$to_proc());
            focusDamage = $send(diceArray, 'count', [], (_$$ = function $$3(i) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (i == null) {
                i = nil;
              }

              ;
              return i['$=='](1);
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));

            if ($truthy($rb_gt(focusDamage, 0))) {
              focusText = $rb_times("■", focusDamage);
              focusText = "" + "（FP" + focusText + "消費）";
            }

            ;
          }

          ;
          result = "" + "(" + diceCount + "D6" + modifyText + targetText + ")";
          result = $rb_plus(result, "" + " ＞ " + dice + "(" + diceText + ")" + modifyText);
          result = $rb_plus(result, "" + " ＞ " + successValue + targetText);

          if ($truthy($rb_gt(target, 0))) {
            if ($truthy($rb_ge(successValue, target))) {
              result = $rb_plus(result, " ＞ 【成功】");
            } else {
              result = $rb_plus(result, " ＞ 【失敗】");
            }
          }

          ;
          result = $rb_plus(result, focusText.$to_s());
          return result;
        }, $DarkSouls_checkRoll$2.$$arity = 4);
        Opal.def(self, '$getValue', $DarkSouls_getValue$4 = function $$getValue(text) {
          var self = this,
              $ret_or_3 = nil;

          text = function () {
            if ($truthy($ret_or_3 = text)) {
              return $ret_or_3;
            } else {
              return "";
            }

            ;
            return nil;
          }();

          return $$($nesting, 'ArithmeticEvaluator').$eval(text);
        }, $DarkSouls_getValue$4.$$arity = 1);
        return (Opal.def(self, '$getValueText', $DarkSouls_getValueText$5 = function $$getValueText(value) {
          var self = this;

          if (value['$=='](0)) {
            return "";
          }

          ;

          if ($truthy($rb_lt(value, 0))) {
            return value.$to_s();
          }

          ;
          return "" + "+" + value;
        }, $DarkSouls_getValueText$5.$$arity = 1), nil) && 'getValueText';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "5d0B":
/*!***************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/DiceBot.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DiceBot');
        var $nesting = [self].concat($parent_nesting);
        Opal.const_set($nesting[0], 'ID', "DiceBot");
        Opal.const_set($nesting[0], 'NAME', "DiceBot");
        Opal.const_set($nesting[0], 'SORT_KEY', "*たいすほつと");
        return Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "3D6+1>=9 ：3d6+1で目標値9以上かの判定\n" + "1D100<=50 ：D100で50％目標の下方ロールの例\n" + "3U6[5] ：3d6のダイス目が5以上の場合に振り足しして合計する(上方無限)\n" + "3B6 ：3d6のダイス目をバラバラのまま出力する（合計しない）\n" + "10B6>=4 ：10d6を振り4以上のダイス目の個数を数える\n" + "2R6[>3]>=5 ：2D6のダイス目が3より大きい場合に振り足して、5以上のダイス目の個数を数える\n" + "(8/2)D(4+6)<=(5*3)：個数・ダイス・達成値には四則演算も使用可能\n" + "c(10-4*3/2+2)：c(計算式）で計算だけの実行も可能\n" + "choice[a,b,c]：列挙した要素から一つを選択表示。ランダム攻撃対象決定などに\n" + "S3d6 ： 各コマンドの先頭に「S」を付けると他人結果の見えないシークレットロール\n" + "3d6/2 ： ダイス出目を割り算（端数処理はゲームシステム依存）。切り上げは /2C、四捨五入は /2R、切り捨ては /2F\n" + "D66 ： D66ダイス。順序はゲームに依存。D66N：そのまま、D66A：昇順、D66D：降順\n" + "\n" + "詳細は下記URLのコマンドガイドを参照\n" + "https://docs.bcdice.org/\n");
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "5tMs":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/TokyoNova.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TokyoNova');
        var $nesting = [self].concat($parent_nesting);
        Opal.const_set($nesting[0], 'ID', "TokyoNova");
        Opal.const_set($nesting[0], 'NAME', "トーキョーN◎VA");
        Opal.const_set($nesting[0], 'SORT_KEY', "とおきよおのは");
        return Opal.const_set($nesting[0], 'HELP_MESSAGE', "※このダイスボットは部屋のシステム名表示用となります。\n");
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "7EFR":
/*!*************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/RecordOfLodossWar.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RecordOfLodossWar');
        var $nesting = [self].concat($parent_nesting),
            $RecordOfLodossWar_eval_game_system_specific_command$1;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "RecordOfLodossWar");
        Opal.const_set($nesting[0], 'NAME', "ロードス島戦記RPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "ろおとすとうせんきRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "●判定\n" + "　LW<=(目標値)で判定。\n" + "　達成値が目標値の1/10(端数切り上げ)以下であれば大成功。1～10であれば自動成功。\n" + "　91～100であれば自動失敗となります。\n" + "\n" + "●回避判定\n" + "　LWD<=(目標値)で回避判定。この時出目が51以上で自動失敗となります。\n" + "\n" + "　判定と回避判定は、どちらもコマンドだけの場合、出目の表示と自動成功と自動失敗の判定のみを行います。\n");
        self.$register_prefix("LW");
        return (Opal.def(self, '$eval_game_system_specific_command', $RecordOfLodossWar_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              parser = nil,
              cmd = nil,
              $ret_or_1 = nil,
              auto_failure = nil,
              critical = nil,
              dice_value = nil,
              result = nil,
              sequence = nil;
          parser = $$$($$($nesting, 'Command'), 'Parser').$new("LWD", "LW", $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$restrict_cmp_op_to(nil, "<=");
          cmd = parser.$parse(command);

          if ($truthy(function () {
            if ($truthy($ret_or_1 = cmd['$nil?']())) {
              return $ret_or_1;
            } else {
              return [nil, "<="]['$include?'](cmd.$cmp_op())['$!']();
            }

            ;
            return nil;
          }())) {
            return nil;
          }

          ;

          auto_failure = function () {
            if (cmd.$command()['$==']("LWD")) {
              return 51;
            } else {
              return 91;
            }

            ;
            return nil;
          }();

          critical = $rb_divide(cmd.$target_number().$to_f(), 10).$ceil();
          dice_value = self.randomizer.$roll_once(100);

          result = function () {
            if ($truthy($rb_ge(dice_value, auto_failure))) {
              return "" + "自動失敗(" + auto_failure + ")";
            } else if ($truthy($rb_le(dice_value, critical))) {
              return "" + "大成功(" + critical + ")";
            } else if ($truthy($rb_le(dice_value, 10))) {
              return "自動成功";
            } else if ($truthy(cmd.$cmp_op())) {
              if ($truthy($rb_le(dice_value, cmd.$target_number()))) {
                return "成功";
              } else {
                return "失敗";
              }
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          sequence = ["" + "(1D100" + cmd.$cmp_op() + cmd.$target_number() + ")", dice_value.$to_s(), result].$compact();
          return sequence.$join(" ＞ ");
        }, $RecordOfLodossWar_eval_game_system_specific_command$1.$$arity = 1), nil) && 'eval_game_system_specific_command';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "7MLG":
/*!***********************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/BBN.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BBN');
        var $nesting = [self].concat($parent_nesting),
            $BBN_eval_game_system_specific_command$1,
            $BBN_parse$2,
            $BBN_critical_base$3,
            $BBN_critical_$ques$4,
            $BBN_fumble_$ques$5,
            $BBN_additional_roll$6;
        self.$$prototype.randomizer = self.$$prototype.roll_times = self.$$prototype.modify = self.$$prototype.modify_str = self.$$prototype.difficulty = self.$$prototype.critical = self.$$prototype.fumble = nil;
        self.$register_prefix("\\d+BN");
        Opal.const_set($nesting[0], 'ID', "BBN");
        Opal.const_set($nesting[0], 'NAME', "BBNTRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "ひいひいえぬTRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定(xBN±y>=z[c,f])\n" + "　xD6の判定。クリティカル、ファンブルの自動判定を行います。\n" + "　1Dのクリティカル値とファンブル値は1。2Dのクリティカル値とファンブル値は2。\n" + "　nDのクリティカル値とファンブル値は n/2 の切り上げ。\n" + "　クリティカルとファンブルが同時に発生した場合、クリティカルを優先。\n" + "　x：xに振るダイス数を入力。\n" + "　y：yに修正値を入力。省略可能。\n" + "  z：zに目標値を入力。省略可能。\n" + "  c：クリティカルに必要なダイス目「6」の数の増減。省略可能。\n" + "  f：ファンブルに必要なダイス目「1」の数の増減。省略可能。\n" + "　例） 3BN+4　3BN>=8　3BN+1>=10[-1] 3BN+1>=10[,1] 3BN+1>=10[1,1]\n");
        Opal.def(self, '$eval_game_system_specific_command', $BBN_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              dice_list = nil,
              dice = nil,
              dice_str = nil,
              total = nil,
              sequence = nil;

          if ($truthy(self.$parse(command))) {} else {
            return nil;
          }

          ;
          dice_list = self.randomizer.$roll_barabara(self.roll_times, 6);
          dice = dice_list.$sum();
          dice_str = dice_list.$join(",");
          total = $rb_plus(dice, self.modify);
          sequence = ["" + "(" + command + ")", "" + dice + "[" + dice_str + "]" + self.modify_str, total];

          if ($truthy(self['$critical_?'](dice_list))) {
            $send(sequence, 'push', ["クリティカル！"].concat(Opal.to_a(self.$additional_roll(dice_list.$count(6), total))));
          } else if ($truthy(self['$fumble_?'](dice_list))) {
            sequence.$push("ファンブル！");
          } else if ($truthy(self.difficulty)) {
            sequence.$push(function () {
              if ($truthy($rb_ge(total, self.difficulty))) {
                return "成功";
              } else {
                return "失敗";
              }

              ;
              return nil;
            }());
          }

          ;
          return sequence.$join(" ＞ ");
        }, $BBN_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$parse', $BBN_parse$2 = function $$parse(command) {
          var self = this,
              m = nil,
              $ret_or_1 = nil,
              base = nil;
          m = /^(\d+)BN([+-]\d+)?(>=(([+-]?\d+)))?(\[([+-]?\d+)?(,([+-]?\d+))?\])?/.$match(command);

          if ($truthy(m)) {} else {
            return false;
          }

          ;
          self.roll_times = m['$[]'](1).$to_i();

          self.modify_str = function () {
            if ($truthy($ret_or_1 = m['$[]'](2))) {
              return $ret_or_1;
            } else {
              return "";
            }

            ;
            return nil;
          }();

          self.modify = m['$[]'](2).$to_i();

          self.difficulty = function () {
            if ($truthy(m['$[]'](4))) {
              return m['$[]'](4).$to_i();
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          base = self.$critical_base(self.roll_times);
          self.critical = $rb_plus(base, m['$[]'](7).$to_i());
          self.fumble = $rb_plus(base, m['$[]'](9).$to_i());
          return true;
        }, $BBN_parse$2.$$arity = 1);
        Opal.def(self, '$critical_base', $BBN_critical_base$3 = function $$critical_base(roll_times) {
          var self = this,
              $case = nil;
          return function () {
            $case = roll_times;

            if (1['$===']($case) || 2['$===']($case)) {
              return roll_times;
            } else {
              return $rb_divide(roll_times.$to_f(), 2).$ceil();
            }
          }();
        }, $BBN_critical_base$3.$$arity = 1);
        Opal.def(self, '$critical_?', $BBN_critical_$ques$4 = function $BBN_critical_$ques$4(dice_list) {
          var self = this;
          return $rb_ge(dice_list.$count(6), self.critical);
        }, $BBN_critical_$ques$4.$$arity = 1);
        Opal.def(self, '$fumble_?', $BBN_fumble_$ques$5 = function $BBN_fumble_$ques$5(dice_list) {
          var self = this;
          return $rb_ge(dice_list.$count(1), self.fumble);
        }, $BBN_fumble_$ques$5.$$arity = 1);
        return (Opal.def(self, '$additional_roll', $BBN_additional_roll$6 = function $$additional_roll(additional_dice, total) {
          var $a,
              self = this,
              sequence = nil,
              reroll_count = nil,
              $ret_or_2 = nil,
              dice_list = nil,
              dice_total = nil,
              dice_str = nil;
          sequence = [];
          reroll_count = 0;

          while ($truthy(function () {
            if ($truthy($ret_or_2 = $rb_gt(additional_dice, 0))) {
              return $rb_lt(reroll_count, 10);
            } else {
              return $ret_or_2;
            }

            ;
            return nil;
          }())) {
            reroll_count = $rb_plus(reroll_count, 1);
            dice_list = self.randomizer.$roll_barabara(additional_dice, 6);
            dice_total = dice_list.$sum();
            dice_str = dice_list.$join(",");
            additional_dice = dice_list.$count(6);
            sequence.$push("" + total + "+" + dice_total + "[" + dice_str + "]");

            if ($truthy($rb_gt(additional_dice, 0))) {
              sequence.$push("追加クリティカル！");
            }

            ;
            total = $rb_plus(total, dice_total);
          }

          ;

          if ($truthy($rb_gt(additional_dice, 0))) {
            sequence.$push("無限ループ防止のため中断");
          }

          ;
          sequence.$push(total);

          if ($truthy(self.difficulty)) {
            sequence.$push(function () {
              if ($truthy($rb_ge(total, self.difficulty))) {
                return "成功";
              } else {
                return "失敗";
              }

              ;
              return nil;
            }());
          }

          ;
          return sequence;
        }, $BBN_additional_roll$6.$$arity = 2), nil) && 'additional_roll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "7xQw":
/*!****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/OrgaRain.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OrgaRain');
        var $nesting = [self].concat($parent_nesting),
            $OrgaRain_initialize$1,
            $OrgaRain_eval_game_system_specific_command$2,
            $OrgaRain_check_roll$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "OrgaRain");
        Opal.const_set($nesting[0], 'NAME', "在りて遍くオルガレイン");
        Opal.const_set($nesting[0], 'SORT_KEY', "ありてあまねくおるかれいん");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "判定：[n]OR(count)\n" + "\n" + "[]内のコマンドは省略可能。\n" + "「n」でダイス数を指定。省略時は「1」。\n" + "(count)で命数を指定。「3111」のように記述。最大6つ。順不同可。\n" + "\n" + "【書式例】\n" + "・5OR6042 → 5dで命数「0,2,4,6」の判定\n" + "・6OR33333 → 6dで命数「3,3,3,3,3」の判定。\n");
        Opal.def(self, '$initialize', $OrgaRain_initialize$1 = function $$initialize(command) {
          var $iter = $OrgaRain_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $OrgaRain_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $OrgaRain_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $OrgaRain_initialize$1.$$arity = 1);
        self.$register_prefix("(\\d+)?OR(\\d{0,6})?");
        Opal.def(self, '$eval_game_system_specific_command', $OrgaRain_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              m = nil,
              dice_count = nil,
              $ret_or_1 = nil,
              count_no = nil,
              $ret_or_2 = nil;
          m = command.$match(/(\d+)?OR(\d{0,6})$/i);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;

          dice_count = function () {
            if ($truthy($ret_or_1 = m['$[]'](1))) {
              return $ret_or_1;
            } else {
              return 1;
            }

            ;
            return nil;
          }().$to_i();

          count_no = $send(function () {
            if ($truthy($ret_or_2 = m['$[]'](2))) {
              return $ret_or_2;
            } else {
              return "";
            }

            ;
            return nil;
          }().$each_char(), 'map', [], "to_i".$to_proc()).$sort();
          return self.$check_roll(dice_count, count_no);
        }, $OrgaRain_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$check_roll', $OrgaRain_check_roll$3 = function $$check_roll(dice_count, count_no) {
          var _$$,
              _$$2,
              self = this,
              dice_array = nil,
              dice_text = nil,
              result_array = nil,
              success = nil,
              count_text = nil,
              result_text = nil;

          dice_array = self.randomizer.$roll_barabara(dice_count, 10).$sort();
          dice_text = dice_array.$join(",");
          result_array = [];
          success = 0;
          $send($send(dice_array, 'map', [], (_$$ = function $$4(x) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (x == null) {
              x = nil;
            }

            ;

            if (x['$=='](10)) {
              return 0;
            } else {
              return x;
            }

            ;
          }, _$$.$$s = self, _$$.$$arity = 1, _$$)), 'each', [], (_$$2 = function $$5(i) {
            var self = _$$2.$$s == null ? this : _$$2.$$s,
                multiple = nil;

            if (i == null) {
              i = nil;
            }

            ;
            multiple = count_no.$count(i);

            if ($truthy($rb_gt(multiple, 0))) {
              result_array.$push("" + i + "(x" + multiple + ")");
              return success = $rb_plus(success, multiple);
            } else {
              return result_array.$push("×");
            }

            ;
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          count_text = count_no.$join(",");
          result_text = result_array.$join(",");
          return "" + dice_count + "D10(命数：" + count_text + ") ＞ " + dice_text + " ＞ " + result_text + " ＞ 成功数：" + success;
        }, $OrgaRain_check_roll$3.$$arity = 2), nil) && 'check_roll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "9CAH":
/*!*************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/WARPS.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WARPS');
        var $nesting = [self].concat($parent_nesting),
            $WARPS_result_2d6$1;
        Opal.const_set($nesting[0], 'ID', "WARPS");
        Opal.const_set($nesting[0], 'NAME', "ワープス");
        Opal.const_set($nesting[0], 'SORT_KEY', "わあふす");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "失敗、成功度の自動判定を行います。\n");
        return (Opal.def(self, '$result_2d6', $WARPS_result_2d6$1 = function $$result_2d6(total, dice_total, _dice_list, cmp_op, target) {
          var self = this;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_le(dice_total, 2))) {
            return $$($nesting, 'Result').$critical("クリティカル");
          } else if ($truthy($rb_ge(dice_total, 12))) {
            return $$($nesting, 'Result').$fumble("ファンブル");
          } else if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          } else if ($truthy($rb_le(total, target))) {
            return $$($nesting, 'Result').$success("" + $rb_minus(target, total) + "成功");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $WARPS_result_2d6$1.$$arity = 5), nil) && 'result_2d6';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "AMSi":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Airgetlamh.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Airgetlamh');
        var $nesting = [self].concat($parent_nesting),
            $Airgetlamh_initialize$1,
            $Airgetlamh_eval_game_system_specific_command$2,
            $Airgetlamh_checkRoll$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Airgetlamh");
        Opal.const_set($nesting[0], 'NAME', "朱の孤塔のエアゲトラム");
        Opal.const_set($nesting[0], 'SORT_KEY', "あけのことうのえあけとらむ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "【Reg2.0『THE ANSWERER』～】\n" + "・調査判定（成功数を表示）：[n]AA[m]\n" + "・命中判定（ダメージ表示）：[n]AA[m]*p[+t][Cx]\n" + "【～Reg1.1『昇華』】\n" + "・調査判定（成功数を表示）：[n]AL[m]\n" + "・命中判定（ダメージ表示）：[n]AL[m]*p\n" + "----------------------------------------\n" + "[]内のコマンドは省略可能。\n" + "\n" + "「n」でダイス数（攻撃回数）を指定。省略時は「2」。\n" + "「m」で目標値を指定。省略時は「6」。\n" + "「p」で威力を指定。「*」は「x」で代用可。\n" + "「+t」でクリティカルトリガーを指定。省略可。\n" + "「Cx」でクリティカル値を指定。省略時は「1」、最大値は「3」、「0」でクリティカル無し。\n" + "\n" + "攻撃力指定で命中判定となり、成功数ではなく、ダメージを結果表示します。\n" + "クリティカルヒットの分だけ、自動で振り足し処理を行います。\n" + "（ALコマンドではクリティカル処理を行いません）\n" + "\n" + "【書式例】\n" + "・AL → 2d10で目標値6の調査判定。\n" + "・5AA7*12 → 5d10で目標値7、威力12の命中判定。\n" + "・AA7x28+5 → 2d10で目標値7、威力28、クリティカルトリガー5の命中判定。\n" + "・9aa5*10C2 → 9d10で目標値5、威力10、クリティカル値2の命中判定。\n" + "・15AAx4c0 → 15d10で目標値6、威力4、クリティカル無しの命中判定。\n");
        self.$register_prefix("\\d*A[AL]");
        Opal.def(self, '$initialize', $Airgetlamh_initialize$1 = function $$initialize(command) {
          var $iter = $Airgetlamh_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Airgetlamh_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Airgetlamh_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $Airgetlamh_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Airgetlamh_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              diceCount = nil,
              $ret_or_1 = nil,
              target = nil,
              $ret_or_2 = nil,
              damage = nil,
              $ret_or_3 = nil,
              criticalTrigger = nil,
              criticalNumber = nil,
              $ret_or_4 = nil,
              $ret_or_5 = nil;

          if ($truthy(command['$=~'](/(\d+)?A(A|L)(\d+)?((x|\*)(\d+)(\+(\d+))?)?(C(\d+))?$/i))) {
            diceCount = function () {
              if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(1))) {
                return $ret_or_1;
              } else {
                return 2;
              }

              ;
              return nil;
            }().$to_i();

            target = function () {
              if ($truthy($ret_or_2 = $$($nesting, 'Regexp').$last_match(3))) {
                return $ret_or_2;
              } else {
                return 6;
              }

              ;
              return nil;
            }().$to_i();

            damage = function () {
              if ($truthy($ret_or_3 = $$($nesting, 'Regexp').$last_match(6))) {
                return $ret_or_3;
              } else {
                return 0;
              }

              ;
              return nil;
            }().$to_i();

            if ($$($nesting, 'Regexp').$last_match(2)['$==']("L")) {
              criticalTrigger = 0;
              criticalNumber = 0;
            } else {
              criticalTrigger = function () {
                if ($truthy($ret_or_4 = $$($nesting, 'Regexp').$last_match(8))) {
                  return $ret_or_4;
                } else {
                  return 0;
                }

                ;
                return nil;
              }().$to_i();

              criticalNumber = function () {
                if ($truthy($ret_or_5 = $$($nesting, 'Regexp').$last_match(10))) {
                  return $ret_or_5;
                } else {
                  return 1;
                }

                ;
                return nil;
              }().$to_i();
            }

            ;

            if ($truthy($rb_gt(criticalNumber, 4))) {
              criticalNumber = 3;
            }

            ;
            return self.$checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber);
          }

          ;
          return nil;
        }, $Airgetlamh_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$checkRoll', $Airgetlamh_checkRoll$3 = function $$checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber) {
          var $a,
              _$$,
              _$$2,
              self = this,
              totalSuccessCount = nil,
              totalCriticalCount = nil,
              text = nil,
              rollCount = nil,
              diceArray = nil,
              diceText = nil,
              successCount = nil,
              criticalCount = nil,
              result = nil,
              isDamage = nil,
              totalDamage = nil;

          totalSuccessCount = 0;
          totalCriticalCount = 0;
          text = "";
          rollCount = diceCount;

          while ($truthy($rb_gt(rollCount, 0))) {
            diceArray = self.randomizer.$roll_barabara(rollCount, 10).$sort();
            diceText = diceArray.$join(",");
            successCount = $send(diceArray, 'count', [], (_$$ = function $$4(i) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (i == null) {
                i = nil;
              }

              ;
              return $rb_le(i, target);
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));
            criticalCount = $send(diceArray, 'count', [], (_$$2 = function $$5(i) {
              var self = _$$2.$$s == null ? this : _$$2.$$s;

              if (i == null) {
                i = nil;
              }

              ;
              return $rb_le(i, criticalNumber);
            }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
            totalSuccessCount = $rb_plus(totalSuccessCount, successCount);
            totalCriticalCount = $rb_plus(totalCriticalCount, criticalCount);

            if ($truthy(text['$empty?']())) {} else {
              text = $rb_plus(text, "+");
            }

            ;
            text = $rb_plus(text, "" + successCount + "[" + diceText + "]");
            rollCount = criticalCount;
          }

          ;
          result = "";
          isDamage = damage['$!='](0);

          if ($truthy(isDamage)) {
            totalDamage = $rb_plus($rb_times(totalSuccessCount, damage), $rb_times(totalCriticalCount, criticalTrigger));
            result = $rb_plus(result, "" + "(" + diceCount + "D10<=" + target + ") ＞ " + text + " ＞ Hits：" + totalSuccessCount + "*" + damage);

            if ($truthy($rb_gt(criticalTrigger, 0))) {
              result = $rb_plus(result, "" + " + Trigger：" + totalCriticalCount + "*" + criticalTrigger);
            }

            ;
            result = $rb_plus(result, "" + " ＞ " + totalDamage + "ダメージ");
          } else {
            result = $rb_plus(result, "" + "(" + diceCount + "D10<=" + target + ") ＞ " + text + " ＞ 成功数：" + totalSuccessCount);
          }

          ;

          if ($truthy($rb_gt(totalCriticalCount, 0))) {
            result = $rb_plus(result, "" + " / " + totalCriticalCount + "クリティカル");
          }

          ;
          return result;
        }, $Airgetlamh_checkRoll$3.$$arity = 5), nil) && 'checkRoll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "AMUg":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Arianrhod.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Arianrhod');
        var $nesting = [self].concat($parent_nesting),
            $Arianrhod_initialize$1,
            $Arianrhod_result_nd6$2;
        Opal.const_set($nesting[0], 'ID', "Arianrhod");
        Opal.const_set($nesting[0], 'NAME', "アリアンロッドRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "ありあんろつとRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・クリティカル、ファンブルの自動判定を行います。(クリティカル時の追加ダメージも表示されます)\n" + "・D66ダイスあり\n");
        Opal.def(self, '$initialize', $Arianrhod_initialize$1 = function $$initialize(command) {
          var $iter = $Arianrhod_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Arianrhod_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Arianrhod_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'NO_SORT');
        }, $Arianrhod_initialize$1.$$arity = 1);
        return (Opal.def(self, '$result_nd6', $Arianrhod_result_nd6$2 = function $$result_nd6(total, _dice_total, dice_list, cmp_op, target) {
          var self = this,
              n_max = nil,
              $ret_or_1 = nil;
          n_max = dice_list.$count(6);

          if (dice_list.$count(1)['$=='](dice_list.$size())) {
            return $$($nesting, 'Result').$fumble("ファンブル");
          } else if ($truthy($rb_ge(n_max, 2))) {
            return $$($nesting, 'Result').$critical("" + "クリティカル(+" + n_max + "D6)");
          } else if ($truthy(function () {
            if ($truthy($ret_or_1 = cmp_op['$!='](">="))) {
              return $ret_or_1;
            } else {
              return target['$==']("?");
            }

            ;
            return nil;
          }())) {
            return nil;
          } else if ($truthy($rb_ge(total, target))) {
            return $$($nesting, 'Result').$success("成功");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $Arianrhod_result_nd6$2.$$arity = 5), nil) && 'result_nd6';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "B1yZ":
/*!*******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/ZettaiReido.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ZettaiReido');
        var $nesting = [self].concat($parent_nesting),
            $ZettaiReido_eval_game_system_specific_command$1,
            $ZettaiReido_roll2DR$2,
            $ZettaiReido_roll2DarkDice$3,
            $ZettaiReido_changeDiceToDarkDice$4,
            $ZettaiReido_getModInfo$5,
            $ZettaiReido_getDiffInfo$6,
            $ZettaiReido_getDarkPointResult$7,
            $ZettaiReido_getSuccessText$8;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "ZettaiReido");
        Opal.const_set($nesting[0], 'NAME', "絶対隷奴");
        Opal.const_set($nesting[0], 'SORT_KEY', "せつたいれいと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定\n" + "m-2DR+n>=x\n" + "m(基本能力),n(修正値),x(目標値)\n" + "DPの取得の有無も表示されます。\n");
        self.$register_prefix("\\d+\\-2DR");
        Opal.def(self, '$eval_game_system_specific_command', $ZettaiReido_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              baseAvility = nil,
              modText = nil,
              diffValue = nil;

          if ($truthy(command['$=~'](/^(\d+)-2DR([+\-\d]*)(>=(\d+))?$/i))) {} else {
            return nil;
          }

          ;
          baseAvility = $$($nesting, 'Regexp').$last_match(1).$to_i();
          modText = $$($nesting, 'Regexp').$last_match(2);
          diffValue = $$($nesting, 'Regexp').$last_match(4);
          return self.$roll2DR(baseAvility, modText, diffValue);
        }, $ZettaiReido_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$roll2DR', $ZettaiReido_roll2DR$2 = function $$roll2DR(baseAvility, modText, diffValue) {
          var $a,
              $b,
              self = this,
              diceTotal = nil,
              diceText = nil,
              darkPoint = nil,
              mod = nil,
              diff = nil,
              diffText = nil,
              output = nil,
              total = nil,
              successText = nil,
              darkPointText = nil;
          $b = self.$roll2DarkDice(), $a = Opal.to_ary($b), diceTotal = $a[0] == null ? nil : $a[0], diceText = $a[1] == null ? nil : $a[1], darkPoint = $a[2] == null ? nil : $a[2], $b;
          $b = self.$getModInfo(modText), $a = Opal.to_ary($b), mod = $a[0] == null ? nil : $a[0], modText = $a[1] == null ? nil : $a[1], $b;
          $b = self.$getDiffInfo(diffValue), $a = Opal.to_ary($b), diff = $a[0] == null ? nil : $a[0], diffText = $a[1] == null ? nil : $a[1], $b;
          output = "";
          output = $rb_plus(output, "" + "(" + baseAvility + "-2DR" + modText + diffText + ")");
          output = $rb_plus(output, "" + " ＞ " + baseAvility + "-" + diceTotal + "[" + diceText + "]" + modText);
          total = $rb_plus($rb_minus(baseAvility, diceTotal), mod);
          output = $rb_plus(output, "" + " ＞ " + total);
          successText = self.$getSuccessText(diceTotal, total, diff);
          output = $rb_plus(output, successText);
          darkPointText = self.$getDarkPointResult(total, diff, darkPoint);
          output = $rb_plus(output, darkPointText);
          return output;
        }, $ZettaiReido_roll2DR$2.$$arity = 3);
        Opal.def(self, '$roll2DarkDice', $ZettaiReido_roll2DarkDice$3 = function $$roll2DarkDice() {
          var $a,
              $b,
              self = this,
              dice1 = nil,
              dice2 = nil,
              darkDice1 = nil,
              darkPoint1 = nil,
              darkDice2 = nil,
              darkPoint2 = nil,
              darkPoint = nil,
              darkTotal = nil,
              darkDiceText = nil;
          dice1 = self.randomizer.$roll_once(6);
          dice2 = self.randomizer.$roll_once(6);
          $b = self.$changeDiceToDarkDice(dice1), $a = Opal.to_ary($b), darkDice1 = $a[0] == null ? nil : $a[0], darkPoint1 = $a[1] == null ? nil : $a[1], $b;
          $b = self.$changeDiceToDarkDice(dice2), $a = Opal.to_ary($b), darkDice2 = $a[0] == null ? nil : $a[0], darkPoint2 = $a[1] == null ? nil : $a[1], $b;
          darkPoint = $rb_plus(darkPoint1, darkPoint2);

          if (darkPoint['$=='](2)) {
            darkPoint = 4;
          }

          ;
          darkTotal = $rb_plus(darkDice1, darkDice2);
          darkDiceText = "" + darkDice1 + "," + darkDice2;
          return [darkTotal, darkDiceText, darkPoint];
        }, $ZettaiReido_roll2DarkDice$3.$$arity = 0);
        Opal.def(self, '$changeDiceToDarkDice', $ZettaiReido_changeDiceToDarkDice$4 = function $$changeDiceToDarkDice(dice) {
          var self = this,
              darkPoint = nil,
              darkDice = nil;
          darkPoint = 0;
          darkDice = dice;

          if (dice['$=='](6)) {
            darkDice = 0;
            darkPoint = 1;
          }

          ;
          return [darkDice, darkPoint];
        }, $ZettaiReido_changeDiceToDarkDice$4.$$arity = 1);
        Opal.def(self, '$getModInfo', $ZettaiReido_getModInfo$5 = function $$getModInfo(modText) {
          var self = this,
              value = nil,
              text = nil;
          value = $$($nesting, 'ArithmeticEvaluator').$eval(modText);
          text = "";

          if ($truthy($rb_lt(value, 0))) {
            text = value.$to_s();
          } else if ($truthy($rb_gt(value, 0))) {
            text = $rb_plus("+", value.$to_s());
          }

          ;
          return [value, text];
        }, $ZettaiReido_getModInfo$5.$$arity = 1);
        Opal.def(self, '$getDiffInfo', $ZettaiReido_getDiffInfo$6 = function $$getDiffInfo(diffValue) {
          var self = this,
              diffText = nil;
          diffText = "";

          if ($truthy(diffValue['$nil?']())) {} else {
            diffValue = diffValue.$to_i();
            diffText = "" + ">=" + diffValue.$to_i();
          }

          ;
          return [diffValue, diffText];
        }, $ZettaiReido_getDiffInfo$6.$$arity = 1);
        Opal.def(self, '$getDarkPointResult', $ZettaiReido_getDarkPointResult$7 = function $$getDarkPointResult(_total, _diff, darkPoint) {
          var self = this,
              text = nil;
          text = "";

          if ($truthy($rb_gt(darkPoint, 0))) {
            text = "" + " ＞ " + darkPoint + "DP";
          }

          ;
          return text;
        }, $ZettaiReido_getDarkPointResult$7.$$arity = 3);
        return (Opal.def(self, '$getSuccessText', $ZettaiReido_getSuccessText$8 = function $$getSuccessText(diceTotal, total, diff) {
          var self = this,
              successLevel = nil;

          if (diceTotal['$=='](0)) {
            return " ＞ クリティカル";
          }

          ;

          if (diceTotal['$=='](10)) {
            return " ＞ ファンブル";
          }

          ;

          if ($truthy(diff['$nil?']())) {
            diff = 0;
          }

          ;
          successLevel = $rb_minus(total, diff);

          if ($truthy($rb_ge(successLevel, 0))) {
            return "" + " ＞ " + successLevel + " 成功";
          }

          ;
          return " ＞ 失敗";
        }, $ZettaiReido_getSuccessText$8.$$arity = 3), nil) && 'getSuccessText';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "Bc9D":
/*!********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/NjslyrBattle.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NjslyrBattle');
        var $nesting = [self].concat($parent_nesting),
            $NjslyrBattle_result_2d6$1,
            $NjslyrBattle_juuten$2;
        Opal.const_set($nesting[0], 'ID', "NjslyrBattle");
        Opal.const_set($nesting[0], 'NAME', "NJSLYRBATTLE");
        Opal.const_set($nesting[0], 'SORT_KEY', "にんしやすれいやあはとる");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・カラテロール\n" + "2d6<=(カラテ点)\n" + "例）2d6<=5\n" + "(2D6<=5) ＞ 2[1,1] ＞ 2 ＞ 成功 重点 3 溜まる\n");
        Opal.def(self, '$result_2d6', $NjslyrBattle_result_2d6$1 = function $$result_2d6(total, _dice_total, dice_list, cmp_op, target) {
          var self = this,
              result = nil,
              $writer = nil;

          if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if ($truthy(cmp_op['$!=']("<="))) {
            return nil;
          }

          ;

          result = function () {
            if ($truthy($rb_le(total, target))) {
              return $$($nesting, 'Result').$success("成功");
            } else {
              return $$($nesting, 'Result').$failure("失敗");
            }

            ;
            return nil;
          }();

          $writer = [$rb_plus(result.$text(), self.$juuten(dice_list))];
          $send(result, 'text=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $NjslyrBattle_result_2d6$1.$$arity = 5);
        self.$private();
        return (Opal.def(self, '$juuten', $NjslyrBattle_juuten$2 = function $$juuten(dice_list) {
          var self = this,
              juuten = nil;
          juuten = $rb_plus(dice_list.$count(1), dice_list.$count(6));

          if (dice_list['$[]'](0)['$=='](dice_list['$[]'](1))) {
            juuten = $rb_plus(juuten, 1);
          }

          ;

          if ($truthy($rb_gt(juuten, 0))) {
            return "" + " 重点 " + juuten + " 溜まる";
          } else {
            return "";
          }

          ;
        }, $NjslyrBattle_juuten$2.$$arity = 1), nil) && 'juuten';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "CAhj":
/*!*********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/RecordOfSteam.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RecordOfSteam');
        var $nesting = [self].concat($parent_nesting),
            $RecordOfSteam_eval_game_system_specific_command$1,
            $RecordOfSteam_getDiceRollResult$2,
            $RecordOfSteam_getRoundCountText$4,
            $RecordOfSteam_getSuccessText$5,
            $RecordOfSteam_getSpecialText$6,
            $RecordOfSteam_getFumbleText$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "RecordOfSteam");
        Opal.const_set($nesting[0], 'NAME', "Record of Steam");
        Opal.const_set($nesting[0], 'SORT_KEY', "れこおとおふすちいむ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "2S2@1\n" + "RecordOfSteam : (2S2@1) ＞ 1,2,3,4 ＞ 1回転 ＞ 成功数2\n" + "\n" + "4S3@2\n" + "RecordOfSteam : (4S3@2) ＞ 2,1,2,4,4,4,2,3,4,5,6,6 ＞ 4回転 ＞ 成功数5\n");
        self.$register_prefix("\\d+S\\d+");
        Opal.def(self, '$eval_game_system_specific_command', $RecordOfSteam_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var $a,
              $b,
              self = this,
              diceCount = nil,
              targetNumber = nil,
              criticalValue = nil,
              $ret_or_1 = nil,
              specialValue = nil,
              rollResult = nil,
              successCount = nil,
              roundCount = nil,
              specialCount = nil,
              fumbleCount = nil,
              output = nil,
              roundCountText = nil,
              successText = nil,
              specialText = nil,
              fumbleText = nil,
              result = nil;

          if ($truthy(/(\d+)[sS](\d+)(@(\d+))?/i['$=~'](command))) {} else {
            return "1";
          }

          ;
          diceCount = $$($nesting, 'Regexp').$last_match(1).$to_i();
          targetNumber = $$($nesting, 'Regexp').$last_match(2).$to_i();
          criticalValue = $$($nesting, 'Regexp').$last_match(4);

          criticalValue = function () {
            if ($truthy($ret_or_1 = criticalValue)) {
              return $ret_or_1;
            } else {
              return 1;
            }

            ;
            return nil;
          }();

          criticalValue = criticalValue.$to_i();

          if ($truthy($rb_ge(diceCount, 150))) {
            return "(多分)無限個なので振れません！ ヤメテクダサイ、(プロセスが)死んでしまいますっ";
          }

          ;

          if ($truthy($rb_ge(criticalValue, 3))) {
            return "(多分)無限個なので振れません！ ヤメテクダサイ、(プロセスが)死んでしまいますっ";
          }

          ;
          specialValue = criticalValue;
          $b = self.$getDiceRollResult(diceCount, targetNumber, criticalValue, specialValue), $a = Opal.to_ary($b), rollResult = $a[0] == null ? nil : $a[0], successCount = $a[1] == null ? nil : $a[1], roundCount = $a[2] == null ? nil : $a[2], specialCount = $a[3] == null ? nil : $a[3], fumbleCount = $a[4] == null ? nil : $a[4], $b;
          output = "" + "(" + command + ") ＞ " + rollResult;
          roundCountText = self.$getRoundCountText(roundCount);
          successText = self.$getSuccessText(successCount);
          specialText = self.$getSpecialText(specialCount);
          fumbleText = self.$getFumbleText(fumbleCount);
          result = "" + output + roundCountText + specialText + successText + fumbleText;
          return result;
        }, $RecordOfSteam_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$getDiceRollResult', $RecordOfSteam_getDiceRollResult$2 = function $$getDiceRollResult(diceCount, targetNumber, criticalValue, specialValue) {
          var $a,
              _$$,
              self = this,
              successCount = nil,
              roundCount = nil,
              rollResult = nil,
              specialCount = nil,
              specialFlag = nil,
              fumbleCount = nil,
              fumbleFlag = nil,
              diceList = nil,
              diceListText = nil,
              $ret_or_2 = nil;

          successCount = 0;
          roundCount = 0;
          rollResult = "";
          specialCount = 0;
          specialFlag = false;
          fumbleCount = 0;
          fumbleFlag = false;

          while ($truthy($rb_gt(diceCount, 0))) {
            diceList = self.randomizer.$roll_barabara(diceCount, 6);
            diceListText = diceList.$join(",");

            if ($truthy(rollResult['$!='](""))) {
              rollResult = $rb_plus(rollResult, ",");
            }

            ;
            rollResult = $rb_plus(rollResult, diceListText);

            if ($truthy(function () {
              if ($truthy($ret_or_2 = diceList.$uniq().$length()['$=='](1))) {
                return roundCount['$=='](0);
              } else {
                return $ret_or_2;
              }

              ;
              return nil;
            }())) {
              if ($truthy($rb_le(diceList.$uniq().$first(), specialValue))) {
                specialFlag = true;
              } else if (diceList.$uniq().$first()['$=='](6)) {
                fumbleFlag = true;
              }
            }

            ;
            self.$debug("diceList", diceList);

            if ($truthy(specialFlag)) {
              specialCount = 1;
              successCount = $rb_times(diceCount, 3);
              return [rollResult, successCount, roundCount, specialCount, fumbleCount];
            } else if ($truthy(fumbleFlag)) {
              fumbleCount = 1;
              return [rollResult, successCount, roundCount, specialCount, fumbleCount];
            }

            ;
            diceCount = 0;
            $send(diceList, 'map', [], (_$$ = function $$3(diceValue) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (diceValue == null) {
                diceValue = nil;
              }

              ;
              self.$debug("diceValue", diceValue);
              self.$debug("criticalValue", criticalValue);
              self.$debug("specialValue", specialValue);

              if ($truthy($rb_le(diceValue, criticalValue))) {
                diceCount = $rb_plus(diceCount, 2);
                roundCount = $rb_plus(roundCount, 1);
              }

              ;

              if ($truthy($rb_le(diceValue, targetNumber))) {
                return successCount = $rb_plus(successCount, 1);
              } else {
                return nil;
              }

              ;
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          }

          ;
          return [rollResult, successCount, roundCount, specialCount, fumbleCount];
        }, $RecordOfSteam_getDiceRollResult$2.$$arity = 4);
        Opal.def(self, '$getRoundCountText', $RecordOfSteam_getRoundCountText$4 = function $$getRoundCountText(roundCount) {
          var self = this;

          if ($truthy($rb_le(roundCount, 0))) {
            return "";
          }

          ;
          return "" + " ＞ " + roundCount + "回転";
        }, $RecordOfSteam_getRoundCountText$4.$$arity = 1);
        Opal.def(self, '$getSuccessText', $RecordOfSteam_getSuccessText$5 = function $$getSuccessText(successCount) {
          var self = this;

          if ($truthy($rb_gt(successCount, 0))) {
            return "" + " ＞ 成功数" + successCount;
          }

          ;
          return " ＞ 失敗";
        }, $RecordOfSteam_getSuccessText$5.$$arity = 1);
        Opal.def(self, '$getSpecialText', $RecordOfSteam_getSpecialText$6 = function $$getSpecialText(specialCount) {
          var self = this;

          if (specialCount['$=='](1)) {
            return " ＞ スペシャル";
          } else {
            return nil;
          }
        }, $RecordOfSteam_getSpecialText$6.$$arity = 1);
        return (Opal.def(self, '$getFumbleText', $RecordOfSteam_getFumbleText$7 = function $$getFumbleText(fumbleCount) {
          var self = this;

          if (fumbleCount['$=='](1)) {
            return " ＞ ファンブル";
          } else {
            return nil;
          }
        }, $RecordOfSteam_getFumbleText$7.$$arity = 1), nil) && 'getFumbleText';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "H/pX":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/RuneQuest.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RuneQuest');
        var $nesting = [self].concat($parent_nesting),
            $RuneQuest_result_1d100$1;
        Opal.const_set($nesting[0], 'ID', "RuneQuest");
        Opal.const_set($nesting[0], 'NAME', "ルーンクエスト");
        Opal.const_set($nesting[0], 'SORT_KEY', "るうんくえすと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "クリティカル、エフェクティブ(効果的成功)、ファンブルの自動判定を行います。\n");
        return (Opal.def(self, '$result_1d100', $RuneQuest_result_1d100$1 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this,
              critical_value = nil,
              $ret_or_1 = nil;

          if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;
          critical_value = $rb_divide(target.$to_f(), 20).$round();

          if ($truthy(function () {
            if ($truthy($ret_or_1 = $rb_le(total, 1))) {
              return $ret_or_1;
            } else {
              return $rb_le(total, critical_value);
            }

            ;
            return nil;
          }())) {
            return $$($nesting, 'Result').$critical("決定的成功");
          } else if ($truthy($rb_ge(total, 100))) {
            return $$($nesting, 'Result').$fumble("致命的失敗");
          } else if ($truthy($rb_le(total, $rb_divide(target.$to_f(), 5).$round()))) {
            return $$($nesting, 'Result').$success("効果的成功");
          } else if ($truthy($rb_le(total, target))) {
            return $$($nesting, 'Result').$success("成功");
          } else if ($truthy($rb_ge(total, $rb_plus(95, critical_value)))) {
            return $$($nesting, 'Result').$fumble("致命的失敗");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $RuneQuest_result_1d100$1.$$arity = 4), nil) && 'result_1d100';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "HW4s":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/WaresBlade.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WaresBlade');
        var $nesting = [self].concat($parent_nesting),
            $WaresBlade_result_nd10$1;
        Opal.const_set($nesting[0], 'ID', "WaresBlade");
        Opal.const_set($nesting[0], 'NAME', "ワースブレイド");
        Opal.const_set($nesting[0], 'SORT_KEY', "わあすふれいと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "nD10>=m 方式の判定で成否、完全成功、完全失敗を自動判定します。\n");
        return (Opal.def(self, '$result_nd10', $WaresBlade_result_nd10$1 = function $$result_nd10(_total, _dice_total, dice_list, cmp_op, _target) {
          var self = this;

          if (cmp_op['$=='](">=")) {} else {
            return nil;
          }

          ;

          if (dice_list.$count(10)['$=='](dice_list.$size())) {
            return $$($nesting, 'Result').$critical("完全成功");
          } else if (dice_list.$count(1)['$=='](dice_list.$size())) {
            return $$($nesting, 'Result').$fumble("絶対失敗");
          } else {
            return nil;
          }

          ;
        }, $WaresBlade_result_nd10$1.$$arity = 5), nil) && 'result_nd10';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "Ianp":
/*!*******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Ainecadette.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Ainecadette');
        var $nesting = [self].concat($parent_nesting),
            $Ainecadette_eval_game_system_specific_command$1,
            $Ainecadette_roll_action$2;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Ainecadette");
        Opal.const_set($nesting[0], 'NAME', "エネカデット");
        Opal.const_set($nesting[0], 'SORT_KEY', "えねかてつと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "■ 判定\n" + "- 先輩 (AI) 10面ダイスを2つ振って判定します。『有利』なら【3AI】、『不利』なら【1AI】を使います。\n" + "- 後輩 (CA) 6面ダイスを2つ振って判定します。『有利』なら【3CA】、『不利』なら【1CA】を使います。\n");
        self.$register_prefix("(\\d+)?AI", "(\\d+)?CA");
        Opal.def(self, '$eval_game_system_specific_command', $Ainecadette_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this;
          return self.$roll_action(command);
        }, $Ainecadette_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.const_set($nesting[0], 'SUCCESS_THRESHOLD', 4);
        Opal.const_set($nesting[0], 'SPECIAL_DICE', 6);
        return (Opal.def(self, '$roll_action', $Ainecadette_roll_action$2 = function $$roll_action(command) {
          var $a,
              self = this,
              m = nil,
              is_senpai = nil,
              times = nil,
              $ret_or_1 = nil,
              sides = nil,
              dice_list = nil,
              max = nil,
              result = nil,
              me = nil,
              target = nil,
              $writer = nil;
          m = /^(\d+)?(AI|CA)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          is_senpai = m['$[]'](2)['$==']("AI");

          times = function () {
            if ($truthy($ret_or_1 = ($a = m['$[]'](1), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_1;
            } else {
              return 2;
            }

            ;
            return nil;
          }();

          sides = function () {
            if ($truthy(is_senpai)) {
              return 10;
            } else {
              return 6;
            }

            ;
            return nil;
          }();

          if ($truthy($rb_le(times, 0))) {
            return nil;
          }

          ;
          dice_list = self.randomizer.$roll_barabara(times, sides);
          max = dice_list.$max();

          result = function () {
            if ($truthy($rb_le(max, 1))) {
              return $$($nesting, 'Result').$fumble("ファンブル（もやもやカウンターを2個獲得）");
            } else if ($truthy(dice_list['$include?'](6))) {
              me = function () {
                if ($truthy(is_senpai)) {
                  return "先輩";
                } else {
                  return "後輩";
                }

                ;
                return nil;
              }();

              target = function () {
                if ($truthy(is_senpai)) {
                  return "後輩";
                } else {
                  return "先輩";
                }

                ;
                return nil;
              }();

              return $$($nesting, 'Result').$critical("" + "スペシャル（絆カウンターを1個獲得し、" + target + "は" + me + "への感情を1つ獲得）");
            } else if ($truthy($rb_ge(max, $$($nesting, 'SUCCESS_THRESHOLD')))) {
              return $$($nesting, 'Result').$success("成功");
            } else {
              return $$($nesting, 'Result').$failure("失敗");
            }

            ;
            return nil;
          }();

          $writer = ["" + "(" + command + ") ＞ [" + dice_list.$join(",") + "] ＞ " + result.$text()];
          $send(result, 'text=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $Ainecadette_roll_action$2.$$arity = 1), nil) && 'roll_action';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "In7P":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/JamesBond.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JamesBond');
        var $nesting = [self].concat($parent_nesting),
            $JamesBond_result_1d100$1;
        Opal.const_set($nesting[0], 'ID', "JamesBond");
        Opal.const_set($nesting[0], 'NAME', "ジェームズ・ボンド007");
        Opal.const_set($nesting[0], 'SORT_KEY', "しええむすほんと007");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・1D100の目標値判定で、効果レーティングを1～4で自動判定。\n" + "　例）1D100<=50\n" + "　　　JamesBond : (1D100<=50) ＞ 20 ＞ 効果3（良）\n");
        return (Opal.def(self, '$result_1d100', $JamesBond_result_1d100$1 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this,
              base = nil;

          if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;
          base = $rb_divide($rb_plus(target, 9), 10).$floor();

          if ($truthy($rb_ge(total, 100))) {
            return $$($nesting, 'Result').$failure("失敗");
          } else if ($truthy($rb_le(total, base))) {
            return $$($nesting, 'Result').$success("効果1（完璧）");
          } else if ($truthy($rb_le(total, $rb_times(base, 2)))) {
            return $$($nesting, 'Result').$success("効果2（かなり良い）");
          } else if ($truthy($rb_le(total, $rb_times(base, 5)))) {
            return $$($nesting, 'Result').$success("効果3（良）");
          } else if ($truthy($rb_le(total, target))) {
            return $$($nesting, 'Result').$success("効果4（まあまあ）");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $JamesBond_result_1d100$1.$$arity = 4), nil) && 'result_1d100';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "J1nQ":
/*!************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/InfiniteFantasia.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InfiniteFantasia');
        var $nesting = [self].concat($parent_nesting),
            $InfiniteFantasia_result_1d20$1;
        Opal.const_set($nesting[0], 'ID', "InfiniteFantasia");
        Opal.const_set($nesting[0], 'NAME', "無限のファンタジア");
        Opal.const_set($nesting[0], 'SORT_KEY', "むけんのふあんたしあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "失敗、成功レベルの自動判定を行います。");
        return (Opal.def(self, '$result_1d20', $InfiniteFantasia_result_1d20$1 = function $$result_1d20(total, _dice_total, cmp_op, target) {
          var _$$,
              self = this,
              output = nil;

          if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_gt(total, target))) {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;

          output = function () {
            if ($truthy($rb_le(total, $rb_divide(target, 32).$to_i()))) {
              return "32レベル成功(32Lv+)";
            } else if ($truthy($rb_le(total, $rb_divide(target, 16).$to_i()))) {
              return "16レベル成功(16Lv+)";
            } else if ($truthy($rb_le(total, $rb_divide(target, 8).$to_i()))) {
              return "8レベル成功";
            } else if ($truthy($rb_le(total, $rb_divide(target, 4).$to_i()))) {
              return "4レベル成功";
            } else if ($truthy($rb_le(total, $rb_divide(target, 2).$to_i()))) {
              return "2レベル成功";
            } else {
              return "1レベル成功";
            }

            ;
            return nil;
          }();

          return $send($$($nesting, 'Result').$new(), 'tap', [], (_$$ = function $$2(r) {
            var self = _$$.$$s == null ? this : _$$.$$s,
                $writer = nil;

            if (r == null) {
              r = nil;
            }

            ;
            $writer = [output];
            $send(r, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [true];
            $send(r, 'success=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;

            if ($truthy($rb_le(total, 1))) {
              $writer = [true];
              $send(r, 'critical=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = [$rb_plus(r.$text(), "/クリティカル")];
              $send(r, 'text=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              ;
            } else {
              return nil;
            }

            ;
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
        }, $InfiniteFantasia_result_1d20$1.$$arity = 4), nil) && 'result_1d20';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "Lsnz":
/*!***************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/StrangerOfSwordCity.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StrangerOfSwordCity');
        var $nesting = [self].concat($parent_nesting),
            $StrangerOfSwordCity_initialize$1,
            $StrangerOfSwordCity_eval_game_system_specific_command$2,
            $StrangerOfSwordCity_checkRoll$3,
            $StrangerOfSwordCity_getModifyText$4,
            $StrangerOfSwordCity_getCriticalResult$5,
            $StrangerOfSwordCity_isFumble$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "StrangerOfSwordCity");
        Opal.const_set($nesting[0], 'NAME', "剣の街の異邦人TRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "つるきのまちのいほうしんTRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定　xSR or xSRy or xSR+y or xSR-y or xSR+y>=z\n" + "　x=ダイス数、y=修正値(省略可、±省略時は＋として扱う)、z=難易度(省略可)\n" + "　判定時はクリティカル、ファンブルの自動判定を行います。\n" + "・通常のnD6ではクリティカル、ファンブルの自動判定は行いません。\n" + "・D66ダイスあり\n");
        self.$register_prefix("\\d+SR");
        Opal.def(self, '$initialize', $StrangerOfSwordCity_initialize$1 = function $$initialize(command) {
          var $iter = $StrangerOfSwordCity_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $StrangerOfSwordCity_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $StrangerOfSwordCity_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'NO_SORT');
          return self.round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
        }, $StrangerOfSwordCity_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $StrangerOfSwordCity_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil;
          self.$debug("eval_game_system_specific_command command", command);
          command = command.$upcase();
          result = self.$checkRoll(command);

          if ($truthy(result['$empty?']())) {} else {
            return result;
          }

          ;
          return result;
        }, $StrangerOfSwordCity_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$checkRoll', $StrangerOfSwordCity_checkRoll$3 = function $$checkRoll(command) {
          var self = this,
              result = nil,
              diceCount = nil,
              modify = nil,
              difficulty = nil,
              diceList = nil,
              dice = nil,
              totalValue = nil,
              modifyText = nil,
              criticalResult = nil;
          self.$debug("checkRoll begin command", command);
          result = "";

          if ($truthy(command['$=~'](/^(\d+)SR([+\-]?\d+)?(>=(\d+))?$/i))) {} else {
            return result;
          }

          ;
          diceCount = $$($nesting, 'Regexp').$last_match(1).$to_i();
          modify = $$($nesting, 'Regexp').$last_match(2).$to_i();

          if ($truthy($$($nesting, 'Regexp').$last_match(4))) {
            difficulty = $$($nesting, 'Regexp').$last_match(4).$to_i();
          }

          ;
          diceList = self.randomizer.$roll_barabara(diceCount, 6).$sort();
          dice = diceList.$sum();
          totalValue = $rb_plus(dice, modify);
          modifyText = self.$getModifyText(modify);
          result = $rb_plus(result, "" + "(" + command + ") ＞ " + dice + "[" + diceList.$join(",") + "]" + modifyText + " ＞ " + totalValue);
          criticalResult = self.$getCriticalResult(diceList);

          if ($truthy(criticalResult['$nil?']())) {} else {
            result = $rb_plus(result, "" + " ＞ クリティカル(+" + criticalResult + "D6)");
            return result;
          }

          ;

          if ($truthy(self.$isFumble(diceList, diceCount))) {
            result = $rb_plus(result, " ＞ ファンブル");
            return result;
          }

          ;

          if ($truthy(difficulty['$nil?']())) {} else {
            result = $rb_plus(result, function () {
              if ($truthy($rb_ge(totalValue, difficulty))) {
                return " ＞ 成功";
              } else {
                return " ＞ 失敗";
              }

              ;
              return nil;
            }());
          }

          ;
          return result;
        }, $StrangerOfSwordCity_checkRoll$3.$$arity = 1);
        Opal.def(self, '$getModifyText', $StrangerOfSwordCity_getModifyText$4 = function $$getModifyText(modify) {
          var self = this;

          if (modify['$=='](0)) {
            return "";
          }

          ;

          if ($truthy($rb_lt(modify, 0))) {
            return modify.$to_s();
          }

          ;
          return "" + "+" + modify;
        }, $StrangerOfSwordCity_getModifyText$4.$$arity = 1);
        Opal.def(self, '$getCriticalResult', $StrangerOfSwordCity_getCriticalResult$5 = function $$getCriticalResult(diceList) {
          var _$$,
              self = this,
              dice6Count = nil;

          dice6Count = $send(diceList, 'select', [], (_$$ = function $$6(i) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return i['$=='](6);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$)).$size();

          if ($truthy($rb_ge(dice6Count, 2))) {
            return dice6Count.$to_s();
          }

          ;
          return nil;
        }, $StrangerOfSwordCity_getCriticalResult$5.$$arity = 1);
        return (Opal.def(self, '$isFumble', $StrangerOfSwordCity_isFumble$7 = function $$isFumble(diceList, diceCount) {
          var _$$2,
              self = this;

          return $rb_ge($send(diceList, 'select', [], (_$$2 = function $$8(i) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return i['$=='](1);
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2)).$size(), diceCount);
        }, $StrangerOfSwordCity_isFumble$7.$$arity = 2), nil) && 'isFumble';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "Lsrw":
/*!********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/EclipsePhase.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EclipsePhase');
        var $nesting = [self].concat($parent_nesting),
            $EclipsePhase_result_1d100$1;
        Opal.const_set($nesting[0], 'ID', "EclipsePhase");
        Opal.const_set($nesting[0], 'NAME', "エクリプス・フェイズ");
        Opal.const_set($nesting[0], 'SORT_KEY', "えくりふすふえいす");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "1D100<=m 方式の判定で成否、クリティカル・ファンブルを自動判定");
        return (Opal.def(self, '$result_1d100', $EclipsePhase_result_1d100$1 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this,
              dice_value = nil,
              dice_ten_place = nil,
              dice_one_place = nil,
              diff_threshold = nil;

          if (target['$==']("?")) {
            return nil;
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;
          dice_value = total['$%'](100);
          dice_ten_place = $rb_divide(dice_value, 10).$to_i();
          dice_one_place = dice_value['$%'](10);

          if (dice_ten_place['$=='](dice_one_place)) {
            if (dice_value['$=='](99)) {
              return $$($nesting, 'Result').$fumble("決定的失敗");
            }

            ;

            if (dice_value['$=='](0)) {
              return $$($nesting, 'Result').$critical("00 ＞ 決定的成功");
            }

            ;

            if ($truthy($rb_le(total, target))) {
              return $$($nesting, 'Result').$critical("決定的成功");
            }

            ;
            return $$($nesting, 'Result').$fumble("決定的失敗");
          }

          ;
          diff_threshold = 30;

          if ($truthy($rb_le(total, target))) {
            if ($truthy($rb_ge(total, diff_threshold))) {
              return $$($nesting, 'Result').$success("エクセレント");
            } else {
              return $$($nesting, 'Result').$success("成功");
            }
          } else if ($truthy($rb_ge($rb_minus(total, target), diff_threshold))) {
            return $$($nesting, 'Result').$failure("シビア");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $EclipsePhase_result_1d100$1.$$arity = 4), nil) && 'result_1d100';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "OU+m":
/*!*********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/SamsaraBallad.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SamsaraBallad');
        var $nesting = [self].concat($parent_nesting),
            $SamsaraBallad_eval_game_system_specific_command$1,
            $SamsaraBallad_compare$3,
            $SamsaraBallad_fumble_$ques$4,
            $SamsaraBallad_critical_$ques$5;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "SamsaraBallad");
        Opal.const_set($nesting[0], 'NAME', "サンサーラ・バラッド");
        Opal.const_set($nesting[0], 'SORT_KEY', "さんさあらはらつと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "SB\t 通常のD100ロールを行う\n" + "SBS\t スワップロールでD100ロールを行う\n" + "SB#x@y\t F値をx、C値をyとして通常のD100ロールを行う\n" + "SBS#x@y\t F値をx、C値をyとしてスワップロールでD100ロールを行う\n" + "\n" + "例：\n" + "SB<=85 通常の技能で成功率85%の判定\n" + "SBS<=70 習熟を得た技能で成功率70%の判定\n" + "SBS#3@7<=80 習熟を得た技能で、F値3、C値7で成功率80%の攻撃判定\n" + "SB<57 通常の技能で、能動側の達成値が57の受動判定\n" + "SBS<70 習熟を得た技能で、能動側の達成値が70の受動判定\n");
        self.$register_prefix("SBS?");
        Opal.def(self, '$eval_game_system_specific_command', $SamsaraBallad_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var _$$,
              self = this,
              parser = nil,
              cmd = nil,
              places_text = nil,
              total = nil,
              a = nil,
              b = nil,
              places = nil,
              cmp_result = nil,
              sequence = nil;

          self.$debug("eval_game_system_specific_command Begin");
          parser = $$$($$($nesting, 'Command'), 'Parser').$new("SBS", "SB", $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$enable_critical().$enable_fumble().$restrict_cmp_op_to(nil, "<=", "<");
          cmd = parser.$parse(command);

          if ($truthy(cmd)) {} else {
            return nil;
          }

          ;

          if (cmd.$command()['$==']("SB")) {
            places_text = nil;
            total = self.randomizer.$roll_once(100);
          } else {
            a = self.randomizer.$roll_once(10);
            b = self.randomizer.$roll_once(10);
            places_text = "" + a + "," + b;
            places = $send([a, b], 'map', [], (_$$ = function $$2(n) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (n == null) {
                n = nil;
              }

              ;

              if (n['$=='](10)) {
                return 0;
              } else {
                return n;
              }

              ;
            }, _$$.$$s = self, _$$.$$arity = 1, _$$)).$sort();
            total = $rb_plus($rb_times(places['$[]'](0), 10), places['$[]'](1));

            if (total['$=='](0)) {
              total = 100;
            }

            ;
          }

          ;
          cmp_result = self.$compare(total, cmd);
          sequence = ["" + "(D100" + cmd.$cmp_op() + cmd.$target_number() + ")", places_text, total.$to_s(), cmp_result].$compact();
          return sequence.$join(" ＞ ");
        }, $SamsaraBallad_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$compare', $SamsaraBallad_compare$3 = function $$compare(total, cmd) {
          var self = this;

          if ($truthy(["<=", "<"]['$include?'](cmd.$cmp_op()))) {
            if ($truthy(total.$send(cmd.$cmp_op(), cmd.$target_number())['$!']())) {
              return "失敗";
            } else if ($truthy(self['$fumble_?'](total, cmd.$fumble()))) {
              return "ファンブル";
            } else if ($truthy(self['$critical_?'](total, cmd.$critical()))) {
              return "クリティカル";
            } else {
              return "成功";
            }
          } else if ($truthy(self['$fumble_?'](total, cmd.$fumble()))) {
            return "ファンブル";
          } else if ($truthy(self['$critical_?'](total, cmd.$critical()))) {
            return "クリティカル";
          } else {
            return nil;
          }
        }, $SamsaraBallad_compare$3.$$arity = 2);
        Opal.def(self, '$fumble_?', $SamsaraBallad_fumble_$ques$4 = function $SamsaraBallad_fumble_$ques$4(total, fumble) {
          var self = this,
              $ret_or_1 = nil;

          if ($truthy($ret_or_1 = fumble)) {
            return $rb_le(total['$%'](10), fumble);
          } else {
            return $ret_or_1;
          }
        }, $SamsaraBallad_fumble_$ques$4.$$arity = 2);
        return (Opal.def(self, '$critical_?', $SamsaraBallad_critical_$ques$5 = function $SamsaraBallad_critical_$ques$5(total, critical) {
          var self = this,
              $ret_or_2 = nil;

          if ($truthy($ret_or_2 = critical)) {
            return $rb_ge(total['$%'](10), critical);
          } else {
            return $ret_or_2;
          }
        }, $SamsaraBallad_critical_$ques$5.$$arity = 2), nil) && 'critical_?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "Oy8S":
/*!***************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Illusio.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Illusio');
        var $nesting = [self].concat($parent_nesting),
            $Illusio_initialize$1,
            $Illusio_eval_game_system_specific_command$2,
            $Illusio_check_roll$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Illusio");
        Opal.const_set($nesting[0], 'NAME', "晃天のイルージオ");
        Opal.const_set($nesting[0], 'SORT_KEY', "こうてんのいるうしお");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "判定：[n]IL(BNo)[P]\n" + "\n" + "[]内のコマンドは省略可能。\n" + "「n」でダイス数を指定。省略時は「1」。\n" + "(BNo)でブロックナンバーを指定。「236」のように記述。順不同可。\n" + "コマンド末に「P」を指定で、(BNo)のパリィ判定。（一応、複数指定可）\n" + "\n" + "【書式例】\n" + "・6IL236 → 6dでブロックナンバー「2,3,6」の判定。\n" + "・IL4512 → 1dでブロックナンバー「1,2,4,5」の判定。\n" + "・2IL1P → 2dでパリィナンバー「1」の判定。\n");
        Opal.def(self, '$initialize', $Illusio_initialize$1 = function $$initialize(command) {
          var $iter = $Illusio_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Illusio_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Illusio_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $Illusio_initialize$1.$$arity = 1);
        self.$register_prefix("(\\d+)?IL([1-6]{0,6})(P)?");
        Opal.def(self, '$eval_game_system_specific_command', $Illusio_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              m = nil,
              dice_count = nil,
              $ret_or_1 = nil,
              block_no = nil,
              $ret_or_2 = nil,
              is_parry = nil;
          m = command.$match(/(\d+)?IL([1-6]{0,6})(P)?$/i);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;

          dice_count = function () {
            if ($truthy($ret_or_1 = m['$[]'](1))) {
              return $ret_or_1;
            } else {
              return 1;
            }

            ;
            return nil;
          }().$to_i();

          block_no = $send(function () {
            if ($truthy($ret_or_2 = m['$[]'](2))) {
              return $ret_or_2;
            } else {
              return "";
            }

            ;
            return nil;
          }().$each_char(), 'map', [], "to_i".$to_proc()).$uniq().$sort();
          is_parry = m['$[]'](3)['$nil?']()['$!']();
          return self.$check_roll(dice_count, block_no, is_parry);
        }, $Illusio_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$check_roll', $Illusio_check_roll$3 = function $$check_roll(dice_count, block_no, is_parry) {
          var _$$,
              self = this,
              dice_array = nil,
              dice_text = nil,
              result_array = nil,
              success = nil,
              block_text = nil,
              block_text2 = nil,
              result_text = nil,
              result = nil;

          dice_array = self.randomizer.$roll_barabara(dice_count, 6).$sort();
          dice_text = dice_array.$join(",");
          result_array = [];
          success = 0;
          $send(dice_array, 'each', [], (_$$ = function $$4(i) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (i == null) {
              i = nil;
            }

            ;

            if ($truthy($rb_gt(block_no.$count(i), 0))) {
              return result_array.$push("×");
            } else {
              result_array.$push(i);
              return success = $rb_plus(success, 1);
            }

            ;
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          block_text = block_no.$join(",");

          block_text2 = function () {
            if ($truthy(is_parry)) {
              return "Parry";
            } else {
              return "Block";
            }

            ;
            return nil;
          }();

          result_text = result_array.$join(",");
          result = "" + dice_count + "D6(" + block_text2 + ":" + block_text + ") ＞ " + dice_text + " ＞ " + result_text + " ＞ ";

          if ($truthy(is_parry)) {} else {
            return "" + result + "成功数：" + success;
          }

          ;

          if ($truthy($rb_lt(success, dice_count))) {
            return "" + result + "パリィ成立！　次の非ダメージ2倍。";
          } else {
            return "" + result + "成功数：" + success + "　パリィ失敗";
          }

          ;
        }, $Illusio_check_roll$3.$$arity = 3), nil) && 'check_roll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "P3gr":
/*!***************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Hieizan.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Hieizan');
        var $nesting = [self].concat($parent_nesting),
            $Hieizan_result_1d100$1;
        Opal.const_set($nesting[0], 'ID', "Hieizan");
        Opal.const_set($nesting[0], 'NAME', "比叡山炎上");
        Opal.const_set($nesting[0], 'SORT_KEY', "ひえいさんえんしよう");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "大成功、自動成功、失敗、自動失敗、大失敗の自動判定を行います。\n");
        return (Opal.def(self, '$result_1d100', $Hieizan_result_1d100$1 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this;

          if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_ge(total, 100))) {
            return $$($nesting, 'Result').$fumble("大失敗");
          } else if ($truthy($rb_ge(total, 96))) {
            return $$($nesting, 'Result').$failure("自動失敗");
          } else if ($truthy($rb_le(total, $rb_divide(target, 5).$to_i()))) {
            return $$($nesting, 'Result').$critical("大成功");
          } else if ($truthy($rb_le(total, 1))) {
            return $$($nesting, 'Result').$success("自動成功");
          } else if ($truthy($rb_le(total, target))) {
            return $$($nesting, 'Result').$success("成功");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $Hieizan_result_1d100$1.$$arity = 4), nil) && 'result_1d100';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "PAHy":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/CodeLayerd.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CodeLayerd');
        var $nesting = [self].concat($parent_nesting),
            $CodeLayerd_initialize$1,
            $CodeLayerd_eval_game_system_specific_command$2,
            $CodeLayerd_check_roll$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "CodeLayerd");
        Opal.const_set($nesting[0], 'NAME', "コード：レイヤード");
        Opal.const_set($nesting[0], 'SORT_KEY', "こおとれいやあと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定（nCL@m[c]+x または nCL+x@m[c]） クリティカル・ファンブル判定あり\n" + "  (ダイス数)CL+(修正値)@(判定値)[(クリティカル値)]+(修正値2)\n" + "\n" + "  @m,[c],+xは省略可能。(@6[1]として処理)\n" + "  n個のD10でmを判定値、cをクリティカル値とした行為判定を行う。\n" + "  nが0以下のときはクリティカルしない1CL判定を行う。(1CL[0]と同一)\n" + "  例）\n" + "  7CL>=5 ：サイコロ7個で判定値6のロールを行い、目標値5に対して判定\n" + "  4CL@7  ：サイコロ4個で判定値7のロールを行い達成値を出す\n" + "  4CL+2@7 または 4CL@7+2  ：サイコロ4個で判定値7のロールを行い達成値を出し、修正値2を足す。\n" + "  4CL[2] ：サイコロ4個でクリティカル値2のロールを行う。\n" + "  0CL : 1CL[0]と同じ判定\n" + "\n" + "  デフォルトダイス：10面\n");
        self.$register_prefix("[+-]?\\d*CL([+-]\\d+)?[@\\d]*");
        Opal.def(self, '$initialize', $CodeLayerd_initialize$1 = function $$initialize(command) {
          var $iter = $CodeLayerd_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $CodeLayerd_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $CodeLayerd_initialize$1, false, true), 'initialize', [command], null);
          return self.sides_implicit_d = 10;
        }, $CodeLayerd_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $CodeLayerd_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil,
              $case = nil,
              m = nil,
              base = nil,
              $ret_or_1 = nil,
              modifier1 = nil,
              target = nil,
              $ret_or_2 = nil,
              critical_target = nil,
              $ret_or_3 = nil,
              modifier2 = nil,
              diff = nil;
          self.$debug("eval_game_system_specific_command command", command);
          result = "";
          $case = command;

          if (/([+-]?\d+)?CL([+-]\d+)?(@(\d))?(\[(\d+)\])?([+-]\d+)?(>=(\d+))?/i['$===']($case)) {
            m = $$($nesting, 'Regexp').$last_match();

            base = function () {
              if ($truthy($ret_or_1 = m['$[]'](1))) {
                return $ret_or_1;
              } else {
                return 1;
              }

              ;
              return nil;
            }().$to_i();

            modifier1 = m['$[]'](2).$to_i();

            target = function () {
              if ($truthy($ret_or_2 = m['$[]'](4))) {
                return $ret_or_2;
              } else {
                return 6;
              }

              ;
              return nil;
            }().$to_i();

            critical_target = function () {
              if ($truthy($ret_or_3 = m['$[]'](6))) {
                return $ret_or_3;
              } else {
                return 1;
              }

              ;
              return nil;
            }().$to_i();

            modifier2 = m['$[]'](7).$to_i();
            diff = m['$[]'](9).$to_i();
            result = self.$check_roll(base, target, critical_target, diff, $rb_plus(modifier1, modifier2));
          }

          ;

          if ($truthy(result['$empty?']())) {
            return nil;
          }

          ;
          return "" + command + " ＞ " + result;
        }, $CodeLayerd_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$check_roll', $CodeLayerd_check_roll$3 = function $$check_roll(base, target, critical_target, diff, modifier) {
          var _$$,
              _$$2,
              self = this,
              dice_list = nil,
              success_count = nil,
              critical_count = nil,
              success_total = nil,
              mod_text = nil,
              result = nil,
              $ret_or_4 = nil,
              success_text = nil;

          if ($truthy($rb_le(base, 0))) {
            critical_target = 0;
            base = 1;
          }

          ;

          if ($truthy($rb_gt(target, 10))) {
            target = 10;
          }

          ;
          dice_list = self.randomizer.$roll_barabara(base, 10).$sort();
          success_count = $send(dice_list, 'count', [], (_$$ = function $$4(x) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (x == null) {
              x = nil;
            }

            ;
            return $rb_le(x, target);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          critical_count = $send(dice_list, 'count', [], (_$$2 = function $$5(x) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (x == null) {
              x = nil;
            }

            ;
            return $rb_le(x, critical_target);
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          success_total = $rb_plus($rb_plus(success_count, critical_count), modifier);
          mod_text = $$($nesting, 'Format').$modifier(modifier);
          result = "" + "(" + base + "d10" + mod_text + ") ＞ [" + dice_list.$join(",") + "]" + mod_text + " ＞ ";

          if (target['$=='](6)) {} else {
            result = $rb_plus(result, "" + "判定値[" + target + "] ");
          }

          ;

          if (critical_target['$=='](1)) {} else {
            result = $rb_plus(result, "" + "クリティカル値[" + critical_target + "] ");
          }

          ;
          result = $rb_plus(result, "" + "達成値[" + success_count + "]");

          if ($truthy($rb_le(success_count, 0))) {
            return "" + result + " ＞ ファンブル！";
          }

          ;

          if ($truthy($rb_gt(critical_count, 0))) {
            result = $rb_plus(result, "" + "+クリティカル[" + critical_count + "]");
          }

          ;
          result = $rb_plus(result, mod_text);

          if ($truthy(function () {
            if ($truthy($ret_or_4 = $rb_gt(critical_count, 0))) {
              return $ret_or_4;
            } else {
              return modifier['$!='](0);
            }

            ;
            return nil;
          }())) {
            result = $rb_plus(result, "" + "=[" + success_total + "]");
          }

          ;

          success_text = function () {
            if (diff['$=='](0)) {
              return success_total.$to_s();
            } else if ($truthy($rb_ge(success_total, diff))) {
              return "成功";
            } else {
              return "失敗";
            }

            ;
            return nil;
          }();

          return "" + result + " ＞ " + success_text;
        }, $CodeLayerd_check_roll$3.$$arity = 5), nil) && 'check_roll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "TbWO":
/*!***********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/WorldOfDarkness.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WorldOfDarkness');
        var $nesting = [self].concat($parent_nesting),
            $WorldOfDarkness_initialize$1,
            $WorldOfDarkness_eval_game_system_specific_command$2,
            $WorldOfDarkness_roll_wod$3;
        Opal.const_set($nesting[0], 'ID', "WorldOfDarkness");
        Opal.const_set($nesting[0], 'NAME', "ワールド・オブ・ダークネス");
        Opal.const_set($nesting[0], 'SORT_KEY', "わあるとおふたあくねす");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定コマンド(xSTn+y or xSTSn+y or xSTAn+y)\n" + "　(ダイス個数)ST(難易度)+(自動成功)\n" + "　(ダイス個数)STS(難易度)+(自動成功) ※出目10で振り足し\n" + "　(ダイス個数)STA(難易度)+(自動成功) ※出目10は2成功 [20thルール]\n" + "\n" + "　難易度=省略時6\n" + "　自動成功=省略時0\n");
        self.$register_prefix("\\d+ST");
        Opal.def(self, '$initialize', $WorldOfDarkness_initialize$1 = function $$initialize(command) {
          var $iter = $WorldOfDarkness_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $WorldOfDarkness_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $WorldOfDarkness_initialize$1, false, true), 'initialize', [command], null);
          self.successDice = 0;
          self.botchDice = 0;
          return self.rerollDice = 0;
        }, $WorldOfDarkness_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $WorldOfDarkness_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var $a,
              $b,
              $c,
              self = this,
              diff = nil,
              auto_success = nil,
              enabled_reroll = nil,
              enabled_20th = nil,
              md = nil,
              dice_pool = nil,
              $case = nil,
              sequence = nil,
              total_success = nil,
              total_botch = nil,
              dice = nil,
              success = nil,
              botch = nil,
              output = nil;
          diff = 6;
          auto_success = 0;
          enabled_reroll = false;
          enabled_20th = false;
          md = command.$match(/^(\d+)(ST[SA]?)(\d+)?([+-]\d+)?/);
          dice_pool = md['$[]'](1).$to_i();
          $case = md['$[]'](2);

          if ("STS"['$===']($case)) {
            enabled_reroll = true;
          } else if ("STA"['$===']($case)) {
            enabled_20th = true;
          }

          ;

          if ($truthy(md['$[]'](3))) {
            diff = md['$[]'](3).$to_i();
          }

          ;

          if ($truthy(md['$[]'](4))) {
            auto_success = md['$[]'](4).$to_i();
          }

          ;

          if ($truthy($rb_lt(diff, 2))) {
            diff = 6;
          }

          ;
          sequence = [];
          sequence.$push("" + "DicePool=" + dice_pool + ", Difficulty=" + diff + ", AutomaticSuccess=" + auto_success);

          if ($truthy($rb_gt(diff, 10))) {
            diff = 10;
          }

          ;
          total_success = auto_success;
          total_botch = 0;
          $b = self.$roll_wod(dice_pool, diff, true, function () {
            if ($truthy(enabled_20th)) {
              return 2;
            } else {
              return 1;
            }

            ;
            return nil;
          }()), $a = Opal.to_ary($b), dice = $a[0] == null ? nil : $a[0], success = $a[1] == null ? nil : $a[1], botch = $a[2] == null ? nil : $a[2], auto_success = $a[3] == null ? nil : $a[3], $b;
          sequence.$push(dice.$join(","));
          total_success = $rb_plus(total_success, success);
          total_botch = $rb_plus(total_botch, botch);

          if ($truthy(enabled_reroll)) {
            while ($truthy($rb_gt(auto_success, 0))) {
              dice_pool = auto_success;
              $c = self.$roll_wod(dice_pool, diff, false), $b = Opal.to_ary($c), dice = $b[0] == null ? nil : $b[0], success = $b[1] == null ? nil : $b[1], botch = $b[2] == null ? nil : $b[2], auto_success = $b[3] == null ? nil : $b[3], $c;
              sequence.$push(dice.$join(","));
              total_success = $rb_plus(total_success, success);
              total_botch = $rb_plus(total_botch, botch);
            }
          }

          ;

          if ($truthy($rb_gt(total_success, 0))) {
            sequence.$push("" + "成功数" + total_success);
          } else if ($truthy($rb_gt(total_botch, 0))) {
            sequence.$push("大失敗");
          } else {
            sequence.$push("失敗");
          }

          ;
          output = sequence.$join(" ＞ ");
          return output;
        }, $WorldOfDarkness_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$roll_wod', $WorldOfDarkness_roll_wod$3 = function $$roll_wod(dice_pool, diff, enabled_botch, auto_success_value) {
          var _$$,
              _$$2,
              self = this,
              dice = nil,
              success = nil,
              botch = nil,
              auto_success = nil,
              c = nil;

          if (enabled_botch == null) {
            enabled_botch = true;
          }

          ;

          if (auto_success_value == null) {
            auto_success_value = 1;
          }

          ;
          dice = $send($$($nesting, 'Array'), 'new', [dice_pool], (_$$ = function $$4() {
            var self = _$$.$$s == null ? this : _$$.$$s,
                dice_now = nil;
            if (self.randomizer == null) self.randomizer = nil;
            dice_now = self.randomizer.$roll_once(10);
            return dice_now;
          }, _$$.$$s = self, _$$.$$arity = 0, _$$));
          dice['$sort!']();
          success = 0;
          botch = 0;
          auto_success = 0;
          $send(dice, 'each', [], (_$$2 = function $$5(d) {
            var self = _$$2.$$s == null ? this : _$$2.$$s,
                $case = nil;

            if (d == null) {
              d = nil;
            }

            ;
            return function () {
              $case = d;

              if (10['$===']($case)) {
                return auto_success = $rb_plus(auto_success, auto_success_value);
              } else if (Opal.Range.$new(diff, 10, false)['$===']($case)) {
                return success = $rb_plus(success, 1);
              } else if (1['$===']($case)) {
                if ($truthy(enabled_botch)) {
                  return botch = $rb_plus(botch, 1);
                } else {
                  return nil;
                }
              } else {
                return nil;
              }
            }();
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          success = $rb_plus(success, auto_success);

          if ($truthy(enabled_botch)) {
            c = [success, botch].$min();
            success = $rb_minus(success, c);
            botch = $rb_minus(botch, c);
          }

          ;
          return [dice, success, botch, auto_success];
        }, $WorldOfDarkness_roll_wod$3.$$arity = -3), nil) && 'roll_wod';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "TteY":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/CrashWorld.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CrashWorld');
        var $nesting = [self].concat($parent_nesting),
            $CrashWorld_eval_game_system_specific_command$1,
            $CrashWorld_getCrashWorldRoll$2;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "CrashWorld");
        Opal.const_set($nesting[0], 'NAME', "墜落世界");
        Opal.const_set($nesting[0], 'SORT_KEY', "ついらくせかい");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定 CWn\n" + "初期目標値n (必須)\n" + "例・CW8\n");
        self.$register_prefix("CW");
        Opal.def(self, '$eval_game_system_specific_command', $CrashWorld_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil,
              $case = nil;
          result = nil;
          $case = command;

          if (/CW(\d+)/i['$===']($case)) {
            result = self.$getCrashWorldRoll($$($nesting, 'Regexp').$last_match(1).$to_i());
          }

          ;
          return result;
        }, $CrashWorld_eval_game_system_specific_command$1.$$arity = 1);
        return (Opal.def(self, '$getCrashWorldRoll', $CrashWorld_getCrashWorldRoll$2 = function $$getCrashWorldRoll(target) {
          var $a,
              self = this,
              output = nil,
              isEnd = nil,
              successness = nil,
              num = nil,
              $ret_or_1 = nil;
          self.$debug("target", target);
          output = "(";
          isEnd = false;
          successness = 0;
          num = 0;

          while ($truthy(isEnd['$!']())) {
            num = self.randomizer.$roll_once(12);

            if (output['$==']("(")) {
              output = "" + "(" + num;
            } else {
              output = "" + output + ", " + num;
            }

            ;

            if ($truthy(function () {
              if ($truthy($ret_or_1 = $rb_le(num, target))) {
                return $ret_or_1;
              } else {
                return num['$=='](11);
              }

              ;
              return nil;
            }())) {
              target = num;
              successness = $rb_plus(successness, 1);
            } else if (num['$=='](12)) {
              isEnd = true;
            } else {
              isEnd = true;
            }

            ;
          }

          ;

          if (num['$=='](12)) {
            successness = 0;
          }

          ;
          output = "" + output + ")  成功度 : " + successness;

          if (num['$=='](12)) {
            output = "" + output + " ファンブル";
          }

          ;
          return output;
        }, $CrashWorld_getCrashWorldRoll$2.$$arity = 1), nil) && 'getCrashWorldRoll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "VJ8/":
/*!****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Emoklore.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Emoklore');
        var $nesting = [self].concat($parent_nesting),
            $Emoklore_eval_game_system_specific_command$1,
            $Emoklore_dice_roll$2,
            $Emoklore_result_text$6,
            $Emoklore_roll_dm$7,
            $Emoklore_roll_da$8;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Emoklore");
        Opal.const_set($nesting[0], 'NAME', "エモクロアTRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "えもくろあTRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・技能値判定（xDM<=y）\n" + "  \"(個数)DM<=(判定値)\"で指定します。\n" + "  ダイスの個数は省略可能で、省略した場合1個になります。\n" + "  例）2DM<=5 DM<=8\n" + "・技能値判定（sDAa+z)\n" + "  \"(技能レベル)DA(能力値)+(ボーナスダイス)\"で指定します。\n" + "  ボーナスダイスの個数は省略可能で、省略した場合0になります。\n" + "  技能レベルは1～3の数値、またはベース技能の場合\"b\"が入ります。\n" + "  ダイスの個数は技能レベルとボーナスダイスの個数により決定し、s+z個のダイスを振ります。（s=\"b\"の場合はs=1）\n" + "  判定値はs+aとなります。（s=\"b\"の場合はs=0）\n");
        self.$register_prefix("\\d*DM<=", "(B|\\d*)DA");
        Opal.const_set($nesting[0], 'CRITICAL_VALUE', 1);
        Opal.const_set($nesting[0], 'FUMBLE_VALUE', 10);
        Opal.def(self, '$eval_game_system_specific_command', $Emoklore_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $case = nil;
          return function () {
            $case = command;

            if (/^\d*DM<=\d/['$===']($case)) {
              return self.$roll_dm(command);
            } else if (/^(B|\d*)DA\d+(\+)?\d*/['$===']($case)) {
              return self.$roll_da(command);
            } else {
              return nil;
            }
          }();
        }, $Emoklore_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$dice_roll', $Emoklore_dice_roll$2 = function $$dice_roll(num_dice, success_threshold) {
          var _$$,
              _$$2,
              _$$3,
              self = this,
              values = nil,
              values_without_critical = nil,
              critical = nil,
              success = nil,
              fumble = nil,
              success_value = nil;

          values = self.randomizer.$roll_barabara(num_dice, 10);
          values_without_critical = $send(values, 'reject', [], (_$$ = function $$3(num) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (num == null) {
              num = nil;
            }

            ;
            return $rb_le(num, $$($nesting, 'CRITICAL_VALUE'));
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          critical = $rb_minus(values.$size(), values_without_critical.$size());
          success = $send(values_without_critical, 'count', [], (_$$2 = function $$4(num) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (num == null) {
              num = nil;
            }

            ;
            return $rb_le(num, success_threshold);
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          fumble = $send(values_without_critical, 'count', [], (_$$3 = function $$5(num) {
            var self = _$$3.$$s == null ? this : _$$3.$$s;

            if (num == null) {
              num = nil;
            }

            ;
            return $rb_ge(num, $$($nesting, 'FUMBLE_VALUE'));
          }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3));
          success_value = $rb_minus($rb_plus($rb_times(2, critical), success), fumble);
          return "" + "[" + values.$join(", ") + "] ＞ " + success_value + " ＞ " + self.$result_text(success_value);
        }, $Emoklore_dice_roll$2.$$arity = 2);
        Opal.def(self, '$result_text', $Emoklore_result_text$6 = function $$result_text(success) {
          var self = this;

          if ($truthy($rb_lt(success, 0))) {
            return "ファンブル!";
          } else if (success['$=='](0)) {
            return "失敗!";
          } else if (success['$=='](1)) {
            return "成功!";
          } else if (success['$=='](2)) {
            return "ダブル!";
          } else if (success['$=='](3)) {
            return "トリプル!";
          } else if ($truthy($rb_le(success, 9))) {
            return "ミラクル!";
          } else {
            return "カタストロフ!";
          }
        }, $Emoklore_result_text$6.$$arity = 1);
        Opal.def(self, '$roll_dm', $Emoklore_roll_dm$7 = function $$roll_dm(command) {
          var $a,
              self = this,
              m = nil,
              num_dice = nil,
              $ret_or_1 = nil,
              success_threshold = nil,
              ret_str = nil;
          m = /^(\d+)?DM<=(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;

          num_dice = function () {
            if ($truthy($ret_or_1 = ($a = m['$[]'](1), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_1;
            } else {
              return 1;
            }

            ;
            return nil;
          }();

          success_threshold = m['$[]'](2).$to_i();

          if ($truthy($rb_le(num_dice, 0))) {
            return nil;
          }

          ;
          ret_str = self.$dice_roll(num_dice, success_threshold);
          return "" + "(" + num_dice + "DM<=" + success_threshold + ") ＞ " + ret_str;
        }, $Emoklore_roll_dm$7.$$arity = 1);
        return (Opal.def(self, '$roll_da', $Emoklore_roll_da$8 = function $$roll_da(command) {
          var $a,
              self = this,
              m = nil,
              bonus = nil,
              num_dice = nil,
              $ret_or_2 = nil,
              success_threshold = nil,
              ret_str = nil;
          m = /^(B|\d+)?DA(\d+)(\+\d+)?$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          bonus = m['$[]'](3).$to_i();
          num_dice = $rb_plus(function () {
            if (m['$[]'](1)['$==']("B")) {
              return 1;
            } else {
              if ($truthy($ret_or_2 = ($a = m['$[]'](1), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
                return $ret_or_2;
              } else {
                return 1;
              }

              ;
            }

            ;
            return nil;
          }(), bonus);
          success_threshold = $rb_plus(m['$[]'](1).$to_i(), m['$[]'](2).$to_i());
          ret_str = self.$dice_roll(num_dice, success_threshold);
          return "" + "(" + command + ") ＞ (" + num_dice + "DM<=" + success_threshold + ") ＞ " + ret_str;
        }, $Emoklore_roll_da$8.$$arity = 1), nil) && 'roll_da';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "XRJP":
/*!**************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/DungeonsAndDragons.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DungeonsAndDragons');
        var $nesting = [self].concat($parent_nesting);
        Opal.const_set($nesting[0], 'ID', "DungeonsAndDragons");
        Opal.const_set($nesting[0], 'NAME', "ダンジョンズ＆ドラゴンズ");
        Opal.const_set($nesting[0], 'SORT_KEY', "たんしよんすあんととらこんす");
        return Opal.const_set($nesting[0], 'HELP_MESSAGE', "※このダイスボットは部屋のシステム名表示用となります。\n");
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "YubF":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/EndBreaker.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $range = Opal.range;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EndBreaker');
        var $nesting = [self].concat($parent_nesting),
            $EndBreaker_initialize$1,
            $EndBreaker_eval_game_system_specific_command$2,
            $EndBreaker_checkRoll$3,
            $EndBreaker_getLifeAndDeathUnknownResult$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "EndBreaker");
        Opal.const_set($nesting[0], 'NAME', "エンドブレイカー！");
        Opal.const_set($nesting[0], 'SORT_KEY', "えんとふれいかあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定 (nEB)\n" + "  n個のD6を振る判定。ダブルトリガー発動で自動振り足し。\n" + "・各種表\n" + "  ・生死不明表 (LDUT)\n");
        self.$register_prefix("\\d+EB", "LDUT");
        Opal.def(self, '$initialize', $EndBreaker_initialize$1 = function $$initialize(command) {
          var $iter = $EndBreaker_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $EndBreaker_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $EndBreaker_initialize$1, false, true), 'initialize', [command], null);
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'NO_SORT');
        }, $EndBreaker_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $EndBreaker_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var $a,
              $b,
              self = this,
              diceCount = nil,
              tableName = nil,
              text = nil,
              number = nil,
              $case = nil,
              result = nil;

          if ($truthy(command['$=~'](/(\d+)EB/i))) {
            diceCount = $$($nesting, 'Regexp').$last_match(1).$to_i();
            return self.$checkRoll(diceCount);
          }

          ;
          tableName = "";
          text = "";
          number = 0;
          $case = command;

          if ("LDUT"['$===']($case)) {
            tableName = "生死不明表";
            $b = self.$getLifeAndDeathUnknownResult(), $a = Opal.to_ary($b), text = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else {
            return nil;
          }

          ;
          result = "" + tableName + "(" + number + "):" + text;
          return result;
        }, $EndBreaker_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$checkRoll', $EndBreaker_checkRoll$3 = function $$checkRoll(diceCount) {
          var $a,
              _$$,
              _$$3,
              self = this,
              rollCount = nil,
              result = nil,
              diceFullList = nil,
              diceList = nil;

          self.$debug("EndBreaker diceCount", diceCount);
          rollCount = diceCount;
          result = "";
          diceFullList = [];

          while ($truthy(rollCount['$!='](0))) {
            diceList = self.randomizer.$roll_barabara(rollCount, 6).$sort();
            diceFullList.$concat(diceList);
            rollCount = $rb_times($send(diceList, 'select', [], (_$$ = function $$4(i) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (i == null) {
                i = nil;
              }

              ;
              return i['$=='](1);
            }, _$$.$$s = self, _$$.$$arity = 1, _$$)).$size(), 2);
            result = $rb_plus(result, "" + "[" + diceList.$join() + "]");

            if ($truthy($rb_gt(rollCount, 0))) {
              result = $rb_plus(result, " ダブルトリガー! ");
            }

            ;
          }

          ;
          result = $rb_plus(result, " ＞");
          $send($range(2, 6, false), 'each', [], (_$$3 = function $$5(num) {
            var self = _$$3.$$s == null ? this : _$$3.$$s,
                _$$2,
                count = nil;

            if (num == null) {
              num = nil;
            }

            ;
            count = $send(diceFullList, 'select', [], (_$$2 = function $$6(i) {
              var self = _$$2.$$s == null ? this : _$$2.$$s;

              if (i == null) {
                i = nil;
              }

              ;
              return i['$=='](num);
            }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2)).$size();

            if (count['$=='](0)) {
              return nil;
            } else {
              return result = $rb_plus(result, "" + " [" + num + ":" + count + "個]");
            }

            ;
          }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3));
          return result;
        }, $EndBreaker_checkRoll$3.$$arity = 1);
        return (Opal.def(self, '$getLifeAndDeathUnknownResult', $EndBreaker_getLifeAndDeathUnknownResult$7 = function $$getLifeAndDeathUnknownResult() {
          var self = this,
              table = nil;
          table = [" 1日：生還！", " 1日：生還！", " 1日：生還！", " 1日：生還！", " 1日：生還！", " 1日：生還！", " 1日：生還！", " 5日：敵に捕らわれ、ひどい暴行と拷問を受けた。", " 2日：謎の人物に命を救われた。", "10日：奴隷として売り飛ばされた。", " 8日：おぞましい儀式の生贄として連れ去られた。", " 9日：幽閉・投獄された。", " 1日：生還！", " 7日：モンスター蠢く地下迷宮に滑落した。", "12日強力なマスカレイドにとらわれ、実験台にされた。", " 8日：放浪中に遭遇した事件を、颯爽と解決していた。", " 5日：飢餓状態に追い込まれた。", "15日：記憶を失い放浪した。", " 1日：生還！", "10日：異性に命を救われて、手厚い看病を受けた。", " 3日：負傷からくる熱病で、生死の境を彷徨った。", "11日：闘奴にされたが、戦いと友情の末に自由を獲得した。", " 6日：負傷したまま川に落ち、遥か下流まで流された。", " 9日：敵に連れ去られ、執拗な拷問を受け続けた。", " 1日：生還！", " 4日：繰り返す「死の悪夢」に苛まれた。", " 3日：巨獣の巣に連れ去られた。", "10日：謎の集団に救われて、手厚い看病を受けた。", " 3日：チッタニアンの集落に迷い込み、もてなしを受けた。", " 7日：ピュアリィの群れにとらわれ、弄ばれた。", " 1日：生還！", " 6日：楽園のような場所を発見し、しばらく逗留した。", " 9日：盗賊団に救われ、恩返しとして少し用心棒をした。", "10日：熱病の見せる官能的な幻影にとらわれ、彷徨った。", " 5日：謎の賞金首に狙われ、傷めつけられていた。", " - ：「五分五分」の一般判定。失敗すると死亡。"];
          return self.$get_table_by_d66(table);
        }, $EndBreaker_getLifeAndDeathUnknownResult$7.$$arity = 0), nil) && 'getLifeAndDeathUnknownResult';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "aIpv":
/*!**********************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/ShinMegamiTenseiKakuseihen.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ShinMegamiTenseiKakuseihen');
        var $nesting = [self].concat($parent_nesting),
            $ShinMegamiTenseiKakuseihen_check_1D100$1,
            $ShinMegamiTenseiKakuseihen_split_tens$2,
            $ShinMegamiTenseiKakuseihen_getCheckResultText$3,
            $ShinMegamiTenseiKakuseihen_getCheckResult$4,
            $ShinMegamiTenseiKakuseihen_getSuccessResult$5,
            $ShinMegamiTenseiKakuseihen_getFailResult$6;
        Opal.const_set($nesting[0], 'ID', "ShinMegamiTenseiKakuseihen");
        Opal.const_set($nesting[0], 'NAME', "真・女神転生TRPG 覚醒篇");
        Opal.const_set($nesting[0], 'SORT_KEY', "しんめかみてんせいTRPGかくせいへん");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定\n" + "1D100<=(目標値) でスワップ・通常・逆スワップ判定を判定。\n" + "威力ダイスは nU6[6] (nはダイス個数)でロール可能です。\n");
        Opal.def(self, '$check_1D100', $ShinMegamiTenseiKakuseihen_check_1D100$1 = function $$check_1D100(total, dice_total, cmp_op, target) {
          var $a,
              $b,
              self = this,
              dice1 = nil,
              dice2 = nil,
              total1 = nil,
              total2 = nil,
              isRepdigit = nil,
              result = nil;

          if (target['$==']("?")) {
            return "";
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return "";
          }

          ;
          $b = self.$split_tens(dice_total), $a = Opal.to_ary($b), dice1 = $a[0] == null ? nil : $a[0], dice2 = $a[1] == null ? nil : $a[1], $b;
          total1 = $rb_plus($rb_times(dice1, 10), dice2);
          total2 = $rb_plus($rb_times(dice2, 10), dice1);
          isRepdigit = dice1['$=='](dice2);
          result = " ＞ スワップ";
          result = $rb_plus(result, self.$getCheckResultText(target, [total1, total2].$min(), isRepdigit));
          result = $rb_plus(result, "／通常");
          result = $rb_plus(result, self.$getCheckResultText(target, total['$%'](100), isRepdigit));
          result = $rb_plus(result, "／逆スワップ");
          result = $rb_plus(result, self.$getCheckResultText(target, [total1, total2].$max(), isRepdigit));
          return result;
        }, $ShinMegamiTenseiKakuseihen_check_1D100$1.$$arity = 4);
        Opal.def(self, '$split_tens', $ShinMegamiTenseiKakuseihen_split_tens$2 = function $$split_tens(value) {
          var self = this,
              ones = nil,
              tens = nil;
          value = value['$%'](100);
          ones = $rb_divide(value, 10).$to_i();
          tens = value['$%'](10);
          return [ones, tens];
        }, $ShinMegamiTenseiKakuseihen_split_tens$2.$$arity = 1);
        Opal.def(self, '$getCheckResultText', $ShinMegamiTenseiKakuseihen_getCheckResultText$3 = function $$getCheckResultText(diff, total, isRepdigit) {
          var self = this,
              checkResult = nil,
              text = nil;
          checkResult = self.$getCheckResult(diff, total, isRepdigit);
          text = $rb_plus(self.$format("(%02d)", total), checkResult);
          return text;
        }, $ShinMegamiTenseiKakuseihen_getCheckResultText$3.$$arity = 3);
        Opal.def(self, '$getCheckResult', $ShinMegamiTenseiKakuseihen_getCheckResult$4 = function $$getCheckResult(diff, total, isRepdigit) {
          var self = this;

          if ($truthy($rb_ge(diff, total))) {
            return self.$getSuccessResult(isRepdigit);
          }

          ;
          return self.$getFailResult(isRepdigit);
        }, $ShinMegamiTenseiKakuseihen_getCheckResult$4.$$arity = 3);
        Opal.def(self, '$getSuccessResult', $ShinMegamiTenseiKakuseihen_getSuccessResult$5 = function $$getSuccessResult(isRepdigit) {
          var self = this;

          if ($truthy(isRepdigit)) {
            return "絶対成功";
          }

          ;
          return "成功";
        }, $ShinMegamiTenseiKakuseihen_getSuccessResult$5.$$arity = 1);
        return (Opal.def(self, '$getFailResult', $ShinMegamiTenseiKakuseihen_getFailResult$6 = function $$getFailResult(isRepdigit) {
          var self = this;

          if ($truthy(isRepdigit)) {
            return "絶対失敗";
          }

          ;
          return "失敗";
        }, $ShinMegamiTenseiKakuseihen_getFailResult$6.$$arity = 1), nil) && 'getFailResult';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "bO2Z":
/*!*********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/RokumonSekai2.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RokumonSekai2');
        var $nesting = [self].concat($parent_nesting),
            $RokumonSekai2_initialize$1,
            $RokumonSekai2_replace_text$2,
            $RokumonSekai2_eval_game_system_specific_command$5,
            $RokumonSekai2_rokumon2_roll$6,
            $RokumonSekai2_rokumon2_suc_rank$9;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "RokumonSekai2");
        Opal.const_set($nesting[0], 'NAME', "六門世界RPG セカンドエディション");
        Opal.const_set($nesting[0], 'SORT_KEY', "ろくもんせかいRPG2");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定\n" + "aRSm<=t\n" + "能力値a,修正値m,目標値tで判定ロールを行います。\n" + "Rコマンド(3R6m<=t[a])に読み替えます。\n" + "成功度、評価、ボーナスダイスを自動表示します。\n" + "　例) 3RS+1<=9　3R6+1<=9[3]\n");
        self.$register_prefix("\\d+RS", "3R6");
        Opal.def(self, '$initialize', $RokumonSekai2_initialize$1 = function $$initialize(command) {
          var $iter = $RokumonSekai2_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $RokumonSekai2_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $RokumonSekai2_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $RokumonSekai2_initialize$1.$$arity = 1);
        Opal.def(self, '$replace_text', $RokumonSekai2_replace_text$2 = function $$replace_text(string) {
          var _$$,
              _$$2,
              self = this;

          string = $send(string, 'gsub', [/(\d+)RS([+\-][+\-\d]+)<=(\d+)/i], (_$$ = function $$3() {
            var self = _$$.$$s == null ? this : _$$.$$s;
            return "" + "3R6" + $$($nesting, 'Regexp').$last_match(2) + "<=" + $$($nesting, 'Regexp').$last_match(3) + "[" + $$($nesting, 'Regexp').$last_match(1) + "]";
          }, _$$.$$s = self, _$$.$$arity = 0, _$$));
          string = $send(string, 'gsub', [/(\d+)RS<=(\d+)/i], (_$$2 = function $$4() {
            var self = _$$2.$$s == null ? this : _$$2.$$s;
            return "" + "3R6<=" + $$($nesting, 'Regexp').$last_match(2) + "[" + $$($nesting, 'Regexp').$last_match(1) + "]";
          }, _$$2.$$s = self, _$$2.$$arity = 0, _$$2));
          return string;
        }, $RokumonSekai2_replace_text$2.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $RokumonSekai2_eval_game_system_specific_command$5 = function $$eval_game_system_specific_command(string) {
          var $a,
              $b,
              self = this,
              modText = nil,
              target = nil,
              abl = nil,
              mod = nil,
              dstr = nil,
              suc = nil,
              sum = nil,
              output = nil;
          string = self.$replace_text(string);

          if ($truthy(/3R6([+\-\d]*)<=(\d+)\[(\d+)\]/i['$=~'](string))) {} else {
            return nil;
          }

          ;
          modText = $$($nesting, 'Regexp').$last_match(1);
          target = $$($nesting, 'Regexp').$last_match(2).$to_i();
          abl = $$($nesting, 'Regexp').$last_match(3).$to_i();
          mod = 0;

          if ($truthy(modText)) {
            mod = $$($nesting, 'ArithmeticEvaluator').$eval(modText);
          }

          ;
          $b = self.$rokumon2_roll(mod, target, abl), $a = Opal.to_ary($b), dstr = $a[0] == null ? nil : $a[0], suc = $a[1] == null ? nil : $a[1], sum = $a[2] == null ? nil : $a[2], $b;
          output = "" + sum + "[" + dstr + "] ＞ " + suc + " ＞ 評価" + self.$rokumon2_suc_rank(suc);

          if ($truthy(suc['$!='](0))) {
            output = $rb_plus(output, "" + "(+" + suc + "d6)");
          }

          ;
          output = "" + "(" + string + ") ＞ " + output;
          return output;
        }, $RokumonSekai2_eval_game_system_specific_command$5.$$arity = 1);
        Opal.def(self, '$rokumon2_roll', $RokumonSekai2_rokumon2_roll$6 = function $$rokumon2_roll(mod, target, abl) {
          var _$$3,
              _$$4,
              self = this,
              suc = nil,
              dice = nil,
              dicestr = nil,
              cnt5 = nil,
              cnt2 = nil,
              sum = nil;

          suc = 0;
          dice = self.randomizer.$roll_barabara($rb_plus(3, mod.$abs()), 6).$sort();
          dicestr = dice.$join(",");
          $send(mod.$abs(), 'times', [], (_$$3 = function $$7(_i) {
            var self = _$$3.$$s == null ? this : _$$3.$$s;

            if (_i == null) {
              _i = nil;
            }

            ;

            if ($truthy($rb_lt(mod, 0))) {
              return dice.$shift();
            } else {
              return dice.$pop();
            }

            ;
          }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3));
          cnt5 = 0;
          cnt2 = 0;
          sum = 0;
          $send(dice, 'each', [], (_$$4 = function $$8(die1) {
            var self = _$$4.$$s == null ? this : _$$4.$$s;

            if (die1 == null) {
              die1 = nil;
            }

            ;

            if ($truthy($rb_ge(die1, 5))) {
              cnt5 = $rb_plus(cnt5, 1);
            }

            ;

            if ($truthy($rb_le(die1, 2))) {
              cnt2 = $rb_plus(cnt2, 1);
            }

            ;

            if ($truthy($rb_le(die1, abl))) {
              suc = $rb_plus(suc, 1);
            }

            ;
            return sum = $rb_plus(sum, die1);
          }, _$$4.$$s = self, _$$4.$$arity = 1, _$$4));

          if ($truthy($rb_lt(sum, target))) {
            suc = $rb_plus(suc, 2);
          } else if (sum['$=='](target)) {
            suc = $rb_plus(suc, 1);
          }

          ;

          if ($truthy($rb_ge(cnt5, 3))) {
            suc = 0;
          }

          ;

          if ($truthy($rb_ge(cnt2, 3))) {
            suc = 5;
          }

          ;
          return [dicestr, suc, sum];
        }, $RokumonSekai2_rokumon2_roll$6.$$arity = 3);
        return (Opal.def(self, '$rokumon2_suc_rank', $RokumonSekai2_rokumon2_suc_rank$9 = function $$rokumon2_suc_rank(suc) {
          var self = this,
              suc_rank = nil;
          suc_rank = ["E", "D", "C", "B", "A", "S"];
          return suc_rank['$[]'](suc);
        }, $RokumonSekai2_rokumon2_suc_rank$9.$$arity = 1), nil) && 'rokumon2_suc_rank';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "bYsS":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/RoleMaster.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RoleMaster');
        var $nesting = [self].concat($parent_nesting),
            $RoleMaster_initialize$1;
        Opal.const_set($nesting[0], 'ID', "RoleMaster");
        Opal.const_set($nesting[0], 'NAME', "ロールマスター");
        Opal.const_set($nesting[0], 'SORT_KEY', "ろおるますたあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "上方無限ロール(xUn)の境界値を96にセットします。\n");
        return (Opal.def(self, '$initialize', $RoleMaster_initialize$1 = function $$initialize(command) {
          var $iter = $RoleMaster_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $RoleMaster_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $RoleMaster_initialize$1, false, true), 'initialize', [command], null);
          return self.upper_dice_reroll_threshold = 96;
        }, $RoleMaster_initialize$1.$$arity = 1), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "cI1M":
/*!*******************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/VampireTheMasquerade5th.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'VampireTheMasquerade5th');
        var $nesting = [self].concat($parent_nesting),
            $VampireTheMasquerade5th_eval_game_system_specific_command$1,
            $VampireTheMasquerade5th_get_critical_success$2,
            $VampireTheMasquerade5th_make_dice_roll$3,
            $VampireTheMasquerade5th_get_success_result$5,
            $VampireTheMasquerade5th_get_fail_result$6;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "VampireTheMasquerade5th");
        Opal.const_set($nesting[0], 'NAME', "Vampire: The Masquerade 5th Edition");
        Opal.const_set($nesting[0], 'SORT_KEY', "うあんはいあさますかれえと5");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定コマンド(nVMFx+x)\n" + "  注意：難易度は必要成功数を表す\n" + "\n" + "  難易度指定：判定成功と失敗、Critical判定、\n" + "             （Hungerダイスがある場合）Messy CriticalとBestial Failureチェックを行う\n" + "  例) (難易度)VMF(ダイスプール)+(Hungerダイス)\n" + "      (難易度)VMF(ダイスプール)\n" + "\n" + "  難易度省略：判定失敗、Critical、（Hungerダイスがある場合）Bestial Failureチェックを行う\n" + "              判定成功、Messy Criticalのチェックを行わない\n" + "  例) VMF(ダイスプール)+(Hungerダイス)\n" + "      VMF(ダイスプール)\n" + "\n" + "  難易度0指定：全てのチェックを行わない\n" + "  例) 0VMF(ダイスプール)+(Hungerダイス)\n" + "      0VMF(ダイスプール)\n" + "\n");
        Opal.const_set($nesting[0], 'DIFFICULTY_INDEX', 1);
        Opal.const_set($nesting[0], 'DICE_POOL_INDEX', 3);
        Opal.const_set($nesting[0], 'HUNGER_DICE_INDEX', 5);
        Opal.const_set($nesting[0], 'NOT_CHECK_SUCCESS', -1);
        self.$register_prefix("\\d*VMF");
        Opal.def(self, '$eval_game_system_specific_command', $VampireTheMasquerade5th_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var $a,
              $b,
              $c,
              self = this,
              m = nil,
              dice_pool = nil,
              dice_text = nil,
              success_dice = nil,
              ten_dice = nil,
              result_text = nil,
              hunger_dice_pool = nil,
              hunger_dice_text = nil,
              hunger_success_dice = nil,
              hunger_ten_dice = nil,
              hunger_botch_dice = nil,
              difficulty = nil,
              judgment_result = nil;
          m = /^(\d+)?(VMF)(\d+)(\+(\d+))?/.$match(command);

          if ($truthy(m)) {} else {
            return "";
          }

          ;
          dice_pool = m['$[]']($$($nesting, 'DICE_POOL_INDEX')).$to_i();
          $b = self.$make_dice_roll(dice_pool), $a = Opal.to_ary($b), dice_text = $a[0] == null ? nil : $a[0], success_dice = $a[1] == null ? nil : $a[1], ten_dice = $a[2] == null ? nil : $a[2], $b;
          result_text = "" + "(" + dice_pool + "D10";
          hunger_dice_pool = ($a = m['$[]']($$($nesting, 'HUNGER_DICE_INDEX')), $a === nil || $a == null ? nil : $send($a, 'to_i', []));

          if ($truthy(hunger_dice_pool)) {
            $c = self.$make_dice_roll(hunger_dice_pool), $b = Opal.to_ary($c), hunger_dice_text = $b[0] == null ? nil : $b[0], hunger_success_dice = $b[1] == null ? nil : $b[1], hunger_ten_dice = $b[2] == null ? nil : $b[2], hunger_botch_dice = $b[3] == null ? nil : $b[3], $c;
            ten_dice = $rb_plus(ten_dice, hunger_ten_dice);
            success_dice = $rb_plus(success_dice, hunger_success_dice);
            result_text = "" + result_text + "+" + hunger_dice_pool + "D10) ＞ [" + dice_text + "]+[" + hunger_dice_text + "] ";
          } else {
            hunger_ten_dice = 0;
            hunger_botch_dice = 0;
            result_text = "" + result_text + ") ＞ [" + dice_text + "] ";
          }

          ;
          success_dice = $rb_plus(success_dice, self.$get_critical_success(ten_dice));

          difficulty = function () {
            if ($truthy(m['$[]']($$($nesting, 'DIFFICULTY_INDEX')))) {
              return m['$[]']($$($nesting, 'DIFFICULTY_INDEX')).$to_i();
            } else {
              return $$($nesting, 'NOT_CHECK_SUCCESS');
            }

            ;
            return nil;
          }();

          result_text = "" + result_text + " 成功数=" + success_dice;

          if ($truthy($rb_gt(difficulty, 0))) {
            if ($truthy($rb_ge(success_dice, difficulty))) {
              judgment_result = self.$get_success_result($rb_ge(ten_dice, 2), hunger_ten_dice);
            } else {
              judgment_result = self.$get_fail_result(hunger_botch_dice);
            }

            ;
            result_text = "" + result_text + " 難易度=" + difficulty + judgment_result;
          } else if ($truthy($rb_lt(difficulty, 0))) {
            if (success_dice['$=='](0)) {
              judgment_result = self.$get_fail_result(hunger_botch_dice);
            } else {
              judgment_result = "";
            }

            ;
            result_text = "" + result_text + judgment_result;
          }

          ;
          return result_text;
        }, $VampireTheMasquerade5th_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$get_critical_success', $VampireTheMasquerade5th_get_critical_success$2 = function $$get_critical_success(ten_dice) {
          var self = this;
          return $rb_times($rb_divide(ten_dice, 2).$to_i(), 2);
        }, $VampireTheMasquerade5th_get_critical_success$2.$$arity = 1);
        Opal.def(self, '$make_dice_roll', $VampireTheMasquerade5th_make_dice_roll$3 = function $$make_dice_roll(dice_pool) {
          var _$$,
              self = this,
              dice_list = nil,
              dice_text = nil,
              success_dice = nil,
              ten_dice = nil,
              botch_dice = nil;

          dice_list = self.randomizer.$roll_barabara(dice_pool, 10);
          dice_text = dice_list.$join(",");
          success_dice = $send(dice_list, 'count', [], (_$$ = function $$4(x) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (x == null) {
              x = nil;
            }

            ;
            return $rb_ge(x, 6);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          ten_dice = dice_list.$count(10);
          botch_dice = dice_list.$count(1);
          return [dice_text, success_dice, ten_dice, botch_dice];
        }, $VampireTheMasquerade5th_make_dice_roll$3.$$arity = 1);
        Opal.def(self, '$get_success_result', $VampireTheMasquerade5th_get_success_result$5 = function $$get_success_result(is_critical, hunger_ten_dice) {
          var self = this,
              judgment_result = nil,
              $ret_or_1 = nil;
          judgment_result = "：判定成功!";

          if ($truthy(function () {
            if ($truthy($ret_or_1 = $rb_gt(hunger_ten_dice, 0))) {
              return is_critical;
            } else {
              return $ret_or_1;
            }

            ;
            return nil;
          }())) {
            return "" + judgment_result + " [Messy Critical]";
          } else if ($truthy(is_critical)) {
            return "" + judgment_result + " [Critical Win]";
          }

          ;
          return judgment_result;
        }, $VampireTheMasquerade5th_get_success_result$5.$$arity = 2);
        return (Opal.def(self, '$get_fail_result', $VampireTheMasquerade5th_get_fail_result$6 = function $$get_fail_result(hunger_botch_dice) {
          var self = this,
              judgment_result = nil;
          judgment_result = "：判定失敗!";

          if ($truthy($rb_gt(hunger_botch_dice, 0))) {
            return "" + judgment_result + " [Bestial Failure]";
          }

          ;
          return judgment_result;
        }, $VampireTheMasquerade5th_get_fail_result$6.$$arity = 1), nil) && 'get_fail_result';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "cJSp":
/*!*************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/PhantasmAdventure.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'PhantasmAdventure');
        var $nesting = [self].concat($parent_nesting),
            $PhantasmAdventure_result_1d20$1;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "PhantasmAdventure");
        Opal.const_set($nesting[0], 'NAME', "ファンタズム・アドベンチャー");
        Opal.const_set($nesting[0], 'SORT_KEY', "ふあんたすむあとへんちやあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "成功、失敗、決定的成功、決定的失敗の表示とクリティカル・ファンブル値計算の実装。\n");
        return (Opal.def(self, '$result_1d20', $PhantasmAdventure_result_1d20$1 = function $$result_1d20(total, _dice_total, cmp_op, diff) {
          var self = this,
              skill_mod = nil,
              fumble = nil,
              critical = nil,
              dice_now = nil,
              $ret_or_1 = nil,
              fum_num = nil,
              fum_str = nil,
              $ret_or_2 = nil,
              crit_num = nil;

          if (diff['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;
          skill_mod = 0;

          if ($truthy($rb_lt(diff, 1))) {
            skill_mod = $rb_minus(diff, 1);
          } else if ($truthy($rb_gt(diff, 20))) {
            skill_mod = $rb_minus(diff, 20);
          }

          ;
          fumble = $rb_plus(20, skill_mod);

          if ($truthy($rb_gt(fumble, 20))) {
            fumble = 20;
          }

          ;
          critical = $rb_plus(1, skill_mod);
          dice_now = self.randomizer.$roll_once(20);

          if ($truthy(function () {
            if ($truthy($ret_or_1 = $rb_ge(total, fumble))) {
              return $ret_or_1;
            } else {
              return $rb_ge(total, 20);
            }

            ;
            return nil;
          }())) {
            fum_num = $rb_minus(dice_now, skill_mod);

            if ($truthy($rb_gt(fum_num, 20))) {
              fum_num = 20;
            }

            ;

            if ($truthy($rb_lt(fum_num, 1))) {
              fum_num = 1;
            }

            ;
            fum_str = dice_now.$to_s();

            if ($truthy($rb_lt(skill_mod, 0))) {
              fum_str = $rb_plus(fum_str, "" + "+" + $rb_times(skill_mod, -1) + "=" + fum_num);
            } else {
              fum_str = $rb_plus(fum_str, "" + "-" + skill_mod + "=" + fum_num);
            }

            ;
            return $$($nesting, 'Result').$fumble("" + "致命的失敗(" + fum_str + ")");
          } else if ($truthy(function () {
            if ($truthy($ret_or_2 = $rb_le(total, critical))) {
              return $ret_or_2;
            } else {
              return $rb_le(total, 1);
            }

            ;
            return nil;
          }())) {
            crit_num = $rb_plus(dice_now, skill_mod);

            if ($truthy($rb_gt(crit_num, 20))) {
              crit_num = 20;
            }

            ;

            if ($truthy($rb_lt(crit_num, 1))) {
              crit_num = 1;
            }

            ;

            if ($truthy($rb_lt(skill_mod, 0))) {
              return $$($nesting, 'Result').$success("成功");
            }

            ;
            return $$($nesting, 'Result').$critical("" + "決定的成功(" + dice_now + "+" + skill_mod + "=" + crit_num + ")");
          } else if ($truthy($rb_le(total, diff))) {
            return $$($nesting, 'Result').$success("成功");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $PhantasmAdventure_result_1d20$1.$$arity = 4), nil) && 'result_1d20';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "dddO":
/*!*************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Elric.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Elric');
        var $nesting = [self].concat($parent_nesting),
            $Elric_result_1d100$1;
        Opal.const_set($nesting[0], 'ID', "Elric");
        Opal.const_set($nesting[0], 'NAME', "エルリック！");
        Opal.const_set($nesting[0], 'SORT_KEY', "えるりつく");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "貫通、クリティカル、ファンブルの自動判定を行います。\n");
        return (Opal.def(self, '$result_1d100', $Elric_result_1d100$1 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this,
              $ret_or_1 = nil;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_le(total, 1))) {
            return $$($nesting, 'Result').$critical("貫通");
          } else if ($truthy($rb_ge(total, 100))) {
            return $$($nesting, 'Result').$fumble("致命的失敗");
          } else if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          } else if ($truthy($rb_le(total, $rb_divide(target, 5.0).$ceil()))) {
            return $$($nesting, 'Result').$critical("決定的成功");
          } else if ($truthy($rb_le(total, target))) {
            return $$($nesting, 'Result').$success("成功");
          } else if ($truthy(function () {
            if ($truthy($ret_or_1 = $rb_ge(total, 99))) {
              return $rb_lt(target, 100);
            } else {
              return $ret_or_1;
            }

            ;
            return nil;
          }())) {
            return $$($nesting, 'Result').$fumble("致命的失敗");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $Elric_result_1d100$1.$$arity = 4), nil) && 'result_1d100';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "eqwX":
/*!****************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/GeishaGirlwithKatana.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $hash = Opal.hash;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GeishaGirlwithKatana');
        var $nesting = [self].concat($parent_nesting),
            $GeishaGirlwithKatana_eval_game_system_specific_command$1,
            $GeishaGirlwithKatana_isChomba$2,
            $GeishaGirlwithKatana_getChombaResultText$3,
            $GeishaGirlwithKatana_getYaku$4,
            $GeishaGirlwithKatana_getDemeZorome$5,
            $GeishaGirlwithKatana_getResultTextByDice$6,
            $GeishaGirlwithKatana_getResultText$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "GeishaGirlwithKatana");
        Opal.const_set($nesting[0], 'NAME', "ゲイシャ・ガール・ウィズ・カタナ");
        Opal.const_set($nesting[0], 'SORT_KEY', "けいしやかあるういすかたな");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定 (GK#n)\n" + "  役やチョムバを含めて1回分のダイスロールを判定します。\n" + "　役は　（通常判定）／（戦闘時）　の順で両方出力されます。\n" + "  GK のみの場合5%の確率でチョムバます。\n" + "  GK#3 の様に #n をつけることによってチョムバの確率をn%にすることができます。\n" + "　例）GK　GK#10\n" + "・隠しコマンド (GL)\n" + "  必ずチョムバします。GMが空気を読んでチョムバさせたいときや、\n" + "  GKコマンドを打ち間違えてチョムバするを想定してます。\n" + "　例）GL\n");
        self.$register_prefix("GK", "GL");
        Opal.def(self, '$eval_game_system_specific_command', $GeishaGirlwithKatana_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var $a,
              $b,
              self = this,
              output = nil,
              chomba_counter = nil,
              diceList = nil,
              yakuResult = nil,
              deme = nil,
              zorome = nil,
              yp = nil;
          output = nil;

          if ($truthy(/^GL$/i['$=~'](command))) {
            return self.$getChombaResultText();
          }

          ;

          if ($truthy(/^GK(#(\d+))?$/i['$=~'](command))) {} else {
            return output;
          }

          ;
          chomba_counter = $$($nesting, 'Regexp').$last_match(2);

          if ($truthy(self.$isChomba(chomba_counter))) {
            return self.$getChombaResultText();
          }

          ;
          diceList = self.randomizer.$roll_barabara(3, 6).$sort();
          yakuResult = self.$getYaku(diceList);

          if ($truthy(yakuResult['$nil?']())) {} else {
            return self.$getResultTextByDice(diceList, "" + "【役】" + yakuResult);
          }

          ;
          $b = self.$getDemeZorome(diceList), $a = Opal.to_ary($b), deme = $a[0] == null ? nil : $a[0], zorome = $a[1] == null ? nil : $a[1], $b;

          if (deme['$=='](0)) {
            return self.$getResultTextByDice(diceList, "失敗");
          }

          ;

          yp = function () {
            if (zorome['$=='](1)) {
              return " YPが1増加";
            } else {
              return "";
            }

            ;
            return nil;
          }();

          output = self.$getResultTextByDice(diceList, "" + "達成値" + deme + yp);
          self.$debug("getGGwKResult(command) result", output);
          return output;
        }, $GeishaGirlwithKatana_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$isChomba', $GeishaGirlwithKatana_isChomba$2 = function $$isChomba(chomba_counter) {
          var self = this,
              $ret_or_1 = nil,
              chomba = nil;

          chomba_counter = function () {
            if ($truthy($ret_or_1 = chomba_counter)) {
              return $ret_or_1;
            } else {
              return 5;
            }

            ;
            return nil;
          }();

          chomba_counter = chomba_counter.$to_i();
          chomba = self.randomizer.$roll_once(100);
          return $rb_le(chomba, chomba_counter);
        }, $GeishaGirlwithKatana_isChomba$2.$$arity = 1);
        Opal.def(self, '$getChombaResultText', $GeishaGirlwithKatana_getChombaResultText$3 = function $$getChombaResultText() {
          var self = this;
          return self.$getResultText("チョムバ！！");
        }, $GeishaGirlwithKatana_getChombaResultText$3.$$arity = 0);
        Opal.def(self, '$getYaku', $GeishaGirlwithKatana_getYaku$4 = function $$getYaku(diceList) {
          var self = this,
              rule = nil,
              yaku = nil;
          rule = $hash([1, 2, 3], "自動失敗／自分の装甲効果無しでダメージを受けてしまう", [4, 5, 6], "自動成功／敵の装甲を無視してダメージを与える", [1, 1, 1], "10倍成功 YPが10増加／10倍ダメージ YPが10増加", [2, 2, 2], "2倍成功／2倍ダメージ", [3, 3, 3], "3倍成功／3倍ダメージ", [4, 4, 4], "4倍成功／4倍ダメージ", [5, 5, 5], "5倍成功／5倍ダメージ", [6, 6, 6], "6倍成功／6倍ダメージ");
          yaku = rule['$[]'](diceList);
          return yaku;
        }, $GeishaGirlwithKatana_getYaku$4.$$arity = 1);
        Opal.def(self, '$getDemeZorome', $GeishaGirlwithKatana_getDemeZorome$5 = function $$getDemeZorome(diceList) {
          var self = this,
              deme = nil,
              zorome = nil;
          deme = 0;
          zorome = 0;

          if (diceList['$[]'](0)['$=='](diceList['$[]'](1))) {
            deme = diceList['$[]'](2);
            zorome = diceList['$[]'](0);
          } else if (diceList['$[]'](1)['$=='](diceList['$[]'](2))) {
            deme = diceList['$[]'](0);
            zorome = diceList['$[]'](1);
          }

          ;
          return [deme, zorome];
        }, $GeishaGirlwithKatana_getDemeZorome$5.$$arity = 1);
        Opal.def(self, '$getResultTextByDice', $GeishaGirlwithKatana_getResultTextByDice$6 = function $$getResultTextByDice(diceList, result) {
          var self = this;
          return self.$getResultText("" + diceList.$join(",") + " ＞ " + result);
        }, $GeishaGirlwithKatana_getResultTextByDice$6.$$arity = 2);
        return (Opal.def(self, '$getResultText', $GeishaGirlwithKatana_getResultText$7 = function $$getResultText(result) {
          var self = this;
          return "" + "(3B6) ＞ " + result;
        }, $GeishaGirlwithKatana_getResultText$7.$$arity = 1), nil) && 'getResultText';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "frHO":
/*!*************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Comes.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Comes');
        var $nesting = [self].concat($parent_nesting),
            $Comes_initialize$1,
            $Comes_eval_game_system_specific_command$2;
        Opal.const_set($nesting[0], 'ID', "Comes");
        Opal.const_set($nesting[0], 'NAME', "カムズ");
        Opal.const_set($nesting[0], 'SORT_KEY', "かむす");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・各種表\n" + "　判定ペナルティ表 PT\n");
        Opal.def(self, '$initialize', $Comes_initialize$1 = function $$initialize(command) {
          var $iter = $Comes_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Comes_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Comes_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $Comes_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Comes_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this;
          return self.$roll_tables(command, $$$(self.$class(), 'TABLES'));
        }, $Comes_eval_game_system_specific_command$2.$$arity = 1);
        Opal.const_set($nesting[0], 'TABLES', $hash2(["PT"], {
          "PT": $$$($$($nesting, 'DiceTable'), 'Table').$new("判定ペナルティ表", "1D6", ["恐ろしい目に合う。『恐怖』を与える。", "今見ているものを理解できない。『混乱』を与える。", "我を忘れて見とれてしまう。『魅了』を与える。", "思わぬ遠回りをしてしまう。『疲労』を与える。", "大きな失態を演じてしまう。『負傷』を与える。", "別の困難が立ちはだかる。新たに判定を行わせる。"])
        }).$freeze());
        return self.$register_prefix($$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "goL+":
/*!*************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Chill.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Chill');
        var $nesting = [self].concat($parent_nesting),
            $Chill_result_1d100$1,
            $Chill_eval_game_system_specific_command$2,
            $Chill_roll_strike_rank_result$3,
            $Chill_check_strike_rank$4;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Chill");
        Opal.const_set($nesting[0], 'NAME', "Chill");
        Opal.const_set($nesting[0], 'SORT_KEY', "ちる");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・ストライク・ランク　(SRx)\n" + "　\"SRストライク・ランク\"の形で記入します。\n" + "　ストライク・ランク・チャートに従って自動でダイスロールを行い、\n" + "　負傷とスタミナロスを計算します。\n" + "　ダイスロールと同様に、他のプレイヤーに隠れてロールすることも可能です。\n" + "　例）SR7　　　sr13　　　SR(7+4)　　　Ssr10\n");
        self.$register_prefix("SR");
        Opal.def(self, '$result_1d100', $Chill_result_1d100$1 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this;

          if (target['$==']("?")) {
            return nil;
          }

          ;

          if ($truthy(cmp_op['$!=']("<="))) {
            return nil;
          }

          ;

          if ($truthy($rb_ge(total, 100))) {
            return $$($nesting, 'Result').$fumble("ファンブル");
          } else if ($truthy($rb_gt(total, target))) {
            return $$($nesting, 'Result').$failure("失敗");
          } else if ($truthy($rb_ge(total, $rb_times(target, 0.9)))) {
            return $$($nesting, 'Result').$success("Ｌ成功");
          } else if ($truthy($rb_ge(total, $rb_divide(target, 2).$to_i()))) {
            return $$($nesting, 'Result').$success("Ｍ成功");
          } else if ($truthy($rb_ge(total, $rb_divide(target, 10).$to_i()))) {
            return $$($nesting, 'Result').$success("Ｈ成功");
          } else {
            return $$($nesting, 'Result').$critical("Ｃ成功");
          }

          ;
        }, $Chill_result_1d100$1.$$arity = 4);
        Opal.def(self, '$eval_game_system_specific_command', $Chill_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this;
          return self.$roll_strike_rank_result(command);
        }, $Chill_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$roll_strike_rank_result', $Chill_roll_strike_rank_result$3 = function $$roll_strike_rank_result(string) {
          var $a,
              $b,
              self = this,
              wounds = nil,
              sta_loss = nil,
              dice = nil,
              dice_add = nil,
              dice_str = nil,
              strikeRank = nil,
              dice_w = nil,
              dice_wa = nil,
              dice_ws = nil,
              _dice = nil,
              dice_list = nil,
              wounds_wk = nil,
              output = nil;
          self.$debug("strike_rank begin string", string);
          wounds = 0;
          sta_loss = 0;
          dice = "";
          dice_add = "";
          dice_str = "";

          if ($truthy(/(^|\s)[sS]?(SR|sr)(\d+)($|\s)/['$=~'](string))) {} else {
            self.$debug("invalid string", string);
            return "1";
          }

          ;
          strikeRank = $$($nesting, 'Regexp').$last_match(3).$to_i();

          if ($truthy($rb_lt(strikeRank, 14))) {
            $b = self.$check_strike_rank(strikeRank), $a = Opal.to_ary($b), sta_loss = $a[0] == null ? nil : $a[0], dice = $a[1] == null ? nil : $a[1], dice_add = $a[2] == null ? nil : $a[2], dice_str = $a[3] == null ? nil : $a[3], $b;
            $b = self.$check_strike_rank($rb_minus(strikeRank, 3)), $a = Opal.to_ary($b), wounds = $a[0] == null ? nil : $a[0], dice_w = $a[1] == null ? nil : $a[1], dice_wa = $a[2] == null ? nil : $a[2], dice_ws = $a[3] == null ? nil : $a[3], $b;
            dice = $rb_plus($rb_plus(dice, ", "), dice_w);
            dice_add = $rb_plus(dice_add, $rb_plus(", ", dice_wa));
            dice_str = $rb_plus($rb_plus(dice_str, ", "), dice_ws);
          } else {
            $b = self.$check_strike_rank(13), $a = Opal.to_ary($b), sta_loss = $a[0] == null ? nil : $a[0], _dice = $a[1] == null ? nil : $a[1], dice_add = $a[2] == null ? nil : $a[2], dice_str = $a[3] == null ? nil : $a[3], $b;
            dice_list = self.randomizer.$roll_barabara(4, 10);
            wounds = dice_list.$sum();
            dice_ws = dice_list.$join(",");
            dice = $rb_plus($rb_plus("5d10*3, 4d10+", $rb_times($rb_minus(strikeRank, 13), 2).$to_s()), "d10");
            dice_add = $rb_plus(dice_add, $rb_plus(", ", wounds.$to_s()));
            dice_str = "" + dice_str + ", " + dice_ws;
            dice_list = self.randomizer.$roll_barabara($rb_times($rb_minus(strikeRank, 13), 2), 10);
            wounds_wk = dice_list.$sum();
            dice_ws = dice_list.$join(",");
            dice_str = $rb_plus(dice_str, "" + "+" + dice_ws);
            dice_add = $rb_plus(dice_add, "" + "+" + wounds_wk);
            wounds = $rb_plus(wounds, wounds_wk);
          }

          ;
          output = "" + dice_str + " ＞ " + dice_add + " ＞ スタミナ損失" + sta_loss + ", 負傷" + wounds;
          string = $rb_plus(string, $rb_plus(":", dice));

          if ($truthy(output['$empty?']())) {
            return "1";
          }

          ;
          output = "" + "(" + string + ") ＞ " + output;
          self.$debug("strike_rank end output", output);
          return output;
        }, $Chill_roll_strike_rank_result$3.$$arity = 1);
        return (Opal.def(self, '$check_strike_rank', $Chill_check_strike_rank$4 = function $$check_strike_rank(strikeRank) {
          var self = this,
              dice = nil,
              dice_add = nil,
              dice_str = nil,
              damage = nil,
              dice_list = nil,
              total = nil;
          strikeRank = strikeRank.$to_i();
          dice = "";
          dice_add = "";
          dice_str = "";
          damage = 0;

          if ($truthy($rb_lt(strikeRank, 1))) {
            damage = 0;
            dice_str = "-";
            dice_add = "-";
            dice = "-";
          } else if ($truthy($rb_lt(strikeRank, 2))) {
            dice = "0or1";
            damage = self.randomizer.$roll_once(2);
            dice_str = damage.$to_s();
            damage = $rb_minus(damage, 1);
            dice_add = damage.$to_s();
          } else if ($truthy($rb_lt(strikeRank, 3))) {
            dice = "1or2";
            damage = self.randomizer.$roll_once(2);
            dice_str = damage.$to_s();
            dice_add = damage.$to_s();
          } else if ($truthy($rb_lt(strikeRank, 4))) {
            dice = "1d5";
            damage = self.randomizer.$roll_once(5);
            dice_str = damage.$to_s();
            dice_add = damage.$to_s();
          } else if ($truthy($rb_lt(strikeRank, 10))) {
            dice = $rb_plus($rb_minus(strikeRank, 3).$to_s(), "d10");
            dice_list = self.randomizer.$roll_barabara($rb_minus(strikeRank, 3), 10);
            damage = dice_list.$sum();
            dice_add = damage.$to_s();
            dice_str = dice_list.$join(",");
          } else if ($truthy($rb_lt(strikeRank, 13))) {
            dice = $rb_plus($rb_minus(strikeRank, 6).$to_s(), "d10*2");
            dice_list = self.randomizer.$roll_barabara($rb_minus(strikeRank, 6), 10);
            total = dice_list.$sum();
            dice_add = "" + total + "*2";
            damage = $rb_times(total, 2);
            dice_str = "" + "(" + dice_list.$join(",") + ")*2";
          } else {
            dice = "5d10*3";
            dice_list = self.randomizer.$roll_barabara(5, 10);
            total = dice_list.$sum();
            dice_add = "" + total + "*3";
            damage = $rb_times(total, 3);
            dice_str = "" + "(" + dice_list.$join(",") + ")*3";
          }

          ;
          return [damage, dice, dice_add, dice_str];
        }, $Chill_check_strike_rank$4.$$arity = 1), nil) && 'check_strike_rank';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "hcZb":
/*!*******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/StratoShout.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StratoShout');
        var $nesting = [self].concat($parent_nesting),
            $StratoShout_initialize$1,
            $StratoShout_result_2d6$2,
            $StratoShout_eval_game_system_specific_command$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "StratoShout");
        Opal.const_set($nesting[0], 'NAME', "ストラトシャウト");
        Opal.const_set($nesting[0], 'SORT_KEY', "すとらとしやうと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\n" + "VOT, GUT, BAT, KEYT, DRT: (ボーカル、ギター、ベース、キーボード、ドラム)トラブル表\n" + "EMO: 感情表\n" + "ATn, RTTn: 特技表(n＝分野。空:ランダム 1:主義 2:身体 3:モチーフ 4:エモーション 5:行動 6:逆境)\n" + "RCT: 分野ランダム表\n" + "SCENE, MACHI, GAKKO, BAND: (汎用、街角、学校、バンド)シーン表 接近シーンで使用\n" + "TENKAI: シーン展開表 奔走シーン 練習シーンで使用\n" + "\n" + "D66入れ替えあり\n");
        Opal.def(self, '$initialize', $StratoShout_initialize$1 = function $$initialize(command) {
          var $iter = $StratoShout_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $StratoShout_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $StratoShout_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $StratoShout_initialize$1.$$arity = 1);
        Opal.def(self, '$result_2d6', $StratoShout_result_2d6$2 = function $$result_2d6(_total, dice_total, _dice_list, cmp_op, _target) {
          var self = this;

          if (cmp_op['$=='](">=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_le(dice_total, 2))) {
            return $$($nesting, 'Result').$fumble(self.$translate("StratoShout.fumble"));
          } else if ($truthy($rb_ge(dice_total, 12))) {
            return $$($nesting, 'Result').$critical(self.$translate("StratoShout.critical"));
          } else {
            return nil;
          }

          ;
        }, $StratoShout_result_2d6$2.$$arity = 5);
        Opal.def(self, '$eval_game_system_specific_command', $StratoShout_eval_game_system_specific_command$3 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $ret_or_1 = nil;

          if ($truthy($ret_or_1 = self.$roll_tables(command, $$$(self.$class(), 'TABLES')))) {
            return $ret_or_1;
          } else {
            return $$$(self.$class(), 'RTT').$roll_command(self.randomizer, command);
          }
        }, $StratoShout_eval_game_system_specific_command$3.$$arity = 1);

        (function (self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting),
              $translate_tables$4,
              $translate_rtt$5;
          self.$private();
          Opal.def(self, '$translate_tables', $translate_tables$4 = function $$translate_tables(locale) {
            var self = this;
            return $hash2(["VOT", "GUT", "BAT", "KEYT", "DRT", "EMO", "SCENE", "MACHI", "GAKKO", "BAND", "TENKAI"], {
              "VOT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.VOT", locale),
              "GUT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.GUT", locale),
              "BAT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.BAT", locale),
              "KEYT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.KEYT", locale),
              "DRT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.DRT", locale),
              "EMO": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.EMO", locale),
              "SCENE": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.SCENE", locale),
              "MACHI": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.MACHI", locale),
              "GAKKO": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.GAKKO", locale),
              "BAND": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.BAND", locale),
              "TENKAI": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("StratoShout.table.TENKAI", locale)
            });
          }, $translate_tables$4.$$arity = 1);
          return (Opal.def(self, '$translate_rtt', $translate_rtt$5 = function $$translate_rtt(locale) {
            var self = this;
            return $$$($$($nesting, 'DiceTable'), 'SaiFicSkillTable').$from_i18n("StratoShout.RTT", locale, $hash2(["rtt", "rttn"], {
              "rtt": "AT",
              "rttn": ["AT1", "AT2", "AT3", "AT4", "AT5", "AT6"]
            }));
          }, $translate_rtt$5.$$arity = 1), nil) && 'translate_rtt';
        })(Opal.get_singleton_class(self), $nesting);

        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ja_jp"));
        Opal.const_set($nesting[0], 'RTT', self.$translate_rtt("ja_jp"));
        return self.$register_prefix($$($nesting, 'TABLES').$keys(), $$($nesting, 'RTT').$prefixes());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "hkEU":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/IthaWenUa.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IthaWenUa');
        var $nesting = [self].concat($parent_nesting),
            $IthaWenUa_result_1d100$1;
        Opal.const_set($nesting[0], 'ID', "IthaWenUa");
        Opal.const_set($nesting[0], 'NAME', "イサー・ウェン＝アー");
        Opal.const_set($nesting[0], 'SORT_KEY', "いさあうえんああ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "1D100<=m 方式の判定で成否、クリティカル(01)・ファンブル(00)を自動判定します。\n");
        return (Opal.def(self, '$result_1d100', $IthaWenUa_result_1d100$1 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if (total['$%'](100)['$=='](1)) {
            return $$($nesting, 'Result').$critical("01 ＞ クリティカル");
          } else if (total['$%'](100)['$=='](0)) {
            return $$($nesting, 'Result').$fumble("00 ＞ ファンブル");
          } else if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          } else {
            return nil;
          }

          ;
        }, $IthaWenUa_result_1d100$1.$$arity = 4), nil) && 'result_1d100';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "iSWs":
/*!***************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Alsetto.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Alsetto');
        var $nesting = [self].concat($parent_nesting),
            $Alsetto_initialize$1,
            $Alsetto_eval_game_system_specific_command$2,
            $Alsetto_checkRoll$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Alsetto");
        Opal.const_set($nesting[0], 'NAME', "詩片のアルセット");
        Opal.const_set($nesting[0], 'SORT_KEY', "うたかたのあるせつと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・成功判定：nAL[m]　　　　・トライアンフ無し：nALC[m]\n" + "・命中判定：nAL[m]*p　　　・トライアンフ無し：nALC[m]*p\n" + "・命中判定（ガンスリンガーの根源詩）：nALG[m]*p\n" + "[]内は省略可能。\n" + "\n" + "ALコマンドはトライアンフの分だけ、自動で振り足し処理を行います。\n" + "「n」でダイス数を指定。\n" + "「m」で目標値を指定。省略時は、デフォルトの「3」が使用されます。\n" + "「p」で攻撃力を指定。「*」は「x」でも可。\n" + "攻撃力指定で命中判定となり、成功数ではなく、ダメージを結果表示します。\n" + "\n" + "ALCコマンドはトライアンフ無しで、成功数、ダメージを結果表示します。\n" + "ALGコマンドは「2以下」でトライアンフ処理を行います。\n" + "\n" + "【書式例】\n" + "・5AL → 5d6で目標値3。\n" + "・5ALC → 5d6で目標値3。トライアンフ無し。\n" + "・6AL2 → 6d6で目標値2。\n" + "・4AL*5 → 4d6で目標値3、攻撃力5の命中判定。\n" + "・7AL2x10 → 7d6で目標値2、攻撃力10の命中判定。\n" + "・8ALC4x5 → 8d6で目標値4、攻撃力5、トライアンフ無しの命中判定。\n");
        self.$register_prefix("\\d+AL[CG]?");
        Opal.def(self, '$initialize', $Alsetto_initialize$1 = function $$initialize(command) {
          var $iter = $Alsetto_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Alsetto_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Alsetto_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $Alsetto_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Alsetto_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              rapid = nil,
              isCritical = nil,
              criticalNumber = nil,
              target = nil,
              $ret_or_1 = nil,
              damage = nil,
              $ret_or_2 = nil;

          if ($truthy(command['$=~'](/(\d+)AL(C|G)?(\d+)?((x|\*)(\d+))?$/i))) {
            rapid = $$($nesting, 'Regexp').$last_match(1).$to_i();
            isCritical = $$($nesting, 'Regexp').$last_match(2)['$nil?']();

            if ($truthy(isCritical)) {
              criticalNumber = 1;
            } else if ($$($nesting, 'Regexp').$last_match(2)['$==']("G")) {
              isCritical = true;
              criticalNumber = 2;
            } else {
              criticalNumber = 0;
            }

            ;

            target = function () {
              if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(3))) {
                return $ret_or_1;
              } else {
                return 3;
              }

              ;
              return nil;
            }().$to_i();

            damage = function () {
              if ($truthy($ret_or_2 = $$($nesting, 'Regexp').$last_match(6))) {
                return $ret_or_2;
              } else {
                return 0;
              }

              ;
              return nil;
            }().$to_i();

            return self.$checkRoll(rapid, target, damage, isCritical, criticalNumber);
          }

          ;
          return nil;
        }, $Alsetto_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$checkRoll', $Alsetto_checkRoll$3 = function $$checkRoll(rapid, target, damage, isCritical, criticalNumber) {
          var $a,
              _$$,
              self = this,
              totalSuccessCount = nil,
              totalCriticalCount = nil,
              text = nil,
              rollCount = nil,
              diceArray = nil,
              diceText = nil,
              successCount = nil,
              criticalCount = nil,
              isDamage = nil,
              totalDamage = nil,
              result = nil;

          totalSuccessCount = 0;
          totalCriticalCount = 0;
          text = "";
          rollCount = rapid;

          while ($truthy($rb_gt(rollCount, 0))) {
            diceArray = self.randomizer.$roll_barabara(rollCount, 6).$sort();
            diceText = diceArray.$join(",");
            successCount = 0;
            criticalCount = 0;
            $send(diceArray, 'each', [], (_$$ = function $$4(i) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (i == null) {
                i = nil;
              }

              ;

              if ($truthy($rb_le(i, target))) {
                successCount = $rb_plus(successCount, 1);
              }

              ;

              if ($truthy($rb_le(i, criticalNumber))) {
                return criticalCount = $rb_plus(criticalCount, 1);
              } else {
                return nil;
              }

              ;
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));
            totalSuccessCount = $rb_plus(totalSuccessCount, successCount);

            if (criticalCount['$=='](0)) {} else {
              totalCriticalCount = $rb_plus(totalCriticalCount, 1);
            }

            ;

            if ($truthy(text['$empty?']())) {} else {
              text = $rb_plus(text, "+");
            }

            ;
            text = $rb_plus(text, "" + successCount + "[" + diceText + "]");

            if ($truthy(isCritical)) {} else {
              break;
            }

            ;
            rollCount = criticalCount;
          }

          ;
          isDamage = damage['$!='](0);

          if ($truthy(isDamage)) {
            totalDamage = $rb_times(totalSuccessCount, damage);
            result = "" + "(" + rapid + "D6<=" + target + ") ＞ " + text + " ＞ Hits：" + totalSuccessCount + "*" + damage + " ＞ " + totalDamage + "ダメージ";
          } else {
            result = "" + "(" + rapid + "D6<=" + target + ") ＞ " + text + " ＞ 成功数：" + totalSuccessCount;
          }

          ;

          if ($truthy(isCritical)) {
            result = $rb_plus(result, "" + " / " + totalCriticalCount + "トライアンフ");
          }

          ;
          return result;
        }, $Alsetto_checkRoll$3.$$arity = 5), nil) && 'checkRoll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "ib7m":
/*!**************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/TokyoGhostResearch.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TokyoGhostResearch');
        var $nesting = [self].concat($parent_nesting),
            $TokyoGhostResearch_eval_game_system_specific_command$1,
            $TokyoGhostResearch_getCheckResult$2,
            $TokyoGhostResearch_getCheckResultText$3,
            $TokyoGhostResearch_tgr_opening_table$4,
            $TokyoGhostResearch_tgr_common_trouble_table$5,
            $TokyoGhostResearch_get_1d10_table_result$6,
            $TokyoGhostResearch_get_table_result$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "TokyoGhostResearch");
        Opal.const_set($nesting[0], 'NAME', "東京ゴーストリサーチ");
        Opal.const_set($nesting[0], 'SORT_KEY', "とうきようこおすとりさあち");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "判定\n" + "・タスク処理は目標値以上の値で成功となります。\n" + "  1d10>={目標値}\n" + "  例：目標値「5」の場合、5～0で成功\n" + "各種表\n" + "  ・導入表  OP\n" + "  ・一般トラブル表  TB\n");
        self.$register_prefix("OP", "TB", "TK?");
        Opal.def(self, '$eval_game_system_specific_command', $TokyoGhostResearch_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              output = nil,
              $case = nil;

          output = function () {
            $case = command.$upcase();

            if (/TK/i['$===']($case)) {
              return self.$getCheckResult(command);
            } else if ("OP"['$===']($case)) {
              return self.$tgr_opening_table();
            } else if ("TB"['$===']($case)) {
              return self.$tgr_common_trouble_table();
            } else {
              return nil;
            }
          }();

          return output;
        }, $TokyoGhostResearch_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$getCheckResult', $TokyoGhostResearch_getCheckResult$2 = function $$getCheckResult(command) {
          var self = this,
              output = nil,
              diff = nil,
              total_n = nil;
          output = "";
          diff = 0;

          if ($truthy(/TK?<=(\d+)/i['$=~'](command))) {
            diff = $$($nesting, 'Regexp').$last_match(2).$to_i();
          }

          ;

          if ($truthy($rb_gt(diff, 0))) {
            output = $rb_plus(output, "" + "(1D10<=" + diff + ")");
            total_n = self.randomizer.$roll_once(10);
            output = $rb_plus(output, $rb_plus(" ＞ ", total_n.$to_s()));
            output = $rb_plus(output, $rb_plus(" ＞ ", self.$getCheckResultText(total_n, diff)));
          }

          ;
          return output;
        }, $TokyoGhostResearch_getCheckResult$2.$$arity = 1);
        Opal.def(self, '$getCheckResultText', $TokyoGhostResearch_getCheckResultText$3 = function $$getCheckResultText(total_n, diff) {
          var self = this,
              result = nil;

          if ($truthy($rb_ge(total_n, diff))) {
            result = "成功";
          } else {
            result = "失敗";
          }

          ;
          return result;
        }, $TokyoGhostResearch_getCheckResultText$3.$$arity = 2);
        Opal.def(self, '$tgr_opening_table', $TokyoGhostResearch_tgr_opening_table$4 = function $$tgr_opening_table() {
          var self = this,
              name = nil,
              table = nil;
          name = "導入表";
          table = [[1, "【病休中断】体調不良または怪我で療養中だったが強制召喚された。"], [2, "【忙殺中】別の業務で忙殺中であった。"], [3, "【出張帰り】遠方での仕事から戻ったばかり。"], [4, "【休暇取り消し】休暇中だったが呼び戻された。"], [5, "【平常運転】いつもどおりの仕事中だった。"], [6, "【休暇明け】十分に休養をとったあとで、心身ともに充実している。"], [7, "【人生の岐路】人生の岐路にまさに差し掛かったところであった。"], [8, "【同窓会】かつての同級生に会い、差を実感したばかりだった。"], [9, "【転職活動中】転職を考えて求人サイトを見ているところだった。"], [10, "【サボリ中】仕事をサボっているところに呼び出しがあった。"]];
          return self.$get_1d10_table_result(name, table);
        }, $TokyoGhostResearch_tgr_opening_table$4.$$arity = 0);
        Opal.def(self, '$tgr_common_trouble_table', $TokyoGhostResearch_tgr_common_trouble_table$5 = function $$tgr_common_trouble_table() {
          var self = this,
              name = nil,
              table = nil;
          name = "一般トラブル表";
          table = [[1, "トラブルが生じたが、間一髪、危機を脱した。【ダメージなし】"], [2, "どうにかタスクを処理したが、非常に疲労してしまった。【肉体ダメージ1点】"], [3, "タスク処理の過程で負傷してしまった。【肉体ダメージ1点】"], [4, "恐怖や混乱、ストレスなどで精神の均衡を崩してしまった。【精神ダメージ1点】"], [5, "過去のトラウマなどを思い出し、気分が沈んでしまった。【精神ダメージ1点】"], [6, "自身の信用をキズつけたり、汚名を背負ってしまった。【環境ダメージ1点】"], [7, "会社や上司の不興を買ってしまった。【環境ダメージ1点】"], [8, "疲労困憊で動くこともままならない。【肉体ダメージ1点＋精神ダメージ1点】"], [9, "負傷したうえ、会社に損害を与えてしまった。【肉体ダメージ1点＋環境ダメージ1点】"], [10, "上司から厳しく叱責され、まずい立場になった。【精神ダメージ1点＋環境ダメージ1点】"]];
          return self.$get_1d10_table_result(name, table);
        }, $TokyoGhostResearch_tgr_common_trouble_table$5.$$arity = 0);
        Opal.def(self, '$get_1d10_table_result', $TokyoGhostResearch_get_1d10_table_result$6 = function $$get_1d10_table_result(name, table) {
          var self = this,
              dice = nil,
              output = nil;
          dice = self.randomizer.$roll_once(10);
          output = self.$get_table_by_number(dice, table);
          return self.$get_table_result(name, dice, output);
        }, $TokyoGhostResearch_get_1d10_table_result$6.$$arity = 2);
        return (Opal.def(self, '$get_table_result', $TokyoGhostResearch_get_table_result$7 = function $$get_table_result(name, dice, output) {
          var self = this;
          return "" + name + "(" + dice + ") ＞ " + output;
        }, $TokyoGhostResearch_get_table_result$7.$$arity = 3), nil) && 'get_table_result';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "irSd":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Pendragon.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Pendragon');
        var $nesting = [self].concat($parent_nesting),
            $Pendragon_result_1d20$1;
        Opal.const_set($nesting[0], 'ID', "Pendragon");
        Opal.const_set($nesting[0], 'NAME', "ペンドラゴン");
        Opal.const_set($nesting[0], 'SORT_KEY', "へんとらこん");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "クリティカル、成功、失敗、ファンブルの自動判定を行います。\n");
        return (Opal.def(self, '$result_1d20', $Pendragon_result_1d20$1 = function $$result_1d20(total, _dice_total, cmp_op, target) {
          var self = this,
              $ret_or_1 = nil;

          if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_le(total, target))) {
            if ($truthy(function () {
              if ($truthy($ret_or_1 = $rb_ge(total, $rb_minus(40, target)))) {
                return $ret_or_1;
              } else {
                return total['$=='](target);
              }

              ;
              return nil;
            }())) {
              return $$($nesting, 'Result').$critical("クリティカル");
            } else {
              return $$($nesting, 'Result').$success("成功");
            }
          } else if (total['$=='](20)) {
            return $$($nesting, 'Result').$fumble("ファンブル");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $Pendragon_result_1d20$1.$$arity = 4), nil) && 'result_1d20';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "jnGY":
/*!**************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Fiasco.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Fiasco');
        var $nesting = [self].concat($parent_nesting),
            $Fiasco_eval_game_system_specific_command$1,
            $Fiasco_roll_fs$2,
            $Fiasco_roll_white_black_single$5,
            $Fiasco_roll_white_black$6,
            $Fiasco_color$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Fiasco");
        Opal.const_set($nesting[0], 'NAME', "フィアスコ");
        Opal.const_set($nesting[0], 'SORT_KEY', "ふいあすこ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "  ・判定コマンド(FSx, WxBx)\n" + "    相関図・転落要素用(FSx)：相関図や転落要素のためにx個ダイスを振り、出目ごとに分類する\n" + "    黒白差分判定用(WxBx)  ：転落、残響のために白ダイス(W指定)と黒ダイス(B指定)で差分を求める\n" + "      ※ WとBは片方指定(Bx, Wx)、入替指定(WxBx,BxWx)可能\n");
        self.$register_prefix("FS", "W", "B");
        Opal.def(self, '$eval_game_system_specific_command', $Fiasco_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $ret_or_1 = nil,
              $ret_or_2 = nil;

          if ($truthy($ret_or_1 = function () {
            if ($truthy($ret_or_2 = self.$roll_fs(command))) {
              return $ret_or_2;
            } else {
              return self.$roll_white_black(command);
            }

            ;
            return nil;
          }())) {
            return $ret_or_1;
          } else {
            return self.$roll_white_black_single(command);
          }
        }, $Fiasco_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$roll_fs', $Fiasco_roll_fs$2 = function $$roll_fs(command) {
          var _$$,
              _$$2,
              self = this,
              m = nil,
              dice_count = nil,
              dice_list = nil,
              bucket = nil;

          m = /^FS(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          dice_count = m['$[]'](1).$to_i();
          dice_list = self.randomizer.$roll_barabara(dice_count, 6);
          bucket = [nil, 0, 0, 0, 0, 0, 0];
          $send(dice_list, 'each', [], (_$$ = function $$3(val) {
            var self = _$$.$$s == null ? this : _$$.$$s,
                $writer = nil;

            if (val == null) {
              val = nil;
            }

            ;
            $writer = [val, $rb_plus(bucket['$[]'](val), 1)];
            $send(bucket, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          $send(bucket, 'map!', [], (_$$2 = function $$4(count) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (count == null) {
              count = nil;
            }

            ;
            return self.$translate("Fiasco.fs.count", $hash2(["count"], {
              "count": count
            }));
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          return "" + "1 => " + bucket['$[]'](1) + ", 2 => " + bucket['$[]'](2) + ", 3 => " + bucket['$[]'](3) + ", 4 => " + bucket['$[]'](4) + ", 5 => " + bucket['$[]'](5) + ", 6 => " + bucket['$[]'](6);
        }, $Fiasco_roll_fs$2.$$arity = 1);
        Opal.def(self, '$roll_white_black_single', $Fiasco_roll_white_black_single$5 = function $$roll_white_black_single(command) {
          var self = this,
              m = nil,
              a = nil,
              result = nil;
          m = /^([WB])(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          a = $$($nesting, 'Side').$new(self.$color(m['$[]'](1)), m['$[]'](2).$to_i());
          result = a.$roll(self.randomizer);
          return "" + result + " ＞ " + a.$color() + a.$total();
        }, $Fiasco_roll_white_black_single$5.$$arity = 1);
        Opal.def(self, '$roll_white_black', $Fiasco_roll_white_black$6 = function $$roll_white_black(command) {
          var self = this,
              m = nil,
              $case = nil,
              a = nil,
              result_a = nil,
              b = nil,
              result_b = nil;
          m = /^([WB])(\d+)([WB])(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          $case = command;

          if (/^W\d+W\d+$/['$===']($case)) {
            return "" + command + "：" + self.$translate("Fiasco.wb.duplicate_error.white");
          } else if (/^B\d+B\d+$/['$===']($case)) {
            return "" + command + "：" + self.$translate("Fiasco.wb.duplicate_error.black");
          }

          ;
          a = $$($nesting, 'Side').$new(self.$color(m['$[]'](1)), m['$[]'](2).$to_i());
          result_a = a.$roll(self.randomizer);
          b = $$($nesting, 'Side').$new(self.$color(m['$[]'](3)), m['$[]'](4).$to_i());
          result_b = b.$roll(self.randomizer);
          return "" + result_a + " " + result_b + " ＞ " + a.$diff(b);
        }, $Fiasco_roll_white_black$6.$$arity = 1);
        Opal.def(self, '$color', $Fiasco_color$7 = function $$color(c) {
          var self = this;

          if (c['$==']("W")) {
            return self.$translate("Fiasco.white");
          } else {
            return self.$translate("Fiasco.black");
          }
        }, $Fiasco_color$7.$$arity = 1);
        return function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Side');
          var $nesting = [self].concat($parent_nesting),
              $Side_initialize$8,
              $Side_roll$9,
              $Side_diff$10;
          self.$$prototype.count = self.$$prototype.dice_list = self.$$prototype.color = self.$$prototype.total = nil;
          Opal.def(self, '$initialize', $Side_initialize$8 = function $$initialize(color, count) {
            var self = this;
            self.color = color;
            return self.count = count;
          }, $Side_initialize$8.$$arity = 2);
          Opal.def(self, '$roll', $Side_roll$9 = function $$roll(randomizer) {
            var self = this;

            self.dice_list = function () {
              if (self.count['$=='](0)) {
                return [0];
              } else {
                return randomizer.$roll_barabara(self.count, 6);
              }

              ;
              return nil;
            }();

            self.total = self.dice_list.$sum();
            return "" + self.color + self.total + "[" + self.dice_list.$join(",") + "]";
          }, $Side_roll$9.$$arity = 1);
          Opal.def(self, '$diff', $Side_diff$10 = function $$diff(other) {
            var self = this;

            if (self.total['$=='](other.$total())) {
              return "0";
            } else if ($truthy($rb_gt(self.total, other.$total()))) {
              return "" + self.color + $rb_minus(self.total, other.$total());
            } else {
              return "" + other.$color() + $rb_minus(other.$total(), self.total);
            }
          }, $Side_diff$10.$$arity = 1);
          return self.$attr_reader("color", "total");
        }($nesting[0], null, $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "kSBe":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/ShadowRun4.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ShadowRun4');
        var $nesting = [self].concat($parent_nesting),
            $ShadowRun4_initialize$1,
            $ShadowRun4_grich_text$2;
        Opal.const_set($nesting[0], 'ID', "ShadowRun4");
        Opal.const_set($nesting[0], 'NAME', "シャドウラン 4th Edition");
        Opal.const_set($nesting[0], 'SORT_KEY', "しやとうらん4");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "個数振り足しロール(xRn)の境界値を6にセット、バラバラロール(xBn)の目標値を5以上にセットします。\n" + "BコマンドとRコマンド時に、グリッチの表示を行います。\n");
        Opal.def(self, '$initialize', $ShadowRun4_initialize$1 = function $$initialize(command) {
          var $iter = $ShadowRun4_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $ShadowRun4_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ShadowRun4_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          self.sort_barabara_dice = true;
          self.reroll_dice_reroll_threshold = 6;
          self.default_cmp_op = ">=";
          return self.default_target_number = 5;
        }, $ShadowRun4_initialize$1.$$arity = 1);
        return (Opal.def(self, '$grich_text', $ShadowRun4_grich_text$2 = function $$grich_text(numberSpot1, dice_cnt_total, successCount) {
          var self = this,
              dice_cnt_total_half = nil;
          dice_cnt_total_half = $rb_divide($rb_times(1.0, dice_cnt_total), 2);
          self.$debug("dice_cnt_total_half", dice_cnt_total_half);

          if ($truthy($rb_ge(numberSpot1, dice_cnt_total_half))) {} else {
            return nil;
          }

          ;

          if (successCount['$=='](0)) {
            return "クリティカルグリッチ";
          } else {
            return "グリッチ";
          }

          ;
        }, $ShadowRun4_grich_text$2.$$arity = 3), nil) && 'grich_text';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "kjae":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/LostRecord.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LostRecord');
        var $nesting = [self].concat($parent_nesting),
            $LostRecord_initialize$1;
        Opal.const_set($nesting[0], 'ID', "LostRecord");
        Opal.const_set($nesting[0], 'NAME', "ロストレコード");
        Opal.const_set($nesting[0], 'SORT_KEY', "ろすとれこおと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "※このダイスボットは部屋のシステム名表示用となります。\n" + "D66を振った時、小さい目が十の位になります。\n");
        return (Opal.def(self, '$initialize', $LostRecord_initialize$1 = function $$initialize(command) {
          var $iter = $LostRecord_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $LostRecord_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $LostRecord_initialize$1, false, true), 'initialize', [command], null);
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $LostRecord_initialize$1.$$arity = 1), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "mBbF":
/*!****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Avandner.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Avandner');
        var $nesting = [self].concat($parent_nesting),
            $Avandner_initialize$1,
            $Avandner_eval_game_system_specific_command$2,
            $Avandner_checkRoll$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Avandner");
        Opal.const_set($nesting[0], 'NAME', "黒絢のアヴァンドナー");
        Opal.const_set($nesting[0], 'SORT_KEY', "こつけんのあうあんとなあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・調査判定：nAVm[Cx]\n" + "・命中判定：nAVm*p[+t][Cx]\n" + "[]内は省略可能。\n" + "\n" + "クリティカルヒットの分だけ、自動で振り足し処理を行います。0\n" + "「n」でダイス数を指定。\n" + "「m」で目標値を指定。省略は出来ません。\n" + "「Cx」でクリティカル値を指定。省略時は「1」、最大値は「2」、「0」でクリティカル無し。\n" + "「p」で攻撃力を指定。「*」は「x」でも可。\n" + "「+t」でクリティカルトリガーを指定。省略可能です。\n" + "攻撃力指定で命中判定となり、成功数ではなく、ダメージを結果表示します。\n" + "\n" + "【書式例】\n" + "・5AV3 → 5d10で目標値3。\n" + "・6AV2C0 → 6d10で目標値2。クリティカル無し。\n" + "・4AV3*5 → 4d10で目標値3、攻撃力5の命中判定。\n" + "・7AV2x10 → 7d10で目標値2、攻撃力10の命中判定。\n" + "・8av4*7+10 → 8d10で目標値4、攻撃力7、クリティカルトリガー10の命中判定。\n");
        self.$register_prefix("\\d+AV");
        Opal.def(self, '$initialize', $Avandner_initialize$1 = function $$initialize(command) {
          var $iter = $Avandner_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Avandner_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Avandner_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $Avandner_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Avandner_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              diceCount = nil,
              target = nil,
              damage = nil,
              $ret_or_1 = nil,
              criticalTrigger = nil,
              $ret_or_2 = nil,
              criticalNumber = nil,
              $ret_or_3 = nil;

          if ($truthy(command['$=~'](/(\d+)AV(\d+)((x|\*)(\d+))?(\+(\d+))?(C(\d+))?$/i))) {
            diceCount = $$($nesting, 'Regexp').$last_match(1).$to_i();
            target = $$($nesting, 'Regexp').$last_match(2).$to_i();

            damage = function () {
              if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(5))) {
                return $ret_or_1;
              } else {
                return 0;
              }

              ;
              return nil;
            }().$to_i();

            criticalTrigger = function () {
              if ($truthy($ret_or_2 = $$($nesting, 'Regexp').$last_match(7))) {
                return $ret_or_2;
              } else {
                return 0;
              }

              ;
              return nil;
            }().$to_i();

            criticalNumber = function () {
              if ($truthy($ret_or_3 = $$($nesting, 'Regexp').$last_match(9))) {
                return $ret_or_3;
              } else {
                return 1;
              }

              ;
              return nil;
            }().$to_i();

            if ($truthy($rb_gt(criticalNumber, 3))) {
              criticalNumber = 2;
            }

            ;
            return self.$checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber);
          }

          ;
          return nil;
        }, $Avandner_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$checkRoll', $Avandner_checkRoll$3 = function $$checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber) {
          var $a,
              _$$,
              _$$2,
              self = this,
              totalSuccessCount = nil,
              totalCriticalCount = nil,
              text = nil,
              rollCount = nil,
              diceArray = nil,
              diceText = nil,
              successCount = nil,
              criticalCount = nil,
              result = nil,
              isDamage = nil,
              totalDamage = nil;

          totalSuccessCount = 0;
          totalCriticalCount = 0;
          text = "";
          rollCount = diceCount;

          while ($truthy($rb_gt(rollCount, 0))) {
            diceArray = self.randomizer.$roll_barabara(rollCount, 10).$sort();
            diceText = diceArray.$join(",");
            successCount = $send(diceArray, 'count', [], (_$$ = function $$4(i) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (i == null) {
                i = nil;
              }

              ;
              return $rb_le(i, target);
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));
            criticalCount = $send(diceArray, 'count', [], (_$$2 = function $$5(i) {
              var self = _$$2.$$s == null ? this : _$$2.$$s;

              if (i == null) {
                i = nil;
              }

              ;
              return $rb_le(i, criticalNumber);
            }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
            totalSuccessCount = $rb_plus(totalSuccessCount, successCount);
            totalCriticalCount = $rb_plus(totalCriticalCount, criticalCount);

            if ($truthy(text['$empty?']())) {} else {
              text = $rb_plus(text, "+");
            }

            ;
            text = $rb_plus(text, "" + successCount + "[" + diceText + "]");
            rollCount = criticalCount;
          }

          ;
          result = "";
          isDamage = damage['$!='](0);

          if ($truthy(isDamage)) {
            totalDamage = $rb_plus($rb_times(totalSuccessCount, damage), $rb_times(totalCriticalCount, criticalTrigger));
            result = $rb_plus(result, "" + "(" + diceCount + "D10<=" + target + ") ＞ " + text + " ＞ Hits：" + totalSuccessCount + "*" + damage);

            if ($truthy($rb_gt(criticalTrigger, 0))) {
              result = $rb_plus(result, "" + " + Trigger：" + totalCriticalCount + "*" + criticalTrigger);
            }

            ;
            result = $rb_plus(result, "" + " ＞ " + totalDamage + "ダメージ");
          } else {
            result = $rb_plus(result, "" + "(" + diceCount + "D10<=" + target + ") ＞ " + text + " ＞ 成功数：" + totalSuccessCount);
          }

          ;

          if ($truthy($rb_gt(totalCriticalCount, 0))) {
            result = $rb_plus(result, "" + " / " + totalCriticalCount + "クリティカル");
          }

          ;
          return result;
        }, $Avandner_checkRoll$3.$$arity = 5), nil) && 'checkRoll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "mWil":
/*!*************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/AFF2e.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AFF2e');
        var $nesting = [self].concat($parent_nesting),
            $AFF2e_explicit_sign$1,
            $AFF2e_eval_term$2,
            $AFF2e_parentheses$4,
            $AFF2e_successful_or_failed$5,
            $AFF2e_critical$6,
            $AFF2e_clamp$7,
            $AFF2e_eval_game_system_specific_command$8;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "AFF2e");
        Opal.const_set($nesting[0], 'NAME', "ADVANCED FIGHTING FANTASY 2nd Edition");
        Opal.const_set($nesting[0], 'SORT_KEY', "あとはんすとふあいていんくふあんたしい2");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "対抗なしロール\tFF{目標値}+{補正}\n" + "対抗ロール\tFR{能力値}+{補正}\n" + "武器ロール\tFD[2,3,3,3,3,3,4]+{補正}\n" + "防具ロール\tFD[0,0,0,0,1+1,1+1,2+2]+{補正}\n");
        self.$register_prefix("FF.+", "FR.+", "FD.+");
        Opal.def(self, '$explicit_sign', $AFF2e_explicit_sign$1 = function $$explicit_sign(i) {
          var self = this;
          return self.$format("%+d", i);
        }, $AFF2e_explicit_sign$1.$$arity = 1);
        Opal.def(self, '$eval_term', $AFF2e_eval_term$2 = function $$eval_term(term) {
          var _$$,
              self = this,
              value = nil;

          value = 0;
          $send(term, 'scan', [/[+-]?\d+/], (_$$ = function $$3(fact) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (fact == null) {
              fact = nil;
            }

            ;
            return value = $rb_plus(value, fact.$to_i());
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          return value;
        }, $AFF2e_eval_term$2.$$arity = 1);
        Opal.def(self, '$parentheses', $AFF2e_parentheses$4 = function $$parentheses(str) {
          var self = this;
          return $rb_plus($rb_plus("(", str), ")");
        }, $AFF2e_parentheses$4.$$arity = 1);
        Opal.def(self, '$successful_or_failed', $AFF2e_successful_or_failed$5 = function $$successful_or_failed(total, diff) {
          var self = this,
              $case = nil;
          return function () {
            $case = total;

            if (2['$===']($case)) {
              if ($truthy($rb_le(diff, 1))) {
                return "成功（大成功ではない）";
              } else {
                return "大成功！";
              }
            } else if (12['$===']($case)) {
              if ($truthy($rb_ge(diff, 12))) {
                return "失敗（大失敗ではない）";
              } else {
                return "大失敗！";
              }
            } else {
              if ($truthy($rb_le(total, diff))) {
                return "成功";
              } else {
                return "失敗";
              }
            }
          }();
        }, $AFF2e_successful_or_failed$5.$$arity = 2);
        Opal.def(self, '$critical', $AFF2e_critical$6 = function $$critical(total) {
          var self = this,
              $case = nil;
          return function () {
            $case = total;

            if (2['$===']($case)) {
              return "ファンブル！";
            } else if (12['$===']($case)) {
              return "強打！";
            } else {
              return nil;
            }
          }();
        }, $AFF2e_critical$6.$$arity = 1);
        Opal.def(self, '$clamp', $AFF2e_clamp$7 = function $$clamp(i, min, max) {
          var self = this;

          if ($truthy($rb_lt(i, min))) {
            return min;
          } else if ($truthy($rb_gt(i, max))) {
            return max;
          } else {
            return i;
          }
        }, $AFF2e_clamp$7.$$arity = 3);
        return (Opal.def(self, '$eval_game_system_specific_command', $AFF2e_eval_game_system_specific_command$8 = function $$eval_game_system_specific_command(command) {
          var _$$2,
              self = this,
              $case = nil,
              md = nil,
              term = nil,
              diff = nil,
              dice_command = nil,
              dice_list = nil,
              total = nil,
              dice_str = nil,
              expr = nil,
              succ = nil,
              sequence = nil,
              corr = nil,
              crit = nil,
              damage_slots = nil,
              slot_number = nil,
              damage = nil,
              result = nil;

          $case = command;

          if (/^FF/['$===']($case)) {
            md = $$($nesting, 'Regexp').$last_match();
            term = md.$post_match();
            diff = self.$eval_term(term);
            dice_command = "" + "2D6<=" + diff;
            dice_list = self.randomizer.$roll_barabara(2, 6);
            total = dice_list.$sum();
            dice_str = dice_list.$join(",");
            expr = "" + total + "[" + dice_str + "]";
            succ = self.$successful_or_failed(total, diff);
            sequence = [self.$parentheses(dice_command), expr, succ];
          } else if (/^FR/['$===']($case)) {
            md = $$($nesting, 'Regexp').$last_match();
            term = md.$post_match();
            corr = self.$eval_term(term);
            dice_command = "" + "2D6" + self.$explicit_sign(corr);
            dice_list = self.randomizer.$roll_barabara(2, 6);
            total = dice_list.$sum();
            dice_str = dice_list.$join(",");
            expr = "" + total + "[" + dice_str + "]" + self.$explicit_sign(corr);
            crit = self.$critical(total);
            sequence = [self.$parentheses(dice_command), expr, crit, $rb_plus(total, corr)].$compact();
          } else if (/^FD/['$===']($case)) {
            md = $$($nesting, 'Regexp').$last_match();
            term = md.$post_match();
            md = /^\[(.+)\]/.$match(term);

            if ($truthy(md)) {} else {
              return "ダメージスロットは必須です。";
            }

            ;
            term = md.$post_match();
            damage_slots = $send(md['$[]'](1).$split(","), 'map', [], (_$$2 = function $$9(t) {
              var self = _$$2.$$s == null ? this : _$$2.$$s;

              if (t == null) {
                t = nil;
              }

              ;
              return self.$eval_term(t);
            }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));

            if ($truthy(damage_slots.$size()['$!='](7))) {
              return "ダメージスロットの長さに誤りがあります。";
            }

            ;
            corr = self.$eval_term(term);
            dice_command = "" + "1D6" + self.$explicit_sign(corr);
            total = self.randomizer.$roll_once(6);
            expr = "" + total + self.$explicit_sign(corr);
            slot_number = self.$clamp($rb_plus(total, corr), 1, 7);
            damage = damage_slots['$[]']($rb_minus(slot_number, 1));
            sequence = [self.$parentheses(dice_command), expr, $rb_plus(total, corr), "" + damage + "ダメージ"];
          }

          ;
          result = sequence.$join(" ＞ ");
          return result;
        }, $AFF2e_eval_game_system_specific_command$8.$$arity = 1), nil) && 'eval_game_system_specific_command';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "n/GQ":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Pathfinder.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/DungeonsAndDragons"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DungeonsAndDragons');
        var $nesting = [self].concat($parent_nesting);
        Opal.const_set($nesting[0], 'ID', "DungeonsAndDragons");
        Opal.const_set($nesting[0], 'NAME', "ダンジョンズ＆ドラゴンズ");
        Opal.const_set($nesting[0], 'SORT_KEY', "たんしよんすあんととらこんす");
        return Opal.const_set($nesting[0], 'HELP_MESSAGE', "※このダイスボットは部屋のシステム名表示用となります。\n");
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass;
  self.$require("bcdice/game_system/DungeonsAndDragons");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Pathfinder');
        var $nesting = [self].concat($parent_nesting);
        Opal.const_set($nesting[0], 'ID', "Pathfinder");
        Opal.const_set($nesting[0], 'NAME', "Pathfinder");
        Opal.const_set($nesting[0], 'SORT_KEY', "はすふあいんたあ");
        return Opal.const_set($nesting[0], 'HELP_MESSAGE', "※このダイスボットは部屋のシステム名表示用となります。\n");
      })($nesting[0], $$($nesting, 'DungeonsAndDragons'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "nhlA":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/ShadowRun5.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/ShadowRun4"] = function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ShadowRun4');
        var $nesting = [self].concat($parent_nesting),
            $ShadowRun4_initialize$1,
            $ShadowRun4_grich_text$2;
        Opal.const_set($nesting[0], 'ID', "ShadowRun4");
        Opal.const_set($nesting[0], 'NAME', "シャドウラン 4th Edition");
        Opal.const_set($nesting[0], 'SORT_KEY', "しやとうらん4");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "個数振り足しロール(xRn)の境界値を6にセット、バラバラロール(xBn)の目標値を5以上にセットします。\n" + "BコマンドとRコマンド時に、グリッチの表示を行います。\n");
        Opal.def(self, '$initialize', $ShadowRun4_initialize$1 = function $$initialize(command) {
          var $iter = $ShadowRun4_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $ShadowRun4_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ShadowRun4_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          self.sort_barabara_dice = true;
          self.reroll_dice_reroll_threshold = 6;
          self.default_cmp_op = ">=";
          return self.default_target_number = 5;
        }, $ShadowRun4_initialize$1.$$arity = 1);
        return (Opal.def(self, '$grich_text', $ShadowRun4_grich_text$2 = function $$grich_text(numberSpot1, dice_cnt_total, successCount) {
          var self = this,
              dice_cnt_total_half = nil;
          dice_cnt_total_half = $rb_divide($rb_times(1.0, dice_cnt_total), 2);
          self.$debug("dice_cnt_total_half", dice_cnt_total_half);

          if ($truthy($rb_ge(numberSpot1, dice_cnt_total_half))) {} else {
            return nil;
          }

          ;

          if (successCount['$=='](0)) {
            return "クリティカルグリッチ";
          } else {
            return "グリッチ";
          }

          ;
        }, $ShadowRun4_grich_text$2.$$arity = 3), nil) && 'grich_text';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  self.$require("bcdice/game_system/ShadowRun4");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ShadowRun5');
        var $nesting = [self].concat($parent_nesting),
            $ShadowRun5_initialize$1,
            $ShadowRun5_eval_game_system_specific_command$2,
            $ShadowRun5_grich_text$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "ShadowRun5");
        Opal.const_set($nesting[0], 'NAME', "シャドウラン 5th Edition");
        Opal.const_set($nesting[0], 'SORT_KEY', "しやとうらん5");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "個数振り足しロール(xRn)の境界値を6にセット、バラバラロール(xBn)の目標値を5以上にセットします。\n" + "バラバラロール(xBn)のみ、リミットをセットできます。リミットの指定は(xBn@l)のように指定します。(省略可)\n" + "BコマンドとRコマンド時に、グリッチの表示を行います。\n");
        self.$register_prefix("(\\d+)B6@(\\d+)");
        Opal.def(self, '$initialize', $ShadowRun5_initialize$1 = function $$initialize(command) {
          var $iter = $ShadowRun5_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $ShadowRun5_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ShadowRun5_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          self.sort_barabara_dice = true;
          self.reroll_dice_reroll_threshold = 6;
          self.default_cmp_op = ">=";
          return self.default_target_number = 5;
        }, $ShadowRun5_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $ShadowRun5_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              m = nil,
              b_dice = nil,
              limit = nil,
              output_before_limited = nil,
              output_after_limited = nil,
              before_suc_cnt = nil,
              after_suc_cnt = nil,
              over_suc_cnt = nil,
              output = nil;
          self.$debug("chatch limit prefix");
          m = /(\d+B6)@(\d+)/.$match(command);
          b_dice = m['$[]'](1);
          limit = m['$[]'](2).$to_i();
          output_before_limited = $$$($$$($$($nesting, 'BCDice'), 'CommonCommand'), 'BarabaraDice').$eval(b_dice, self, self.randomizer).$text();
          m = /成功数(\d+)/.$match(output_before_limited);
          output_after_limited = output_before_limited;
          before_suc_cnt = m['$[]'](1).$to_i();

          if ($truthy($rb_gt(before_suc_cnt, limit))) {
            after_suc_cnt = limit;
            over_suc_cnt = $rb_minus(before_suc_cnt, limit);
            output_after_limited = output_before_limited.$gsub(/成功数(\d+)/, "" + "成功数" + after_suc_cnt);
            output_after_limited = $rb_plus(output_after_limited, "" + "(リミット超過" + over_suc_cnt + ")");
          }

          ;
          output = output_after_limited;
          output = output.$gsub("B", "B6");
          output = output.$gsub("6>=5", "" + "[6]Limit[" + limit + "]>=5");
          self.$debug(output);
          return output;
        }, $ShadowRun5_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$grich_text', $ShadowRun5_grich_text$3 = function $$grich_text(numberSpot1, dice_cnt_total, successCount) {
          var self = this,
              dice_cnt_total_half = nil;
          dice_cnt_total_half = $rb_divide(dice_cnt_total.$to_f(), 2);
          self.$debug("dice_cnt_total_half", dice_cnt_total_half);

          if ($truthy($rb_gt(numberSpot1, dice_cnt_total_half))) {} else {
            return nil;
          }

          ;

          if (successCount['$=='](0)) {
            return "クリティカルグリッチ";
          } else {
            return "グリッチ";
          }

          ;
        }, $ShadowRun5_grich_text$3.$$arity = 3), nil) && 'grich_text';
      })($nesting[0], $$($nesting, 'ShadowRun4'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "oXmh":
/*!************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/TokumeiTenkousei.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TokumeiTenkousei');
        var $nesting = [self].concat($parent_nesting),
            $TokumeiTenkousei_initialize$1,
            $TokumeiTenkousei_eval_game_system_specific_command$2,
            $TokumeiTenkousei_same_all_dice$ques$3,
            $TokumeiTenkousei_interim_expr$4,
            $TokumeiTenkousei_epp$6;
        self.$$prototype.randomizer = self.$$prototype.dice_list = nil;
        Opal.const_set($nesting[0], 'ID', "TokumeiTenkousei");
        Opal.const_set($nesting[0], 'NAME', "特命転攻生");
        Opal.const_set($nesting[0], 'SORT_KEY', "とくめいてんこうせい");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定 (xD6+y>=n)\n" + "　ゾロ目での自動振り足し\n" + "　1の出目に応じてEPPの獲得量を表示\n" + "　目標値 \"?\" には未対応\n");
        Opal.def(self, '$initialize', $TokumeiTenkousei_initialize$1 = function $$initialize(command) {
          var $iter = $TokumeiTenkousei_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $TokumeiTenkousei_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $TokumeiTenkousei_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $TokumeiTenkousei_initialize$1.$$arity = 1);
        self.$register_prefix("\\d+D6");
        Opal.def(self, '$eval_game_system_specific_command', $TokumeiTenkousei_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var $a,
              self = this,
              parser = nil,
              cmd = nil,
              times = nil,
              dice_list = nil,
              dice_list_flatten = nil,
              dice_total = nil,
              count_one = nil,
              total = nil,
              result = nil,
              sequence = nil;
          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\d+D6/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          }));
          cmd = parser.$parse(command);

          if ($truthy(cmd)) {} else {
            return nil;
          }

          ;
          times = cmd.$command().$to_i();
          dice_list = self.randomizer.$roll_barabara(times, 6).$sort();
          self.dice_list = [dice_list];

          while ($truthy(self['$same_all_dice?'](dice_list))) {
            dice_list = self.randomizer.$roll_barabara(times, 6).$sort();
            self.dice_list.$push(dice_list);
          }

          ;
          dice_list_flatten = self.dice_list.$flatten();
          dice_total = dice_list_flatten.$sum();
          count_one = dice_list_flatten.$count(1);
          total = $rb_plus(dice_total, cmd.$modify_number());

          result = function () {
            if ($truthy(cmd.$cmp_op())) {
              if ($truthy(total.$send(cmd.$cmp_op(), cmd.$target_number()))) {
                return "成功";
              } else {
                return "失敗";
              }
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          sequence = ["" + "(" + cmd + ")", self.$interim_expr(cmd, dice_total), total.$to_s(), result, self.$epp(count_one)].$compact();
          return sequence.$join(" ＞ ");
        }, $TokumeiTenkousei_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$same_all_dice?', $TokumeiTenkousei_same_all_dice$ques$3 = function $TokumeiTenkousei_same_all_dice$ques$3(dice_list) {
          var self = this,
              $ret_or_1 = nil;

          if ($truthy($ret_or_1 = $rb_gt(dice_list.$size(), 1))) {
            return dice_list.$uniq().$size()['$=='](1);
          } else {
            return $ret_or_1;
          }
        }, $TokumeiTenkousei_same_all_dice$ques$3.$$arity = 1);
        Opal.def(self, '$interim_expr', $TokumeiTenkousei_interim_expr$4 = function $$interim_expr(cmd, dice_total) {
          var _$$,
              self = this,
              $ret_or_2 = nil,
              dice_list = nil,
              modifier = nil;

          if ($truthy(function () {
            if ($truthy($ret_or_2 = self.dice_list.$flatten().$size()['$=='](1))) {
              return cmd.$modify_number()['$=='](0);
            } else {
              return $ret_or_2;
            }

            ;
            return nil;
          }())) {
            return nil;
          }

          ;
          dice_list = $send(self.dice_list, 'map', [], (_$$ = function $$5(ds) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (ds == null) {
              ds = nil;
            }

            ;
            return "" + "[" + ds.$join(",") + "]";
          }, _$$.$$s = self, _$$.$$arity = 1, _$$)).$join("");
          modifier = $$($nesting, 'Format').$modifier(cmd.$modify_number());
          return [dice_total.$to_s(), dice_list, modifier].$join("");
        }, $TokumeiTenkousei_interim_expr$4.$$arity = 2);
        return (Opal.def(self, '$epp', $TokumeiTenkousei_epp$6 = function $$epp(count_one) {
          var self = this;

          if ($truthy($rb_gt(count_one, 0))) {
            return "" + $rb_times(count_one, 5) + "EPP獲得";
          } else {
            return nil;
          }
        }, $TokumeiTenkousei_epp$6.$$arity = 1), nil) && 'epp';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "pecn":
/*!*********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/DiceOfTheDead.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DiceOfTheDead');
        var $nesting = [self].concat($parent_nesting),
            $DiceOfTheDead_initialize$1,
            $DiceOfTheDead_eval_game_system_specific_command$2,
            $DiceOfTheDead_checkInfection$5,
            $DiceOfTheDead_rollZombie$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "DiceOfTheDead");
        Opal.const_set($nesting[0], 'NAME', "ダイス・オブ・ザ・デッド");
        Opal.const_set($nesting[0], 'SORT_KEY', "たいすおふさてつと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・ゾンビ化表　ZMB+x\n" + "（x=オープン中の感染度マスの数。+xは省略可能、省略時は0）\n" + "・感染度表　BIOx\n" + "（xは被弾回数。xは省略可能、省略時は1）\n" + "（上記二つは最初からシークレットダイスで行われます）\n");
        self.$register_prefix("ZMB", "BIO");
        Opal.def(self, '$initialize', $DiceOfTheDead_initialize$1 = function $$initialize(command) {
          var $iter = $DiceOfTheDead_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $DiceOfTheDead_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $DiceOfTheDead_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $DiceOfTheDead_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $DiceOfTheDead_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var _$$,
              _$$2,
              self = this,
              $case = nil,
              roll_times = nil,
              $ret_or_1 = nil,
              value = nil;

          return function () {
            $case = command;

            if (/^BIO(\d+)?$/['$===']($case)) {
              roll_times = function () {
                if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(1))) {
                  return $ret_or_1;
                } else {
                  return 1;
                }

                ;
                return nil;
              }().$to_i();

              return $send($$($nesting, 'Result').$new(), 'tap', [], (_$$ = function $$3(r) {
                var self = _$$.$$s == null ? this : _$$.$$s,
                    $writer = nil;

                if (r == null) {
                  r = nil;
                }

                ;
                $writer = [true];
                $send(r, 'secret=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = [self.$checkInfection(roll_times)];
                $send(r, 'text=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                ;
              }, _$$.$$s = self, _$$.$$arity = 1, _$$));
            } else if (/^ZMB(\+(\d+))?$/['$===']($case)) {
              value = $$($nesting, 'Regexp').$last_match(2).$to_i();
              return $send($$($nesting, 'Result').$new(), 'tap', [], (_$$2 = function $$4(r) {
                var self = _$$2.$$s == null ? this : _$$2.$$s,
                    $writer = nil;

                if (r == null) {
                  r = nil;
                }

                ;
                $writer = [true];
                $send(r, 'secret=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = [self.$rollZombie(value)];
                $send(r, 'text=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                ;
              }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
            } else {
              return nil;
            }
          }();
        }, $DiceOfTheDead_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$checkInfection', $DiceOfTheDead_checkInfection$5 = function $$checkInfection(roll_times) {
          var _$$3,
              self = this,
              result = nil;

          result = "感染度表";
          $send(roll_times, 'times', [], (_$$3 = function $$6() {
            var self = _$$3.$$s == null ? this : _$$3.$$s,
                d1 = nil,
                d2 = nil,
                index1 = nil,
                index2 = nil,
                table = nil;
            if (self.randomizer == null) self.randomizer = nil;
            d1 = self.randomizer.$roll_once(6);
            d2 = self.randomizer.$roll_once(6);
            result = $rb_plus(result, "" + "　＞　出目：" + d1 + "、" + d2 + "　");
            index1 = $rb_minus($rb_divide(d1, 2.0).$ceil(), 1);
            index2 = $rb_minus($rb_divide(d2, 2.0).$ceil(), 1);
            table = [["「右下（【足】＋１）」", "「右中（【足】＋１）」", "「右上（【足】＋１）」"], ["「中下（【腕】＋１）」", "「真中（【腕】＋１）」", "「中上（【腕】＋１）」"], ["「左下（【頭】＋１）」", "「左中（【頭】＋１）」", "「左上（【頭】＋１）」"]];
            return result = $rb_plus(result, table['$[]'](index1)['$[]'](index2));
          }, _$$3.$$s = self, _$$3.$$arity = 0, _$$3));
          return result;
        }, $DiceOfTheDead_checkInfection$5.$$arity = 1);
        return (Opal.def(self, '$rollZombie', $DiceOfTheDead_rollZombie$7 = function $$rollZombie(value) {
          var $a,
              $b,
              self = this,
              d1 = nil,
              d2 = nil,
              diceTotal = nil,
              table = nil,
              minDice = nil,
              maxDice = nil,
              index = nil,
              _number = nil,
              text = nil,
              result = nil;
          d1 = self.randomizer.$roll_once(6);
          d2 = self.randomizer.$roll_once(6);
          diceTotal = $rb_plus($rb_plus(d1, d2), value);
          table = [[5, "５以下：影響なし"], [6, "６：任意の部位を１点回復"], [7, "７：〈アイテム〉武器を１つその場に落とす"], [8, "８：〈アイテム〉便利道具１つをその場に落とす"], [9, "９：〈アイテム〉消耗品１つをその場に落とす"], [10, "１０：腕の傷が広がる。「部位：【腕】」１点ダメージ"], [11, "１１：足の傷が広がる。「部位：【足】」１点ダメージ"], [12, "１２：頭の傷が広がる。「部位：【頭】」１点ダメージ"], [13, "１３：【ゾンビ化表】が新たに適用されるまで「【感染度】＋１マス」の効果を受ける"], [14, "１４：即座に自分以外の味方１人のスロット内の〈アイテム〉１つをランダムに捨てさせる"], [15, "１５：味方１人に素手で攻撃を行う"], [16, "１６：即座に感染度が１上昇する"], [17, "１７：次のターンのみ、すべての【能力値】を２倍にする"], [18, "１８以上：自分以外の味方１人にできる限り全力で攻撃を行う。〈アイテム〉も可能な限り使用する"]];
          minDice = table.$first().$first();
          maxDice = table.$last().$first();
          index = diceTotal;
          index = [minDice, index].$max();
          index = [index, maxDice].$min();
          $b = table.$assoc(index), $a = Opal.to_ary($b), _number = $a[0] == null ? nil : $a[0], text = $a[1] == null ? nil : $a[1], $b;
          result = "" + "ゾンビ化表　＞　出目：" + d1 + "＋" + d2 + "　感染度：" + value + "　合計値：" + diceTotal + "　＞　" + text;
          return result;
        }, $DiceOfTheDead_rollZombie$7.$$arity = 1), nil) && 'rollZombie';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "piUX":
/*!************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/GoldenSkyStories.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GoldenSkyStories');
        var $nesting = [self].concat($parent_nesting),
            $GoldenSkyStories_initialize$1,
            $GoldenSkyStories_eval_game_system_specific_command$2,
            $GoldenSkyStories_getaRoll$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "GoldenSkyStories");
        Opal.const_set($nesting[0], 'NAME', "ゆうやけこやけ");
        Opal.const_set($nesting[0], 'SORT_KEY', "ゆうやけこやけ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "※「ゆうやけこやけ」はダイスロールを使用しないシステムです。\n" + "※このダイスボットは部屋のシステム名表示用となります。\n" + "\n" + "・下駄占い (GETA)\n" + "  あーしたてんきになーれ\n");
        self.$register_prefix("geta");
        Opal.def(self, '$initialize', $GoldenSkyStories_initialize$1 = function $$initialize(command) {
          var $iter = $GoldenSkyStories_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $GoldenSkyStories_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $GoldenSkyStories_initialize$1, false, true), 'initialize', [command], null);
          return self.enabled_upcase_input = false;
        }, $GoldenSkyStories_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $GoldenSkyStories_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil,
              $case = nil;
          self.$debug("eval_game_system_specific_command command", command);
          result = "";
          $case = command;

          if (/geta/i['$===']($case)) {
            result = self.$getaRoll();
          }

          ;

          if ($truthy(result['$empty?']())) {
            return nil;
          }

          ;
          return "" + command + " ＞ " + result;
        }, $GoldenSkyStories_eval_game_system_specific_command$2.$$arity = 1);
        return (Opal.def(self, '$getaRoll', $GoldenSkyStories_getaRoll$3 = function $$getaRoll() {
          var self = this,
              result = nil,
              dice = nil,
              getaString = nil,
              $case = nil;
          result = "";
          dice = self.randomizer.$roll_once(7);
          result = $rb_plus(result, "下駄占い ＞ ");
          getaString = "";
          $case = dice;

          if (1['$===']($case)) {
            getaString = "裏：あめ";
          } else if (2['$===']($case)) {
            getaString = "表：はれ";
          } else if (3['$===']($case)) {
            getaString = "裏：あめ";
          } else if (4['$===']($case)) {
            getaString = "表：はれ";
          } else if (5['$===']($case)) {
            getaString = "裏：あめ";
          } else if (6['$===']($case)) {
            getaString = "表：はれ";
          } else if (7['$===']($case)) {
            getaString = "横：くもり";
          }

          ;
          result = $rb_plus(result, getaString);
          return result;
        }, $GoldenSkyStories_getaRoll$3.$$arity = 0), nil) && 'getaRoll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "qNSf":
/*!**************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/StratoShout_Korean.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/StratoShout"] = function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StratoShout');
        var $nesting = [self].concat($parent_nesting),
            $StratoShout_initialize$1,
            $StratoShout_result_2d6$2,
            $StratoShout_eval_game_system_specific_command$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "StratoShout");
        Opal.const_set($nesting[0], 'NAME', "ストラトシャウト");
        Opal.const_set($nesting[0], 'SORT_KEY', "すとらとしやうと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "\n" + "VOT, GUT, BAT, KEYT, DRT: (ボーカル、ギター、ベース、キーボード、ドラム)トラブル表\n" + "EMO: 感情表\n" + "ATn, RTTn: 特技表(n＝分野。空:ランダム 1:主義 2:身体 3:モチーフ 4:エモーション 5:行動 6:逆境)\n" + "RCT: 分野ランダム表\n" + "SCENE, MACHI, GAKKO, BAND: (汎用、街角、学校、バンド)シーン表 接近シーンで使用\n" + "TENKAI: シーン展開表 奔走シーン 練習シーンで使用\n" + "\n" + "D66入れ替えあり\n");
        Opal.def(self, '$initialize', $StratoShout_initialize$1 = function $$initialize(command) {
          var $iter = $StratoShout_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $StratoShout_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $StratoShout_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $StratoShout_initialize$1.$$arity = 1);
        Opal.def(self, '$result_2d6', $StratoShout_result_2d6$2 = function $$result_2d6(_total, dice_total, _dice_list, cmp_op, _target) {
          var self = this;

          if (cmp_op['$=='](">=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_le(dice_total, 2))) {
            return $$($nesting, 'Result').$fumble(self.$translate("StratoShout.fumble"));
          } else if ($truthy($rb_ge(dice_total, 12))) {
            return $$($nesting, 'Result').$critical(self.$translate("StratoShout.critical"));
          } else {
            return nil;
          }

          ;
        }, $StratoShout_result_2d6$2.$$arity = 5);
        Opal.def(self, '$eval_game_system_specific_command', $StratoShout_eval_game_system_specific_command$3 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $ret_or_1 = nil;

          if ($truthy($ret_or_1 = self.$roll_tables(command, $$$(self.$class(), 'TABLES')))) {
            return $ret_or_1;
          } else {
            return $$$(self.$class(), 'RTT').$roll_command(self.randomizer, command);
          }
        }, $StratoShout_eval_game_system_specific_command$3.$$arity = 1);

        (function (self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting),
              $translate_tables$4,
              $translate_rtt$5;
          self.$private();
          Opal.def(self, '$translate_tables', $translate_tables$4 = function $$translate_tables(locale) {
            var self = this;
            return $hash2(["VOT", "GUT", "BAT", "KEYT", "DRT", "EMO", "SCENE", "MACHI", "GAKKO", "BAND", "TENKAI"], {
              "VOT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.VOT", locale),
              "GUT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.GUT", locale),
              "BAT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.BAT", locale),
              "KEYT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.KEYT", locale),
              "DRT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.DRT", locale),
              "EMO": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.EMO", locale),
              "SCENE": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.SCENE", locale),
              "MACHI": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.MACHI", locale),
              "GAKKO": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.GAKKO", locale),
              "BAND": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StratoShout.table.BAND", locale),
              "TENKAI": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("StratoShout.table.TENKAI", locale)
            });
          }, $translate_tables$4.$$arity = 1);
          return (Opal.def(self, '$translate_rtt', $translate_rtt$5 = function $$translate_rtt(locale) {
            var self = this;
            return $$$($$($nesting, 'DiceTable'), 'SaiFicSkillTable').$from_i18n("StratoShout.RTT", locale, $hash2(["rtt", "rttn"], {
              "rtt": "AT",
              "rttn": ["AT1", "AT2", "AT3", "AT4", "AT5", "AT6"]
            }));
          }, $translate_rtt$5.$$arity = 1), nil) && 'translate_rtt';
        })(Opal.get_singleton_class(self), $nesting);

        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ja_jp"));
        Opal.const_set($nesting[0], 'RTT', self.$translate_rtt("ja_jp"));
        return self.$register_prefix($$($nesting, 'TABLES').$keys(), $$($nesting, 'RTT').$prefixes());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  self.$require("bcdice/game_system/StratoShout");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StratoShout_Korean');
        var $nesting = [self].concat($parent_nesting),
            $StratoShout_Korean_initialize$1;
        Opal.const_set($nesting[0], 'ID', "StratoShout:Korean");
        Opal.const_set($nesting[0], 'NAME', "스트라토 샤우트");
        Opal.const_set($nesting[0], 'SORT_KEY', "国際化:Korean:스트라토 샤우트");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "VOT, GUT, BAT, KEYT, DRT: (보컬, 기타, 베이스, 키보드, 드럼)트러블표\n" + "EMO: 감정표\n" + "RTT[1-6], AT[1-6]: 특기표(공백: 랜덤 1: 주의 2: 신체 3: 모티브 4: 이모션 5: 행동 6: 역경)\n" + "SCENE, MACHI, GAKKO, BAND: (범용, 거리, 학교, 밴드)장면표. 접근 장면에 사용\n" + "TENKAI: 장면 전개표. 분주 장면, 연습 장면에 사용\n" + "[]내는 생략가능　D66는 변동있음\n");
        self.$register_prefix_from_super_class();
        Opal.def(self, '$initialize', $StratoShout_Korean_initialize$1 = function $$initialize(command) {
          var $iter = $StratoShout_Korean_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $StratoShout_Korean_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $StratoShout_Korean_initialize$1, false, true), 'initialize', [command], null);
          return self.locale = "ko_kr";
        }, $StratoShout_Korean_initialize$1.$$arity = 1);
        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ko_kr").$freeze());
        return Opal.const_set($nesting[0], 'RTT', self.$translate_rtt("ko_kr"));
      })($nesting[0], $$($nesting, 'StratoShout'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "uQmK":
/*!**********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/SharedFantasia.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SharedFantasia');
        var $nesting = [self].concat($parent_nesting),
            $SharedFantasia_change_text$1,
            $SharedFantasia_result_2d6$2;
        Opal.const_set($nesting[0], 'ID', "SharedFantasia");
        Opal.const_set($nesting[0], 'NAME', "Shared†Fantasia");
        Opal.const_set($nesting[0], 'SORT_KEY', "しえああとふあんたしあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "2D6の成功判定に 自動成功、自動失敗、致命的失敗、劇的成功 の判定があります。\n" + "\n" + "SF/ST = 2D6のショートカット\n" + "\n" + "例) SF+4>=9 : 2D6して4を足した値が9以上なら成功\n");
        self.$register_prefix("SF", "ST");
        Opal.def(self, '$change_text', $SharedFantasia_change_text$1 = function $$change_text(string) {
          var self = this;
          return string.$gsub(/S[FT]/i, "2D6");
        }, $SharedFantasia_change_text$1.$$arity = 1);
        return (Opal.def(self, '$result_2d6', $SharedFantasia_result_2d6$2 = function $$result_2d6(total, dice_total, _dice_list, cmp_op, target) {
          var self = this,
              critical = nil,
              fumble = nil,
              totalValueBonus = nil;

          if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if ($truthy([">=", ">"]['$include?'](cmp_op))) {} else {
            return nil;
          }

          ;
          critical = false;
          fumble = false;

          if (dice_total['$=='](12)) {
            critical = true;
          } else if (dice_total['$=='](2)) {
            fumble = true;
          }

          ;

          totalValueBonus = function () {
            if (cmp_op['$=='](">=")) {
              return 1;
            } else {
              return 0;
            }

            ;
            return nil;
          }();

          if ($truthy($rb_gt($rb_plus(total, totalValueBonus), target))) {
            if ($truthy(critical)) {
              return $$($nesting, 'Result').$critical("自動成功(劇的成功)");
            } else if ($truthy(fumble)) {
              return $$($nesting, 'Result').$failure("自動失敗");
            } else {
              return $$($nesting, 'Result').$success("成功");
            }
          } else if ($truthy(critical)) {
            return $$($nesting, 'Result').$success("自動成功");
          } else if ($truthy(fumble)) {
            return $$($nesting, 'Result').$fumble("自動失敗(致命的失敗)");
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $SharedFantasia_result_2d6$2.$$arity = 5), nil) && 'result_2d6';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "vMLC":
/*!********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/TherapieSein.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TherapieSein');
        var $nesting = [self].concat($parent_nesting),
            $TherapieSein_eval_game_system_specific_command$1,
            $TherapieSein_checkRoll$3,
            $TherapieSein_getValueText$4;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "TherapieSein");
        Opal.const_set($nesting[0], 'NAME', "セラフィザイン");
        Opal.const_set($nesting[0], 'SORT_KEY', "せらふいさいん");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・一般判定：TS[n][±m][@t]　　[]内のコマンドは省略可能。クリティカル無。\n" + "・戦闘判定：OP[n][±m][@t]　　[]内のコマンドは省略可能。クリティカル有。\n" + "\n" + "「n」で能力値修正などを指定。\n" + "「±m」で達成値への修正値を追加指定。+5+1-3のように、複数指定も可能です。\n" + "「@t」で目標値を指定。省略時は達成値のみ表示、指定時は判定の正否を追加表示。\n" + "\n" + "【書式例】\n" + "・TS → ダイスの合計値を達成値として表示。\n" + "・TS4 → ダイス合計+4を達成値表示。\n" + "・TS4-1 → ダイス合計+4-1（計+3）を達成値表示。\n" + "・TS2+1@10 → ダイス合計+2+1（計+3）の達成値と、判定の成否を表示。\n" + "・OP4+3+1 → ダイス合計+4+3+1（計+8）を達成値＆クリティカル表示。\n" + "・OP3@12 → ダイス合計+3の達成値＆クリティカル、判定の成否を表示。\n");
        self.$register_prefix("TS", "OP");
        Opal.def(self, '$eval_game_system_specific_command', $TherapieSein_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var _$$,
              self = this,
              output = nil,
              $case = nil,
              hasCritical = nil,
              target = nil,
              $ret_or_1 = nil,
              modify = nil,
              $ret_or_2 = nil,
              modifyAddString = nil,
              modify_list = nil;

          output = function () {
            $case = command.$upcase();

            if (/(TS|OP)(\d+)?(([+\-]\d+)*)(@(\d+))?$/i['$===']($case)) {
              hasCritical = $$($nesting, 'Regexp').$last_match(1)['$==']("OP");

              target = function () {
                if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(6))) {
                  return $ret_or_1;
                } else {
                  return 0;
                }

                ;
                return nil;
              }().$to_i();

              modify = function () {
                if ($truthy($ret_or_2 = $$($nesting, 'Regexp').$last_match(2))) {
                  return $ret_or_2;
                } else {
                  return 0;
                }

                ;
                return nil;
              }().$to_i();

              modifyAddString = $$($nesting, 'Regexp').$last_match(3);
              modify_list = modifyAddString.$scan(/[+\-]\d+/);
              $send(modify_list, 'each', [], (_$$ = function $$2(i) {
                var self = _$$.$$s == null ? this : _$$.$$s;

                if (i == null) {
                  i = nil;
                }

                ;
                return modify = $rb_plus(modify, i.$to_i());
              }, _$$.$$s = self, _$$.$$arity = 1, _$$));
              return self.$checkRoll(hasCritical, modify, target);
            } else {
              return nil;
            }
          }();

          return output;
        }, $TherapieSein_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$checkRoll', $TherapieSein_checkRoll$3 = function $$checkRoll(hasCritical, modify, target) {
          var self = this,
              dice_list = nil,
              dice = nil,
              diceText = nil,
              successValue = nil,
              modifyText = nil,
              targetText = nil,
              result = nil,
              $ret_or_3 = nil;
          dice_list = self.randomizer.$roll_barabara(2, 6);
          dice = dice_list.$sum();
          diceText = dice_list.$join(",");
          successValue = $rb_plus(dice, modify);
          modifyText = self.$getValueText(modify);

          targetText = function () {
            if (target['$=='](0)) {
              return "";
            } else {
              return "" + ">=" + target;
            }

            ;
            return nil;
          }();

          result = "" + "(2D6" + modifyText + targetText + ")";
          result = $rb_plus(result, "" + " ＞ " + dice + "(" + diceText + ")" + modifyText);

          if ($truthy(function () {
            if ($truthy($ret_or_3 = hasCritical)) {
              return dice['$=='](12);
            } else {
              return $ret_or_3;
            }

            ;
            return nil;
          }())) {
            result = $rb_plus(result, " ＞ クリティカル！");
            return result;
          }

          ;
          result = $rb_plus(result, "" + " ＞ " + successValue + targetText);

          if (target['$=='](0)) {
            return result;
          }

          ;

          if ($truthy($rb_ge(successValue, target))) {
            result = $rb_plus(result, " ＞ 【成功】");
          } else {
            result = $rb_plus(result, " ＞ 【失敗】");
          }

          ;
          return result;
        }, $TherapieSein_checkRoll$3.$$arity = 3);
        return (Opal.def(self, '$getValueText', $TherapieSein_getValueText$4 = function $$getValueText(value) {
          var self = this;

          if (value['$=='](0)) {
            return "";
          }

          ;

          if ($truthy($rb_lt(value, 0))) {
            return value.$to_s();
          }

          ;
          return "" + "+" + value;
        }, $TherapieSein_getValueText$4.$$arity = 1), nil) && 'getValueText';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "vyzR":
/*!**************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Chill3.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Chill3');
        var $nesting = [self].concat($parent_nesting),
            $Chill3_result_1d100$1;
        Opal.const_set($nesting[0], 'ID', "Chill3");
        Opal.const_set($nesting[0], 'NAME', "Chill 3rd Edition");
        Opal.const_set($nesting[0], 'SORT_KEY', "ちる3");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・1D100で判定時に成否、Botchを判定\n" + "　例）1D100<=50\n" + "　　　Chill3 : (1D100<=50) ＞ 55 ＞ Botch\n");
        return (Opal.def(self, '$result_1d100', $Chill3_result_1d100$1 = function $$result_1d100(total, dice_total, cmp_op, target) {
          var self = this,
              tens = nil,
              ones = nil,
              $ret_or_1 = nil,
              $ret_or_2 = nil;

          if (target['$==']("?")) {
            return nil;
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;
          tens = $rb_divide(dice_total, 10).$to_i()['$%'](10);
          ones = dice_total['$%'](10);

          if (tens['$=='](ones)) {
            if ($truthy(function () {
              if ($truthy($ret_or_1 = $rb_gt(total, target))) {
                return $ret_or_1;
              } else {
                return dice_total['$=='](100);
              }

              ;
              return nil;
            }())) {
              if ($truthy($rb_gt(target, 100))) {
                return $$($nesting, 'Result').$failure("失敗");
              } else {
                return $$($nesting, 'Result').$fumble("Botch");
              }
            } else {
              return $$($nesting, 'Result').$critical("Ｃ成功");
            }
          } else if ($truthy(function () {
            if ($truthy($ret_or_2 = $rb_le(total, target))) {
              return $ret_or_2;
            } else {
              return dice_total['$=='](1);
            }

            ;
            return nil;
          }())) {
            if ($truthy($rb_le(total, $rb_divide(target, 2).$to_i()))) {
              return $$($nesting, 'Result').$success("Ｈ成功");
            } else {
              return $$($nesting, 'Result').$success("Ｌ成功");
            }
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $Chill3_result_1d100$1.$$arity = 4), nil) && 'result_1d100';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "wO+S":
/*!***************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Gorilla.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Gorilla');
        var $nesting = [self].concat($parent_nesting),
            $Gorilla_change_text$1,
            $Gorilla_result_2d6$3;
        Opal.const_set($nesting[0], 'ID', "Gorilla");
        Opal.const_set($nesting[0], 'NAME', "ゴリラTRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "こりらTRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "2D6ロール時のゴリティカル自動判定を行います。\n" + "\n" + "G = 2D6のショートカット\n" + "\n" + "例) G>=7 : 2D6して7以上なら成功\n");
        self.$register_prefix("G");
        Opal.def(self, '$change_text', $Gorilla_change_text$1 = function $$change_text(string) {
          var _$$,
              self = this;

          string = $send(string, 'gsub', [/^(S)?G/i], (_$$ = function $$2() {
            var self = _$$.$$s == null ? this : _$$.$$s;
            return "" + $$($nesting, 'Regexp').$last_match(1) + "2D6";
          }, _$$.$$s = self, _$$.$$arity = 0, _$$));
          return string;
        }, $Gorilla_change_text$1.$$arity = 1);
        return (Opal.def(self, '$result_2d6', $Gorilla_result_2d6$3 = function $$result_2d6(_total, _dice_total, dice_list, _cmp_op, _target) {
          var self = this;

          if (dice_list['$==']([5, 5])) {
            return $$($nesting, 'Result').$critical("ゴリティカル（自動的成功）");
          } else {
            return nil;
          }
        }, $Gorilla_result_2d6$3.$$arity = 5), nil) && 'result_2d6';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "xoi/":
/*!**************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Gundog.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Gundog');
        var $nesting = [self].concat($parent_nesting),
            $Gundog_initialize$1,
            $Gundog_result_1d100$2;
        Opal.const_set($nesting[0], 'ID', "Gundog");
        Opal.const_set($nesting[0], 'NAME', "ガンドッグ");
        Opal.const_set($nesting[0], 'SORT_KEY', "かんとつく");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "失敗、成功、クリティカル、ファンブルとロールの達成値の自動判定を行います。\n" + "nD9ロールも対応。\n");
        Opal.def(self, '$initialize', $Gundog_initialize$1 = function $$initialize(command) {
          var $iter = $Gundog_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Gundog_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Gundog_initialize$1, false, true), 'initialize', [command], null);
          return self.enabled_d9 = true;
        }, $Gundog_initialize$1.$$arity = 1);
        return (Opal.def(self, '$result_1d100', $Gundog_result_1d100$2 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this,
              dig10 = nil,
              dig1 = nil;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_ge(total, 100))) {
            return $$($nesting, 'Result').$fumble("ファンブル");
          } else if ($truthy($rb_le(total, 1))) {
            return $$($nesting, 'Result').$critical("絶対成功(達成値1+SL)");
          } else if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          } else if ($truthy($rb_le(total, target))) {
            dig10 = $rb_divide(total, 10).$to_i();
            dig1 = $rb_minus(total, $rb_times(dig10, 10));

            if ($truthy($rb_ge(dig10, 10))) {
              dig10 = 0;
            }

            ;

            if ($truthy($rb_ge(dig1, 10))) {
              dig1 = 0;
            }

            ;

            if ($truthy($rb_le(dig1, 0))) {
              return $$($nesting, 'Result').$critical("クリティカル(達成値20+SL)");
            } else {
              return $$($nesting, 'Result').$success("" + "成功(達成値" + $rb_plus(dig10, dig1) + "+SL)");
            }

            ;
          } else {
            return $$($nesting, 'Result').$failure("失敗");
          }

          ;
        }, $Gundog_result_1d100$2.$$arity = 4), nil) && 'result_1d100';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "y6W0":
/*!************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/ParanoiaRebooted.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ParanoiaRebooted');
        var $nesting = [self].concat($parent_nesting),
            $ParanoiaRebooted_eval_game_system_specific_command$1,
            $ParanoiaRebooted_generate_roll_results$2,
            $ParanoiaRebooted_get_node_dice_roll$3,
            $ParanoiaRebooted_get_mutant_power_roll$6;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "ParanoiaRebooted");
        Opal.const_set($nesting[0], 'NAME', "パラノイア リブーテッド");
        Opal.const_set($nesting[0], 'SORT_KEY', "はらのいありふうてつと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "※コマンドは入力内容の前方一致で検出しています。\n" + "・通常の判定　NDx\n" + "　x：ノードダイスの数.マイナスも可.\n" + "　ノードダイスの絶対値 + 1個(コンピュータダイス)のダイスがロールされる.\n" + "例）ND2　ND-3\n" + "\n" + "・ミュータントパワー判定　MPx\n" + "  x：ノードダイスの数.\n" + "　ノードダイスの値 + 1個(コンピュータダイス)のダイスがロールされる.\n" + "例）MP2\n");
        self.$register_prefix("ND", "MP");
        Opal.def(self, '$eval_game_system_specific_command', $ParanoiaRebooted_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $case = nil;
          return function () {
            $case = command;

            if (/^ND/i['$===']($case)) {
              return self.$get_node_dice_roll(command);
            } else if (/^MP/i['$===']($case)) {
              return self.$get_mutant_power_roll(command);
            } else {
              return nil;
            }
          }();
        }, $ParanoiaRebooted_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$generate_roll_results', $ParanoiaRebooted_generate_roll_results$2 = function $$generate_roll_results(dices) {
          var self = this,
              computer_dice_message = nil,
              results = nil,
              $writer = nil;
          computer_dice_message = "";
          results = dices.$dup();

          if (results['$[]'](-1).$to_i()['$=='](6)) {
            $writer = [-1, "C"];
            $send(results, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            computer_dice_message = "(Computer)";
          }

          ;
          return [results, computer_dice_message];
        }, $ParanoiaRebooted_generate_roll_results$2.$$arity = 1);
        Opal.def(self, '$get_node_dice_roll', $ParanoiaRebooted_get_node_dice_roll$3 = function $$get_node_dice_roll(command) {
          var _$$,
              _$$2,
              $a,
              $b,
              self = this,
              m = nil,
              parameter_num = nil,
              dice_count = nil,
              dices = nil,
              success_rate = nil,
              results = nil,
              computer_dice_message = nil;

          self.$debug("eval_game_system_specific_command Begin");
          m = /^ND((-)?\d+)/i.$match(command);

          if ($truthy(m)) {} else {
            return "";
          }

          ;
          self.$debug("command", command);
          parameter_num = m['$[]'](1).$to_i();
          dice_count = $rb_plus(parameter_num.$abs(), 1);
          dices = self.randomizer.$roll_barabara(dice_count, 6);
          success_rate = $send(dices, 'count', [], (_$$ = function $$4(dice) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (dice == null) {
              dice = nil;
            }

            ;
            return $rb_ge(dice, 5);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));

          if ($truthy($rb_lt(parameter_num, 0))) {
            success_rate = $rb_minus(success_rate, $send(dices, 'count', [], (_$$2 = function $$5(dice) {
              var self = _$$2.$$s == null ? this : _$$2.$$s;

              if (dice == null) {
                dice = nil;
              }

              ;
              return $rb_lt(dice, 5);
            }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2)));
          }

          ;
          self.$debug(dices);
          $b = self.$generate_roll_results(dices), $a = Opal.to_ary($b), results = $a[0] == null ? nil : $a[0], computer_dice_message = $a[1] == null ? nil : $a[1], $b;
          self.$debug("eval_game_system_specific_command result");
          return "" + "(" + command + ") ＞ [" + results.$join(", ") + "] ＞ 成功度" + success_rate + computer_dice_message;
        }, $ParanoiaRebooted_get_node_dice_roll$3.$$arity = 1);
        return (Opal.def(self, '$get_mutant_power_roll', $ParanoiaRebooted_get_mutant_power_roll$6 = function $$get_mutant_power_roll(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              parameter_num = nil,
              dice_count = nil,
              dices = nil,
              failure_rate = nil,
              message = nil,
              results = nil,
              computer_dice_message = nil;
          self.$debug("eval_game_system_specific_command Begin");
          m = /^MP(\d+)/i.$match(command);

          if ($truthy(m)) {} else {
            return "";
          }

          ;
          self.$debug("command", command);
          parameter_num = m['$[]'](1).$to_i();
          dice_count = $rb_plus(parameter_num.$abs(), 1);
          dices = self.randomizer.$roll_barabara(dice_count, 6);
          failure_rate = dices.$count(1);

          message = function () {
            if (failure_rate['$=='](0)) {
              return "成功";
            } else {
              return "" + "失敗(" + failure_rate + ")";
            }

            ;
            return nil;
          }();

          $b = self.$generate_roll_results(dices), $a = Opal.to_ary($b), results = $a[0] == null ? nil : $a[0], computer_dice_message = $a[1] == null ? nil : $a[1], $b;
          self.$debug(dices);
          self.$debug("eval_game_system_specific_command result");
          return "" + "(" + command + ") ＞ [" + results.$join(", ") + "] ＞ " + message + computer_dice_message;
        }, $ParanoiaRebooted_get_mutant_power_roll$6.$$arity = 1), nil) && 'get_mutant_power_roll';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ }),

/***/ "zzZI":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/ShadowRun.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ShadowRun');
        var $nesting = [self].concat($parent_nesting),
            $ShadowRun_initialize$1;
        Opal.const_set($nesting[0], 'ID', "ShadowRun");
        Opal.const_set($nesting[0], 'NAME', "シャドウラン");
        Opal.const_set($nesting[0], 'SORT_KEY', "しやとうらん");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "上方無限ロール(xUn)の境界値を6にセットします。\n");
        return (Opal.def(self, '$initialize', $ShadowRun_initialize$1 = function $$initialize(command) {
          var $iter = $ShadowRun_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $ShadowRun_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ShadowRun_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          self.sort_barabara_dice = true;
          return self.upper_dice_reroll_threshold = 6;
        }, $ShadowRun_initialize$1.$$arity = 1), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=common.js.map