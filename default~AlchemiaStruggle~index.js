(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~AlchemiaStruggle~index"],{

/***/ "wzDC":
/*!************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/AlchemiaStruggle.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["i18n/backend/fallbacks"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $send2 = Opal.send2,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'I18n');
    var $nesting = [self].concat($parent_nesting);
    Opal.class_variable_set($nesting[0], '@@fallbacks', nil);

    (function (self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting),
          $fallbacks$1,
          $fallbacks$eq$2;
      Opal.def(self, '$fallbacks', $fallbacks$1 = function $$fallbacks() {
        var $a,
            self = this,
            $ret_or_1 = nil,
            $ret_or_2 = nil;
        Opal.class_variable_set($nesting[1], '@@fallbacks', function () {
          if ($truthy($ret_or_1 = ($a = $nesting[1].$$cvars['@@fallbacks']) == null ? nil : $a)) {
            return $ret_or_1;
          } else {
            return $$$($$$($$($nesting, 'I18n'), 'Locale'), 'Fallbacks').$new();
          }

          ;
          return nil;
        }());

        if ($truthy($ret_or_2 = $$($nesting, 'Thread').$current()['$[]']("i18n_fallbacks"))) {
          return $ret_or_2;
        } else {
          return ($a = $nesting[1].$$cvars['@@fallbacks']) == null ? nil : $a;
        }

        ;
      }, $fallbacks$1.$$arity = 0);
      return (Opal.def(self, '$fallbacks=', $fallbacks$eq$2 = function $fallbacks$eq$2(fallbacks) {
        var $a,
            self = this,
            $writer = nil;
        Opal.class_variable_set($nesting[1], '@@fallbacks', function () {
          if ($truthy(fallbacks['$is_a?']($$($nesting, 'Array')))) {
            return $$$($$$($$($nesting, 'I18n'), 'Locale'), 'Fallbacks').$new(fallbacks);
          } else {
            return fallbacks;
          }

          ;
          return nil;
        }());
        $writer = ["i18n_fallbacks", ($a = $nesting[1].$$cvars['@@fallbacks']) == null ? nil : $a];
        $send($$($nesting, 'Thread').$current(), '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
        ;
      }, $fallbacks$eq$2.$$arity = 1), nil) && 'fallbacks=';
    })(Opal.get_singleton_class(self), $nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Backend');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $parent_nesting) {
        var self = $module($base, 'Fallbacks');

        var $nesting = [self].concat($parent_nesting),
            $Fallbacks_translate$3,
            $Fallbacks_extract_non_symbol_default$excl$6,
            _$Fallbacks_exists$ques$,
            $Fallbacks_on_fallback$10;

        Opal.def(self, '$translate', $Fallbacks_translate$3 = function $$translate(locale, key, options) {
          try {
            var _$$2,
                $iter = $Fallbacks_translate$3.$$p,
                $yield = $iter || nil,
                self = this,
                default$ = nil,
                fallback_options = nil,
                $ret_or_3 = nil,
                $zuper = nil,
                $zuper_i = nil,
                $zuper_ii = nil;

            if ($iter) $Fallbacks_translate$3.$$p = null; // Prepare super implicit arguments

            for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }

            if (options == null) {
              options = $$($nesting, 'EMPTY_HASH');
            }

            ;

            if ($truthy(options.$fetch("fallback", true))) {} else {
              return $send2(self, Opal.find_super_dispatcher(self, 'translate', $Fallbacks_translate$3, false, true), 'translate', $zuper, $iter);
            }

            ;

            if ($truthy(options['$[]']("fallback_in_progress"))) {
              return $send2(self, Opal.find_super_dispatcher(self, 'translate', $Fallbacks_translate$3, false, true), 'translate', $zuper, $iter);
            }

            ;

            if ($truthy(options['$[]']("default"))) {
              default$ = self['$extract_non_symbol_default!'](options);
            }

            ;
            fallback_options = options.$merge($hash2(["fallback_in_progress"], {
              "fallback_in_progress": true
            }));
            $send($$($nesting, 'I18n').$fallbacks()['$[]'](locale), 'each', [], (_$$2 = function $$4(fallback) {
              var self = _$$2.$$s == null ? this : _$$2.$$s,
                  _$$;

              if (fallback == null) {
                fallback = nil;
              }

              ;

              try {
                return $send(self, 'catch', ["exception"], (_$$ = function $$5() {
                  var self = _$$.$$s == null ? this : _$$.$$s,
                      result = nil;
                  result = $send2(self, Opal.find_iter_super_dispatcher(self, 'translate', _$$.$$def || _$$2.$$def || $Fallbacks_translate$3, false, false), 'translate', [fallback, key, fallback_options], null);

                  if ($truthy(result['$nil?']())) {
                    return nil;
                  } else {
                    if ($truthy(locale.$to_s()['$!='](fallback.$to_s()))) {
                      self.$on_fallback(locale, fallback, key, options);
                    }

                    ;
                    Opal.ret(result);
                  }

                  ;
                }, _$$.$$s = self, _$$.$$arity = 0, _$$));
              } catch ($err) {
                if (Opal.rescue($err, [$$$($$($nesting, 'I18n'), 'InvalidLocale')])) {
                  try {
                    return nil;
                  } finally {
                    Opal.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }

              ;
            }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));

            if ($truthy(function () {
              if ($truthy($ret_or_3 = options['$key?']("default"))) {
                return options['$[]']("default")['$nil?']();
              } else {
                return $ret_or_3;
              }

              ;
              return nil;
            }())) {
              return nil;
            }

            ;

            if ($truthy(default$)) {
              return $send2(self, Opal.find_super_dispatcher(self, 'translate', $Fallbacks_translate$3, false, true), 'translate', [locale, nil, options.$merge($hash2(["default"], {
                "default": default$
              }))], null);
            }

            ;
            return self.$throw("exception", $$$($$($nesting, 'I18n'), 'MissingTranslation').$new(locale, key, options));
          } catch ($returner) {
            if ($returner === Opal.returner) {
              return $returner.$v;
            }

            throw $returner;
          }
        }, $Fallbacks_translate$3.$$arity = -3);
        Opal.def(self, '$extract_non_symbol_default!', $Fallbacks_extract_non_symbol_default$excl$6 = function $Fallbacks_extract_non_symbol_default$excl$6(options) {
          var _$$3,
              self = this,
              defaults = nil,
              first_non_symbol_default = nil,
              $writer = nil;

          defaults = [options['$[]']("default")].$flatten();
          first_non_symbol_default = $send(defaults, 'detect', [], (_$$3 = function $$7(default$) {
            var self = _$$3.$$s == null ? this : _$$3.$$s;

            if (default$ == null) {
              default$ = nil;
            }

            ;
            return default$['$is_a?']($$($nesting, 'Symbol'))['$!']();
          }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3));

          if ($truthy(first_non_symbol_default)) {
            $writer = ["default", defaults['$[]'](0, defaults.$index(first_non_symbol_default))];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }

          ;
          return first_non_symbol_default;
        }, $Fallbacks_extract_non_symbol_default$excl$6.$$arity = 1);
        Opal.def(self, '$exists?', _$Fallbacks_exists$ques$ = function $Fallbacks_exists$ques$8(locale, key, options) {
          try {
            var _$$4,
                $iter = _$Fallbacks_exists$ques$.$$p,
                $yield = $iter || nil,
                self = this,
                $zuper = nil,
                $zuper_i = nil,
                $zuper_ii = nil;

            if ($iter) _$Fallbacks_exists$ques$.$$p = null; // Prepare super implicit arguments

            for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }

            if (options == null) {
              options = $$($nesting, 'EMPTY_HASH');
            }

            ;

            if ($truthy(options.$fetch("fallback", true))) {} else {
              return $send2(self, Opal.find_super_dispatcher(self, 'exists?', _$Fallbacks_exists$ques$, false, true), 'exists?', $zuper, $iter);
            }

            ;
            $send($$($nesting, 'I18n').$fallbacks()['$[]'](locale), 'each', [], (_$$4 = function $$9(fallback) {
              var self = _$$4.$$s == null ? this : _$$4.$$s;

              if (fallback == null) {
                fallback = nil;
              }

              ;

              try {
                if ($truthy($send2(self, Opal.find_iter_super_dispatcher(self, 'exists?', _$$4.$$def || _$Fallbacks_exists$ques$, false, false), 'exists?', [fallback, key], null))) {
                  Opal.ret(true);
                } else {
                  return nil;
                }
              } catch ($err) {
                if (Opal.rescue($err, [$$$($$($nesting, 'I18n'), 'InvalidLocale')])) {
                  try {
                    return nil;
                  } finally {
                    Opal.pop_exception();
                  }
                } else {
                  throw $err;
                }
              }

              ;
            }, _$$4.$$s = self, _$$4.$$arity = 1, _$$4));
            return false;
          } catch ($returner) {
            if ($returner === Opal.returner) {
              return $returner.$v;
            }

            throw $returner;
          }
        }, _$Fallbacks_exists$ques$.$$arity = -3);
        self.$private();
        Opal.def(self, '$on_fallback', $Fallbacks_on_fallback$10 = function $$on_fallback(_original_locale, _fallback_locale, _key, _optoins) {
          var self = this;
          return nil;
        }, $Fallbacks_on_fallback$10.$$arity = 4);
      })($nesting[0], $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/randomizer"] = function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Randomizer');
      var $nesting = [self].concat($parent_nesting),
          $Randomizer_initialize$1,
          $Randomizer_roll_barabara$2,
          $Randomizer_roll_sum$4,
          $Randomizer_roll_once$5,
          $Randomizer_roll_index$6,
          $Randomizer_roll_tens_d10$7,
          $Randomizer_roll_d9$8,
          $Randomizer_roll_d66$9,
          $Randomizer_rand_inner$11,
          $Randomizer_random$12,
          $Randomizer_push_to_detail$13;
      self.$$prototype.rand_results = self.$$prototype.detailed_rand_results = nil;
      Opal.const_set($nesting[0], 'UPPER_LIMIT_DICE_TIMES', 200);
      Opal.const_set($nesting[0], 'UPPER_LIMIT_DICE_SIDES', 1000);
      Opal.const_set($nesting[0], 'UPPER_LIMIT_RANDS', 10000);
      Opal.def(self, '$initialize', $Randomizer_initialize$1 = function $$initialize() {
        var self = this;
        self.rand_results = [];
        return self.detailed_rand_results = [];
      }, $Randomizer_initialize$1.$$arity = 0);
      self.$attr_reader("rand_results");
      self.$attr_reader("detailed_rand_results");
      Opal.const_set($nesting[0], 'DetailedRandResult', $$($nesting, 'Struct').$new("kind", "sides", "value"));
      Opal.def(self, '$roll_barabara', $Randomizer_roll_barabara$2 = function $$roll_barabara(times, sides) {
        var _$$5,
            self = this,
            $ret_or_1 = nil;

        if ($truthy($rb_gt($rb_plus(self.rand_results.$size(), times), $$($nesting, 'UPPER_LIMIT_RANDS')))) {
          self.$raise($$($nesting, 'TooManyRandsError'));
        }

        ;

        if ($truthy(function () {
          if ($truthy($ret_or_1 = $rb_le(times, 0))) {
            return $ret_or_1;
          } else {
            return $rb_gt(times, $$($nesting, 'UPPER_LIMIT_DICE_TIMES'));
          }

          ;
          return nil;
        }())) {
          return [];
        }

        ;
        return $send($$($nesting, 'Array'), 'new', [times], (_$$5 = function $$3() {
          var self = _$$5.$$s == null ? this : _$$5.$$s;
          return self.$roll_once(sides);
        }, _$$5.$$s = self, _$$5.$$arity = 0, _$$5));
      }, $Randomizer_roll_barabara$2.$$arity = 2);
      Opal.def(self, '$roll_sum', $Randomizer_roll_sum$4 = function $$roll_sum(times, sides) {
        var self = this;
        return self.$roll_barabara(times, sides).$sum();
      }, $Randomizer_roll_sum$4.$$arity = 2);
      Opal.def(self, '$roll_once', $Randomizer_roll_once$5 = function $$roll_once(sides) {
        var self = this,
            $ret_or_2 = nil,
            dice = nil;

        if ($truthy(function () {
          if ($truthy($ret_or_2 = $rb_le(sides, 0))) {
            return $ret_or_2;
          } else {
            return $rb_gt(sides, $$($nesting, 'UPPER_LIMIT_DICE_SIDES'));
          }

          ;
          return nil;
        }())) {
          return 0;
        }

        ;
        dice = self.$rand_inner(sides);
        self.$push_to_detail("normal", sides, dice);
        return dice;
      }, $Randomizer_roll_once$5.$$arity = 1);
      Opal.def(self, '$roll_index', $Randomizer_roll_index$6 = function $$roll_index(sides) {
        var self = this;
        return $rb_minus(self.$roll_once(sides), 1);
      }, $Randomizer_roll_index$6.$$arity = 1);
      Opal.def(self, '$roll_tens_d10', $Randomizer_roll_tens_d10$7 = function $$roll_tens_d10() {
        var self = this,
            dice = nil,
            ret = nil;
        dice = self.$rand_inner(10);

        if (dice['$=='](10)) {
          dice = 0;
        }

        ;
        ret = $rb_times(dice, 10);
        self.$push_to_detail("tens_d10", 10, ret);
        return ret;
      }, $Randomizer_roll_tens_d10$7.$$arity = 0);
      Opal.def(self, '$roll_d9', $Randomizer_roll_d9$8 = function $$roll_d9() {
        var self = this,
            dice = nil;
        dice = $rb_minus(self.$rand_inner(10), 1);
        self.$push_to_detail("d9", 10, dice);
        return dice;
      }, $Randomizer_roll_d9$8.$$arity = 0);
      Opal.def(self, '$roll_d66', $Randomizer_roll_d66$9 = function $$roll_d66(sort_type) {
        var _$$6,
            self = this,
            dice_list = nil,
            $case = nil;

        dice_list = $send($$($nesting, 'Array'), 'new', [2], (_$$6 = function $$10() {
          var self = _$$6.$$s == null ? this : _$$6.$$s;
          return self.$roll_once(6);
        }, _$$6.$$s = self, _$$6.$$arity = 0, _$$6));
        $case = sort_type;

        if ($$$($$($nesting, 'D66SortType'), 'ASC')['$===']($case)) {
          dice_list['$sort!']();
        } else if ($$$($$($nesting, 'D66SortType'), 'DESC')['$===']($case)) {
          dice_list['$sort!']()['$reverse!']();
        }

        ;
        return $rb_plus($rb_times(dice_list['$[]'](0), 10), dice_list['$[]'](1));
      }, $Randomizer_roll_d66$9.$$arity = 1);
      self.$private();
      Opal.def(self, '$rand_inner', $Randomizer_rand_inner$11 = function $$rand_inner(sides) {
        var self = this,
            dice = nil;

        if ($truthy($rb_ge(self.rand_results.$size(), $$($nesting, 'UPPER_LIMIT_RANDS')))) {
          self.$raise($$($nesting, 'TooManyRandsError'));
        }

        ;
        dice = self.$random(sides);
        self.rand_results['$<<']([dice, sides]);
        return dice;
      }, $Randomizer_rand_inner$11.$$arity = 1);
      Opal.def(self, '$random', $Randomizer_random$12 = function $$random(sides) {
        var self = this;
        return $rb_plus($$($nesting, 'Kernel').$rand(sides), 1);
      }, $Randomizer_random$12.$$arity = 1);
      return (Opal.def(self, '$push_to_detail', $Randomizer_push_to_detail$13 = function $$push_to_detail(kind, sides, value) {
        var self = this,
            detail = nil;
        detail = $$($nesting, 'DetailedRandResult').$new(kind, sides, value);
        return self.detailed_rand_results.$push(detail);
      }, $Randomizer_push_to_detail$13.$$arity = 3), nil) && 'push_to_detail';
    })($nesting[0], null, $nesting);

    (function ($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TooManyRandsError');
      var $nesting = [self].concat($parent_nesting);
      return nil;
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/roll_result"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RollResult');
        var $nesting = [self].concat($parent_nesting),
            $RollResult_initialize$1,
            $RollResult_to_s$2,
            $RollResult_last_body$3,
            $RollResult_empty$ques$4;
        self.$$prototype.table_name = self.$$prototype.value = self.$$prototype.body = nil;
        Opal.def(self, '$initialize', $RollResult_initialize$1 = function $$initialize(table_name, value, body) {
          var self = this;
          self.table_name = table_name;
          self.value = value;
          return self.body = body;
        }, $RollResult_initialize$1.$$arity = 3);
        self.$attr_reader("table_name");
        self.$attr_reader("value");
        self.$attr_reader("body");
        Opal.def(self, '$to_s', $RollResult_to_s$2 = function $$to_s() {
          var self = this;
          return "" + self.table_name + "(" + self.value + ") ＞ " + self.body;
        }, $RollResult_to_s$2.$$arity = 0);
        Opal.def(self, '$last_body', $RollResult_last_body$3 = function $$last_body() {
          var self = this;

          if ($truthy(self.body['$is_a?']($$($nesting, 'RollResult')))) {
            return self.body.$last_body();
          } else {
            return self.body;
          }
        }, $RollResult_last_body$3.$$arity = 0);
        return (Opal.def(self, '$empty?', $RollResult_empty$ques$4 = function $RollResult_empty$ques$4() {
          var self = this;
          return false;
        }, $RollResult_empty$ques$4.$$arity = 0), nil) && 'empty?';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/chain_table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ChainTable');
        var $nesting = [self].concat($parent_nesting),
            $ChainTable_initialize$1,
            $ChainTable_roll$2;
        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.items = self.$$prototype.name = nil;
        Opal.def(self, '$initialize', $ChainTable_initialize$1 = function $$initialize(name, type, items) {
          var self = this,
              m = nil;
          self.name = name;
          self.items = items.$freeze();
          m = /(\d+)D(\d+)/i.$match(type);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
          }

          ;
          self.times = m['$[]'](1).$to_i();
          return self.sides = m['$[]'](2).$to_i();
        }, $ChainTable_initialize$1.$$arity = 3);
        return (Opal.def(self, '$roll', $ChainTable_roll$2 = function $$roll(randomizer) {
          var self = this,
              value = nil,
              index = nil,
              chosen = nil;
          value = randomizer.$roll_sum(self.times, self.sides);
          index = $rb_minus(value, self.times);
          chosen = self.items['$[]'](index);

          if ($truthy(chosen['$respond_to?']("roll"))) {
            chosen = chosen.$roll(randomizer);
          }

          ;
          return $$($nesting, 'RollResult').$new(self.name, value, chosen);
        }, $ChainTable_roll$2.$$arity = 1), nil) && 'roll';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_grid_table"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66GridTable');
        var $nesting = [self].concat($parent_nesting),
            $D66GridTable_from_i18n$1,
            $D66GridTable_initialize$2,
            $D66GridTable_roll$3;
        self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $D66GridTable_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale", "raise"], {
            "locale": locale,
            "raise": true
          }));
          return self.$new(table['$[]']("name"), table['$[]']("items"));
        }, $D66GridTable_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $D66GridTable_initialize$2 = function $$initialize(name, items) {
          var self = this;
          self.name = name;
          return self.items = items.$freeze();
        }, $D66GridTable_initialize$2.$$arity = 2);
        return (Opal.def(self, '$roll', $D66GridTable_roll$3 = function $$roll(randomizer) {
          var self = this,
              dice1 = nil,
              dice2 = nil,
              value = nil,
              index1 = nil,
              index2 = nil;
          dice1 = randomizer.$roll_once(6);
          dice2 = randomizer.$roll_once(6);
          value = $rb_plus($rb_times(dice1, 10), dice2);
          index1 = $rb_minus(dice1, 1);
          index2 = $rb_minus(dice2, 1);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index1)['$[]'](index2));
        }, $D66GridTable_roll$3.$$arity = 1), nil) && 'roll';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_half_grid_table"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2;
  self.$require("bcdice/dice_table/d66_grid_table");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66HalfGridTable');
        var $nesting = [self].concat($parent_nesting),
            $D66HalfGridTable_from_i18n$1,
            $D66HalfGridTable_initialize$2;
        Opal.defs(self, '$from_i18n', $D66HalfGridTable_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale", "raise"], {
            "locale": locale,
            "raise": true
          }));
          return self.$new(table['$[]']("name"), table['$[]']("items_1_2_3"), table['$[]']("items_4_5_6"));
        }, $D66HalfGridTable_from_i18n$1.$$arity = 2);
        return (Opal.def(self, '$initialize', $D66HalfGridTable_initialize$2 = function $$initialize(name, items_1_2_3, items_4_5_6) {
          var self = this;
          self.name = name;
          return self.items = [items_1_2_3, items_1_2_3, items_1_2_3, items_4_5_6, items_4_5_6, items_4_5_6].$freeze();
        }, $D66HalfGridTable_initialize$2.$$arity = 3), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'D66GridTable'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_one_third_table"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2;
  self.$require("bcdice/dice_table/d66_grid_table");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66OneThirdTable');
        var $nesting = [self].concat($parent_nesting),
            $D66OneThirdTable_from_i18n$1,
            $D66OneThirdTable_initialize$2;
        Opal.defs(self, '$from_i18n', $D66OneThirdTable_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale", "raise"], {
            "locale": locale,
            "raise": true
          }));
          return self.$new(table['$[]']("name"), table['$[]']("items_1_2"), table['$[]']("items_3_4"), table['$[]']("items_5_6"));
        }, $D66OneThirdTable_from_i18n$1.$$arity = 2);
        return (Opal.def(self, '$initialize', $D66OneThirdTable_initialize$2 = function $$initialize(name, items_1_2, items_3_4, items_5_6) {
          var self = this;
          self.name = name;
          return self.items = [items_1_2, items_1_2, items_3_4, items_3_4, items_5_6, items_5_6].$freeze();
        }, $D66OneThirdTable_initialize$2.$$arity = 4), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'D66GridTable'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_parity_table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66ParityTable');
        var $nesting = [self].concat($parent_nesting),
            $D66ParityTable_initialize$1,
            $D66ParityTable_roll$2;
        self.$$prototype.odd = self.$$prototype.even = self.$$prototype.name = nil;
        Opal.def(self, '$initialize', $D66ParityTable_initialize$1 = function $$initialize(name, odd, even) {
          var self = this;
          self.name = name;
          self.odd = odd.$freeze();
          return self.even = even.$freeze();
        }, $D66ParityTable_initialize$1.$$arity = 3);
        return (Opal.def(self, '$roll', $D66ParityTable_roll$2 = function $$roll(randomizer) {
          var self = this,
              dice1 = nil,
              dice2 = nil,
              second_table = nil,
              result = nil,
              key = nil;
          dice1 = randomizer.$roll_once(6);
          dice2 = randomizer.$roll_once(6);

          if ($truthy(dice1['$odd?']())) {
            second_table = self.odd;
          } else {
            second_table = self.even;
          }

          ;
          result = second_table['$[]']($rb_minus(dice2, 1));
          key = $rb_plus($rb_times(dice1, 10), dice2);
          return $$($nesting, 'RollResult').$new(self.name, key, result);
        }, $D66ParityTable_roll$2.$$arity = 1), nil) && 'roll';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_range_table"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66RangeTable');
        var $nesting = [self].concat($parent_nesting),
            $D66RangeTable_initialize$1,
            $D66RangeTable_roll$2;
        self.$$prototype.items = self.$$prototype.name = nil;
        Opal.def(self, '$initialize', $D66RangeTable_initialize$1 = function $$initialize(name, items) {
          var self = this;
          self.name = name;
          return self.items = items.$freeze();
        }, $D66RangeTable_initialize$1.$$arity = 2);
        return (Opal.def(self, '$roll', $D66RangeTable_roll$2 = function $$roll(randomizer) {
          var _$$7,
              self = this,
              dice1 = nil,
              dice2 = nil,
              key = nil,
              chosen = nil;

          dice1 = randomizer.$roll_once(6);
          dice2 = randomizer.$roll_once(6);
          key = $rb_plus($rb_times(dice1, 10), dice2);
          chosen = $send(self.items, 'find', [], (_$$7 = function $$3(row) {
            var self = _$$7.$$s == null ? this : _$$7.$$s;

            if (row == null) {
              row = nil;
            }

            ;
            return row['$[]'](0)['$include?'](key);
          }, _$$7.$$s = self, _$$7.$$arity = 1, _$$7));
          return $$($nesting, 'RollResult').$new(self.name, key, chosen['$[]'](1));
        }, $D66RangeTable_roll$2.$$arity = 1), nil) && 'roll';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_table"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66Table');
        var $nesting = [self].concat($parent_nesting),
            $D66Table_from_i18n$1,
            $D66Table_initialize$2,
            $D66Table_roll$3;
        self.$$prototype.sort_type = self.$$prototype.items = self.$$prototype.name = nil;
        Opal.defs(self, '$from_i18n', $D66Table_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil,
              sort_type = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale"], {
            "locale": locale
          }));
          sort_type = $$($nesting, 'D66SortType').$const_get(table['$[]']("d66_sort_type"));
          return self.$new(table['$[]']("name"), sort_type, table['$[]']("items"));
        }, $D66Table_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $D66Table_initialize$2 = function $$initialize(name, sort_type, items) {
          var self = this;
          self.name = name;
          self.sort_type = sort_type;
          return self.items = items.$freeze();
        }, $D66Table_initialize$2.$$arity = 3);
        return (Opal.def(self, '$roll', $D66Table_roll$3 = function $$roll(randomizer) {
          var self = this,
              dice = nil,
              $case = nil,
              key = nil,
              chosen = nil,
              $ret_or_1 = nil;
          dice = randomizer.$roll_barabara(2, 6);
          $case = self.sort_type;

          if ($$$($$($nesting, 'D66SortType'), 'ASC')['$===']($case)) {
            dice['$sort!']();
          } else if ($$$($$($nesting, 'D66SortType'), 'DESC')['$===']($case)) {
            dice['$sort!']()['$reverse!']();
          }

          ;
          key = $rb_plus($rb_times(dice['$[]'](0), 10), dice['$[]'](1));

          chosen = function () {
            if ($truthy($ret_or_1 = self.items['$[]'](key))) {
              return $ret_or_1;
            } else {
              return self.items['$[]'](key.$to_s());
            }

            ;
            return nil;
          }();

          if ($truthy(chosen['$respond_to?']("roll"))) {
            chosen = chosen.$roll(randomizer);
          }

          ;
          return $$($nesting, 'RollResult').$new(self.name, key, chosen);
        }, $D66Table_roll$3.$$arity = 1), nil) && 'roll';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/range_table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeTable');

        var $nesting = [self].concat($parent_nesting),
            _$RangeTable$,
            $RangeTable_initialize$3,
            $RangeTable_fetch$4,
            $RangeTable_roll$6,
            $RangeTable_store$7,
            $RangeTable_coerce_to_int_range$11,
            $RangeTable_assert_min_sum_is_covered$12,
            $RangeTable_assert_max_sum_is_covered$13,
            $RangeTable_assert_no_gap_or_overlap_in_ranges$14;

        self.$$prototype.name = self.$$prototype.items = self.$$prototype.num_of_dice = self.$$prototype.num_of_sides = self.$$prototype.formatter = nil;
        Opal.const_set($nesting[0], 'RollResult', $send($$($nesting, 'Struct'), 'new', ["sum", "values", "content", "formatted"], (_$RangeTable$ = function $RangeTable$1() {
          var self = _$RangeTable$.$$s == null ? this : _$RangeTable$.$$s;
          return self.$alias_method("to_s", "formatted");
        }, _$RangeTable$.$$s = self, _$RangeTable$.$$arity = 0, _$RangeTable$)));
        Opal.const_set($nesting[0], 'Item', $$($nesting, 'Struct').$new("range", "content"));
        Opal.const_set($nesting[0], 'DICE_ROLL_METHOD_RE', /^(\d+)D(\d+)$/i.$freeze());
        Opal.const_set($nesting[0], 'DEFAULT_FORMATTER', $send(self, 'lambda', [], ($$2 = function (_$$8) {
          function $$2(_x, _x2) {
            return _$$8.apply(this, arguments);
          }

          $$2.toString = function () {
            return _$$8.toString();
          };

          return $$2;
        }(function (table, result) {
          var self = $$2.$$s == null ? this : $$2.$$s;

          if (table == null) {
            table = nil;
          }

          ;

          if (result == null) {
            result = nil;
          }

          ;
          return "" + table.$name() + "(" + result.$sum() + ") ＞ " + result.$content();
        }), $$2.$$s = self, $$2.$$arity = 2, $$2)));
        self.$attr_reader("name");
        self.$attr_reader("num_of_dice");
        self.$attr_reader("num_of_sides");
        Opal.def(self, '$initialize', $RangeTable_initialize$3 = function $$initialize(name, dice_roll_method, items) {
          var $iter = $RangeTable_initialize$3.$$p,
              formatter = $iter || nil,
              self = this,
              $ret_or_1 = nil,
              m = nil;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          ;
          self.name = name.$freeze();

          self.formatter = function () {
            if ($truthy($ret_or_1 = formatter)) {
              return $ret_or_1;
            } else {
              return $$($nesting, 'DEFAULT_FORMATTER');
            }

            ;
            return nil;
          }();

          m = $$($nesting, 'DICE_ROLL_METHOD_RE').$match(dice_roll_method);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + self.name + ": invalid dice roll method: " + dice_roll_method);
          }

          ;
          self.num_of_dice = m['$[]'](1).$to_i();
          self.num_of_sides = m['$[]'](2).$to_i();
          return self.$store(items);
        }, $RangeTable_initialize$3.$$arity = 3);
        Opal.def(self, '$fetch', $RangeTable_fetch$4 = function $$fetch(value) {
          var _$$9,
              self = this,
              item = nil;

          item = $send(self.items, 'find', [], (_$$9 = function $$5(i) {
            var self = _$$9.$$s == null ? this : _$$9.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return i.$range()['$include?'](value);
          }, _$$9.$$s = self, _$$9.$$arity = 1, _$$9));

          if ($truthy(item)) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": value is out of range: " + value);
          }

          ;
          return item;
        }, $RangeTable_fetch$4.$$arity = 1);
        Opal.def(self, '$roll', $RangeTable_roll$6 = function $$roll(randomizer) {
          var self = this,
              values = nil,
              sum = nil,
              result = nil,
              $writer = nil;
          values = randomizer.$roll_barabara(self.num_of_dice, self.num_of_sides);
          sum = values.$sum();
          result = $$($nesting, 'RollResult').$new(sum, values, self.$fetch(sum).$content());
          $writer = [self.formatter['$[]'](self, result)];
          $send(result, 'formatted=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $RangeTable_roll$6.$$arity = 1);
        self.$private();
        Opal.def(self, '$store', $RangeTable_store$7 = function $$store(items) {
          var _$$10,
              _$$11,
              _$$12,
              self = this,
              items_with_range = nil,
              sorted_items = nil;

          items_with_range = $send(items, 'map', [], (_$$10 = function $$8(r, c) {
            var self = _$$10.$$s == null ? this : _$$10.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (c == null) {
              c = nil;
            }

            ;
            return [self.$coerce_to_int_range(r), c];
          }, _$$10.$$s = self, _$$10.$$arity = 2, _$$10));
          sorted_items = $send(items_with_range, 'sort_by', [], (_$$11 = function $$9(r, _) {
            var self = _$$11.$$s == null ? this : _$$11.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (_ == null) {
              _ = nil;
            }

            ;
            return r.$min();
          }, _$$11.$$s = self, _$$11.$$arity = 2, _$$11));
          self.$assert_min_sum_is_covered(sorted_items);
          self.$assert_max_sum_is_covered(sorted_items);
          self.$assert_no_gap_or_overlap_in_ranges(sorted_items);
          self.items = $send(sorted_items, 'map', [], (_$$12 = function $$10(range, content) {
            var self = _$$12.$$s == null ? this : _$$12.$$s;

            if (range == null) {
              range = nil;
            }

            ;

            if (content == null) {
              content = nil;
            }

            ;
            return $$($nesting, 'Item').$new(range, content.$freeze()).$freeze();
          }, _$$12.$$s = self, _$$12.$$arity = 2, _$$12)).$freeze();
          return self;
        }, $RangeTable_store$7.$$arity = 1);
        Opal.def(self, '$coerce_to_int_range', $RangeTable_coerce_to_int_range$11 = function $$coerce_to_int_range(x) {
          var self = this,
              $case = nil,
              $ret_or_2 = nil;
          $case = x;

          if ($$($nesting, 'Integer')['$===']($case)) {
            return $$($nesting, 'Range').$new(x, x);
          } else if ($$($nesting, 'Range')['$===']($case)) {
            if ($truthy(function () {
              if ($truthy($ret_or_2 = x.$begin()['$is_a?']($$($nesting, 'Integer')))) {
                return x.$end()['$is_a?']($$($nesting, 'Integer'));
              } else {
                return $ret_or_2;
              }

              ;
              return nil;
            }())) {
              return x;
            }
          }

          ;
          return self.$raise($$($nesting, 'TypeError'), "" + self.name + ": " + x + " (" + x.$class() + ") must be an Integer or a Range with Integers ");
        }, $RangeTable_coerce_to_int_range$11.$$arity = 1);
        Opal.def(self, '$assert_min_sum_is_covered', $RangeTable_assert_min_sum_is_covered$12 = function $$assert_min_sum_is_covered(sorted_items) {
          var self = this,
              min_sum = nil,
              range = nil;
          min_sum = self.num_of_dice;
          range = sorted_items.$first()['$[]'](0);

          if ($truthy(range['$include?'](min_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": min value (" + min_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_min_sum_is_covered$12.$$arity = 1);
        Opal.def(self, '$assert_max_sum_is_covered', $RangeTable_assert_max_sum_is_covered$13 = function $$assert_max_sum_is_covered(sorted_items) {
          var self = this,
              max_sum = nil,
              range = nil;
          max_sum = $rb_times(self.num_of_dice, self.num_of_sides);
          range = sorted_items.$last()['$[]'](0);

          if ($truthy(range['$include?'](max_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": max value (" + max_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_max_sum_is_covered$13.$$arity = 1);
        return (Opal.def(self, '$assert_no_gap_or_overlap_in_ranges', $RangeTable_assert_no_gap_or_overlap_in_ranges$14 = function $$assert_no_gap_or_overlap_in_ranges(sorted_items) {
          var _$$13,
              self = this;

          $send(sorted_items, 'each_cons', [2], (_$$13 = function $$15(i1, i2) {
            var self = _$$13.$$s == null ? this : _$$13.$$s,
                r1 = nil,
                r2 = nil,
                max1 = nil,
                next_of_max1 = nil;
            if (self.name == null) self.name = nil;

            if (i1 == null) {
              i1 = nil;
            }

            ;

            if (i2 == null) {
              i2 = nil;
            }

            ;
            r1 = i1['$[]'](0);
            r2 = i2['$[]'](0);
            max1 = r1.$max();
            next_of_max1 = $rb_plus(max1, 1);

            if ($truthy(r2['$include?'](max1))) {
              self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range overlap: " + r1 + " and " + r2);
            }

            ;

            if ($truthy(r2['$include?'](next_of_max1))) {
              return nil;
            } else {
              return self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range gap: " + r1 + " and " + r2);
            }

            ;
          }, _$$13.$$s = self, _$$13.$$arity = 2, _$$13));
          return self;
        }, $RangeTable_assert_no_gap_or_overlap_in_ranges$14.$$arity = 1), nil) && 'assert_no_gap_or_overlap_in_ranges';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/sai_fic_skill_table/category"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SaiFicSkillTable');
        var $nesting = [self].concat($parent_nesting);
        return function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Category');
          var $nesting = [self].concat($parent_nesting),
              $Category_initialize$1,
              $Category_roll$3,
              $Category_to_s$4;
          self.$$prototype.name = nil;
          Opal.def(self, '$initialize', $Category_initialize$1 = function $$initialize(name, skills, dice, s_format) {
            var $$2,
                self = this;
            self.name = name;
            self.skills = $send(skills.$map(), 'with_index', [2], ($$2 = function (_$$14) {
              function $$2(_x3, _x4) {
                return _$$14.apply(this, arguments);
              }

              $$2.toString = function () {
                return _$$14.toString();
              };

              return $$2;
            }(function (s, index) {
              var self = $$2.$$s == null ? this : $$2.$$s;

              if (s == null) {
                s = nil;
              }

              ;

              if (index == null) {
                index = nil;
              }

              ;
              return $$$($$($nesting, 'SaiFicSkillTable'), 'Skill').$new(name, s, dice, index, s_format);
            }), $$2.$$s = self, $$2.$$arity = 2, $$2));
            return self.dice = dice;
          }, $Category_initialize$1.$$arity = 4);
          Opal.def(self, '$roll', $Category_roll$3 = function $$roll(randomizer) {
            var self = this;
            return self.$skills()['$[]']($rb_minus(randomizer.$roll_sum(2, 6), 2));
          }, $Category_roll$3.$$arity = 1);
          Opal.def(self, '$to_s', $Category_to_s$4 = function $$to_s() {
            var self = this;
            return self.name;
          }, $Category_to_s$4.$$arity = 0);
          return self.$attr_reader("name", "dice", "skills");
        }($nesting[0], null, $nesting);
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/sai_fic_skill_table/skill"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SaiFicSkillTable');
        var $nesting = [self].concat($parent_nesting);
        return function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Skill');
          var $nesting = [self].concat($parent_nesting),
              $Skill_initialize$1,
              $Skill_to_s$2;
          self.$$prototype.s_format = self.$$prototype.category_dice = self.$$prototype.row_dice = self.$$prototype.category_name = self.$$prototype.name = nil;
          Opal.def(self, '$initialize', $Skill_initialize$1 = function $$initialize(category_name, skill_name, category_dice, row_dice, s_format) {
            var self = this;
            self.category_name = category_name;
            self.name = skill_name;
            self.category_dice = category_dice;
            self.row_dice = row_dice;
            return self.s_format = s_format;
          }, $Skill_initialize$1.$$arity = 5);
          Opal.def(self, '$to_s', $Skill_to_s$2 = function $$to_s() {
            var self = this;
            return self.$format(self.s_format, $hash2(["category_dice", "row_dice", "category_name", "skill_name"], {
              "category_dice": self.category_dice,
              "row_dice": self.row_dice,
              "category_name": self.category_name,
              "skill_name": self.name
            }));
          }, $Skill_to_s$2.$$arity = 0);
          return self.$attr_reader("category_name", "name", "category_dice", "row_dice");
        }($nesting[0], null, $nesting);
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/sai_fic_skill_table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $send = Opal.send,
      $hash = Opal.hash,
      $truthy = Opal.truthy;
  self.$require("bcdice/dice_table/sai_fic_skill_table/category");
  self.$require("bcdice/dice_table/sai_fic_skill_table/skill");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SaiFicSkillTable');
        var $nesting = [self].concat($parent_nesting),
            $SaiFicSkillTable_from_i18n$1,
            $SaiFicSkillTable_initialize$3,
            $SaiFicSkillTable_roll_command$5,
            $SaiFicSkillTable_roll_category$6,
            $SaiFicSkillTable_roll_skill$7,
            $SaiFicSkillTable_prefixes$8,
            $SaiFicSkillTable_format_skill$9;
        self.$$prototype.rtt = self.$$prototype.rtt_format = self.$$prototype.rct = self.$$prototype.rct_format = self.$$prototype.rttn = self.$$prototype.rttn_format = self.$$prototype.categories = nil;
        Opal.defs(self, '$from_i18n', $SaiFicSkillTable_from_i18n$1 = function $$from_i18n(key, locale, $kwargs) {
          var rtt,
              rct,
              rttn,
              $$2,
              self = this,
              global = nil,
              table = nil,
              items = nil;

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          rtt = $kwargs.$$smap["rtt"];

          if (rtt == null) {
            rtt = nil;
          }

          ;
          rct = $kwargs.$$smap["rct"];

          if (rct == null) {
            rct = nil;
          }

          ;
          rttn = $kwargs.$$smap["rttn"];

          if (rttn == null) {
            rttn = nil;
          }

          ;
          global = $$($nesting, 'I18n').$t("RTT", $hash2(["locale", "raise", "default"], {
            "locale": locale,
            "raise": false,
            "default": $hash2([], {})
          }));
          table = global.$merge($$($nesting, 'I18n').$t(key, $hash2(["locale", "raise"], {
            "locale": locale,
            "raise": true
          })));
          items = table['$[]']("items");
          table = $send(table, 'select', [], ($$2 = function (_$$15) {
            function $$2(_x5, _x6) {
              return _$$15.apply(this, arguments);
            }

            $$2.toString = function () {
              return _$$15.toString();
            };

            return $$2;
          }(function (k, _) {
            var self = $$2.$$s == null ? this : $$2.$$s;

            if (k == null) {
              k = nil;
            }

            ;

            if (_ == null) {
              _ = nil;
            }

            ;
            return ["rtt_format", "rttn_format", "rct_format", "s_format"]['$include?'](k);
          }), $$2.$$s = self, $$2.$$arity = 2, $$2));
          return self.$new(items, Opal.to_hash(table).$merge($hash2(["rtt", "rct", "rttn"], {
            "rtt": rtt,
            "rct": rct,
            "rttn": rttn
          })));
        }, $SaiFicSkillTable_from_i18n$1.$$arity = -3);
        Opal.const_set($nesting[0], 'DEFAULT_RTT', "ランダム特技表(%<category_dice>d,%<row_dice>d) ＞ %<text>s");
        Opal.const_set($nesting[0], 'DEFAULT_RCT', "ランダム分野表(%<category_dice>d) ＞ %<category_name>s");
        Opal.const_set($nesting[0], 'DEFAULT_RTTN', "%<category_name>s分野ランダム特技表(%<row_dice>d) ＞ %<text>s");
        Opal.const_set($nesting[0], 'DEFAULT_S', "《%<skill_name>s／%<category_name>s%<row_dice>d》");
        Opal.def(self, '$initialize', $SaiFicSkillTable_initialize$3 = function $$initialize(items, $kwargs) {
          var rtt,
              rct,
              rttn,
              rtt_format,
              rct_format,
              rttn_format,
              s_format,
              _$$16,
              self = this;

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          rtt = $kwargs.$$smap["rtt"];

          if (rtt == null) {
            rtt = nil;
          }

          ;
          rct = $kwargs.$$smap["rct"];

          if (rct == null) {
            rct = nil;
          }

          ;
          rttn = $kwargs.$$smap["rttn"];

          if (rttn == null) {
            rttn = nil;
          }

          ;
          rtt_format = $kwargs.$$smap["rtt_format"];

          if (rtt_format == null) {
            rtt_format = $$($nesting, 'DEFAULT_RTT');
          }

          ;
          rct_format = $kwargs.$$smap["rct_format"];

          if (rct_format == null) {
            rct_format = $$($nesting, 'DEFAULT_RCT');
          }

          ;
          rttn_format = $kwargs.$$smap["rttn_format"];

          if (rttn_format == null) {
            rttn_format = $$($nesting, 'DEFAULT_RTTN');
          }

          ;
          s_format = $kwargs.$$smap["s_format"];

          if (s_format == null) {
            s_format = $$($nesting, 'DEFAULT_S');
          }

          ;
          self.categories = $send(items.$map(), 'with_index', [1], (_$$16 = function $$4($mlhs_tmp1, index) {
            var self = _$$16.$$s == null ? this : _$$16.$$s,
                $a,
                $b,
                name = nil,
                skills = nil;

            if ($mlhs_tmp1 == null) {
              $mlhs_tmp1 = nil;
            }

            ;

            if (index == null) {
              index = nil;
            }

            ;
            $b = $mlhs_tmp1, $a = Opal.to_ary($b), name = $a[0] == null ? nil : $a[0], skills = $a[1] == null ? nil : $a[1], $b;
            return $$$($$($nesting, 'SaiFicSkillTable'), 'Category').$new(name, skills, index, s_format);
          }, _$$16.$$s = self, _$$16.$$arity = 2, _$$16.$$has_top_level_mlhs_arg = true, _$$16));
          self.rtt = rtt;
          self.rct = rct;
          self.rttn = rttn.$to_a();
          self.rtt_format = rtt_format;
          self.rct_format = rct_format;
          return self.rttn_format = rttn_format;
        }, $SaiFicSkillTable_initialize$3.$$arity = -2);
        Opal.const_set($nesting[0], 'RTTN', ["RTT1", "RTT2", "RTT3", "RTT4", "RTT5", "RTT6"].$freeze());
        self.$attr_reader("categories");
        Opal.def(self, '$roll_command', $SaiFicSkillTable_roll_command$5 = function $$roll_command(randomizer, command) {
          var self = this,
              c = nil,
              cat = nil,
              $ret_or_1 = nil,
              index = nil;
          c = command;

          if ($truthy(["RTT", self.rtt]['$include?'](c))) {
            return self.$format_skill(self.rtt_format, self.$roll_skill(randomizer));
          } else if ($truthy(["RCT", self.rct]['$include?'](c))) {
            cat = self.$roll_category(randomizer);
            return self.$format(self.rct_format, $hash2(["category_dice", "category_name"], {
              "category_dice": cat.$dice(),
              "category_name": cat.$name()
            }));
          } else if ($truthy(function () {
            if ($truthy($ret_or_1 = index = $$($nesting, 'RTTN').$index(c))) {
              return $ret_or_1;
            } else {
              return index = self.rttn.$index(c);
            }

            ;
            return nil;
          }())) {
            return self.$format_skill(self.rttn_format, self.categories['$[]'](index).$roll(randomizer));
          } else {
            return nil;
          }

          ;
        }, $SaiFicSkillTable_roll_command$5.$$arity = 2);
        Opal.def(self, '$roll_category', $SaiFicSkillTable_roll_category$6 = function $$roll_category(randomizer) {
          var self = this;
          return self.categories['$[]']($rb_minus(randomizer.$roll_once(6), 1));
        }, $SaiFicSkillTable_roll_category$6.$$arity = 1);
        Opal.def(self, '$roll_skill', $SaiFicSkillTable_roll_skill$7 = function $$roll_skill(randomizer) {
          var self = this;
          return self.$roll_category(randomizer).$roll(randomizer);
        }, $SaiFicSkillTable_roll_skill$7.$$arity = 1);
        Opal.def(self, '$prefixes', $SaiFicSkillTable_prefixes$8 = function $$prefixes() {
          var self = this;
          return $rb_plus(["RTT[1-6]?", "RCT", self.rtt, self.rct], self.rttn).$compact();
        }, $SaiFicSkillTable_prefixes$8.$$arity = 0);
        self.$private();
        return (Opal.def(self, '$format_skill', $SaiFicSkillTable_format_skill$9 = function $$format_skill(format_string, skill) {
          var self = this;
          return self.$format(format_string, $hash2(["category_dice", "row_dice", "category_name", "skill_name", "text"], {
            "category_dice": skill.$category_dice(),
            "row_dice": skill.$row_dice(),
            "category_name": skill.$category_name(),
            "skill_name": skill.$name(),
            "text": skill.$to_s()
          }));
        }, $SaiFicSkillTable_format_skill$9.$$arity = 2), nil) && 'format_skill';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Table');
        var $nesting = [self].concat($parent_nesting),
            $Table_from_i18n$1,
            $Table_initialize$2,
            $Table_roll$3,
            $Table_choice$4;
        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $Table_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale"], {
            "locale": locale
          }));
          return self.$new(table['$[]']("name"), table['$[]']("type"), table['$[]']("items"));
        }, $Table_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $Table_initialize$2 = function $$initialize(name, type, items) {
          var self = this,
              m = nil;
          self.name = name;
          self.items = items.$freeze();
          m = /(\d+)D(\d+)/i.$match(type);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
          }

          ;
          self.times = m['$[]'](1).$to_i();
          return self.sides = m['$[]'](2).$to_i();
        }, $Table_initialize$2.$$arity = 3);
        Opal.def(self, '$roll', $Table_roll$3 = function $$roll(bcdice) {
          var self = this,
              value = nil;
          value = bcdice.$roll_sum(self.times, self.sides);
          return self.$choice(value);
        }, $Table_roll$3.$$arity = 1);
        return (Opal.def(self, '$choice', $Table_choice$4 = function $$choice(value) {
          var self = this,
              index = nil;
          index = $rb_minus(value, self.times);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index));
        }, $Table_choice$4.$$arity = 1), nil) && 'choice';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$;
  self.$require("bcdice/dice_table/roll_result");
  self.$require("bcdice/dice_table/chain_table");
  self.$require("bcdice/dice_table/d66_grid_table");
  self.$require("bcdice/dice_table/d66_half_grid_table");
  self.$require("bcdice/dice_table/d66_one_third_table");
  self.$require("bcdice/dice_table/d66_parity_table");
  self.$require("bcdice/dice_table/d66_range_table");
  self.$require("bcdice/dice_table/d66_table");
  self.$require("bcdice/dice_table/range_table");
  self.$require("bcdice/dice_table/sai_fic_skill_table");
  return self.$require("bcdice/dice_table/table");
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/enum"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'D66SortType');
      var $nesting = [self].concat($parent_nesting);
      Opal.const_set($nesting[0], 'NO_SORT', "no_sort");
      Opal.const_set($nesting[0], 'ASC', "asc");
      Opal.const_set($nesting[0], 'DESC', "desc");
    })($nesting[0], $nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'RoundType');
      var $nesting = [self].concat($parent_nesting);
      Opal.const_set($nesting[0], 'CEIL', "ceil");
      Opal.const_set($nesting[0], 'FLOOR', "floor");
      Opal.const_set($nesting[0], 'ROUND', "round");
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/translate"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $hash2 = Opal.hash2,
      $hash = Opal.hash;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Translate');
      var $nesting = [self].concat($parent_nesting),
          $Translate_translate$1;
      Opal.def(self, '$translate', $Translate_translate$1 = function $$translate(key, $kwargs) {
        var options,
            self = this;
        if (self.locale == null) self.locale = nil;

        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        }

        ;
        options = Opal.kwrestargs($kwargs, {});
        ;
        return $$($nesting, 'I18n').$translate(key, $hash2(["locale", "raise"], {
          "locale": self.locale,
          "raise": true
        }).$merge(Opal.to_hash(options)));
      }, $Translate_translate$1.$$arity = -2);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/result"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Result');
      var $nesting = [self].concat($parent_nesting),
          $Result_initialize$10,
          $Result_secret$ques$11,
          $Result_success$ques$12,
          $Result_failure$ques$13,
          $Result_critical$ques$14,
          $Result_fumble$ques$15,
          $Result_condition$eq$16;
      self.$$prototype.secret = self.$$prototype.success = self.$$prototype.failure = self.$$prototype.critical = self.$$prototype.fumble = nil;

      (function (self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting),
            $success$1,
            $failure$3,
            $critical$5,
            $fumble$7,
            $nothing$9;
        Opal.def(self, '$success', $success$1 = function $$success(text) {
          var $$2,
              self = this;
          return $send(self.$new(), 'tap', [], ($$2 = function (_$$17) {
            function $$2(_x7) {
              return _$$17.apply(this, arguments);
            }

            $$2.toString = function () {
              return _$$17.toString();
            };

            return $$2;
          }(function (r) {
            var self = $$2.$$s == null ? this : $$2.$$s,
                $writer = nil;

            if (r == null) {
              r = nil;
            }

            ;
            $writer = [text];
            $send(r, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [true];
            $send(r, 'success=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            ;
          }), $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $success$1.$$arity = 1);
        Opal.def(self, '$failure', $failure$3 = function $$failure(text) {
          var _$$18,
              self = this;

          return $send(self.$new(), 'tap', [], (_$$18 = function $$4(r) {
            var self = _$$18.$$s == null ? this : _$$18.$$s,
                $writer = nil;

            if (r == null) {
              r = nil;
            }

            ;
            $writer = [text];
            $send(r, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [true];
            $send(r, 'failure=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            ;
          }, _$$18.$$s = self, _$$18.$$arity = 1, _$$18));
        }, $failure$3.$$arity = 1);
        Opal.def(self, '$critical', $critical$5 = function $$critical(text) {
          var _$$19,
              self = this;

          return $send(self.$new(), 'tap', [], (_$$19 = function $$6(r) {
            var self = _$$19.$$s == null ? this : _$$19.$$s,
                $writer = nil;

            if (r == null) {
              r = nil;
            }

            ;
            $writer = [text];
            $send(r, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [true];
            $send(r, 'critical=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [true];
            $send(r, 'success=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            ;
          }, _$$19.$$s = self, _$$19.$$arity = 1, _$$19));
        }, $critical$5.$$arity = 1);
        Opal.def(self, '$fumble', $fumble$7 = function $$fumble(text) {
          var _$$20,
              self = this;

          return $send(self.$new(), 'tap', [], (_$$20 = function $$8(r) {
            var self = _$$20.$$s == null ? this : _$$20.$$s,
                $writer = nil;

            if (r == null) {
              r = nil;
            }

            ;
            $writer = [text];
            $send(r, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [true];
            $send(r, 'fumble=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [true];
            $send(r, 'failure=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            ;
          }, _$$20.$$s = self, _$$20.$$arity = 1, _$$20));
        }, $fumble$7.$$arity = 1);
        return (Opal.def(self, '$nothing', $nothing$9 = function $$nothing() {
          var self = this;
          return "nothing";
        }, $nothing$9.$$arity = 0), nil) && 'nothing';
      })(Opal.get_singleton_class(self), $nesting);

      Opal.def(self, '$initialize', $Result_initialize$10 = function $$initialize(text) {
        var self = this;

        if (text == null) {
          text = nil;
        }

        ;
        self.text = text;
        self.rands = nil;
        self.detailed_rands = nil;
        self.secret = false;
        self.success = false;
        self.failure = false;
        self.critical = false;
        return self.fumble = false;
      }, $Result_initialize$10.$$arity = -1);
      self.$attr_accessor("text", "rands", "detailed_rands");
      self.$attr_writer("secret", "success", "failure", "critical", "fumble");
      Opal.def(self, '$secret?', $Result_secret$ques$11 = function $Result_secret$ques$11() {
        var self = this;
        return self.secret;
      }, $Result_secret$ques$11.$$arity = 0);
      Opal.def(self, '$success?', $Result_success$ques$12 = function $Result_success$ques$12() {
        var self = this;
        return self.success;
      }, $Result_success$ques$12.$$arity = 0);
      Opal.def(self, '$failure?', $Result_failure$ques$13 = function $Result_failure$ques$13() {
        var self = this;
        return self.failure;
      }, $Result_failure$ques$13.$$arity = 0);
      Opal.def(self, '$critical?', $Result_critical$ques$14 = function $Result_critical$ques$14() {
        var self = this;
        return self.critical;
      }, $Result_critical$ques$14.$$arity = 0);
      Opal.def(self, '$fumble?', $Result_fumble$ques$15 = function $Result_fumble$ques$15() {
        var self = this;
        return self.fumble;
      }, $Result_fumble$ques$15.$$arity = 0);
      return (Opal.def(self, '$condition=', $Result_condition$eq$16 = function $Result_condition$eq$16(condition) {
        var self = this;
        self.success = condition;
        return self.failure = condition['$!']();
      }, $Result_condition$eq$16.$$arity = 1), nil) && 'condition=';
    })($nesting[0], null, $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["racc/parser"] = function (Opal) {
  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var $a,
      self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $gvars = Opal.gvars,
      $send = Opal.send;

  (function ($base, $parent_nesting) {
    var self = $module($base, 'Racc');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParseError');
      var $nesting = [self].concat($parent_nesting);
      return nil;
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  })($nesting[0], $nesting);

  if ($truthy(($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil)) {} else {
    Opal.const_set($nesting[0], 'ParseError', $$$($$($nesting, 'Racc'), 'ParseError'));
  }

  ;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'Racc');
    var $nesting = [self].concat($parent_nesting),
        $a;

    if ($truthy(($a = $$($nesting, 'Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil)) {} else {
      Opal.const_set($nesting[0], 'Racc_No_Extensions', false);
    }

    ;

    (function ($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');
      var $nesting = [self].concat($parent_nesting),
          $Parser_racc_runtime_type$1,
          $Parser__racc_setup$2,
          $Parser__racc_init_sysvars$3,
          $Parser_do_parse$4,
          $Parser_next_token$5,
          $Parser__racc_do_parse_rb$6,
          $Parser_yyparse$8,
          $Parser__racc_yyparse_rb$9,
          $Parser__racc_evalact$12,
          $Parser__racc_do_reduce$14,
          $Parser_on_error$15,
          $Parser_yyerror$16,
          $Parser_yyaccept$17,
          $Parser_yyerrok$18,
          $Parser_racc_read_token$19,
          $Parser_racc_shift$20,
          $Parser_racc_reduce$21,
          $Parser_racc_accept$23,
          $Parser_racc_e_pop$24,
          $Parser_racc_next_state$25,
          $Parser_racc_print_stacks$26,
          $Parser_racc_print_states$28,
          $Parser_racc_token2str$30,
          $Parser_token_to_str$31;
      self.$$prototype.yydebug = self.$$prototype.racc_debug_out = self.$$prototype.racc_error_status = self.$$prototype.racc_t = self.$$prototype.racc_vstack = self.$$prototype.racc_val = self.$$prototype.racc_state = self.$$prototype.racc_tstack = nil;
      Opal.const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      Opal.const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version', $$($nesting, 'Racc_Runtime_Core_Version_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$($nesting, 'Racc_Runtime_Core_Revision_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      Opal.defs($$($nesting, 'Parser'), '$racc_runtime_type', $Parser_racc_runtime_type$1 = function $$racc_runtime_type() {
        var self = this;
        return $$($nesting, 'Racc_Runtime_Type');
      }, $Parser_racc_runtime_type$1.$$arity = 0);
      Opal.def(self, '$_racc_setup', $Parser__racc_setup$2 = function $$_racc_setup() {
        var $a,
            $b,
            self = this,
            $ret_or_1 = nil,
            arg = nil,
            $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        if ($truthy($$$(self.$class(), 'Racc_debug_parser'))) {} else {
          self.yydebug = false;
        }

        ;

        if ($truthy(($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil)) {} else {
          self.yydebug = false;
        }

        ;

        if ($truthy(self.yydebug)) {
          if ($truthy(($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil)) {} else {
            self.racc_debug_out = $gvars.stderr;
          }

          ;

          self.racc_debug_out = function () {
            if ($truthy($ret_or_1 = self.racc_debug_out)) {
              return $ret_or_1;
            } else {
              return $gvars.stderr;
            }

            ;
            return nil;
          }();
        }

        ;
        arg = $$$(self.$class(), 'Racc_arg');

        if ($truthy($rb_lt(arg.$size(), 14))) {
          $writer = [13, true];
          $send(arg, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        }

        ;
        return arg;
      }, $Parser__racc_setup$2.$$arity = 0);
      Opal.def(self, '$_racc_init_sysvars', $Parser__racc_init_sysvars$3 = function $$_racc_init_sysvars() {
        var self = this;
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return self.racc_error_status = 0;
      }, $Parser__racc_init_sysvars$3.$$arity = 0);
      Opal.def(self, '$do_parse', $Parser_do_parse$4 = function $$do_parse() {
        var self = this;
        return self.$__send__($$($nesting, 'Racc_Main_Parsing_Routine'), self.$_racc_setup(), false);
      }, $Parser_do_parse$4.$$arity = 0);
      Opal.def(self, '$next_token', $Parser_next_token$5 = function $$next_token() {
        var self = this;
        return self.$raise($$($nesting, 'NotImplementedError'), "" + self.$class() + "#next_token is not defined");
      }, $Parser_next_token$5.$$arity = 0);
      Opal.def(self, '$_racc_do_parse_rb', $Parser__racc_do_parse_rb$6 = function $$_racc_do_parse_rb(arg, in_debug) {
        var $a,
            $b,
            _$$21,
            self = this,
            action_table = nil,
            action_check = nil,
            action_default = nil,
            action_pointer = nil,
            _ = nil,
            token_table = nil,
            tok = nil,
            act = nil,
            i = nil;

        $b = arg, $a = Opal.to_ary($b), action_table = $a[0] == null ? nil : $a[0], action_check = $a[1] == null ? nil : $a[1], action_default = $a[2] == null ? nil : $a[2], action_pointer = $a[3] == null ? nil : $a[3], _ = $a[4] == null ? nil : $a[4], _ = $a[5] == null ? nil : $a[5], _ = $a[6] == null ? nil : $a[6], _ = $a[7] == null ? nil : $a[7], _ = $a[8] == null ? nil : $a[8], _ = $a[9] == null ? nil : $a[9], token_table = $a[10] == null ? nil : $a[10], _ = $a[11] == null ? nil : $a[11], _ = $a[12] == null ? nil : $a[12], _ = $a[13] == null ? nil : $a[13], $b;
        self.$_racc_init_sysvars();
        tok = act = i = nil;
        return $send(self, 'catch', ["racc_end_parse"], (_$$21 = function $$7() {
          var self = _$$21.$$s == null ? this : _$$21.$$s,
              $c,
              $d,
              $e,
              $ret_or_2 = nil,
              $ret_or_3 = nil,
              $ret_or_4 = nil;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

          while ($truthy(true)) {
            if ($truthy(i = action_pointer['$[]'](self.racc_state['$[]'](-1)))) {
              if ($truthy(self.racc_read_next)) {
                if ($truthy(self.racc_t['$!='](0))) {
                  $e = self.$next_token(), $d = Opal.to_ary($e), tok = $d[0] == null ? nil : $d[0], self.racc_val = $d[1] == null ? nil : $d[1], $e;

                  if ($truthy(tok)) {
                    self.racc_t = function () {
                      if ($truthy($ret_or_2 = token_table['$[]'](tok))) {
                        return $ret_or_2;
                      } else {
                        return 1;
                      }

                      ;
                      return nil;
                    }();
                  } else {
                    self.racc_t = 0;
                  }

                  ;

                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val);
                  }

                  ;
                  self.racc_read_next = false;
                }
              }

              ;
              i = $rb_plus(i, self.racc_t);

              if ($truthy(function () {
                if ($truthy($ret_or_3 = function () {
                  if ($truthy($ret_or_4 = $rb_ge(i, 0))) {
                    return act = action_table['$[]'](i);
                  } else {
                    return $ret_or_4;
                  }

                  ;
                  return nil;
                }())) {
                  return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1));
                } else {
                  return $ret_or_3;
                }

                ;
                return nil;
              }())) {} else {
                act = action_default['$[]'](self.racc_state['$[]'](-1));
              }

              ;
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1));
            }

            ;

            while ($truthy(act = self.$_racc_evalact(act, arg))) {}

            ;
          }
        }, _$$21.$$s = self, _$$21.$$arity = 0, _$$21));
      }, $Parser__racc_do_parse_rb$6.$$arity = 2);
      Opal.def(self, '$yyparse', $Parser_yyparse$8 = function $$yyparse(recv, mid) {
        var self = this;
        return self.$__send__($$($nesting, 'Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true);
      }, $Parser_yyparse$8.$$arity = 2);
      Opal.def(self, '$_racc_yyparse_rb', $Parser__racc_yyparse_rb$9 = function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a,
            $b,
            _$$23,
            self = this,
            action_table = nil,
            action_check = nil,
            action_default = nil,
            action_pointer = nil,
            _ = nil,
            token_table = nil,
            act = nil,
            i = nil;

        $b = arg, $a = Opal.to_ary($b), action_table = $a[0] == null ? nil : $a[0], action_check = $a[1] == null ? nil : $a[1], action_default = $a[2] == null ? nil : $a[2], action_pointer = $a[3] == null ? nil : $a[3], _ = $a[4] == null ? nil : $a[4], _ = $a[5] == null ? nil : $a[5], _ = $a[6] == null ? nil : $a[6], _ = $a[7] == null ? nil : $a[7], _ = $a[8] == null ? nil : $a[8], _ = $a[9] == null ? nil : $a[9], token_table = $a[10] == null ? nil : $a[10], _ = $a[11] == null ? nil : $a[11], _ = $a[12] == null ? nil : $a[12], _ = $a[13] == null ? nil : $a[13], $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], (_$$23 = function $$10() {
          var self = _$$23.$$s == null ? this : _$$23.$$s,
              $c,
              $d,
              _$$22;

          if (self.racc_state == null) self.racc_state = nil;

          while (!$truthy(i = action_pointer['$[]'](self.racc_state['$[]'](-1)))) {
            while ($truthy(act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg))) {}
          }

          ;
          return $send(recv, '__send__', [mid], (_$$22 = function $$11(tok, val) {
            var self = _$$22.$$s == null ? this : _$$22.$$s,
                $e,
                $f,
                $ret_or_5 = nil,
                $ret_or_6 = nil,
                $ret_or_7 = nil,
                $ret_or_8 = nil,
                $ret_or_9 = nil,
                $ret_or_10 = nil,
                $ret_or_11 = nil,
                $ret_or_12 = nil,
                $ret_or_13 = nil;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

            if (tok == null) {
              tok = nil;
            }

            ;

            if (val == null) {
              val = nil;
            }

            ;

            if ($truthy(tok)) {
              self.racc_t = function () {
                if ($truthy($ret_or_5 = token_table['$[]'](tok))) {
                  return $ret_or_5;
                } else {
                  return 1;
                }

                ;
                return nil;
              }();
            } else {
              self.racc_t = 0;
            }

            ;
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);

            if ($truthy(function () {
              if ($truthy($ret_or_6 = function () {
                if ($truthy($ret_or_7 = $rb_ge(i, 0))) {
                  return act = action_table['$[]'](i);
                } else {
                  return $ret_or_7;
                }

                ;
                return nil;
              }())) {
                return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1));
              } else {
                return $ret_or_6;
              }

              ;
              return nil;
            }())) {} else {
              act = action_default['$[]'](self.racc_state['$[]'](-1));
            }

            ;

            while ($truthy(act = self.$_racc_evalact(act, arg))) {}

            ;

            while ($truthy(function () {
              if ($truthy($ret_or_8 = function () {
                if ($truthy($ret_or_9 = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']())) {
                  return $ret_or_9;
                } else {
                  return self.racc_read_next['$!']();
                }

                ;
                return nil;
              }())) {
                return $ret_or_8;
              } else {
                return self.racc_t['$=='](0);
              }

              ;
              return nil;
            }())) {
              if ($truthy(function () {
                if ($truthy($ret_or_10 = function () {
                  if ($truthy($ret_or_11 = function () {
                    if ($truthy($ret_or_12 = function () {
                      if ($truthy($ret_or_13 = i)) {
                        return i = $rb_plus(i, self.racc_t);
                      } else {
                        return $ret_or_13;
                      }

                      ;
                      return nil;
                    }())) {
                      return $rb_ge(i, 0);
                    } else {
                      return $ret_or_12;
                    }

                    ;
                    return nil;
                  }())) {
                    return act = action_table['$[]'](i);
                  } else {
                    return $ret_or_11;
                  }

                  ;
                  return nil;
                }())) {
                  return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1));
                } else {
                  return $ret_or_10;
                }

                ;
                return nil;
              }())) {} else {
                act = action_default['$[]'](self.racc_state['$[]'](-1));
              }

              ;

              while ($truthy(act = self.$_racc_evalact(act, arg))) {}

              ;
            }

            ;
          }, _$$22.$$s = self, _$$22.$$arity = 2, _$$22));
        }, _$$23.$$s = self, _$$23.$$arity = 0, _$$23));
      }, $Parser__racc_yyparse_rb$9.$$arity = 4);
      Opal.def(self, '$_racc_evalact', $Parser__racc_evalact$12 = function $$_racc_evalact(act, arg) {
        var $a,
            $b,
            _$$24,
            self = this,
            action_table = nil,
            action_check = nil,
            _ = nil,
            action_pointer = nil,
            shift_n = nil,
            reduce_n = nil,
            $ret_or_14 = nil,
            $ret_or_15 = nil,
            code = nil,
            $case = nil,
            i = nil,
            $ret_or_16 = nil,
            $ret_or_17 = nil;

        $b = arg, $a = Opal.to_ary($b), action_table = $a[0] == null ? nil : $a[0], action_check = $a[1] == null ? nil : $a[1], _ = $a[2] == null ? nil : $a[2], action_pointer = $a[3] == null ? nil : $a[3], _ = $a[4] == null ? nil : $a[4], _ = $a[5] == null ? nil : $a[5], _ = $a[6] == null ? nil : $a[6], _ = $a[7] == null ? nil : $a[7], _ = $a[8] == null ? nil : $a[8], _ = $a[9] == null ? nil : $a[9], _ = $a[10] == null ? nil : $a[10], shift_n = $a[11] == null ? nil : $a[11], reduce_n = $a[12] == null ? nil : $a[12], _ = $a[13] == null ? nil : $a[13], _ = $a[14] == null ? nil : $a[14], $b;

        if ($truthy(function () {
          if ($truthy($ret_or_14 = $rb_gt(act, 0))) {
            return $rb_lt(act, shift_n);
          } else {
            return $ret_or_14;
          }

          ;
          return nil;
        }())) {
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (self.racc_t['$=='](1)) {} else {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1);
            }
          }

          ;
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;

          if ($truthy(self.yydebug)) {
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);
          }

          ;
        } else if ($truthy(function () {
          if ($truthy($ret_or_15 = $rb_lt(act, 0))) {
            return $rb_gt(act, reduce_n['$-@']());
          } else {
            return $ret_or_15;
          }

          ;
          return nil;
        }())) {
          code = $send(self, 'catch', ["racc_jump"], (_$$24 = function $$13() {
            var self = _$$24.$$s == null ? this : _$$24.$$s;
            if (self.racc_state == null) self.racc_state = nil;
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;
          }, _$$24.$$s = self, _$$24.$$arity = 0, _$$24));

          if ($truthy(code)) {
            $case = code;

            if (1['$===']($case)) {
              self.racc_user_yyerror = true;
              return reduce_n['$-@']();
            } else if (2['$===']($case)) {
              return shift_n;
            } else {
              self.$raise("[Racc Bug] unknown jump code");
            }
          }

          ;
        } else if (act['$=='](shift_n)) {
          if ($truthy(self.yydebug)) {
            self.$racc_accept();
          }

          ;
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if (act['$=='](reduce_n['$-@']())) {
          $case = self.racc_error_status;

          if (0['$===']($case)) {
            if ($truthy(arg['$[]'](21))) {} else {
              self.$on_error(self.racc_t, self.racc_val, self.racc_vstack);
            }
          } else if (3['$===']($case)) {
            if (self.racc_t['$=='](0)) {
              self.$throw("racc_end_parse", nil);
            }

            ;
            self.racc_read_next = true;
          }

          ;
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;

          while ($truthy(true)) {
            if ($truthy(i = action_pointer['$[]'](self.racc_state['$[]'](-1)))) {
              i = $rb_plus(i, 1);

              if ($truthy(function () {
                if ($truthy($ret_or_16 = function () {
                  if ($truthy($ret_or_17 = $rb_ge(i, 0))) {
                    return act = action_table['$[]'](i);
                  } else {
                    return $ret_or_17;
                  }

                  ;
                  return nil;
                }())) {
                  return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1));
                } else {
                  return $ret_or_16;
                }

                ;
                return nil;
              }())) {
                break;
              }

              ;
            }

            ;

            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil);
            }

            ;
            self.racc_state.$pop();
            self.racc_vstack.$pop();

            if ($truthy(self.yydebug)) {
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);
            }

            ;
          }

          ;
          return act;
        } else {
          self.$raise("" + "[Racc Bug] unknown action " + act.$inspect());
        }

        ;

        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state);
        }

        ;
        return nil;
      }, $Parser__racc_evalact$12.$$arity = 2);
      Opal.def(self, '$_racc_do_reduce', $Parser__racc_do_reduce$14 = function $$_racc_do_reduce(arg, act) {
        var $a,
            $b,
            self = this,
            _ = nil,
            goto_table = nil,
            goto_check = nil,
            goto_default = nil,
            goto_pointer = nil,
            nt_base = nil,
            reduce_table = nil,
            use_result = nil,
            state = nil,
            vstack = nil,
            tstack = nil,
            i = nil,
            len = nil,
            reduce_to = nil,
            method_id = nil,
            void_array = nil,
            tmp_t = nil,
            tmp_v = nil,
            $writer = nil,
            k1 = nil,
            $ret_or_18 = nil,
            $ret_or_19 = nil,
            curstate = nil;
        $b = arg, $a = Opal.to_ary($b), _ = $a[0] == null ? nil : $a[0], _ = $a[1] == null ? nil : $a[1], _ = $a[2] == null ? nil : $a[2], _ = $a[3] == null ? nil : $a[3], goto_table = $a[4] == null ? nil : $a[4], goto_check = $a[5] == null ? nil : $a[5], goto_default = $a[6] == null ? nil : $a[6], goto_pointer = $a[7] == null ? nil : $a[7], nt_base = $a[8] == null ? nil : $a[8], reduce_table = $a[9] == null ? nil : $a[9], _ = $a[10] == null ? nil : $a[10], _ = $a[11] == null ? nil : $a[11], _ = $a[12] == null ? nil : $a[12], use_result = $a[13] == null ? nil : $a[13], $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];

        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len);
        }

        ;
        tmp_v = vstack['$[]'](len['$-@'](), len);

        if ($truthy(self.yydebug)) {
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        }

        ;
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        ;
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        ;

        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)));
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack));
        }

        ;
        tstack.$push(reduce_to);

        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack);
        }

        ;
        k1 = $rb_minus(reduce_to, nt_base);

        if ($truthy(i = goto_pointer['$[]'](k1))) {
          i = $rb_plus(i, state['$[]'](-1));

          if ($truthy(function () {
            if ($truthy($ret_or_18 = function () {
              if ($truthy($ret_or_19 = $rb_ge(i, 0))) {
                return curstate = goto_table['$[]'](i);
              } else {
                return $ret_or_19;
              }

              ;
              return nil;
            }())) {
              return goto_check['$[]'](i)['$=='](k1);
            } else {
              return $ret_or_18;
            }

            ;
            return nil;
          }())) {
            return curstate;
          }

          ;
        }

        ;
        return goto_default['$[]'](k1);
      }, $Parser__racc_do_reduce$14.$$arity = 2);
      Opal.def(self, '$on_error', $Parser_on_error$15 = function $$on_error(t, val, vstack) {
        var self = this,
            $ret_or_20 = nil;
        return self.$raise($$($nesting, 'ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), function () {
          if ($truthy($ret_or_20 = self.$token_to_str(t))) {
            return $ret_or_20;
          } else {
            return "?";
          }

          ;
          return nil;
        }()));
      }, $Parser_on_error$15.$$arity = 3);
      Opal.def(self, '$yyerror', $Parser_yyerror$16 = function $$yyerror() {
        var self = this;
        return self.$throw("racc_jump", 1);
      }, $Parser_yyerror$16.$$arity = 0);
      Opal.def(self, '$yyaccept', $Parser_yyaccept$17 = function $$yyaccept() {
        var self = this;
        return self.$throw("racc_jump", 2);
      }, $Parser_yyaccept$17.$$arity = 0);
      Opal.def(self, '$yyerrok', $Parser_yyerrok$18 = function $$yyerrok() {
        var self = this;
        return self.racc_error_status = 0;
      }, $Parser_yyerrok$18.$$arity = 0);
      Opal.def(self, '$racc_read_token', $Parser_racc_read_token$19 = function $$racc_read_token(t, tok, val) {
        var self = this;
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, $Parser_racc_read_token$19.$$arity = 3);
      Opal.def(self, '$racc_shift', $Parser_racc_shift$20 = function $$racc_shift(tok, tstack, vstack) {
        var self = this;
        self.racc_debug_out.$puts("" + "shift   " + self.$racc_token2str(tok));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_shift$20.$$arity = 3);
      Opal.def(self, '$racc_reduce', $Parser_racc_reduce$21 = function $$racc_reduce(toks, sim, tstack, vstack) {
        var _$$25,
            self = this,
            out = nil;

        out = self.racc_debug_out;
        out.$print("reduce ");

        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>");
        } else {
          $send(toks, 'each', [], (_$$25 = function $$22(t) {
            var self = _$$25.$$s == null ? this : _$$25.$$s;

            if (t == null) {
              t = nil;
            }

            ;
            return out.$print(" ", self.$racc_token2str(t));
          }, _$$25.$$s = self, _$$25.$$arity = 1, _$$25));
        }

        ;
        out.$puts("" + " --> " + self.$racc_token2str(sim));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_reduce$21.$$arity = 4);
      Opal.def(self, '$racc_accept', $Parser_racc_accept$23 = function $$racc_accept() {
        var self = this;
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, $Parser_racc_accept$23.$$arity = 0);
      Opal.def(self, '$racc_e_pop', $Parser_racc_e_pop$24 = function $$racc_e_pop(state, tstack, vstack) {
        var self = this;
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_e_pop$24.$$arity = 3);
      Opal.def(self, '$racc_next_state', $Parser_racc_next_state$25 = function $$racc_next_state(curstate, state) {
        var self = this;
        self.racc_debug_out.$puts("" + "goto    " + curstate);
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_next_state$25.$$arity = 2);
      Opal.def(self, '$racc_print_stacks', $Parser_racc_print_stacks$26 = function $$racc_print_stacks(t, v) {
        var _$$26,
            self = this,
            out = nil;

        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], (_$$26 = function $$27(i) {
          var self = _$$26.$$s == null ? this : _$$26.$$s;

          if (i == null) {
            i = nil;
          }

          ;
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");
        }, _$$26.$$s = self, _$$26.$$arity = 1, _$$26));
        return out.$puts(" ]");
      }, $Parser_racc_print_stacks$26.$$arity = 2);
      Opal.def(self, '$racc_print_states', $Parser_racc_print_states$28 = function $$racc_print_states(s) {
        var _$$27,
            self = this,
            out = nil;

        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], (_$$27 = function $$29(st) {
          var self = _$$27.$$s == null ? this : _$$27.$$s;

          if (st == null) {
            st = nil;
          }

          ;
          return out.$print(" ", st);
        }, _$$27.$$s = self, _$$27.$$arity = 1, _$$27));
        return out.$puts(" ]");
      }, $Parser_racc_print_states$28.$$arity = 1);
      Opal.def(self, '$racc_token2str', $Parser_racc_token2str$30 = function $$racc_token2str(tok) {
        var self = this,
            $ret_or_21 = nil;

        if ($truthy($ret_or_21 = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok))) {
          return $ret_or_21;
        } else {
          return self.$raise("" + "[Racc Bug] can't convert token " + tok + " to string");
        }
      }, $Parser_racc_token2str$30.$$arity = 1);
      return (Opal.def(self, '$token_to_str', $Parser_token_to_str$31 = function $$token_to_str(t) {
        var self = this;
        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t);
      }, $Parser_token_to_str$31.$$arity = 1), nil) && 'token_to_str';
    })($nesting[0], null, $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/arithmetic/node"] = function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Arithmetic');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $parent_nesting) {
        var self = $module($base, 'Node');
        var $nesting = [self].concat($parent_nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'BinaryOp');
          var $nesting = [self].concat($parent_nesting),
              $BinaryOp_initialize$1,
              $BinaryOp_eval$2,
              $BinaryOp_output$3,
              $BinaryOp_s_exp$4,
              $BinaryOp_op_for_s_exp$5;
          self.$$prototype.lhs = self.$$prototype.rhs = self.$$prototype.op = nil;
          Opal.def(self, '$initialize', $BinaryOp_initialize$1 = function $$initialize(lhs, op, rhs) {
            var self = this;
            self.lhs = lhs;
            self.op = op;
            return self.rhs = rhs;
          }, $BinaryOp_initialize$1.$$arity = 3);
          Opal.def(self, '$eval', $BinaryOp_eval$2 = function $BinaryOp_eval$2(round_type) {
            var self = this,
                l = nil,
                r = nil;
            l = self.lhs.$eval(round_type);
            r = self.rhs.$eval(round_type);
            return l.$send(self.op, r);
          }, $BinaryOp_eval$2.$$arity = 1);
          Opal.def(self, '$output', $BinaryOp_output$3 = function $$output() {
            var self = this;
            return "" + self.lhs.$output() + self.op + self.rhs.$output();
          }, $BinaryOp_output$3.$$arity = 0);
          Opal.def(self, '$s_exp', $BinaryOp_s_exp$4 = function $$s_exp() {
            var self = this;
            return "" + "(" + self.$op_for_s_exp() + " " + self.lhs.$s_exp() + " " + self.rhs.$s_exp() + ")";
          }, $BinaryOp_s_exp$4.$$arity = 0);
          return (Opal.def(self, '$op_for_s_exp', $BinaryOp_op_for_s_exp$5 = function $$op_for_s_exp() {
            var self = this;
            return self.op;
          }, $BinaryOp_op_for_s_exp$5.$$arity = 0), nil) && 'op_for_s_exp';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideBase');
          var $nesting = [self].concat($parent_nesting),
              $DivideBase_initialize$6,
              $DivideBase_eval$7,
              $DivideBase_output$8,
              $DivideBase_rounding_method$9,
              $DivideBase_op_for_s_exp$10,
              $DivideBase_divide_and_round$11;
          self.$$prototype.lhs = self.$$prototype.rhs = self.$$prototype.op = nil;
          Opal.def(self, '$initialize', $DivideBase_initialize$6 = function $$initialize(lhs, rhs) {
            var $iter = $DivideBase_initialize$6.$$p,
                $yield = $iter || nil,
                self = this;
            if ($iter) $DivideBase_initialize$6.$$p = null;
            return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $DivideBase_initialize$6, false, true), 'initialize', [lhs, "/", rhs], null);
          }, $DivideBase_initialize$6.$$arity = 2);
          Opal.def(self, '$eval', $DivideBase_eval$7 = function $DivideBase_eval$7(round_type) {
            var self = this,
                l = nil,
                r = nil;
            l = self.lhs.$eval(round_type);
            r = self.rhs.$eval(round_type);

            if (r['$=='](0)) {
              self.$raise($$($nesting, 'ZeroDivisionError'));
            }

            ;
            return self.$divide_and_round(l, r, round_type);
          }, $DivideBase_eval$7.$$arity = 1);
          Opal.def(self, '$output', $DivideBase_output$8 = function $$output() {
            var $iter = $DivideBase_output$8.$$p,
                $yield = $iter || nil,
                self = this,
                $zuper = nil,
                $zuper_i = nil,
                $zuper_ii = nil;
            if ($iter) $DivideBase_output$8.$$p = null; // Prepare super implicit arguments

            for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }

            return "" + $send2(self, Opal.find_super_dispatcher(self, 'output', $DivideBase_output$8, false, true), 'output', $zuper, $iter) + self.$rounding_method();
          }, $DivideBase_output$8.$$arity = 0);
          self.$private();
          Opal.def(self, '$rounding_method', $DivideBase_rounding_method$9 = function $$rounding_method() {
            var self = this;
            return $$$(self.$class(), 'ROUNDING_METHOD');
          }, $DivideBase_rounding_method$9.$$arity = 0);
          Opal.def(self, '$op_for_s_exp', $DivideBase_op_for_s_exp$10 = function $$op_for_s_exp() {
            var self = this;
            return "" + self.op + self.$rounding_method();
          }, $DivideBase_op_for_s_exp$10.$$arity = 0);
          return (Opal.def(self, '$divide_and_round', $DivideBase_divide_and_round$11 = function $$divide_and_round(_dividend, _divisor, _round_type) {
            var self = this;
            return self.$raise($$($nesting, 'NotImplementedError'));
          }, $DivideBase_divide_and_round$11.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'BinaryOp'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideWithGameSystemDefault');
          var $nesting = [self].concat($parent_nesting),
              $DivideWithGameSystemDefault_divide_and_round$12;
          Opal.const_set($nesting[0], 'ROUNDING_METHOD', "");
          self.$private();
          return (Opal.def(self, '$divide_and_round', $DivideWithGameSystemDefault_divide_and_round$12 = function $$divide_and_round(dividend, divisor, round_type) {
            var self = this,
                $case = nil;
            return function () {
              $case = round_type;

              if ($$$($$($nesting, 'RoundType'), 'CEIL')['$===']($case)) {
                return $rb_divide(dividend.$to_f(), divisor).$ceil();
              } else if ($$$($$($nesting, 'RoundType'), 'ROUND')['$===']($case)) {
                return $rb_divide(dividend.$to_f(), divisor).$round();
              } else {
                return $rb_divide(dividend, divisor).$to_i();
              }
            }();
          }, $DivideWithGameSystemDefault_divide_and_round$12.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'DivideBase'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideWithCeil');
          var $nesting = [self].concat($parent_nesting),
              $DivideWithCeil_divide_and_round$13;
          Opal.const_set($nesting[0], 'ROUNDING_METHOD', "C");
          self.$private();
          return (Opal.def(self, '$divide_and_round', $DivideWithCeil_divide_and_round$13 = function $$divide_and_round(dividend, divisor, _round_type) {
            var self = this;
            return $rb_divide(dividend.$to_f(), divisor).$ceil();
          }, $DivideWithCeil_divide_and_round$13.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'DivideBase'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideWithRound');
          var $nesting = [self].concat($parent_nesting),
              $DivideWithRound_divide_and_round$14;
          Opal.const_set($nesting[0], 'ROUNDING_METHOD', "R");
          self.$private();
          return (Opal.def(self, '$divide_and_round', $DivideWithRound_divide_and_round$14 = function $$divide_and_round(dividend, divisor, _round_type) {
            var self = this;
            return $rb_divide(dividend.$to_f(), divisor).$round();
          }, $DivideWithRound_divide_and_round$14.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'DivideBase'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideWithFloor');
          var $nesting = [self].concat($parent_nesting),
              $DivideWithFloor_divide_and_round$15;
          Opal.const_set($nesting[0], 'ROUNDING_METHOD', "F");
          self.$private();
          return (Opal.def(self, '$divide_and_round', $DivideWithFloor_divide_and_round$15 = function $$divide_and_round(dividend, divisor, _round_type) {
            var self = this;
            return $rb_divide(dividend, divisor).$to_i();
          }, $DivideWithFloor_divide_and_round$15.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'DivideBase'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Negative');
          var $nesting = [self].concat($parent_nesting),
              $Negative_initialize$16,
              $Negative_eval$17,
              $Negative_output$18,
              $Negative_s_exp$19;
          self.$$prototype.body = nil;
          Opal.def(self, '$initialize', $Negative_initialize$16 = function $$initialize(body) {
            var self = this;
            return self.body = body;
          }, $Negative_initialize$16.$$arity = 1);
          Opal.def(self, '$eval', $Negative_eval$17 = function $Negative_eval$17(round_type) {
            var self = this;
            return self.body.$eval(round_type)['$-@']();
          }, $Negative_eval$17.$$arity = 1);
          Opal.def(self, '$output', $Negative_output$18 = function $$output() {
            var self = this;
            return "" + "-" + self.body.$output();
          }, $Negative_output$18.$$arity = 0);
          return (Opal.def(self, '$s_exp', $Negative_s_exp$19 = function $$s_exp() {
            var self = this;
            return "" + "(- " + self.body.$s_exp() + ")";
          }, $Negative_s_exp$19.$$arity = 0), nil) && 's_exp';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Parenthesis');
          var $nesting = [self].concat($parent_nesting),
              $Parenthesis_initialize$20,
              $Parenthesis_eval$21,
              $Parenthesis_output$22,
              $Parenthesis_s_exp$23;
          self.$$prototype.expr = nil;
          Opal.def(self, '$initialize', $Parenthesis_initialize$20 = function $$initialize(expr) {
            var self = this;
            return self.expr = expr;
          }, $Parenthesis_initialize$20.$$arity = 1);
          Opal.def(self, '$eval', $Parenthesis_eval$21 = function $Parenthesis_eval$21(round_type) {
            var self = this;
            return self.expr.$eval(round_type);
          }, $Parenthesis_eval$21.$$arity = 1);
          Opal.def(self, '$output', $Parenthesis_output$22 = function $$output() {
            var self = this;
            return "" + "(" + self.expr.$output() + ")";
          }, $Parenthesis_output$22.$$arity = 0);
          return (Opal.def(self, '$s_exp', $Parenthesis_s_exp$23 = function $$s_exp() {
            var self = this;
            return "" + "(Parenthesis " + self.expr.$s_exp() + ")";
          }, $Parenthesis_s_exp$23.$$arity = 0), nil) && 's_exp';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Number');
          var $nesting = [self].concat($parent_nesting),
              $Number_initialize$24,
              $Number_eval$25,
              $Number_output$26;
          self.$$prototype.value = nil;
          Opal.def(self, '$initialize', $Number_initialize$24 = function $$initialize(value) {
            var self = this;
            return self.value = value;
          }, $Number_initialize$24.$$arity = 1);
          Opal.def(self, '$eval', $Number_eval$25 = function $Number_eval$25(_round_type) {
            var self = this;
            return self.value;
          }, $Number_eval$25.$$arity = 1);
          Opal.def(self, '$output', $Number_output$26 = function $$output() {
            var self = this;
            return self.value.$to_s();
          }, $Number_output$26.$$arity = 0);
          return Opal.alias(self, "s_exp", "output");
        })($nesting[0], null, $nesting);
      })($nesting[0], $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["strscan"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StringScanner');
    var $nesting = [self].concat($parent_nesting),
        $StringScanner_initialize$1,
        $StringScanner_beginning_of_line$ques$2,
        $StringScanner_scan$3,
        $StringScanner_scan_until$4,
        $StringScanner_$$$5,
        $StringScanner_check$6,
        $StringScanner_check_until$7,
        $StringScanner_peek$8,
        $StringScanner_eos$ques$9,
        $StringScanner_exist$ques$10,
        $StringScanner_skip$11,
        $StringScanner_skip_until$12,
        $StringScanner_get_byte$13,
        $StringScanner_match$ques$14,
        $StringScanner_pos$eq$15,
        $StringScanner_matched_size$16,
        $StringScanner_post_match$17,
        $StringScanner_pre_match$18,
        $StringScanner_reset$19,
        $StringScanner_rest$20,
        $StringScanner_rest$ques$21,
        $StringScanner_rest_size$22,
        $StringScanner_terminate$23,
        $StringScanner_unscan$24,
        $StringScanner_anchor$25;
    self.$$prototype.pos = self.$$prototype.string = self.$$prototype.working = self.$$prototype.matched = self.$$prototype.prev_pos = self.$$prototype.match = nil;
    self.$attr_reader("pos");
    self.$attr_reader("matched");
    Opal.def(self, '$initialize', $StringScanner_initialize$1 = function $$initialize(string) {
      var self = this;
      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return self.match = [];
    }, $StringScanner_initialize$1.$$arity = 1);
    self.$attr_reader("string");
    Opal.def(self, '$beginning_of_line?', $StringScanner_beginning_of_line$ques$2 = function $StringScanner_beginning_of_line$ques$2() {
      var self = this;
      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n";
    }, $StringScanner_beginning_of_line$ques$2.$$arity = 0);
    Opal.alias(self, "bol?", "beginning_of_line?");
    Opal.def(self, '$scan', $StringScanner_scan$3 = function $$scan(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      } else if (typeof result === 'object') {
        self.prev_pos = self.pos;
        self.pos += result[0].length;
        self.working = self.working.substring(result[0].length);
        self.matched = result[0];
        self.match = result;
        return result[0];
      } else if (typeof result === 'string') {
        self.pos += result.length;
        self.working = self.working.substring(result.length);
        return result;
      } else {
        return nil;
      }

      ;
    }, $StringScanner_scan$3.$$arity = 1);
    Opal.def(self, '$scan_until', $StringScanner_scan_until$4 = function $$scan_until(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var pos = self.pos,
          working = self.working,
          result;

      while (true) {
        result = pattern.exec(working);
        pos += 1;
        working = working.substr(1);

        if (result == null) {
          if (working.length === 0) {
            self.match = [];
            return self.matched = nil;
          }

          continue;
        }

        self.matched = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);
        self.match = result;
        self.prev_pos = pos - 1;
        self.pos = pos;
        self.working = working.substr(result[0].length);
        return self.matched;
      }

      ;
    }, $StringScanner_scan_until$4.$$arity = 1);
    Opal.def(self, '$[]', $StringScanner_$$$5 = function $StringScanner_$$$5(idx) {
      var self = this,
          $case = nil;

      if ($truthy(self.match['$empty?']())) {
        return nil;
      }

      ;
      $case = idx;

      if ($$($nesting, 'Symbol')['$===']($case)) {
        idx = idx.$to_s();
      } else if ($$($nesting, 'String')['$===']($case)) {
        nil;
      } else {
        idx = $$($nesting, 'Opal')['$coerce_to!'](idx, $$($nesting, 'Integer'), "to_int");
      }

      ;
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      if (match[idx] == null) {
        return nil;
      }

      return match[idx];
      ;
    }, $StringScanner_$$$5.$$arity = 1);
    Opal.def(self, '$check', $StringScanner_check$6 = function $$check(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
      ;
    }, $StringScanner_check$6.$$arity = 1);
    Opal.def(self, '$check_until', $StringScanner_check_until$7 = function $$check_until(pattern) {
      var self = this;
      var prev_pos = self.prev_pos,
          pos = self.pos;
      var result = self.$scan_until(pattern);

      if (result !== nil) {
        self.matched = result.substr(-1);
        self.working = self.string.substr(pos);
      }

      self.prev_pos = prev_pos;
      self.pos = pos;
      return result;
    }, $StringScanner_check_until$7.$$arity = 1);
    Opal.def(self, '$peek', $StringScanner_peek$8 = function $$peek(length) {
      var self = this;
      return self.working.substring(0, length);
    }, $StringScanner_peek$8.$$arity = 1);
    Opal.def(self, '$eos?', $StringScanner_eos$ques$9 = function $StringScanner_eos$ques$9() {
      var self = this;
      return self.working.length === 0;
    }, $StringScanner_eos$ques$9.$$arity = 0);
    Opal.def(self, '$exist?', $StringScanner_exist$ques$10 = function $StringScanner_exist$ques$10(pattern) {
      var self = this;
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      } else if (result.index == 0) {
        return 0;
      } else {
        return result.index + 1;
      }
    }, $StringScanner_exist$ques$10.$$arity = 1);
    Opal.def(self, '$skip', $StringScanner_skip$11 = function $$skip(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var result = pattern.exec(self.working);

      if (result == null) {
        self.match = [];
        return self.matched = nil;
      } else {
        var match_str = result[0];
        var match_len = match_str.length;
        self.matched = match_str;
        self.match = result;
        self.prev_pos = self.pos;
        self.pos += match_len;
        self.working = self.working.substring(match_len);
        return match_len;
      }

      ;
    }, $StringScanner_skip$11.$$arity = 1);
    Opal.def(self, '$skip_until', $StringScanner_skip_until$12 = function $$skip_until(pattern) {
      var self = this;
      var result = self.$scan_until(pattern);

      if (result === nil) {
        return nil;
      } else {
        self.matched = result.substr(-1);
        return result.length;
      }
    }, $StringScanner_skip_until$12.$$arity = 1);
    Opal.def(self, '$get_byte', $StringScanner_get_byte$13 = function $$get_byte() {
      var self = this;
      var result = nil;

      if (self.pos < self.string.length) {
        self.prev_pos = self.pos;
        self.pos += 1;
        result = self.matched = self.working.substring(0, 1);
        self.working = self.working.substring(1);
      } else {
        self.matched = nil;
      }

      return result;
    }, $StringScanner_get_byte$13.$$arity = 0);
    Opal.alias(self, "getch", "get_byte");
    Opal.def(self, '$match?', $StringScanner_match$ques$14 = function $StringScanner_match$ques$14(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      } else {
        self.prev_pos = self.pos;
        return result[0].length;
      }

      ;
    }, $StringScanner_match$ques$14.$$arity = 1);
    Opal.def(self, '$pos=', $StringScanner_pos$eq$15 = function $StringScanner_pos$eq$15(pos) {
      var self = this;

      if (pos < 0) {
        pos += self.string.$length();
      }

      ;
      self.pos = pos;
      return self.working = self.string.slice(pos);
    }, $StringScanner_pos$eq$15.$$arity = 1);
    Opal.def(self, '$matched_size', $StringScanner_matched_size$16 = function $$matched_size() {
      var self = this;

      if (self.matched === nil) {
        return nil;
      }

      return self.matched.length;
    }, $StringScanner_matched_size$16.$$arity = 0);
    Opal.def(self, '$post_match', $StringScanner_post_match$17 = function $$post_match() {
      var self = this;

      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(self.pos);
    }, $StringScanner_post_match$17.$$arity = 0);
    Opal.def(self, '$pre_match', $StringScanner_pre_match$18 = function $$pre_match() {
      var self = this;

      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(0, self.prev_pos);
    }, $StringScanner_pre_match$18.$$arity = 0);
    Opal.def(self, '$reset', $StringScanner_reset$19 = function $$reset() {
      var self = this;
      self.working = self.string;
      self.matched = nil;
      return self.pos = 0;
    }, $StringScanner_reset$19.$$arity = 0);
    Opal.def(self, '$rest', $StringScanner_rest$20 = function $$rest() {
      var self = this;
      return self.working;
    }, $StringScanner_rest$20.$$arity = 0);
    Opal.def(self, '$rest?', $StringScanner_rest$ques$21 = function $StringScanner_rest$ques$21() {
      var self = this;
      return self.working.length !== 0;
    }, $StringScanner_rest$ques$21.$$arity = 0);
    Opal.def(self, '$rest_size', $StringScanner_rest_size$22 = function $$rest_size() {
      var self = this;
      return self.$rest().$size();
    }, $StringScanner_rest_size$22.$$arity = 0);
    Opal.def(self, '$terminate', $StringScanner_terminate$23 = function $$terminate() {
      var self = this,
          $writer = nil;
      self.match = nil;
      $writer = [self.string.$length()];
      $send(self, 'pos=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
      ;
    }, $StringScanner_terminate$23.$$arity = 0);
    Opal.def(self, '$unscan', $StringScanner_unscan$24 = function $$unscan() {
      var self = this;
      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    }, $StringScanner_unscan$24.$$arity = 0);
    self.$private();
    return (Opal.def(self, '$anchor', $StringScanner_anchor$25 = function $$anchor(pattern) {
      var self = this;
      var flags = pattern.toString().match(/\/([^\/]+)$/);
      flags = flags ? flags[1] : undefined;
      return new RegExp('^(?:' + pattern.source + ')', flags);
    }, $StringScanner_anchor$25.$$arity = 1), nil) && 'anchor';
  }($nesting[0], null, $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/normalize"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Normalize');
      var $nesting = [self].concat($parent_nesting),
          $Normalize_comparison_operator$1,
          $Normalize_target_number$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if (/<=|=</['$===']($case)) {
            return "<=";
          } else if (/>=|=>/['$===']($case)) {
            return ">=";
          } else if (/<>|!=|=!/['$===']($case)) {
            return "!=";
          } else if (/</['$===']($case)) {
            return "<";
          } else if (/>/['$===']($case)) {
            return ">";
          } else if (/=/['$===']($case)) {
            return "==";
          } else {
            return nil;
          }
        }();
      }, $Normalize_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
        var self = this;

        if (val['$==']("?")) {
          return val;
        } else {
          return val.$to_i();
        }
      }, $Normalize_target_number$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/command/lexer"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  self.$require("strscan");
  self.$require("bcdice/normalize");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Command');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Lexer');
        var $nesting = [self].concat($parent_nesting),
            $Lexer_initialize$1,
            $Lexer_next_token$3,
            $Lexer_source$5;
        self.$$prototype.scanner = self.$$prototype.notations = nil;
        Opal.const_set($nesting[0], 'SYMBOLS', $hash2(["+", "-", "*", "/", "(", ")", "?", "@", "#", "$"], {
          "+": "PLUS",
          "-": "MINUS",
          "*": "ASTERISK",
          "/": "SLASH",
          "(": "PARENL",
          ")": "PARENR",
          "?": "QUESTION",
          "@": "AT",
          "#": "SHARP",
          "$": "DOLLAR"
        }).$freeze());
        Opal.def(self, '$initialize', $Lexer_initialize$1 = function $$initialize(source, notations) {
          var $a,
              $b,
              $$2,
              self = this,
              $ret_or_1 = nil;

          source = function () {
            if ($truthy($ret_or_1 = ($b = ($a = source, $a === nil || $a == null ? nil : $send($a, 'split', [" ", 2])), $b === nil || $b == null ? nil : $send($b, 'first', [])))) {
              return $ret_or_1;
            } else {
              return "";
            }

            ;
            return nil;
          }();

          self.scanner = $$($nesting, 'StringScanner').$new(source);
          return self.notations = $send(notations, 'map', [], ($$2 = function (_$$28) {
            function $$2(_x8) {
              return _$$28.apply(this, arguments);
            }

            $$2.toString = function () {
              return _$$28.toString();
            };

            return $$2;
          }(function (n) {
            var self = $$2.$$s == null ? this : $$2.$$s;

            if (n == null) {
              n = nil;
            }

            ;

            if ($truthy(n['$is_a?']($$($nesting, 'String')))) {
              return $$($nesting, 'Regexp').$new(n);
            } else {
              return n;
            }

            ;
          }), $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $Lexer_initialize$1.$$arity = 2);
        Opal.def(self, '$next_token', $Lexer_next_token$3 = function $$next_token() {
          try {
            var _$$29,
                self = this,
                number = nil,
                cmp_op = nil,
                type = nil,
                char$ = nil,
                $ret_or_2 = nil;

            if ($truthy(self.scanner['$eos?']())) {
              return [false, "$"];
            }

            ;
            $send(self.notations, 'each', [], (_$$29 = function $$4(n) {
              var self = _$$29.$$s == null ? this : _$$29.$$s,
                  token = nil;
              if (self.scanner == null) self.scanner = nil;

              if (n == null) {
                n = nil;
              }

              ;
              token = self.scanner.$scan(n);

              if ($truthy(token)) {
                Opal.ret(["NOTATION", token]);
              } else {
                return nil;
              }

              ;
            }, _$$29.$$s = self, _$$29.$$arity = 1, _$$29));

            if ($truthy(number = self.scanner.$scan(/\d+/))) {
              return ["NUMBER", number.$to_i()];
            } else if ($truthy(cmp_op = self.scanner.$scan(/[<>!=]+/))) {
              cmp_op = $$($nesting, 'Normalize').$comparison_operator(cmp_op);

              type = function () {
                if ($truthy(cmp_op)) {
                  return "CMP_OP";
                } else {
                  return "ILLEGAL";
                }

                ;
                return nil;
              }();

              return [type, cmp_op];
            } else {
              char$ = self.scanner.$getch().$upcase();

              type = function () {
                if ($truthy($ret_or_2 = $$($nesting, 'SYMBOLS')['$[]'](char$))) {
                  return $ret_or_2;
                } else {
                  return char$.$to_sym();
                }

                ;
                return nil;
              }();

              return [type, char$];
            }

            ;
          } catch ($returner) {
            if ($returner === Opal.returner) {
              return $returner.$v;
            }

            throw $returner;
          }
        }, $Lexer_next_token$3.$$arity = 0);
        return (Opal.def(self, '$source', $Lexer_source$5 = function $$source() {
          var self = this;
          return self.scanner.$string();
        }, $Lexer_source$5.$$arity = 0), nil) && 'source';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/command/parsed"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Command');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Parsed');
        var $nesting = [self].concat($parent_nesting),
            $Parsed_initialize$1,
            $Parsed_question_target$ques$2,
            $Parsed_to_s$3;
        self.$$prototype.question_target = self.$$prototype.critical = self.$$prototype.fumble = self.$$prototype.dollar = self.$$prototype.modify_number = self.$$prototype.target_number = self.$$prototype.command = self.$$prototype.cmp_op = nil;
        self.$attr_accessor("command");
        self.$attr_accessor("critical");
        self.$attr_accessor("fumble");
        self.$attr_accessor("dollar");
        self.$attr_accessor("modify_number");
        self.$attr_accessor("cmp_op");
        self.$attr_accessor("target_number");
        self.$attr_writer("question_target");
        Opal.def(self, '$initialize', $Parsed_initialize$1 = function $$initialize() {
          var self = this;
          self.critical = nil;
          self.fumble = nil;
          self.dollar = nil;
          self.cmp_op = nil;
          self.target_number = nil;
          return self.question_target = false;
        }, $Parsed_initialize$1.$$arity = 0);
        Opal.def(self, '$question_target?', $Parsed_question_target$ques$2 = function $Parsed_question_target$ques$2() {
          var self = this;
          return self.question_target;
        }, $Parsed_question_target$ques$2.$$arity = 0);
        return (Opal.def(self, '$to_s', $Parsed_to_s$3 = function $$to_s(suffix_position) {
          var self = this,
              c = nil,
              f = nil,
              d = nil,
              m = nil,
              target = nil,
              $case = nil;

          if (suffix_position == null) {
            suffix_position = "after_command";
          }

          ;

          c = function () {
            if ($truthy(self.critical)) {
              return "" + "@" + self.critical;
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          f = function () {
            if ($truthy(self.fumble)) {
              return "" + "#" + self.fumble;
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          d = function () {
            if ($truthy(self.dollar)) {
              return "" + "$" + self.dollar;
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          m = $$($nesting, 'Format').$modifier(self.modify_number);

          target = function () {
            if ($truthy(self.question_target)) {
              return "?";
            } else {
              return self.target_number;
            }

            ;
            return nil;
          }();

          return function () {
            $case = suffix_position;

            if ("after_command"['$===']($case)) {
              return [self.command, c, f, d, m, self.cmp_op, target].$join();
            } else if ("after_modify_number"['$===']($case)) {
              return [self.command, m, c, f, d, self.cmp_op, target].$join();
            } else if ("after_target_number"['$===']($case)) {
              return [self.command, m, self.cmp_op, target, c, f, d].$join();
            } else {
              return nil;
            }
          }();
        }, $Parsed_to_s$3.$$arity = -1), nil) && 'to_s';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/command/parser"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $klass = Opal.klass,
      $module = Opal.module,
      $hash2 = Opal.hash2,
      $send2 = Opal.send2,
      $send = Opal.send,
      $hash = Opal.hash,
      $truthy = Opal.truthy;
  self.$require("racc/parser.rb");
  self.$require("bcdice/arithmetic/node");
  self.$require("bcdice/command/lexer");
  self.$require("bcdice/command/parsed");

  (function ($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Parser');
    var $nesting = [self].concat($parent_nesting);
    return nil;
  })($$$($$($nesting, 'BCDice'), 'Command'), $$$($$($nesting, 'Racc'), 'Parser'), $nesting);

  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Command');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Parser');
        var $nesting = [self].concat($parent_nesting),
            $Parser_initialize$1,
            $Parser_disable_modifier$2,
            $Parser_enable_critical$3,
            $Parser_enable_fumble$4,
            $Parser_enable_dollar$5,
            $Parser_restrict_cmp_op_to$6,
            $Parser_enable_question_target$7,
            $Parser_parse$8,
            $Parser_parsed$9,
            $Parser_next_token$11,
            $Parser__reduce_1$12,
            $Parser__reduce_2$13,
            $Parser__reduce_3$14,
            $Parser__reduce_4$15,
            $Parser__reduce_5$16,
            $Parser__reduce_6$17,
            $Parser__reduce_7$18,
            $Parser__reduce_8$19,
            $Parser__reduce_9$20,
            $Parser__reduce_10$21,
            $Parser__reduce_11$22,
            $Parser__reduce_12$23,
            $Parser__reduce_13$24,
            $Parser__reduce_14$25,
            $Parser__reduce_15$26,
            $Parser__reduce_16$27,
            $Parser__reduce_18$28,
            $Parser__reduce_19$29,
            $Parser__reduce_21$30,
            $Parser__reduce_22$31,
            $Parser__reduce_23$32,
            $Parser__reduce_24$33,
            $Parser__reduce_25$34,
            $Parser__reduce_26$35,
            $Parser__reduce_27$36,
            $Parser__reduce_29$37,
            $Parser__reduce_30$38,
            $Parser__reduce_none$39,
            racc_action_table = nil,
            racc_action_check = nil,
            racc_action_pointer = nil,
            racc_action_default = nil,
            racc_goto_table = nil,
            racc_goto_check = nil,
            racc_goto_pointer = nil,
            racc_goto_default = nil,
            racc_reduce_table = nil,
            racc_reduce_n = nil,
            racc_shift_n = nil,
            racc_token_table = nil,
            racc_nt_base = nil,
            racc_use_result_var = nil;
        self.$$prototype.notations = self.$$prototype.lexer = self.$$prototype.modifier = self.$$prototype.critical = self.$$prototype.fumble = self.$$prototype.dollar = self.$$prototype.allowed_cmp_op = self.$$prototype.question_target = nil;
        Opal.def(self, '$initialize', $Parser_initialize$1 = function $$initialize($a, $b) {
          var $post_args,
              $kwargs,
              notations,
              round_type,
              $iter = $Parser_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Parser_initialize$1.$$p = null;
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          $kwargs = Opal.extract_kwargs($post_args);

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          notations = $post_args;
          ;

          if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'round_type')) {
            throw Opal.ArgumentError.$new('missing keyword: round_type');
          }

          round_type = $kwargs.$$smap["round_type"];
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Parser_initialize$1, false, true), 'initialize', [], null);
          self.notations = notations;
          self.round_type = round_type;
          self.modifier = true;
          self.critical = false;
          self.fumble = false;
          self.dollar = false;
          self.allowed_cmp_op = [nil, ">=", ">", "<=", "<", "==", "!="];
          return self.question_target = false;
        }, $Parser_initialize$1.$$arity = -2);
        Opal.def(self, '$disable_modifier', $Parser_disable_modifier$2 = function $$disable_modifier() {
          var self = this;
          self.modifier = false;
          return self;
        }, $Parser_disable_modifier$2.$$arity = 0);
        Opal.def(self, '$enable_critical', $Parser_enable_critical$3 = function $$enable_critical() {
          var self = this;
          self.critical = true;
          return self;
        }, $Parser_enable_critical$3.$$arity = 0);
        Opal.def(self, '$enable_fumble', $Parser_enable_fumble$4 = function $$enable_fumble() {
          var self = this;
          self.fumble = true;
          return self;
        }, $Parser_enable_fumble$4.$$arity = 0);
        Opal.def(self, '$enable_dollar', $Parser_enable_dollar$5 = function $$enable_dollar() {
          var self = this;
          self.dollar = true;
          return self;
        }, $Parser_enable_dollar$5.$$arity = 0);
        Opal.def(self, '$restrict_cmp_op_to', $Parser_restrict_cmp_op_to$6 = function $$restrict_cmp_op_to($a) {
          var $post_args,
              ops,
              self = this;
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ops = $post_args;
          ;
          self.allowed_cmp_op = ops;
          return self;
        }, $Parser_restrict_cmp_op_to$6.$$arity = -1);
        Opal.def(self, '$enable_question_target', $Parser_enable_question_target$7 = function $$enable_question_target() {
          var self = this;
          self.question_target = true;
          return self;
        }, $Parser_enable_question_target$7.$$arity = 0);
        Opal.def(self, '$parse', $Parser_parse$8 = function $$parse(source) {
          var self = this;

          try {
            self.lexer = $$($nesting, 'Lexer').$new(source, self.notations);
            return self.$do_parse();
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'ParseError'), $$($nesting, 'ZeroDivisionError')])) {
              try {
                return nil;
              } finally {
                Opal.pop_exception();
              }
            } else {
              throw $err;
            }
          }
        }, $Parser_parse$8.$$arity = 1);
        self.$private();
        Opal.def(self, '$parsed', $Parser_parsed$9 = function $$parsed(notation, option, modifier, target) {
          var _$$30,
              self = this;

          return $send($$($nesting, 'Parsed').$new(), 'tap', [], (_$$30 = function $$10(p) {
            var self = _$$30.$$s == null ? this : _$$30.$$s,
                $a,
                $b,
                $c,
                $d,
                $writer = nil;
            if (self.round_type == null) self.round_type = nil;

            if (p == null) {
              p = nil;
            }

            ;
            $writer = [notation];
            $send(p, 'command=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [($a = option['$[]']("critical"), $a === nil || $a == null ? nil : $send($a, 'eval', [self.round_type]))];
            $send(p, 'critical=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [($b = option['$[]']("fumble"), $b === nil || $b == null ? nil : $send($b, 'eval', [self.round_type]))];
            $send(p, 'fumble=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [($c = option['$[]']("dollar"), $c === nil || $c == null ? nil : $send($c, 'eval', [self.round_type]))];
            $send(p, 'dollar=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [modifier.$eval(self.round_type)];
            $send(p, 'modify_number=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [target['$[]']("cmp_op")];
            $send(p, 'cmp_op=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;

            if (target['$[]']("target")['$==']("?")) {
              $writer = [true];
              $send(p, 'question_target=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = [0];
              $send(p, 'target_number=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              ;
            } else {
              $writer = [false];
              $send(p, 'question_target=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = [($d = target['$[]']("target"), $d === nil || $d == null ? nil : $send($d, 'eval', [self.round_type]))];
              $send(p, 'target_number=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              ;
            }

            ;
          }, _$$30.$$s = self, _$$30.$$arity = 1, _$$30));
        }, $Parser_parsed$9.$$arity = 4);
        Opal.def(self, '$next_token', $Parser_next_token$11 = function $$next_token() {
          var self = this;
          return self.lexer.$next_token();
        }, $Parser_next_token$11.$$arity = 0);
        racc_action_table = [24, 6, 7, 16, 17, 20, 21, 16, 17, 23, 6, 7, 14, 36, 37, 31, 11, 12, 13, 14, 24, 2, 24, 36, 37, 20, 21, 20, 21, 23, 24, 23, 24, 41, 42, 20, 21, 20, 21, 23, 24, 23, 24, 36, 37, 20, 21, 20, 21, 23, 24, 23, 24, 36, 37, 20, 21, 20, 21, 23, 24, 23, 24, 36, 37, 20, 21, 20, 21, 23, 24, 23, 24, 36, 37, 20, 21, 20, 21, 23, 24, 23, 24, 36, 37, 20, 21, 20, 21, 23, 3, 23, 41, 42, 8, nil, nil, 45, 11, 12, 13, 14, 51, 49, 50, 52];
        racc_action_check = [14, 2, 2, 9, 9, 14, 14, 5, 5, 14, 4, 4, 9, 18, 18, 14, 4, 4, 4, 4, 6, 0, 7, 25, 25, 6, 6, 7, 7, 6, 11, 7, 12, 30, 30, 11, 11, 12, 12, 11, 13, 12, 16, 32, 32, 13, 13, 16, 16, 13, 17, 16, 20, 34, 34, 17, 17, 20, 20, 17, 21, 20, 23, 35, 35, 21, 21, 23, 23, 21, 36, 23, 37, 46, 46, 36, 36, 37, 37, 36, 41, 37, 42, 47, 47, 41, 41, 42, 42, 41, 1, 42, 40, 40, 3, nil, nil, 40, 15, 15, 15, 15, 44, 44, 44, 44];
        racc_action_pointer = [3, 90, -6, 94, 3, 0, 18, 20, nil, -4, nil, 28, 30, 38, -2, 85, 40, 48, 4, nil, 50, 58, nil, 60, nil, 14, nil, nil, nil, nil, 26, nil, 34, nil, 44, 54, 68, 70, nil, nil, 85, 78, 80, nil, 99, nil, 64, 74, nil, nil, nil, nil, nil];
        racc_action_default = [-31, -31, -4, -31, -12, -4, -31, -31, 53, -12, -3, -31, -31, -31, -31, -12, -31, -31, -8, -20, -31, -31, -28, -31, -30, -9, -1, -5, -6, -7, -13, -14, -17, -2, -10, -11, -31, -31, -26, -27, -31, -31, -31, -18, -21, -29, -15, -16, -19, -22, -23, -24, -25];
        racc_goto_table = [18, 25, 1, 27, 28, 29, 30, 48, nil, 10, 34, 35, 38, 39, 26, 40, 4, nil, nil, 15, 33, 5, nil, 9, nil, nil, nil, nil, 43, 44, nil, nil, nil, nil, nil, 46, 47];
        racc_goto_check = [6, 6, 1, 5, 5, 5, 7, 8, nil, 4, 6, 6, 5, 5, 4, 7, 2, nil, nil, 2, 4, 3, nil, 3, nil, nil, nil, nil, 5, 5, nil, nil, nil, nil, nil, 6, 6];
        racc_goto_pointer = [nil, 2, 14, 19, 5, -8, -6, -8, -37, nil];
        racc_goto_default = [nil, nil, nil, nil, nil, 19, 32, nil, nil, 22];
        racc_reduce_table = [0, 0, "racc_error", 4, 20, "_reduce_1", 4, 20, "_reduce_2", 3, 20, "_reduce_3", 0, 21, "_reduce_4", 3, 21, "_reduce_5", 3, 21, "_reduce_6", 3, 21, "_reduce_7", 2, 22, "_reduce_8", 2, 22, "_reduce_9", 3, 22, "_reduce_10", 3, 22, "_reduce_11", 0, 23, "_reduce_12", 2, 23, "_reduce_13", 2, 23, "_reduce_14", 3, 26, "_reduce_15", 3, 26, "_reduce_16", 1, 26, "_reduce_none", 3, 25, "_reduce_18", 4, 25, "_reduce_19", 1, 25, "_reduce_none", 0, 27, "_reduce_21", 1, 27, "_reduce_22", 1, 27, "_reduce_23", 1, 27, "_reduce_24", 1, 27, "_reduce_25", 2, 24, "_reduce_26", 2, 24, "_reduce_27", 1, 24, "_reduce_none", 3, 28, "_reduce_29", 1, 28, "_reduce_30"];
        racc_reduce_n = 31;
        racc_shift_n = 53;
        racc_token_table = $hash(false, 0, "error", 1, "NUMBER", 2, "R", 3, "U", 4, "C", 5, "F", 6, "PLUS", 7, "MINUS", 8, "ASTERISK", 9, "SLASH", 10, "PARENL", 11, "PARENR", 12, "AT", 13, "SHARP", 14, "DOLLAR", 15, "CMP_OP", 16, "QUESTION", 17, "NOTATION", 18);
        racc_nt_base = 19;
        racc_use_result_var = true;
        Opal.const_set($nesting[0], 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);
        Opal.const_set($nesting[0], 'Racc_token_to_s_table', ["$end", "error", "NUMBER", "R", "U", "C", "F", "PLUS", "MINUS", "ASTERISK", "SLASH", "PARENL", "PARENR", "AT", "SHARP", "DOLLAR", "CMP_OP", "QUESTION", "NOTATION", "$start", "expr", "option", "modifier", "target", "unary", "mul", "add", "round_type", "term"]);
        Opal.const_set($nesting[0], 'Racc_debug_parser', false);
        Opal.def(self, '$_reduce_1', $Parser__reduce_1$12 = function $$_reduce_1(val, _values, result) {
          var $a,
              $b,
              self = this,
              notation = nil,
              option = nil,
              modifier = nil,
              target = nil;

          if ($truthy(self.modifier)) {} else {
            self.$raise($$($nesting, 'ParseError'));
          }

          ;
          $b = val, $a = Opal.to_ary($b), notation = $a[0] == null ? nil : $a[0], option = $a[1] == null ? nil : $a[1], modifier = $a[2] == null ? nil : $a[2], target = $a[3] == null ? nil : $a[3], $b;
          result = self.$parsed(notation, option, modifier, target);
          return result;
        }, $Parser__reduce_1$12.$$arity = 3);
        Opal.def(self, '$_reduce_2', $Parser__reduce_2$13 = function $$_reduce_2(val, _values, result) {
          var $a,
              $b,
              self = this,
              notation = nil,
              modifier = nil,
              option = nil,
              target = nil;

          if ($truthy(self.modifier)) {} else {
            self.$raise($$($nesting, 'ParseError'));
          }

          ;
          $b = val, $a = Opal.to_ary($b), notation = $a[0] == null ? nil : $a[0], modifier = $a[1] == null ? nil : $a[1], option = $a[2] == null ? nil : $a[2], target = $a[3] == null ? nil : $a[3], $b;
          result = self.$parsed(notation, option, modifier, target);
          return result;
        }, $Parser__reduce_2$13.$$arity = 3);
        Opal.def(self, '$_reduce_3', $Parser__reduce_3$14 = function $$_reduce_3(val, _values, result) {
          var $a,
              $b,
              self = this,
              notation = nil,
              option = nil,
              target = nil;
          $b = val, $a = Opal.to_ary($b), notation = $a[0] == null ? nil : $a[0], option = $a[1] == null ? nil : $a[1], target = $a[2] == null ? nil : $a[2], $b;
          result = self.$parsed(notation, option, $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'Number').$new(0), target);
          return result;
        }, $Parser__reduce_3$14.$$arity = 3);
        Opal.def(self, '$_reduce_4', $Parser__reduce_4$15 = function $$_reduce_4(val, _values, result) {
          var self = this;
          result = $hash2([], {});
          return result;
        }, $Parser__reduce_4$15.$$arity = 3);
        Opal.def(self, '$_reduce_5', $Parser__reduce_5$16 = function $$_reduce_5(val, _values, result) {
          var $a,
              $b,
              self = this,
              option = nil,
              _ = nil,
              term = nil,
              $ret_or_1 = nil,
              $writer = nil;
          $b = val, $a = Opal.to_ary($b), option = $a[0] == null ? nil : $a[0], _ = $a[1] == null ? nil : $a[1], term = $a[2] == null ? nil : $a[2], $b;

          if ($truthy(function () {
            if ($truthy($ret_or_1 = self.critical)) {
              return option['$[]']("critical")['$nil?']();
            } else {
              return $ret_or_1;
            }

            ;
            return nil;
          }())) {} else {
            self.$raise($$($nesting, 'ParseError'));
          }

          ;
          $writer = ["critical", term];
          $send(option, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          result = option;
          return result;
        }, $Parser__reduce_5$16.$$arity = 3);
        Opal.def(self, '$_reduce_6', $Parser__reduce_6$17 = function $$_reduce_6(val, _values, result) {
          var $a,
              $b,
              self = this,
              option = nil,
              _ = nil,
              term = nil,
              $ret_or_2 = nil,
              $writer = nil;
          $b = val, $a = Opal.to_ary($b), option = $a[0] == null ? nil : $a[0], _ = $a[1] == null ? nil : $a[1], term = $a[2] == null ? nil : $a[2], $b;

          if ($truthy(function () {
            if ($truthy($ret_or_2 = self.fumble)) {
              return option['$[]']("fumble")['$nil?']();
            } else {
              return $ret_or_2;
            }

            ;
            return nil;
          }())) {} else {
            self.$raise($$($nesting, 'ParseError'));
          }

          ;
          $writer = ["fumble", term];
          $send(option, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          result = option;
          return result;
        }, $Parser__reduce_6$17.$$arity = 3);
        Opal.def(self, '$_reduce_7', $Parser__reduce_7$18 = function $$_reduce_7(val, _values, result) {
          var $a,
              $b,
              self = this,
              option = nil,
              _ = nil,
              term = nil,
              $ret_or_3 = nil,
              $writer = nil;
          $b = val, $a = Opal.to_ary($b), option = $a[0] == null ? nil : $a[0], _ = $a[1] == null ? nil : $a[1], term = $a[2] == null ? nil : $a[2], $b;

          if ($truthy(function () {
            if ($truthy($ret_or_3 = self.dollar)) {
              return option['$[]']("dollar")['$nil?']();
            } else {
              return $ret_or_3;
            }

            ;
            return nil;
          }())) {} else {
            self.$raise($$($nesting, 'ParseError'));
          }

          ;
          $writer = ["dollar", term];
          $send(option, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          result = option;
          return result;
        }, $Parser__reduce_7$18.$$arity = 3);
        Opal.def(self, '$_reduce_8', $Parser__reduce_8$19 = function $$_reduce_8(val, _values, result) {
          var self = this;
          result = val['$[]'](1);
          return result;
        }, $Parser__reduce_8$19.$$arity = 3);
        Opal.def(self, '$_reduce_9', $Parser__reduce_9$20 = function $$_reduce_9(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'Negative').$new(val['$[]'](1));
          return result;
        }, $Parser__reduce_9$20.$$arity = 3);
        Opal.def(self, '$_reduce_10', $Parser__reduce_10$21 = function $$_reduce_10(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'BinaryOp').$new(val['$[]'](0), "+", val['$[]'](2));
          return result;
        }, $Parser__reduce_10$21.$$arity = 3);
        Opal.def(self, '$_reduce_11', $Parser__reduce_11$22 = function $$_reduce_11(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'BinaryOp').$new(val['$[]'](0), "-", val['$[]'](2));
          return result;
        }, $Parser__reduce_11$22.$$arity = 3);
        Opal.def(self, '$_reduce_12', $Parser__reduce_12$23 = function $$_reduce_12(val, _values, result) {
          var self = this;

          if ($truthy(self.allowed_cmp_op['$include?'](nil))) {} else {
            self.$raise($$($nesting, 'ParseError'));
          }

          ;
          result = $hash2([], {});
          return result;
        }, $Parser__reduce_12$23.$$arity = 3);
        Opal.def(self, '$_reduce_13', $Parser__reduce_13$24 = function $$_reduce_13(val, _values, result) {
          var $a,
              $b,
              self = this,
              cmp_op = nil,
              target = nil;
          $b = val, $a = Opal.to_ary($b), cmp_op = $a[0] == null ? nil : $a[0], target = $a[1] == null ? nil : $a[1], $b;

          if ($truthy(self.allowed_cmp_op['$include?'](cmp_op))) {} else {
            self.$raise($$($nesting, 'ParseError'));
          }

          ;
          result = $hash2(["cmp_op", "target"], {
            "cmp_op": cmp_op,
            "target": target
          });
          return result;
        }, $Parser__reduce_13$24.$$arity = 3);
        Opal.def(self, '$_reduce_14', $Parser__reduce_14$25 = function $$_reduce_14(val, _values, result) {
          var self = this,
              cmp_op = nil;
          cmp_op = val['$[]'](0);

          if ($truthy(self.question_target)) {} else {
            self.$raise($$($nesting, 'ParseError'));
          }

          ;

          if ($truthy(self.allowed_cmp_op['$include?'](cmp_op))) {} else {
            self.$raise($$($nesting, 'ParseError'));
          }

          ;
          result = $hash2(["cmp_op", "target"], {
            "cmp_op": cmp_op,
            "target": "?"
          });
          return result;
        }, $Parser__reduce_14$25.$$arity = 3);
        Opal.def(self, '$_reduce_15', $Parser__reduce_15$26 = function $$_reduce_15(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'BinaryOp').$new(val['$[]'](0), "+", val['$[]'](2));
          return result;
        }, $Parser__reduce_15$26.$$arity = 3);
        Opal.def(self, '$_reduce_16', $Parser__reduce_16$27 = function $$_reduce_16(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'BinaryOp').$new(val['$[]'](0), "-", val['$[]'](2));
          return result;
        }, $Parser__reduce_16$27.$$arity = 3);
        Opal.def(self, '$_reduce_18', $Parser__reduce_18$28 = function $$_reduce_18(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'BinaryOp').$new(val['$[]'](0), "*", val['$[]'](2));
          return result;
        }, $Parser__reduce_18$28.$$arity = 3);
        Opal.def(self, '$_reduce_19', $Parser__reduce_19$29 = function $$_reduce_19(val, _values, result) {
          var self = this,
              divied_class = nil;
          divied_class = val['$[]'](3);
          result = divied_class.$new(val['$[]'](0), val['$[]'](2));
          return result;
        }, $Parser__reduce_19$29.$$arity = 3);
        Opal.def(self, '$_reduce_21', $Parser__reduce_21$30 = function $$_reduce_21(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithGameSystemDefault');
          return result;
        }, $Parser__reduce_21$30.$$arity = 3);
        Opal.def(self, '$_reduce_22', $Parser__reduce_22$31 = function $$_reduce_22(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithCeil');
          return result;
        }, $Parser__reduce_22$31.$$arity = 3);
        Opal.def(self, '$_reduce_23', $Parser__reduce_23$32 = function $$_reduce_23(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithCeil');
          return result;
        }, $Parser__reduce_23$32.$$arity = 3);
        Opal.def(self, '$_reduce_24', $Parser__reduce_24$33 = function $$_reduce_24(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithRound');
          return result;
        }, $Parser__reduce_24$33.$$arity = 3);
        Opal.def(self, '$_reduce_25', $Parser__reduce_25$34 = function $$_reduce_25(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithFloor');
          return result;
        }, $Parser__reduce_25$34.$$arity = 3);
        Opal.def(self, '$_reduce_26', $Parser__reduce_26$35 = function $$_reduce_26(val, _values, result) {
          var self = this;
          result = val['$[]'](1);
          return result;
        }, $Parser__reduce_26$35.$$arity = 3);
        Opal.def(self, '$_reduce_27', $Parser__reduce_27$36 = function $$_reduce_27(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'Negative').$new(val['$[]'](1));
          return result;
        }, $Parser__reduce_27$36.$$arity = 3);
        Opal.def(self, '$_reduce_29', $Parser__reduce_29$37 = function $$_reduce_29(val, _values, result) {
          var self = this;
          result = val['$[]'](1);
          return result;
        }, $Parser__reduce_29$37.$$arity = 3);
        Opal.def(self, '$_reduce_30', $Parser__reduce_30$38 = function $$_reduce_30(val, _values, result) {
          var self = this;
          result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'Number').$new(val['$[]'](0));
          return result;
        }, $Parser__reduce_30$38.$$arity = 3);
        return (Opal.def(self, '$_reduce_none', $Parser__reduce_none$39 = function $$_reduce_none(val, _values, result) {
          var self = this;
          return val['$[]'](0);
        }, $Parser__reduce_none$39.$$arity = 3), nil) && '_reduce_none';
      })($nesting[0], $$$($$($nesting, 'Racc'), 'Parser'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/deprecated/checker"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Deprecated');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $parent_nesting) {
        var self = $module($base, 'Checker');
        var $nesting = [self].concat($parent_nesting),
            $Checker_check_result_legacy$1,
            $Checker_check_1D100$2,
            $Checker_check_1D20$3,
            $Checker_check_nD10$4,
            $Checker_check_2D6$5,
            $Checker_check_nD6$6;
        self.$private();
        Opal.def(self, '$check_result_legacy', $Checker_check_result_legacy$1 = function $$check_result_legacy(total, rand_results, cmp_op, target) {
          var self = this,
              sides_list = nil,
              value_list = nil,
              dice_total = nil,
              ret = nil,
              $case = nil,
              $ret_or_1 = nil,
              $ret_or_2 = nil;
          sides_list = $send(rand_results, 'map', [], "sides".$to_proc());
          value_list = $send(rand_results, 'map', [], "value".$to_proc());
          dice_total = value_list.$sum();

          ret = function () {
            $case = sides_list;

            if ([100]['$===']($case)) {
              return self.$check_1D100(total, dice_total, cmp_op, target);
            } else if ([20]['$===']($case)) {
              return self.$check_1D20(total, dice_total, cmp_op, target);
            } else if ([6, 6]['$===']($case)) {
              return self.$check_2D6(total, dice_total, value_list, cmp_op, target);
            } else {
              return nil;
            }
          }();

          if ($truthy(function () {
            if ($truthy($ret_or_1 = ret['$nil?']())) {
              return $ret_or_1;
            } else {
              return ret['$empty?']();
            }

            ;
            return nil;
          }())) {} else {
            return $$($nesting, 'Result').$new(ret.$delete_prefix(" ＞ "));
          }

          ;

          ret = function () {
            $case = sides_list.$uniq();

            if ([10]['$===']($case)) {
              return self.$check_nD10(total, dice_total, value_list, cmp_op, target);
            } else if ([6]['$===']($case)) {
              return self.$check_nD6(total, dice_total, value_list, cmp_op, target);
            } else {
              return nil;
            }
          }();

          if ($truthy(function () {
            if ($truthy($ret_or_2 = ret['$nil?']())) {
              return $ret_or_2;
            } else {
              return ret['$empty?']();
            }

            ;
            return nil;
          }())) {} else {
            return $$($nesting, 'Result').$new(ret.$delete_prefix(" ＞ "));
          }

          ;
          return nil;
        }, $Checker_check_result_legacy$1.$$arity = 4);
        Opal.def(self, '$check_1D100', $Checker_check_1D100$2 = function $$check_1D100(total, dice_total, cmp_op, target) {
          var self = this;
          return nil;
        }, $Checker_check_1D100$2.$$arity = 4);
        Opal.def(self, '$check_1D20', $Checker_check_1D20$3 = function $$check_1D20(total, dice_total, cmp_op, target) {
          var self = this;
          return nil;
        }, $Checker_check_1D20$3.$$arity = 4);
        Opal.def(self, '$check_nD10', $Checker_check_nD10$4 = function $$check_nD10(total, dice_total, dice_list, cmp_op, target) {
          var self = this;
          return nil;
        }, $Checker_check_nD10$4.$$arity = 5);
        Opal.def(self, '$check_2D6', $Checker_check_2D6$5 = function $$check_2D6(total, dice_total, dice_list, cmp_op, target) {
          var self = this;
          return nil;
        }, $Checker_check_2D6$5.$$arity = 5);
        Opal.def(self, '$check_nD6', $Checker_check_nD6$6 = function $$check_nD6(total, dice_total, dice_list, cmp_op, target) {
          var self = this;
          return nil;
        }, $Checker_check_nD6$6.$$arity = 5);
      })($nesting[0], $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/base"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $range = Opal.range,
      $writer = nil;
  self.$require("i18n");
  self.$require("i18n/backend/fallbacks");
  self.$require("bcdice/randomizer");
  self.$require("bcdice/dice_table");
  self.$require("bcdice/enum");
  self.$require("bcdice/translate");
  self.$require("bcdice/result");
  self.$require("bcdice/command/parser");
  self.$require("bcdice/deprecated/checker");

  (function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Base');
      var $nesting = [self].concat($parent_nesting),
          $Base_initialize$7,
          $Base_sort_add_dice$ques$8,
          $Base_sort_barabara_dice$ques$9,
          $Base_enabled_d9$ques$10,
          $Base_enable_debug$11,
          $Base_eval$12,
          $Base_change_text$13,
          $Base_check_result$14,
          $Base_grich_text$15,
          $Base_eval_common_command$16,
          $Base_dice_command$18,
          $Base_eval_game_system_specific_command$20,
          $Base_result_ndx$21,
          $Base_result_1d100$22,
          $Base_result_1d20$23,
          $Base_result_nd10$24,
          $Base_result_2d6$25,
          $Base_result_nd6$26,
          $Base_get_table_by_2d6$27,
          $Base_get_table_by_1d6$28,
          $Base_get_table_by_nD6$29,
          $Base_get_table_by_nDx$30,
          $Base_get_table_by_1d3$31,
          $Base_get_table_by_d66_swap$32,
          $Base_get_table_by_d66$33,
          $Base_get_table_by_number$34,
          $Base_get_table_value$36,
          $Base_roll_tables$37,
          $Base_debug$38;
      self.$$prototype.sort_add_dice = self.$$prototype.sort_barabara_dice = self.$$prototype.enabled_d9 = self.$$prototype.raw_input = self.$$prototype.randomizer = self.$$prototype.enabled_upcase_input = self.$$prototype.debug = nil;

      (function (self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting),
            $register_prefix$1,
            $register_prefix_from_super_class$2,
            $prefixes_pattern$3,
            $command_pattern$4,
            $eval$6;
        self.$attr_reader("prefixes");
        Opal.def(self, '$register_prefix', $register_prefix$1 = function $$register_prefix($a) {
          var $post_args,
              prefixes,
              self = this,
              $ret_or_1 = nil;
          if (self.prefixes == null) self.prefixes = nil;
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          prefixes = $post_args;
          ;

          self.prefixes = function () {
            if ($truthy($ret_or_1 = self.prefixes)) {
              return $ret_or_1;
            } else {
              return [];
            }

            ;
            return nil;
          }();

          return self.prefixes.$concat(prefixes.$flatten());
        }, $register_prefix$1.$$arity = -1);
        Opal.def(self, '$register_prefix_from_super_class', $register_prefix_from_super_class$2 = function $$register_prefix_from_super_class() {
          var self = this;
          return self.$register_prefix(self.$superclass().$prefixes());
        }, $register_prefix_from_super_class$2.$$arity = 0);
        Opal.def(self, '$prefixes_pattern', $prefixes_pattern$3 = function $$prefixes_pattern() {
          var self = this,
              $ret_or_2 = nil,
              $ret_or_3 = nil;
          if (self.prefixes_pattern == null) self.prefixes_pattern = nil;
          if (self.prefixes == null) self.prefixes = nil;

          self.prefixes_pattern = function () {
            if ($truthy($ret_or_2 = self.prefixes_pattern)) {
              return $ret_or_2;
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          if ($truthy(self.prefixes_pattern)) {
            return self.prefixes_pattern;
          }

          ;

          self.prefixes = function () {
            if ($truthy($ret_or_3 = self.prefixes)) {
              return $ret_or_3;
            } else {
              return [];
            }

            ;
            return nil;
          }();

          self.prefixes.$freeze();
          return self.prefixes_pattern = function () {
            if ($truthy(self.prefixes['$empty?']())) {
              return /(?!)/;
            } else {
              return Opal.regexp(["^(S)?(", self.prefixes.$join("|"), ")"], 'i');
            }

            ;
            return nil;
          }().$freeze();
        }, $prefixes_pattern$3.$$arity = 0);
        Opal.def(self, '$command_pattern', $command_pattern$4 = function $$command_pattern() {
          var _$$31,
              self = this,
              $ret_or_4 = nil,
              $ret_or_5 = nil,
              pattarns = nil;

          if (self.command_pattern == null) self.command_pattern = nil;
          if (self.prefixes == null) self.prefixes = nil;

          self.command_pattern = function () {
            if ($truthy($ret_or_4 = self.command_pattern)) {
              return $ret_or_4;
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          if ($truthy(self.command_pattern)) {
            return self.command_pattern;
          }

          ;

          self.prefixes = function () {
            if ($truthy($ret_or_5 = self.prefixes)) {
              return $ret_or_5;
            } else {
              return [];
            }

            ;
            return nil;
          }();

          self.prefixes.$freeze();
          pattarns = $rb_plus($send($$$($$($nesting, 'CommonCommand'), 'COMMANDS'), 'map', [], (_$$31 = function $$5(c) {
            var self = _$$31.$$s == null ? this : _$$31.$$s;

            if (c == null) {
              c = nil;
            }

            ;
            return $$$(c, 'PREFIX_PATTERN').$source();
          }, _$$31.$$s = self, _$$31.$$arity = 1, _$$31)), self.prefixes);
          return self.command_pattern = Opal.regexp(["^S?(", pattarns.$join("|"), ")"], 'i').$freeze();
        }, $command_pattern$4.$$arity = 0);
        return (Opal.def(self, '$eval', $eval$6 = function $eval$6(command) {
          var self = this;
          return self.$new(command).$eval();
        }, $eval$6.$$arity = 1), nil) && 'eval';
      })(Opal.get_singleton_class(self), $nesting);

      self.$include($$($nesting, 'Translate'));
      self.$include($$$($$($nesting, 'Deprecated'), 'Checker'));
      Opal.def(self, '$initialize', $Base_initialize$7 = function $$initialize(command) {
        var self = this;
        self.raw_input = command;
        self.sort_add_dice = false;
        self.sort_barabara_dice = false;
        self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'NO_SORT');
        self.enabled_d9 = false;
        self.round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
        self.sides_implicit_d = 6;
        self.upper_dice_reroll_threshold = nil;
        self.reroll_dice_reroll_threshold = nil;
        self.default_cmp_op = nil;
        self.default_target_number = nil;
        self.enabled_upcase_input = true;
        self.locale = "ja_jp";
        self.randomizer = $$$($$($nesting, 'BCDice'), 'Randomizer').$new();
        return self.debug = false;
      }, $Base_initialize$7.$$arity = 1);
      self.$attr_accessor("randomizer");
      self.$attr_reader("d66_sort_type");
      self.$attr_reader("round_type");
      self.$attr_reader("sides_implicit_d");
      self.$attr_reader("upper_dice_reroll_threshold");
      self.$attr_reader("reroll_dice_reroll_threshold");
      self.$attr_reader("default_cmp_op");
      self.$attr_reader("default_target_number");
      Opal.def(self, '$sort_add_dice?', $Base_sort_add_dice$ques$8 = function $Base_sort_add_dice$ques$8() {
        var self = this;
        return self.sort_add_dice;
      }, $Base_sort_add_dice$ques$8.$$arity = 0);
      Opal.def(self, '$sort_barabara_dice?', $Base_sort_barabara_dice$ques$9 = function $Base_sort_barabara_dice$ques$9() {
        var self = this;
        return self.sort_barabara_dice;
      }, $Base_sort_barabara_dice$ques$9.$$arity = 0);
      Opal.def(self, '$enabled_d9?', $Base_enabled_d9$ques$10 = function $Base_enabled_d9$ques$10() {
        var self = this;
        return self.enabled_d9;
      }, $Base_enabled_d9$ques$10.$$arity = 0);
      Opal.def(self, '$enable_debug', $Base_enable_debug$11 = function $$enable_debug() {
        var self = this;
        return self.debug = true;
      }, $Base_enable_debug$11.$$arity = 0);
      Opal.def(self, '$eval', $Base_eval$12 = function $Base_eval$12() {
        var self = this,
            command = nil,
            result = nil,
            $ret_or_6 = nil,
            $writer = nil;
        command = $$$($$($nesting, 'BCDice'), 'Preprocessor').$process(self.raw_input, self);

        result = function () {
          if ($truthy($ret_or_6 = self.$dice_command(command))) {
            return $ret_or_6;
          } else {
            return self.$eval_common_command(self.raw_input);
          }

          ;
          return nil;
        }();

        if ($truthy(result)) {} else {
          return nil;
        }

        ;
        $writer = [self.randomizer.$rand_results()];
        $send(result, 'rands=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        ;
        $writer = [self.randomizer.$detailed_rand_results()];
        $send(result, 'detailed_rands=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        ;
        return result;
      }, $Base_eval$12.$$arity = 0);
      Opal.def(self, '$change_text', $Base_change_text$13 = function $$change_text(string) {
        var self = this;
        return string;
      }, $Base_change_text$13.$$arity = 1);
      Opal.def(self, '$check_result', $Base_check_result$14 = function $$check_result(total, rand_results, cmp_op, target) {
        var self = this,
            ret = nil,
            sides_list = nil,
            value_list = nil,
            dice_total = nil,
            $case = nil;
        ret = self.$check_result_legacy(total, rand_results, cmp_op, target);

        if ($truthy(ret)) {
          return ret;
        }

        ;
        sides_list = $send(rand_results, 'map', [], "sides".$to_proc());
        value_list = $send(rand_results, 'map', [], "value".$to_proc());
        dice_total = value_list.$sum();

        ret = function () {
          $case = sides_list;

          if ([100]['$===']($case)) {
            return self.$result_1d100(total, dice_total, cmp_op, target);
          } else if ([20]['$===']($case)) {
            return self.$result_1d20(total, dice_total, cmp_op, target);
          } else if ([6, 6]['$===']($case)) {
            return self.$result_2d6(total, dice_total, value_list, cmp_op, target);
          } else {
            return nil;
          }
        }();

        if (ret['$==']($$($nesting, 'Result').$nothing())) {
          return nil;
        }

        ;

        if ($truthy(ret)) {
          return ret;
        }

        ;

        ret = function () {
          $case = sides_list.$uniq();

          if ([10]['$===']($case)) {
            return self.$result_nd10(total, dice_total, value_list, cmp_op, target);
          } else if ([6]['$===']($case)) {
            return self.$result_nd6(total, dice_total, value_list, cmp_op, target);
          } else {
            return nil;
          }
        }();

        if (ret['$==']($$($nesting, 'Result').$nothing())) {
          return nil;
        }

        ;

        if ($truthy(ret)) {
          return ret;
        }

        ;
        return self.$result_ndx(total, cmp_op, target);
      }, $Base_check_result$14.$$arity = 4);
      Opal.def(self, '$grich_text', $Base_grich_text$15 = function $$grich_text(count_one, dice_total_count, count_success) {
        var self = this;
        return nil;
      }, $Base_grich_text$15.$$arity = 3);
      self.$private();
      Opal.def(self, '$eval_common_command', $Base_eval_common_command$16 = function $$eval_common_command(command) {
        try {
          var _$$32,
              self = this;

          command = self.$change_text(command);
          $send($$$($$($nesting, 'CommonCommand'), 'COMMANDS'), 'each', [], (_$$32 = function $$17(klass) {
            var self = _$$32.$$s == null ? this : _$$32.$$s,
                result = nil;
            if (self.randomizer == null) self.randomizer = nil;

            if (klass == null) {
              klass = nil;
            }

            ;
            result = klass.$eval(command, self, self.randomizer);

            if ($truthy(result)) {
              Opal.ret(result);
            } else {
              return nil;
            }

            ;
          }, _$$32.$$s = self, _$$32.$$arity = 1, _$$32));
          return nil;
        } catch ($returner) {
          if ($returner === Opal.returner) {
            return $returner.$v;
          }

          throw $returner;
        }
      }, $Base_eval_common_command$16.$$arity = 1);
      Opal.def(self, '$dice_command', $Base_dice_command$18 = function $$dice_command(command) {
        var _$$33,
            self = this,
            m = nil,
            secret = nil,
            output = nil,
            $writer = nil,
            $ret_or_7 = nil,
            $ret_or_8 = nil,
            $ret_or_9 = nil;

        if ($truthy(self.enabled_upcase_input)) {
          command = command.$upcase();
        }

        ;
        m = self.$class().$prefixes_pattern().$match(command);

        if ($truthy(m)) {} else {
          return nil;
        }

        ;
        secret = m['$[]'](1)['$nil?']()['$!']();

        if ($truthy(secret)) {
          command = command['$[]']($range(1, -1, false));
        }

        ;
        output = self.$eval_game_system_specific_command(command);

        if ($truthy(output['$is_a?']($$($nesting, 'Result')))) {
          $writer = [function () {
            if ($truthy($ret_or_7 = output['$secret?']())) {
              return $ret_or_7;
            } else {
              return secret;
            }

            ;
            return nil;
          }()];
          $send(output, 'secret=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return output;
        } else if ($truthy(function () {
          if ($truthy($ret_or_8 = function () {
            if ($truthy($ret_or_9 = output['$nil?']())) {
              return $ret_or_9;
            } else {
              return output['$empty?']();
            }

            ;
            return nil;
          }())) {
            return $ret_or_8;
          } else {
            return output['$==']("1");
          }

          ;
          return nil;
        }())) {
          return nil;
        } else {
          return $send($$($nesting, 'Result').$new(), 'tap', [], (_$$33 = function $$19(r) {
            var self = _$$33.$$s == null ? this : _$$33.$$s;

            if (r == null) {
              r = nil;
            }

            ;
            $writer = [output.$to_s()];
            $send(r, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [secret];
            $send(r, 'secret=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            ;
          }, _$$33.$$s = self, _$$33.$$arity = 1, _$$33));
        }

        ;
      }, $Base_dice_command$18.$$arity = 1);
      Opal.def(self, '$eval_game_system_specific_command', $Base_eval_game_system_specific_command$20 = function $$eval_game_system_specific_command(command) {
        var self = this;
        return nil;
      }, $Base_eval_game_system_specific_command$20.$$arity = 1);
      Opal.def(self, '$result_ndx', $Base_result_ndx$21 = function $$result_ndx(total, cmp_op, target) {
        var self = this;

        if ($truthy(target['$is_a?']($$($nesting, 'String')))) {
          return nil;
        } else if ($truthy(total.$send(cmp_op, target))) {
          return $$($nesting, 'Result').$success(self.$translate("success"));
        } else {
          return $$($nesting, 'Result').$failure(self.$translate("failure"));
        }
      }, $Base_result_ndx$21.$$arity = 3);
      Opal.def(self, '$result_1d100', $Base_result_1d100$22 = function $$result_1d100(total, dice_total, cmp_op, target) {
        var self = this;
        return nil;
      }, $Base_result_1d100$22.$$arity = 4);
      Opal.def(self, '$result_1d20', $Base_result_1d20$23 = function $$result_1d20(total, dice_total, cmp_op, target) {
        var self = this;
        return nil;
      }, $Base_result_1d20$23.$$arity = 4);
      Opal.def(self, '$result_nd10', $Base_result_nd10$24 = function $$result_nd10(total, dice_total, value_list, cmp_op, target) {
        var self = this;
        return nil;
      }, $Base_result_nd10$24.$$arity = 5);
      Opal.def(self, '$result_2d6', $Base_result_2d6$25 = function $$result_2d6(total, dice_total, value_list, cmp_op, target) {
        var self = this;
        return nil;
      }, $Base_result_2d6$25.$$arity = 5);
      Opal.def(self, '$result_nd6', $Base_result_nd6$26 = function $$result_nd6(total, dice_total, value_list, cmp_op, target) {
        var self = this;
        return nil;
      }, $Base_result_nd6$26.$$arity = 5);
      Opal.def(self, '$get_table_by_2d6', $Base_get_table_by_2d6$27 = function $$get_table_by_2d6(table) {
        var self = this;
        return self.$get_table_by_nD6(table, 2);
      }, $Base_get_table_by_2d6$27.$$arity = 1);
      Opal.def(self, '$get_table_by_1d6', $Base_get_table_by_1d6$28 = function $$get_table_by_1d6(table) {
        var self = this;
        return self.$get_table_by_nD6(table, 1);
      }, $Base_get_table_by_1d6$28.$$arity = 1);
      Opal.def(self, '$get_table_by_nD6', $Base_get_table_by_nD6$29 = function $$get_table_by_nD6(table, count) {
        var self = this;
        return self.$get_table_by_nDx(table, count, 6);
      }, $Base_get_table_by_nD6$29.$$arity = 2);
      Opal.def(self, '$get_table_by_nDx', $Base_get_table_by_nDx$30 = function $$get_table_by_nDx(table, count, diceType) {
        var self = this,
            num = nil,
            text = nil;
        num = self.randomizer.$roll_sum(count, diceType);
        text = self.$get_table_value(table['$[]']($rb_minus(num, count)));

        if ($truthy(text['$nil?']())) {
          return ["1", 0];
        }

        ;
        return [text, num];
      }, $Base_get_table_by_nDx$30.$$arity = 3);
      Opal.def(self, '$get_table_by_1d3', $Base_get_table_by_1d3$31 = function $$get_table_by_1d3(table) {
        var self = this,
            count = nil,
            num = nil,
            index = nil,
            text = nil;
        self.$debug("get_table_by_1d3");
        count = 1;
        num = self.randomizer.$roll_sum(count, 6);
        self.$debug("num", num);
        index = $rb_divide($rb_minus(num, 1), 2).$to_i();
        self.$debug("index", index);
        text = table['$[]'](index);

        if ($truthy(text['$nil?']())) {
          return ["1", 0];
        }

        ;
        return [text, num];
      }, $Base_get_table_by_1d3$31.$$arity = 1);
      Opal.def(self, '$get_table_by_d66_swap', $Base_get_table_by_d66_swap$32 = function $$get_table_by_d66_swap(table) {
        var self = this,
            number = nil;
        number = self.randomizer.$roll_d66($$$($$($nesting, 'D66SortType'), 'ASC'));
        return [self.$get_table_by_number(number, table), number];
      }, $Base_get_table_by_d66_swap$32.$$arity = 1);
      Opal.def(self, '$get_table_by_d66', $Base_get_table_by_d66$33 = function $$get_table_by_d66(table) {
        var self = this,
            dice1 = nil,
            dice2 = nil,
            num = nil,
            text = nil,
            indexText = nil;
        dice1 = self.randomizer.$roll_once(6);
        dice2 = self.randomizer.$roll_once(6);
        num = $rb_plus($rb_times($rb_minus(dice1, 1), 6), $rb_minus(dice2, 1));
        text = table['$[]'](num);
        indexText = "" + dice1 + dice2;

        if ($truthy(text['$nil?']())) {
          return ["1", indexText];
        }

        ;
        return [text, indexText];
      }, $Base_get_table_by_d66$33.$$arity = 1);
      Opal.def(self, '$get_table_by_number', $Base_get_table_by_number$34 = function $$get_table_by_number(index, table, default$) {
        try {
          var _$$34,
              self = this;

          if (default$ == null) {
            default$ = "1";
          }

          ;
          $send(table, 'each', [], (_$$34 = function $$35(item) {
            var self = _$$34.$$s == null ? this : _$$34.$$s,
                number = nil;

            if (item == null) {
              item = nil;
            }

            ;
            number = item['$[]'](0);

            if ($truthy($rb_ge(number, index))) {
              Opal.ret(self.$get_table_value(item['$[]'](1)));
            } else {
              return nil;
            }

            ;
          }, _$$34.$$s = self, _$$34.$$arity = 1, _$$34));
          return self.$get_table_value(default$);
        } catch ($returner) {
          if ($returner === Opal.returner) {
            return $returner.$v;
          }

          throw $returner;
        }
      }, $Base_get_table_by_number$34.$$arity = -3);
      Opal.def(self, '$get_table_value', $Base_get_table_value$36 = function $$get_table_value(data) {
        var self = this;

        if ($truthy(data['$is_a?']($$($nesting, 'Proc')))) {
          return data.$call();
        }

        ;
        return data;
      }, $Base_get_table_value$36.$$arity = 1);
      Opal.def(self, '$roll_tables', $Base_roll_tables$37 = function $$roll_tables(command, tables) {
        var self = this,
            table = nil;
        table = tables['$[]'](command);

        if ($truthy(table)) {} else {
          return nil;
        }

        ;
        return table.$roll(self.randomizer).$to_s();
      }, $Base_roll_tables$37.$$arity = 2);
      return (Opal.def(self, '$debug', $Base_debug$38 = function $$debug(target, $a) {
        var $post_args,
            values,
            _$$35,
            self = this,
            targetStr = nil,
            valueStrs = nil;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        values = $post_args;
        ;

        if ($truthy(self.debug)) {} else {
          return nil;
        }

        ;

        targetStr = function () {
          if ($truthy(target['$is_a?']($$($nesting, 'String')))) {
            return target;
          } else {
            return target.$inspect();
          }

          ;
          return nil;
        }();

        if ($truthy(values['$empty?']())) {
          return self.$warn(targetStr);
        } else {
          valueStrs = $send(values, 'map', [], (_$$35 = function $$39(value) {
            var self = _$$35.$$s == null ? this : _$$35.$$s;

            if (value == null) {
              value = nil;
            }

            ;

            if ($truthy(value['$is_a?']($$($nesting, 'String')))) {
              return "" + "\"" + value + "\"";
            } else {
              return value.$inspect();
            }

            ;
          }, _$$35.$$s = self, _$$35.$$arity = 1, _$$35));
          return self.$warn("" + targetStr + ": " + valueStrs.$join(", "));
        }

        ;
      }, $Base_debug$38.$$arity = -2), nil) && 'debug';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);

  $$$($$$($$($nesting, 'I18n'), 'Backend'), 'Simple').$include($$$($$$($$($nesting, 'I18n'), 'Backend'), 'Fallbacks'));
  $$($nesting, 'I18n').$load_path()['$<<']($$($nesting, 'Dir')['$[]']($$($nesting, 'File').$join(self.$__dir__(), "../../i18n/**/*.yml")));
  $writer = ["ja_jp"];
  $send($$($nesting, 'I18n'), 'default_locale=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];
  ;
  $writer = [["ja_jp"]];
  $send($$($nesting, 'I18n').$fallbacks(), 'defaults=', Opal.to_a($writer));
  return $writer[$rb_minus($writer["length"], 1)];
  ;
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2,
      $hash = Opal.hash;
  self.$require("bcdice/base");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AlchemiaStruggle');

        var $nesting = [self].concat($parent_nesting),
            $AlchemiaStruggle_initialize$1,
            $AlchemiaStruggle_eval_game_system_specific_command$2,
            $AlchemiaStruggle_try_roll_alchemia$3,
            $AlchemiaStruggle_try_roll_uldice$4,
            $AlchemiaStruggle_roll_alchemia$6,
            $AlchemiaStruggle_roll_alchemia_and_pick$7,
            $AlchemiaStruggle_pick_maximum$8,
            $AlchemiaStruggle_make_roll_text$9,
            $AlchemiaStruggle_make_roll_and_pick_text$10,
            $AlchemiaStruggle_make_dice_text$11,
            _$AlchemiaStruggle$,
            _$AlchemiaStruggle$2,
            _$AlchemiaStruggle$3,
            alias_catalyst_tables = nil,
            alias_article_tables = nil,
            alias_drama_sequence_tables = nil;

        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "AlchemiaStruggle");
        Opal.const_set($nesting[0], 'NAME', "アルケミア・ストラグル");
        Opal.const_set($nesting[0], 'SORT_KEY', "あるけみあすとらくる");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "■ ダイスロール（ xAS ）\n" + "  xDをロールします。\n" + "  例） 5AS\n" + "\n" + "■ ダイスロール＆最大になるようにピック（ xASy ）\n" + "  xDをロールし、そこから最大になるようにy個をピックします。\n" + "  例） 4AS3\n" + "\n" + "■ ウルダイスの獲得（ xUL ）\n" + "  xDのウルダイスを振り、出た出目の個数をNo.ごとにカウントします。\n" + "  例） 6UL\n" + "\n" + "■ 表\n" + "  ・奇跡の触媒\n" + "    ・エレメント (CELE, CElement)\n" + "    ・アルケミア (CALC, CAlchemia)\n" + "    ・インフォーマント (CINF, CInformant)\n" + "    ・イノセンス (CINN, CInnocence)\n" + "    ・アクワイヤード (CACQ, CAcquired)\n" + "  ・携行品\n" + "    ・Ｓサイズ (ARS, ArticleS)\n" + "    ・Ｍサイズ (ARM, ArticleM)\n" + "    ・Ｌサイズ (ARL, ArticleL)\n" + "  ・ＰＣ情報獲得表 (PCI, PCInformation)\n" + "  ・理由表 (REA, Reason)\n" + "  ・交流表 (ASS, Associate)\n" + "  ・接触のきっかけ表 (CON, Contact)\n");
        Opal.const_set($nesting[0], 'ROLL_REG', /^(\d+)AS(\d+)?$/i.$freeze());
        self.$register_prefix("\\d+AS", "\\d+UL");
        Opal.def(self, '$initialize', $AlchemiaStruggle_initialize$1 = function $$initialize(command) {
          var $iter = $AlchemiaStruggle_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $AlchemiaStruggle_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $AlchemiaStruggle_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          self.sort_barabara_dice = true;
          return self.round_type = $$$($$($nesting, 'RoundType'), 'CEIL');
        }, $AlchemiaStruggle_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $AlchemiaStruggle_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              c = nil,
              $ret_or_1 = nil,
              $ret_or_2 = nil,
              $ret_or_3 = nil;

          c = function () {
            if ($truthy($ret_or_1 = $$($nesting, 'ALIAS')['$[]'](command))) {
              return $ret_or_1;
            } else {
              return command;
            }

            ;
            return nil;
          }();

          if ($truthy($ret_or_2 = function () {
            if ($truthy($ret_or_3 = self.$try_roll_alchemia(c))) {
              return $ret_or_3;
            } else {
              return self.$try_roll_uldice(c);
            }

            ;
            return nil;
          }())) {
            return $ret_or_2;
          } else {
            return self.$roll_tables(c, $$($nesting, 'TABLES'));
          }

          ;
        }, $AlchemiaStruggle_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$try_roll_alchemia', $AlchemiaStruggle_try_roll_alchemia$3 = function $$try_roll_alchemia(command) {
          var self = this,
              match = nil,
              roll_dice_count = nil,
              result = nil,
              pick_dice_count = nil;
          match = $$($nesting, 'ROLL_REG').$match(command);

          if ($truthy(match)) {} else {
            return nil;
          }

          ;
          roll_dice_count = match['$[]'](1).$to_i();

          if ($truthy(match['$[]'](2)['$nil?']())) {
            result = self.$roll_alchemia(roll_dice_count);
            return self.$make_roll_text(result);
          } else {
            pick_dice_count = match['$[]'](2).$to_i();
            result = self.$roll_alchemia_and_pick(roll_dice_count, pick_dice_count);
            return self.$make_roll_and_pick_text(result['$[]']("rolled_dices"), pick_dice_count, result['$[]']("picked_dices"));
          }

          ;
        }, $AlchemiaStruggle_try_roll_alchemia$3.$$arity = 1);
        Opal.def(self, '$try_roll_uldice', $AlchemiaStruggle_try_roll_uldice$4 = function $$try_roll_uldice(command) {
          var _$$36,
              self = this,
              match = nil,
              roll_dice_count = nil,
              dice_list = nil,
              dice_list_text = nil,
              result = nil,
              sequence = nil;

          match = /^(\d+)UL$/.$match(command);

          if ($truthy(match)) {} else {
            return nil;
          }

          ;
          roll_dice_count = match['$[]'](1).$to_i();
          dice_list = self.randomizer.$roll_barabara(roll_dice_count, 6).$sort();
          dice_list_text = dice_list.$join(",");
          result = $send($send(dice_list, 'group_by', [], "itself".$to_proc()), 'map', [], (_$$36 = function $$5(k, v) {
            var self = _$$36.$$s == null ? this : _$$36.$$s;

            if (k == null) {
              k = nil;
            }

            ;

            if (v == null) {
              v = nil;
            }

            ;
            return "" + "No." + k + ": " + v.$size() + "個";
          }, _$$36.$$s = self, _$$36.$$arity = 2, _$$36)).$join(", ");
          sequence = ["" + "(" + roll_dice_count + "D6)", "" + "[" + dice_list_text + "]", result];
          return sequence.$join(" ＞ ");
        }, $AlchemiaStruggle_try_roll_uldice$4.$$arity = 1);
        Opal.def(self, '$roll_alchemia', $AlchemiaStruggle_roll_alchemia$6 = function $$roll_alchemia(roll_dice_count) {
          var self = this;
          return self.randomizer.$roll_barabara(roll_dice_count, 6);
        }, $AlchemiaStruggle_roll_alchemia$6.$$arity = 1);
        Opal.def(self, '$roll_alchemia_and_pick', $AlchemiaStruggle_roll_alchemia_and_pick$7 = function $$roll_alchemia_and_pick(roll_dice_count, pick_dice_count) {
          var self = this,
              rolled_dice_list = nil;
          rolled_dice_list = self.$roll_alchemia(roll_dice_count);
          return $hash2(["rolled_dices", "picked_dices"], {
            "rolled_dices": rolled_dice_list,
            "picked_dices": self.$pick_maximum(rolled_dice_list, pick_dice_count)
          });
        }, $AlchemiaStruggle_roll_alchemia_and_pick$7.$$arity = 2);
        Opal.def(self, '$pick_maximum', $AlchemiaStruggle_pick_maximum$8 = function $$pick_maximum(dice_list, pick_dice_count) {
          var self = this;

          if ($truthy($rb_le(dice_list.$size(), pick_dice_count))) {
            return dice_list;
          } else {
            return dice_list.$sort().$pop(pick_dice_count);
          }
        }, $AlchemiaStruggle_pick_maximum$8.$$arity = 2);
        Opal.def(self, '$make_roll_text', $AlchemiaStruggle_make_roll_text$9 = function $$make_roll_text(rolled_dice_list) {
          var self = this;
          return "" + "(" + rolled_dice_list.$size() + "D6) ＞ " + self.$make_dice_text(rolled_dice_list);
        }, $AlchemiaStruggle_make_roll_text$9.$$arity = 1);
        Opal.def(self, '$make_roll_and_pick_text', $AlchemiaStruggle_make_roll_and_pick_text$10 = function $$make_roll_and_pick_text(rolled_dice_list, pick_dice_count, picked_dice_list) {
          var self = this;
          return "" + "(" + rolled_dice_list.$size() + "D6|>" + pick_dice_count + "D6) ＞ " + self.$make_dice_text(rolled_dice_list) + " >> " + self.$make_dice_text(picked_dice_list) + " ＞ " + picked_dice_list.$sum();
        }, $AlchemiaStruggle_make_roll_and_pick_text$10.$$arity = 3);
        Opal.def(self, '$make_dice_text', $AlchemiaStruggle_make_dice_text$11 = function $$make_dice_text(dice_list) {
          var self = this;
          return "" + "[" + dice_list.$sort().$join(", ") + "]";
        }, $AlchemiaStruggle_make_dice_text$11.$$arity = 1);
        Opal.const_set($nesting[0], 'CATALYST_TABLES', $send($hash2(["CElement", "CAlchemia", "CInformant", "CInnocence", "CAcquired"], {
          "CElement": $$$($$($nesting, 'DiceTable'), 'Table').$new("奇跡の触媒（エレメント）", "1D6", ["ワンド", "水晶玉", "カード", "ステッキ", "手鏡", "宝石"]),
          "CAlchemia": $$$($$($nesting, 'DiceTable'), 'Table').$new("奇跡の触媒（アルケミア）", "1D6", ["指輪", "ブレスレット", "イヤリング", "ネックレス", "ブローチ", "ヘアピン"]),
          "CInformant": $$$($$($nesting, 'DiceTable'), 'Table').$new("奇跡の触媒（インフォーマント）", "1D6", ["スマートフォン", "タブレット", "ノートパソコン", "無線機（トランシーバー）", "ウェアラブルデバイス", "携帯ゲーム機"]),
          "CInnocence": $$$($$($nesting, 'DiceTable'), 'Table').$new("奇跡の触媒（イノセンス）", "1D6", ["手袋", "笛", "靴", "鈴", "拡声器", "弦楽器"]),
          "CAcquired": $$$($$($nesting, 'DiceTable'), 'Table').$new("奇跡の触媒（アクワイヤード）", "1D6", ["ボタン", "音声", "モーション", "脳波", "記録媒体", "ＡＩ"])
        }), 'transform_keys', [], "upcase".$to_proc()).$freeze());
        Opal.const_set($nesting[0], 'ARTICLE_TABLES', $send($hash2(["ArticleS", "ArticleM", "ArticleL"], {
          "ArticleS": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("携行品（Ｓサイズ）", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "マッチ", 12, "ペットボトル", 13, "試験管", 14, "団扇", 15, "植物", 16, "ハンカチ", 22, "化粧用具", 23, "ベルト", 24, "タバコ", 25, "チェーン", 26, "電池", 33, "お菓子", 34, "針金", 35, "コイン", 36, "ナイフ", 44, "カトラリー", 45, "砂", 46, "スプレー", 55, "石", 56, "文房具", 66, "ペンライト")),
          "ArticleM": $$$($$($nesting, 'DiceTable'), 'D66ParityTable').$new("携行品（Ｍサイズ）", ["本", "傘", "金属板", "花火", "エアガン", "包帯"], ["工具", "ジャケット", "ロープ", "人形", "軽食", "ガラス瓶"]),
          "ArticleL": $$$($$($nesting, 'DiceTable'), 'D66ParityTable').$new("携行品（Ｌサイズ）", ["木刀", "釣り具", "自転車", "バット", "寝袋", "丸太"], ["物干し竿", "鍋", "スケートボード", "シャベル（スコップ）", "タンク", "脚立"])
        }), 'transform_keys', [], "upcase".$to_proc()).$freeze());
        Opal.const_set($nesting[0], 'DRAMA_SEQUENCE_TABLES', $send($hash2(["PCInformation", "Reason", "Associate", "Contact"], {
          "PCInformation": $$$($$($nesting, 'DiceTable'), 'D66ParityTable').$new("ＰＣ情報獲得表", ["前の場面の直後 ―― 直前にやり取りをしていた場所。聞きたいことを突きつける頃合いかもしれない。", "自分の拠点 ―― 自分の心身を休められる場所。こちらのペースに引き込み、ゆさぶりをかける。", "相手の拠点 ―― 相手が生活の基点にしている場所。相手のペースに呑まれないよう、慎重にいこう。", "自学派の拠点 ―― 自分が学派の仲間と共に使用する場所。仲間に手は出させず、あくまでプレッシャーを与えるだけにしてもらう。", "カフェ、バー ―― 厳かな空気に包まれた大人の場所。ここで声を荒げるのは紳士的ではない。", "路地裏 ―― 建物と建物の間や、人通りの少ない裏通り。多少手荒な手段に出ても目立ちはしないだろう。"], ["廃墟 ―― 廃ビル、廃工場のような人が立ち入らない場所。おあつらえ向きの場所を用意してやった。", "公共交通機関 ―― バス、電車など。昼夜問わず多くの人が利用する乗り物。敢えて人目に付く場所で詰め寄り、動揺を誘う。", "雑木林 ―― 草木が揺れる音、虫や鳥の鳴き声だけが聞こえる。そこに邪魔する者はいない。", "夜の公園 ―― 寝静まった街の公園。街灯に照らされない場所なら目立つこともないだろう。", "駐車場 ―― 立体、平面、地下を問わず車を停める場所。人の出入りの激しさに対し、そこに留まる人は少ない。目撃者も多くはないだろう。", "高架下 ―― 線路、道路の橋の下。響く騒音が自分たちの存在を薄めてくれる。"]),
          "Reason": $$$($$($nesting, 'DiceTable'), 'Table').$new("理由表", "1D6", ["不信感 ―― 行動や言動になにか釈然としない部分を感じる。白黒はっきりさせよう。", "好奇心 ―― 相手のことを知りたいと掻き立てられる。知りたい気持ちを抑えられない。", "庇護感 ―― 知古の姿を重ねて守りたくなってしまう。信頼関係を君と築くため、踏み込んだところまで知っておきたい。", "嫌悪感 ―― 理由はないけど気に食わない。情報のアドバンテージを握ることで優位に立てるはずだ。", "偏愛 ―― 愛ゆえに知りたくなってしまう。君の思考、目的、感情のすべてを手に入れたい。", "直感 ―― 根拠はないが、なにか隠している気がする。一か八か、勝負に出よう。"]),
          "Associate": $$$($$($nesting, 'DiceTable'), 'D66ParityTable').$new("交流表", ["前の場面の直後 ―― 直前にやり取りをした場所。ちょっと一息つくものいいだろう。", "自分の拠点 ―― 自分の心身を休められる場所。一緒にくつろぎながら話をしよう。", "相手の拠点 ―― 相手が生活の基点にしている場所。ちょっとお邪魔させてもらえないだろうか？", "相手学派の拠点 ―― 相手が学派の仲間と共に使用する場所。若干の居心地悪さはあるが、好感を持ってもらうためには我慢も必要。", "食事処 ―― ファミレス、居酒屋など。人でにぎわう食事処。気軽に飲み食いできる空間で、話も弾むはず。", "アミューズメント施設 ―― カラオケ、ボーリング、ゲームセンターなどの娯楽施設。遊べば人となりがわかる。手っ取り早くいこう。"], ["お祭り ―― 老若男女が参加するイベント。非日常的な空気を楽しむことで、気分転換もできるだろう。", "昼間の公園 ―― 散歩する人や子連れの家族で溢れる公園。僕らにもああやって生きる道があったのだろうか。", "思い出の場所 ―― 自分にとって思い入れのある大事な場所。この人になら胸の内を明かしてもいい気分になった。", "スポーツ観戦 ―― 野球、サッカー、バスケなど。プロアマ問わず観戦する。手に汗握る展開を共に見届けよう。", "屋上 ―― 街と人を見下ろす眺めのいい場所。この景色を君は喜ぶだろうか、怖がるだろうか。", "ショッピング ―― 大型商業施設やショッピングストリートに向かう。互いの興味があるものを知るいい機会だ。"]),
          "Contact": $$$($$($nesting, 'DiceTable'), 'Table').$new("接触のきっかけ表", "1D6", ["体勢を崩す ―― 転びそうになったところを支える、支えられる。", "付着物をとる ―― 髪や服についているゴミ、汚れをとってあげる。", "思わず手が出る ―― 言葉より先に、強めに手が出てしまう。", "物ごしに触れる ―― 物を渡す、拾う際に指先同士がぶつかる。", "友好のサイン ―― 肩を組む、握手をする、ハグをするなど。", "ケアをしてあげる ―― 髪をとかす、肩をもむ、頭を撫でる。相手を労ってする行為全般。"])
        }), 'transform_keys', [], "upcase".$to_proc()).$freeze());
        Opal.const_set($nesting[0], 'TABLES', $$($nesting, 'CATALYST_TABLES').$merge($$($nesting, 'ARTICLE_TABLES')).$merge($$($nesting, 'DRAMA_SEQUENCE_TABLES')));
        alias_catalyst_tables = $send($$($nesting, 'CATALYST_TABLES').$keys(), 'map', [], (_$AlchemiaStruggle$ = function $AlchemiaStruggle$12(key) {
          var self = _$AlchemiaStruggle$.$$s == null ? this : _$AlchemiaStruggle$.$$s;

          if (key == null) {
            key = nil;
          }

          ;
          return [key['$[]'](0, 4), key];
        }, _$AlchemiaStruggle$.$$s = self, _$AlchemiaStruggle$.$$arity = 1, _$AlchemiaStruggle$)).$to_h();
        alias_article_tables = $send($$($nesting, 'ARTICLE_TABLES').$keys(), 'map', [], (_$AlchemiaStruggle$2 = function $AlchemiaStruggle$13(key) {
          var self = _$AlchemiaStruggle$2.$$s == null ? this : _$AlchemiaStruggle$2.$$s;

          if (key == null) {
            key = nil;
          }

          ;
          return [$rb_plus(key['$[]'](0, 2), key['$[]'](-1)), key];
        }, _$AlchemiaStruggle$2.$$s = self, _$AlchemiaStruggle$2.$$arity = 1, _$AlchemiaStruggle$2)).$to_h();
        alias_drama_sequence_tables = $send($$($nesting, 'DRAMA_SEQUENCE_TABLES').$keys(), 'map', [], (_$AlchemiaStruggle$3 = function $AlchemiaStruggle$14(key) {
          var self = _$AlchemiaStruggle$3.$$s == null ? this : _$AlchemiaStruggle$3.$$s;

          if (key == null) {
            key = nil;
          }

          ;
          return [key['$[]'](0, 3), key];
        }, _$AlchemiaStruggle$3.$$s = self, _$AlchemiaStruggle$3.$$arity = 1, _$AlchemiaStruggle$3)).$to_h();
        Opal.const_set($nesting[0], 'ALIAS', alias_catalyst_tables.$merge(alias_article_tables).$merge(alias_drama_sequence_tables).$freeze());
        return self.$register_prefix($$($nesting, 'ALIAS').$keys(), $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~AlchemiaStruggle~index.js.map