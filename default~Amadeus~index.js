(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~Amadeus~index"],{

/***/ "dTZe":
/*!***************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Amadeus.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Amadeus');
        var $nesting = [self].concat($parent_nesting),
            $Amadeus_initialize$1,
            $Amadeus_eval_game_system_specific_command$2,
            $Amadeus_amadeusDice$3,
            $Amadeus_check_success$5,
            $Amadeus_translate_tables$6;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Amadeus");
        Opal.const_set($nesting[0], 'NAME', "アマデウス");
        Opal.const_set($nesting[0], 'SORT_KEY', "あまてうす");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定(Rx±y@z>=t)\n" + "　能力値のダイスごとに成功・失敗の判定を行います。\n" + "　x：能力ランク(S,A～D)　y：修正値（省略可）\n" + "　z：スペシャル最低値（省略：6）　t：目標値（省略：4）\n" + "　　例） RA　RB-1　RC>=5　RD+2　RS-1@5>=6\n" + "　出力書式は\n" + "　　(達成値)_(判定結果)[(出目)(対応するインガ)]\n" + "　C,Dランクでは対応するインガは出力されません。\n" + "　　出力例)　2_ファンブル！[1黒] / 3_失敗[3青]\n" + "・各種表\n" + "　境遇表 ECT／関係表 RT／親心表 PRT／戦場表 BST／休憩表 BT／\n" + "　ファンブル表 FT／致命傷表 FWT／戦果表 BRT／ランダムアイテム表 RIT／\n" + "　損傷表 WT／悪夢表 NMT／目標表 TGT／制約表 CST／\n" + "　ランダムギフト表 RGT／決戦戦果表 FBT／\n" + "　店内雰囲気表 SAT／特殊メニュー表 SMT\n" + "・試練表（～VT）\n" + "　ギリシャ神群 GCVT／ヤマト神群 YCVT／エジプト神群 ECVT／\n" + "　クトゥルフ神群 CCVT／北欧神群 NCVT／中華神群 CHVT／\n" + "  ラストクロニクル神群 LCVT／ケルト神群 KCVT／ダンジョン DGVT／日常 DAVT\n" + "・挑戦テーマ表（～CT）\n" + "　武勇 PRCT／技術 TCCT／頭脳 INCT／霊力 PSCT／愛 LVCT／日常 DACT\n");
        Opal.def(self, '$initialize', $Amadeus_initialize$1 = function $$initialize(command) {
          var $iter = $Amadeus_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Amadeus_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Amadeus_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          self.enabled_d66 = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $Amadeus_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Amadeus_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              text = nil;
          text = self.$amadeusDice(command);

          if ($truthy(text['$nil?']())) {} else {
            return text;
          }

          ;
          return self.$roll_tables(command, $$$(self.$class(), 'TABLES'));
        }, $Amadeus_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$amadeusDice', $Amadeus_amadeusDice$3 = function $$amadeusDice(command) {
          var _$$,
              self = this,
              commandText = nil,
              skillRank = nil,
              modifyText = nil,
              signOfInequality = nil,
              targetText = nil,
              specialNum = nil,
              diceCount = nil,
              modify = nil,
              target = nil,
              diceList = nil,
              diceText = nil,
              specialText = nil,
              message = nil,
              is_loop = nil;

          if ($truthy(/^(R([A-DS])([+\-\d]*))(@(\d))?((>(=)?)([+\-\d]*))?(@(\d))?$/i['$=~'](command))) {} else {
            return nil;
          }

          ;
          commandText = $$($nesting, 'Regexp').$last_match(1);
          skillRank = $$($nesting, 'Regexp').$last_match(2);
          modifyText = $$($nesting, 'Regexp').$last_match(3);

          signOfInequality = function () {
            if ($truthy($$($nesting, 'Regexp').$last_match(7)['$nil?']())) {
              return ">=";
            } else {
              return $$($nesting, 'Regexp').$last_match(7);
            }

            ;
            return nil;
          }();

          targetText = function () {
            if ($truthy($$($nesting, 'Regexp').$last_match(9)['$nil?']())) {
              return "4";
            } else {
              return $$($nesting, 'Regexp').$last_match(9);
            }

            ;
            return nil;
          }();

          if ($truthy(nil['$|']($$($nesting, 'Regexp').$last_match(5)))) {
            specialNum = $$($nesting, 'Regexp').$last_match(5).$to_i();
          } else if ($truthy(nil['$|']($$($nesting, 'Regexp').$last_match(11)))) {
            specialNum = $$($nesting, 'Regexp').$last_match(11).$to_i();
          } else {
            specialNum = 6;
          }

          ;
          diceCount = $$($nesting, 'CHECK_DICE_COUNT')['$[]'](skillRank);
          modify = $$($nesting, 'ArithmeticEvaluator').$eval(modifyText);
          target = $$($nesting, 'ArithmeticEvaluator').$eval(targetText);
          diceList = self.randomizer.$roll_barabara(diceCount, 6);
          diceText = diceList.$join(",");

          specialText = function () {
            if (specialNum['$=='](6)) {
              return "";
            } else {
              return "" + "@" + specialNum;
            }

            ;
            return nil;
          }();

          message = "" + "(" + commandText + specialText + signOfInequality + targetText + ") ＞ [" + diceText + "]" + modifyText + " ＞ ";

          if (skillRank['$==']("D")) {
            diceList = [diceList.$min()];
          }

          ;
          is_loop = false;
          $send(diceList, 'each', [], (_$$ = function $$4(dice) {
            var self = _$$.$$s == null ? this : _$$.$$s,
                achieve = nil,
                result = nil,
                inga_table = nil,
                inga = nil;

            if (dice == null) {
              dice = nil;
            }

            ;

            if ($truthy(is_loop)) {
              message = $rb_plus(message, " / ");
            } else if ($truthy($rb_gt(diceList.$length(), 1))) {
              is_loop = true;
            }

            ;
            achieve = $rb_plus(dice, modify);
            result = self.$check_success(achieve, dice, signOfInequality, target, specialNum);

            if ($truthy(is_loop)) {
              inga_table = self.$translate("Amadeus.inga_table");
              inga = inga_table['$[]']($rb_minus(dice, 1));
              return message = $rb_plus(message, "" + achieve + "_" + result + "[" + dice + inga + "]");
            } else {
              return message = $rb_plus(message, "" + achieve + "_" + result + "[" + dice + "]");
            }

            ;
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          return message;
        }, $Amadeus_amadeusDice$3.$$arity = 1);
        Opal.def(self, '$check_success', $Amadeus_check_success$5 = function $$check_success(total_n, dice_n, signOfInequality, diff, special_n) {
          var self = this,
              cmp_op = nil,
              target_num = nil;

          if (dice_n['$=='](1)) {
            return self.$translate("Amadeus.fumble");
          }

          ;

          if ($truthy($rb_ge(dice_n, special_n))) {
            return self.$translate("Amadeus.special");
          }

          ;
          cmp_op = $$($nesting, 'Normalize').$comparison_operator(signOfInequality);
          target_num = diff.$to_i();

          if ($truthy(total_n.$send(cmp_op, target_num))) {
            return self.$translate("success");
          } else {
            return self.$translate("failure");
          }

          ;
        }, $Amadeus_check_success$5.$$arity = 5);
        Opal.const_set($nesting[0], 'CHECK_DICE_COUNT', $hash2(["S", "A", "B", "C", "D"], {
          "S": 4,
          "A": 3,
          "B": 2,
          "C": 1,
          "D": 2
        }).$freeze());
        Opal.defs(self, '$translate_tables', $Amadeus_translate_tables$6 = function $$translate_tables(locale) {
          var self = this;
          return $hash2(["ECT", "BST", "RT", "PRT", "FT", "BT", "FWT", "BRT", "RIT", "WT", "NMT", "TGT", "CST", "GCVT", "YCVT", "ECVT", "CCVT", "NCVT", "DGVT", "DAVT", "PRCT", "TCCT", "INCT", "PSCT", "LVCT", "DACT", "RGT", "FBT", "CHVT", "LCVT", "KCVT", "SAT", "SMT"], {
            "ECT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.ECT", locale),
            "BST": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.BST", locale),
            "RT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.RT", locale),
            "PRT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.PRT", locale),
            "FT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.FT", locale),
            "BT": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("Amadeus.table.BT", locale),
            "FWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.FWT", locale),
            "BRT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.BRT", locale),
            "RIT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.RIT", locale),
            "WT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.WT", locale),
            "NMT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.NMT", locale),
            "TGT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.TGT", locale),
            "CST": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.CST", locale),
            "GCVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.GCVT", locale),
            "YCVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.YCVT", locale),
            "ECVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.ECVT", locale),
            "CCVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.CCVT", locale),
            "NCVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.NCVT", locale),
            "DGVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.DGVT", locale),
            "DAVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.DAVT", locale),
            "PRCT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.PRCT", locale),
            "TCCT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.TCCT", locale),
            "INCT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.INCT", locale),
            "PSCT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.PSCT", locale),
            "LVCT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.LVCT", locale),
            "DACT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.DACT", locale),
            "RGT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.RGT", locale),
            "FBT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.FBT", locale),
            "CHVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.CHVT", locale),
            "LCVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.LCVT", locale),
            "KCVT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Amadeus.table.KCVT", locale),
            "SAT": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("Amadeus.table.SAT", locale),
            "SMT": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("Amadeus.table.SMT", locale)
          });
        }, $Amadeus_translate_tables$6.$$arity = 1);
        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ja_jp"));
        return self.$register_prefix("R[A-DS]", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~Amadeus~index.js.map