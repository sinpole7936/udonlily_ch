(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~AnimaAnimus~index"],{

/***/ "W6z+":
/*!*******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/AnimaAnimus.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Table');
        var $nesting = [self].concat($parent_nesting),
            $Table_from_i18n$1,
            $Table_initialize$2,
            $Table_roll$3,
            $Table_choice$4;
        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $Table_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale"], {
            "locale": locale
          }));
          return self.$new(table['$[]']("name"), table['$[]']("type"), table['$[]']("items"));
        }, $Table_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $Table_initialize$2 = function $$initialize(name, type, items) {
          var self = this,
              m = nil;
          self.name = name;
          self.items = items.$freeze();
          m = /(\d+)D(\d+)/i.$match(type);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
          }

          ;
          self.times = m['$[]'](1).$to_i();
          return self.sides = m['$[]'](2).$to_i();
        }, $Table_initialize$2.$$arity = 3);
        Opal.def(self, '$roll', $Table_roll$3 = function $$roll(bcdice) {
          var self = this,
              value = nil;
          value = bcdice.$roll_sum(self.times, self.sides);
          return self.$choice(value);
        }, $Table_roll$3.$$arity = 1);
        return (Opal.def(self, '$choice', $Table_choice$4 = function $$choice(value) {
          var self = this,
              index = nil;
          index = $rb_minus(value, self.times);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index));
        }, $Table_choice$4.$$arity = 1), nil) && 'choice';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/range_table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeTable');

        var $nesting = [self].concat($parent_nesting),
            _$RangeTable$,
            $RangeTable_initialize$3,
            $RangeTable_fetch$4,
            $RangeTable_roll$6,
            $RangeTable_store$7,
            $RangeTable_coerce_to_int_range$11,
            $RangeTable_assert_min_sum_is_covered$12,
            $RangeTable_assert_max_sum_is_covered$13,
            $RangeTable_assert_no_gap_or_overlap_in_ranges$14;

        self.$$prototype.name = self.$$prototype.items = self.$$prototype.num_of_dice = self.$$prototype.num_of_sides = self.$$prototype.formatter = nil;
        Opal.const_set($nesting[0], 'RollResult', $send($$($nesting, 'Struct'), 'new', ["sum", "values", "content", "formatted"], (_$RangeTable$ = function $RangeTable$1() {
          var self = _$RangeTable$.$$s == null ? this : _$RangeTable$.$$s;
          return self.$alias_method("to_s", "formatted");
        }, _$RangeTable$.$$s = self, _$RangeTable$.$$arity = 0, _$RangeTable$)));
        Opal.const_set($nesting[0], 'Item', $$($nesting, 'Struct').$new("range", "content"));
        Opal.const_set($nesting[0], 'DICE_ROLL_METHOD_RE', /^(\d+)D(\d+)$/i.$freeze());
        Opal.const_set($nesting[0], 'DEFAULT_FORMATTER', $send(self, 'lambda', [], ($$2 = function (_$$) {
          function $$2(_x, _x2) {
            return _$$.apply(this, arguments);
          }

          $$2.toString = function () {
            return _$$.toString();
          };

          return $$2;
        }(function (table, result) {
          var self = $$2.$$s == null ? this : $$2.$$s;

          if (table == null) {
            table = nil;
          }

          ;

          if (result == null) {
            result = nil;
          }

          ;
          return "" + table.$name() + "(" + result.$sum() + ") ＞ " + result.$content();
        }), $$2.$$s = self, $$2.$$arity = 2, $$2)));
        self.$attr_reader("name");
        self.$attr_reader("num_of_dice");
        self.$attr_reader("num_of_sides");
        Opal.def(self, '$initialize', $RangeTable_initialize$3 = function $$initialize(name, dice_roll_method, items) {
          var $iter = $RangeTable_initialize$3.$$p,
              formatter = $iter || nil,
              self = this,
              $ret_or_1 = nil,
              m = nil;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          ;
          self.name = name.$freeze();

          self.formatter = function () {
            if ($truthy($ret_or_1 = formatter)) {
              return $ret_or_1;
            } else {
              return $$($nesting, 'DEFAULT_FORMATTER');
            }

            ;
            return nil;
          }();

          m = $$($nesting, 'DICE_ROLL_METHOD_RE').$match(dice_roll_method);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + self.name + ": invalid dice roll method: " + dice_roll_method);
          }

          ;
          self.num_of_dice = m['$[]'](1).$to_i();
          self.num_of_sides = m['$[]'](2).$to_i();
          return self.$store(items);
        }, $RangeTable_initialize$3.$$arity = 3);
        Opal.def(self, '$fetch', $RangeTable_fetch$4 = function $$fetch(value) {
          var _$$2,
              self = this,
              item = nil;

          item = $send(self.items, 'find', [], (_$$2 = function $$5(i) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return i.$range()['$include?'](value);
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));

          if ($truthy(item)) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": value is out of range: " + value);
          }

          ;
          return item;
        }, $RangeTable_fetch$4.$$arity = 1);
        Opal.def(self, '$roll', $RangeTable_roll$6 = function $$roll(randomizer) {
          var self = this,
              values = nil,
              sum = nil,
              result = nil,
              $writer = nil;
          values = randomizer.$roll_barabara(self.num_of_dice, self.num_of_sides);
          sum = values.$sum();
          result = $$($nesting, 'RollResult').$new(sum, values, self.$fetch(sum).$content());
          $writer = [self.formatter['$[]'](self, result)];
          $send(result, 'formatted=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $RangeTable_roll$6.$$arity = 1);
        self.$private();
        Opal.def(self, '$store', $RangeTable_store$7 = function $$store(items) {
          var _$$3,
              _$$4,
              _$$5,
              self = this,
              items_with_range = nil,
              sorted_items = nil;

          items_with_range = $send(items, 'map', [], (_$$3 = function $$8(r, c) {
            var self = _$$3.$$s == null ? this : _$$3.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (c == null) {
              c = nil;
            }

            ;
            return [self.$coerce_to_int_range(r), c];
          }, _$$3.$$s = self, _$$3.$$arity = 2, _$$3));
          sorted_items = $send(items_with_range, 'sort_by', [], (_$$4 = function $$9(r, _) {
            var self = _$$4.$$s == null ? this : _$$4.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (_ == null) {
              _ = nil;
            }

            ;
            return r.$min();
          }, _$$4.$$s = self, _$$4.$$arity = 2, _$$4));
          self.$assert_min_sum_is_covered(sorted_items);
          self.$assert_max_sum_is_covered(sorted_items);
          self.$assert_no_gap_or_overlap_in_ranges(sorted_items);
          self.items = $send(sorted_items, 'map', [], (_$$5 = function $$10(range, content) {
            var self = _$$5.$$s == null ? this : _$$5.$$s;

            if (range == null) {
              range = nil;
            }

            ;

            if (content == null) {
              content = nil;
            }

            ;
            return $$($nesting, 'Item').$new(range, content.$freeze()).$freeze();
          }, _$$5.$$s = self, _$$5.$$arity = 2, _$$5)).$freeze();
          return self;
        }, $RangeTable_store$7.$$arity = 1);
        Opal.def(self, '$coerce_to_int_range', $RangeTable_coerce_to_int_range$11 = function $$coerce_to_int_range(x) {
          var self = this,
              $case = nil,
              $ret_or_2 = nil;
          $case = x;

          if ($$($nesting, 'Integer')['$===']($case)) {
            return $$($nesting, 'Range').$new(x, x);
          } else if ($$($nesting, 'Range')['$===']($case)) {
            if ($truthy(function () {
              if ($truthy($ret_or_2 = x.$begin()['$is_a?']($$($nesting, 'Integer')))) {
                return x.$end()['$is_a?']($$($nesting, 'Integer'));
              } else {
                return $ret_or_2;
              }

              ;
              return nil;
            }())) {
              return x;
            }
          }

          ;
          return self.$raise($$($nesting, 'TypeError'), "" + self.name + ": " + x + " (" + x.$class() + ") must be an Integer or a Range with Integers ");
        }, $RangeTable_coerce_to_int_range$11.$$arity = 1);
        Opal.def(self, '$assert_min_sum_is_covered', $RangeTable_assert_min_sum_is_covered$12 = function $$assert_min_sum_is_covered(sorted_items) {
          var self = this,
              min_sum = nil,
              range = nil;
          min_sum = self.num_of_dice;
          range = sorted_items.$first()['$[]'](0);

          if ($truthy(range['$include?'](min_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": min value (" + min_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_min_sum_is_covered$12.$$arity = 1);
        Opal.def(self, '$assert_max_sum_is_covered', $RangeTable_assert_max_sum_is_covered$13 = function $$assert_max_sum_is_covered(sorted_items) {
          var self = this,
              max_sum = nil,
              range = nil;
          max_sum = $rb_times(self.num_of_dice, self.num_of_sides);
          range = sorted_items.$last()['$[]'](0);

          if ($truthy(range['$include?'](max_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": max value (" + max_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_max_sum_is_covered$13.$$arity = 1);
        return (Opal.def(self, '$assert_no_gap_or_overlap_in_ranges', $RangeTable_assert_no_gap_or_overlap_in_ranges$14 = function $$assert_no_gap_or_overlap_in_ranges(sorted_items) {
          var _$$6,
              self = this;

          $send(sorted_items, 'each_cons', [2], (_$$6 = function $$15(i1, i2) {
            var self = _$$6.$$s == null ? this : _$$6.$$s,
                r1 = nil,
                r2 = nil,
                max1 = nil,
                next_of_max1 = nil;
            if (self.name == null) self.name = nil;

            if (i1 == null) {
              i1 = nil;
            }

            ;

            if (i2 == null) {
              i2 = nil;
            }

            ;
            r1 = i1['$[]'](0);
            r2 = i2['$[]'](0);
            max1 = r1.$max();
            next_of_max1 = $rb_plus(max1, 1);

            if ($truthy(r2['$include?'](max1))) {
              self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range overlap: " + r1 + " and " + r2);
            }

            ;

            if ($truthy(r2['$include?'](next_of_max1))) {
              return nil;
            } else {
              return self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range gap: " + r1 + " and " + r2);
            }

            ;
          }, _$$6.$$s = self, _$$6.$$arity = 2, _$$6));
          return self;
        }, $RangeTable_assert_no_gap_or_overlap_in_ranges$14.$$arity = 1), nil) && 'assert_no_gap_or_overlap_in_ranges';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/arithmetic_evaluator"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'ArithmeticEvaluator');
      var $nesting = [self].concat($parent_nesting);

      (function (self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting),
            $eval$1;
        return (Opal.def(self, '$eval', $eval$1 = function $eval$1(expr, $kwargs) {
          var round_type,
              self = this,
              $ret_or_1 = nil;

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          round_type = $kwargs.$$smap["round_type"];

          if (round_type == null) {
            round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
          }

          ;

          if ($truthy(expr)) {} else {
            return 0;
          }

          ;

          if ($truthy($ret_or_1 = $$($nesting, 'Arithmetic').$eval(expr, round_type))) {
            return $ret_or_1;
          } else {
            return 0;
          }

          ;
        }, $eval$1.$$arity = -2), nil) && 'eval';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $truthy = Opal.truthy,
      $hash2 = Opal.hash2,
      $range = Opal.range;
  self.$require("bcdice/dice_table/table");
  self.$require("bcdice/dice_table/range_table");
  self.$require("bcdice/arithmetic_evaluator");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AnimaAnimus');
        var $nesting = [self].concat($parent_nesting),
            $AnimaAnimus_eval_game_system_specific_command$1,
            $AnimaAnimus_check_action$2;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "AnimaAnimus");
        Opal.const_set($nesting[0], 'NAME', "アニマアニムス");
        Opal.const_set($nesting[0], 'SORT_KEY', "あにまあにむす");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定(xAN<=y±z)\n" + "　十面ダイスをx個振って判定します。達成値が算出されます(クリティカル発生時は2増加)。\n" + "　x：振るダイスの数。魂魄値や攻撃値。\n" + "　y：成功値。\n" + "　z：成功値への補正。省略可能。\n" + "　(例) 2AN<=3+1 5AN<=7\n" + "・各種表\n" + "　情報収集表　IGT/喪失表　LT\n");
        Opal.def(self, '$eval_game_system_specific_command', $AnimaAnimus_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $case = nil;
          return function () {
            $case = command;

            if (/(\d+)AN<=(\d+([+\-]\d+)*)/i['$===']($case)) {
              return self.$check_action($$($nesting, 'Regexp').$last_match());
            } else {
              return self.$roll_tables(command, $$($nesting, 'TABLES'));
            }
          }();
        }, $AnimaAnimus_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$check_action', $AnimaAnimus_check_action$2 = function $$check_action(match_data) {
          var _$$7,
              self = this,
              dice_cnt = nil,
              target = nil,
              dice_arr = nil,
              dice_str = nil,
              suc_cnt = nil,
              has_critical = nil,
              result = nil;

          dice_cnt = $$($nesting, 'ArithmeticEvaluator').$eval(match_data['$[]'](1));
          target = $$($nesting, 'ArithmeticEvaluator').$eval(match_data['$[]'](2));
          self.$debug("dice_cnt", dice_cnt);
          self.$debug("target", target);
          dice_arr = self.randomizer.$roll_barabara(dice_cnt, 10);
          dice_str = dice_arr.$join(",");
          suc_cnt = $send(dice_arr, 'count', [], (_$$7 = function $$3(x) {
            var self = _$$7.$$s == null ? this : _$$7.$$s;

            if (x == null) {
              x = nil;
            }

            ;
            return $rb_le(x, target);
          }, _$$7.$$s = self, _$$7.$$arity = 1, _$$7));
          has_critical = dice_arr['$include?'](1);

          result = function () {
            if ($truthy(has_critical)) {
              return $rb_plus(suc_cnt, 2);
            } else {
              return suc_cnt;
            }

            ;
            return nil;
          }();

          return "" + "(" + dice_cnt + "B10<=" + target + ") ＞ " + dice_str + " ＞ " + function () {
            if ($truthy($rb_gt(result, 0))) {
              return "成功";
            } else {
              return "失敗";
            }

            ;
            return nil;
          }() + "(達成値:" + result + ")" + function () {
            if ($truthy(has_critical)) {
              return " (クリティカル発生)";
            } else {
              return "";
            }

            ;
            return nil;
          }();
        }, $AnimaAnimus_check_action$2.$$arity = 1);
        Opal.const_set($nesting[0], 'TABLES', $hash2(["IGT", "LT"], {
          "IGT": $$$($$($nesting, 'DiceTable'), 'Table').$new("情報収集表", "1d10", ["ストリートファイト/<格闘>/「俺に勝てたら教えてやるよ」情報を知る魂願者から勝負を挑まれた。生き延びるためにもこの勝負、負けるわけにはいかない。", "追跡！/<追跡／逃走>/有益な情報を持っている人間を見つけたが、こちらの顔を見るなり逃げ出した。どうにかして捕まえなくてはならない。", "脅し/<威圧>/ならず者たちが集まるバーにやってきた。裏社会に生きる彼らを脅せば有益な情報が手に入るはずだ。", "インターネット/<コンピュータ>/SNSやニュースなど、インターネット上の情報を調査する。デマには騙されないようにしなくては。", "瀕死の情報提供者/<医学>/情報を知る人物がいると聞いてやってきたら、その人物が瀕死の重傷を負っていた。なんとかして蘇生させなくては。", "潜入捜査/<隠密>/敵対する魂願者たちのグループに潜り込んでの調査活動。リスクは高いが、有益な情報が手に入る確率は高い。", "情報交換/<交渉>/友好的な関係にある魂願者との情報交換。うまく話を聞き出すことができるとよいが。", "魔宴の情報屋/<調達>/魔宴の情報屋に接触して情報を聞き出すことにした。一筋縄ではいかない相手らしいが、はたして……？", "違法調査/<犯罪>/法に触れるやり方で情報を集めることにした。ハッキング、窃盗、恐喝、どんな手段を選ぼうか。", "聞き込み/<自我>/街ゆく人びとに聞き込みを行なう。地道な活動こそが目標にたどり着くための最短の方法だ。"]),
          "LT": $$$($$($nesting, 'DiceTable'), 'RangeTable').$new("喪失表", "1d10", [[$range(1, 2, false), "存在/存在が希薄になり、知り合いや友人に自分の存在を忘れられてしまう。いずれ大切なパートナーの記憶からも消え、この世界でひとりぼっちになる。\nあなたの出自を消去すること。"], [$range(3, 4, false), "記憶/自分の大切な記憶をひとつ失なう。これからは力を使うたびに記憶をひとつ失なうことになり、最後には大切なパートナーのことも思い出せなくなってしまう。\nあなたのメモリアをひとつ選択して消去すること。シナリオメモリアは選択できない。"], [$range(5, 6, false), "容姿/だんだんと以前とはかけ離れた姿に変わっていく。いずれ誰も自分のことを自分だと気づかなくなるのだろう。\nあなたの特徴的な外見を失なう。内容をふさわしいものに書き換えること(特徴的な外見が美しい髪であれば醜い髪など)。"], [$range(7, 8, false), "感情/喜怒哀楽の感情のうち、いずれかひとつを失なう。力を使うたびに他の感情も失っていき、最後にはただ生き残るために戦う機械となる。\nポジティブかネガティブのどちらかを選択する。選択した感情をすべてのメモリアから消去する。消去した結果、表出感情がなくなってしまった場合、残った感情を表出感情にすること。なお、新しくメモリアを取得した場合も、選んだ感情を得ることはできない。"], [$range(9, 10, false), "五感/少しずつ五感が鈍くなる。今までできていたはずのことができなくなってしまう。\nあなたの特技をひとつ選択する。選択した特技に×をつけること。×が付いた技能で判定を行なうことはできず、判定を求められた場合は自動的に失敗となる。"]])
        }).$freeze());
        return self.$register_prefix("\\d+AN<=", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~AnimaAnimus~index.js.map