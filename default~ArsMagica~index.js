(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~ArsMagica~index"],{

/***/ "8IZY":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/ArsMagica.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/normalize"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Normalize');
      var $nesting = [self].concat($parent_nesting),
          $Normalize_comparison_operator$1,
          $Normalize_target_number$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if (/<=|=</['$===']($case)) {
            return "<=";
          } else if (/>=|=>/['$===']($case)) {
            return ">=";
          } else if (/<>|!=|=!/['$===']($case)) {
            return "!=";
          } else if (/</['$===']($case)) {
            return "<";
          } else if (/>/['$===']($case)) {
            return ">";
          } else if (/=/['$===']($case)) {
            return "==";
          } else {
            return nil;
          }
        }();
      }, $Normalize_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
        var self = this;

        if (val['$==']("?")) {
          return val;
        } else {
          return val.$to_i();
        }
      }, $Normalize_target_number$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/format"] = function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Format');
      var $nesting = [self].concat($parent_nesting),
          $Format_comparison_operator$1,
          $Format_modifier$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if ("=="['$===']($case)) {
            return "=";
          } else if ("!="['$===']($case)) {
            return "<>";
          } else if ($$($nesting, 'Symbol')['$===']($case)) {
            return op.$to_s();
          } else {
            return nil;
          }
        }();
      }, $Format_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {
        var self = this;

        if ($truthy(number['$nil?']())) {
          return nil;
        } else if (number['$=='](0)) {
          return "";
        } else if ($truthy($rb_gt(number, 0))) {
          return "" + "+" + number;
        } else {
          return number.$to_s();
        }
      }, $Format_modifier$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  self.$require("bcdice/normalize");
  self.$require("bcdice/format");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArsMagica');
        var $nesting = [self].concat($parent_nesting),
            $ArsMagica_eval_game_system_specific_command$1,
            $ArsMagica_parse_ars$3,
            $ArsMagica_parse_1r10$4,
            $ArsMagica_expr$5;
        self.$$prototype.target_numner = self.$$prototype.botch = self.$$prototype.modify_number = self.$$prototype.cmp_op = self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "ArsMagica");
        Opal.const_set($nesting[0], 'NAME', "アルスマギカ");
        Opal.const_set($nesting[0], 'SORT_KEY', "あるすまきか");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・ストレスダイス　(ArSx+y)\n" + "　\"ArS(ボッチダイス)+(修正)\"です。判定にも使えます。Rコマンド(1R10+y[m])に読替をします。\n" + "　ボッチダイスと修正は省略可能です。(ボッチダイスを省略すると1として扱います)\n" + "　botchダイスの0の数が2以上の時は、数えて表示します。\n" + "　（注意！） botchの判断が発生したときには、そのダイスを含めてロールした全てのダイスを[]の中に並べて表示します。\n" + "　例) (1R10[5]) ＞ 0[0,1,8,0,8,1] ＞ Botch!\n" + "　　最初の0が判断基準で、その右側5つがボッチダイスです。1*2,8*2,0*1なので1botchという訳です。\n");
        self.$register_prefix("ArS", "1R10");
        Opal.def(self, '$eval_game_system_specific_command', $ArsMagica_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(string) {
          var _$$,
              $a,
              self = this,
              $ret_or_1 = nil,
              diff = nil,
              $ret_or_2 = nil,
              botch = nil,
              bonus = nil,
              crit_mul = nil,
              total = nil,
              cmp_op = nil,
              die = nil,
              output = nil,
              count0 = nil,
              dice_n = nil,
              crit_dice = nil;

          if ($truthy(function () {
            if ($truthy($ret_or_1 = self.$parse_ars(string))) {
              return $ret_or_1;
            } else {
              return self.$parse_1r10(string);
            }

            ;
            return nil;
          }())) {} else {
            return nil;
          }

          ;

          diff = function () {
            if ($truthy($ret_or_2 = self.target_numner)) {
              return $ret_or_2;
            } else {
              return 0;
            }

            ;
            return nil;
          }();

          botch = self.botch;
          bonus = self.modify_number;
          crit_mul = 1;
          total = 0;
          cmp_op = self.cmp_op;
          die = $rb_minus(self.randomizer.$roll_once(10), 1);
          output = "" + "(" + self.$expr() + ") ＞ ";

          if (die['$=='](0)) {
            count0 = 0;
            dice_n = [];
            $send(botch, 'times', [], (_$$ = function $$2(_i) {
              var self = _$$.$$s == null ? this : _$$.$$s,
                  botch_die = nil;
              if (self.randomizer == null) self.randomizer = nil;

              if (_i == null) {
                _i = nil;
              }

              ;
              botch_die = $rb_minus(self.randomizer.$roll_once(10), 1);

              if (botch_die['$=='](0)) {
                count0 = $rb_plus(count0, 1);
              }

              ;
              return dice_n.$push(botch_die);
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));
            output = $rb_plus(output, "" + "0[" + die + "," + dice_n.$join(",") + "]");

            if ($truthy(count0['$!='](0))) {
              if ($truthy($rb_gt(count0, 1))) {
                output = $rb_plus(output, "" + " ＞ " + count0 + "Botch!");
              } else {
                output = $rb_plus(output, " ＞ Botch!");
              }

              ;
              cmp_op = nil;
            } else {
              if ($truthy($rb_gt(bonus, 0))) {
                output = $rb_plus(output, "" + "+" + bonus + " ＞ " + bonus);
              } else if ($truthy($rb_lt(bonus, 0))) {
                output = $rb_plus(output, "" + bonus + " ＞ " + bonus);
              } else {
                output = $rb_plus(output, " ＞ 0");
              }

              ;
              total = bonus;
            }

            ;
          } else if (die['$=='](1)) {
            crit_dice = "";

            while (die['$=='](1)) {
              crit_mul = $rb_times(crit_mul, 2);
              die = self.randomizer.$roll_once(10);
              crit_dice = $rb_plus(crit_dice, "" + die + ",");
            }

            ;
            total = $rb_times(die, crit_mul);
            crit_dice = crit_dice.$sub(/,$/, "");
            output = $rb_plus(output, total.$to_s());
            output = $rb_plus(output, "" + "[1," + crit_dice + "]");
            total = $rb_plus(total, bonus);

            if ($truthy($rb_gt(bonus, 0))) {
              output = $rb_plus(output, "" + "+" + bonus + " ＞ " + total);
            } else if ($truthy($rb_lt(bonus, 0))) {
              output = $rb_plus(output, "" + bonus + " ＞ " + total);
            }

            ;
          } else {
            total = $rb_plus(die, bonus);

            if ($truthy($rb_gt(bonus, 0))) {
              output = $rb_plus(output, "" + die + "+" + bonus + " ＞ " + total);
            } else if ($truthy($rb_lt(bonus, 0))) {
              output = $rb_plus(output, "" + die + bonus + " ＞ " + total);
            } else {
              output = $rb_plus(output, total.$to_s());
            }

            ;
          }

          ;

          if (cmp_op['$=='](">=")) {
            output = $rb_plus(output, function () {
              if ($truthy($rb_ge(total, diff))) {
                return " ＞ 成功";
              } else {
                return " ＞ 失敗";
              }

              ;
              return nil;
            }());
          }

          ;
          return output.$to_s();
        }, $ArsMagica_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$parse_ars', $ArsMagica_parse_ars$3 = function $$parse_ars(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              $ret_or_3 = nil,
              $ret_or_4 = nil;
          m = /^ArS(\d+)?((?:[+-]-?\d+)+)?(?:([>=]+)(\d+))?$/i.$match(command);

          if ($truthy(m)) {} else {
            return false;
          }

          ;

          self.botch = function () {
            if ($truthy($ret_or_3 = ($a = m['$[]'](1), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_3;
            } else {
              return 1;
            }

            ;
            return nil;
          }();

          self.modify_number = $$($nesting, 'ArithmeticEvaluator').$eval(function () {
            if ($truthy($ret_or_4 = m['$[]'](2))) {
              return $ret_or_4;
            } else {
              return "";
            }

            ;
            return nil;
          }());
          self.cmp_op = $$($nesting, 'Normalize').$comparison_operator(m['$[]'](3));
          self.target_numner = ($b = m['$[]'](4), $b === nil || $b == null ? nil : $send($b, 'to_i', []));
          return true;
        }, $ArsMagica_parse_ars$3.$$arity = 1);
        Opal.def(self, '$parse_1r10', $ArsMagica_parse_1r10$4 = function $$parse_1r10(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              $ret_or_5 = nil,
              $ret_or_6 = nil;
          m = /^1R10((?:[+-]-?\d+)+)?(?:\[(\d+)\])?(?:([>=]+)(\d+))?$/i.$match(command);

          if ($truthy(m)) {} else {
            return false;
          }

          ;
          self.modify_number = $$($nesting, 'ArithmeticEvaluator').$eval(function () {
            if ($truthy($ret_or_5 = m['$[]'](1))) {
              return $ret_or_5;
            } else {
              return "";
            }

            ;
            return nil;
          }());

          self.botch = function () {
            if ($truthy($ret_or_6 = ($a = m['$[]'](2), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_6;
            } else {
              return 1;
            }

            ;
            return nil;
          }();

          self.cmp_op = $$($nesting, 'Normalize').$comparison_operator(m['$[]'](3));
          self.target_numner = ($b = m['$[]'](4), $b === nil || $b == null ? nil : $send($b, 'to_i', []));
          return true;
        }, $ArsMagica_parse_1r10$4.$$arity = 1);
        return (Opal.def(self, '$expr', $ArsMagica_expr$5 = function $$expr() {
          var self = this,
              modifier = nil;
          modifier = $$($nesting, 'Format').$modifier(self.modify_number);
          return "" + "1R10" + modifier + "[" + self.botch + "]" + self.cmp_op + self.target_numner;
        }, $ArsMagica_expr$5.$$arity = 0), nil) && 'expr';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~ArsMagica~index.js.map