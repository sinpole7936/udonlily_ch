(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~BeastBindTrinity~index"],{

/***/ "aFQR":
/*!************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/BeastBindTrinity.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/arithmetic_evaluator"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'ArithmeticEvaluator');
      var $nesting = [self].concat($parent_nesting);

      (function (self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting),
            $eval$1;
        return (Opal.def(self, '$eval', $eval$1 = function $eval$1(expr, $kwargs) {
          var round_type,
              self = this,
              $ret_or_1 = nil;

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          round_type = $kwargs.$$smap["round_type"];

          if (round_type == null) {
            round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
          }

          ;

          if ($truthy(expr)) {} else {
            return 0;
          }

          ;

          if ($truthy($ret_or_1 = $$($nesting, 'Arithmetic').$eval(expr, round_type))) {
            return $ret_or_1;
          } else {
            return 0;
          }

          ;
        }, $eval$1.$$arity = -2), nil) && 'eval';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/format"] = function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Format');
      var $nesting = [self].concat($parent_nesting),
          $Format_comparison_operator$1,
          $Format_modifier$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if ("=="['$===']($case)) {
            return "=";
          } else if ("!="['$===']($case)) {
            return "<>";
          } else if ($$($nesting, 'Symbol')['$===']($case)) {
            return op.$to_s();
          } else {
            return nil;
          }
        }();
      }, $Format_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {
        var self = this;

        if ($truthy(number['$nil?']())) {
          return nil;
        } else if (number['$=='](0)) {
          return "";
        } else if ($truthy($rb_gt(number, 0))) {
          return "" + "+" + number;
        } else {
          return number.$to_s();
        }
      }, $Format_modifier$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/normalize"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Normalize');
      var $nesting = [self].concat($parent_nesting),
          $Normalize_comparison_operator$1,
          $Normalize_target_number$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if (/<=|=</['$===']($case)) {
            return "<=";
          } else if (/>=|=>/['$===']($case)) {
            return ">=";
          } else if (/<>|!=|=!/['$===']($case)) {
            return "!=";
          } else if (/</['$===']($case)) {
            return "<";
          } else if (/>/['$===']($case)) {
            return ">";
          } else if (/=/['$===']($case)) {
            return "==";
          } else {
            return nil;
          }
        }();
      }, $Normalize_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
        var self = this;

        if (val['$==']("?")) {
          return val;
        } else {
          return val.$to_i();
        }
      }, $Normalize_target_number$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Table');
        var $nesting = [self].concat($parent_nesting),
            $Table_from_i18n$1,
            $Table_initialize$2,
            $Table_roll$3,
            $Table_choice$4;
        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $Table_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale"], {
            "locale": locale
          }));
          return self.$new(table['$[]']("name"), table['$[]']("type"), table['$[]']("items"));
        }, $Table_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $Table_initialize$2 = function $$initialize(name, type, items) {
          var self = this,
              m = nil;
          self.name = name;
          self.items = items.$freeze();
          m = /(\d+)D(\d+)/i.$match(type);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
          }

          ;
          self.times = m['$[]'](1).$to_i();
          return self.sides = m['$[]'](2).$to_i();
        }, $Table_initialize$2.$$arity = 3);
        Opal.def(self, '$roll', $Table_roll$3 = function $$roll(bcdice) {
          var self = this,
              value = nil;
          value = bcdice.$roll_sum(self.times, self.sides);
          return self.$choice(value);
        }, $Table_roll$3.$$arity = 1);
        return (Opal.def(self, '$choice', $Table_choice$4 = function $$choice(value) {
          var self = this,
              index = nil;
          index = $rb_minus(value, self.times);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index));
        }, $Table_choice$4.$$arity = 1), nil) && 'choice';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_grid_table"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66GridTable');
        var $nesting = [self].concat($parent_nesting),
            $D66GridTable_from_i18n$1,
            $D66GridTable_initialize$2,
            $D66GridTable_roll$3;
        self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $D66GridTable_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale", "raise"], {
            "locale": locale,
            "raise": true
          }));
          return self.$new(table['$[]']("name"), table['$[]']("items"));
        }, $D66GridTable_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $D66GridTable_initialize$2 = function $$initialize(name, items) {
          var self = this;
          self.name = name;
          return self.items = items.$freeze();
        }, $D66GridTable_initialize$2.$$arity = 2);
        return (Opal.def(self, '$roll', $D66GridTable_roll$3 = function $$roll(randomizer) {
          var self = this,
              dice1 = nil,
              dice2 = nil,
              value = nil,
              index1 = nil,
              index2 = nil;
          dice1 = randomizer.$roll_once(6);
          dice2 = randomizer.$roll_once(6);
          value = $rb_plus($rb_times(dice1, 10), dice2);
          index1 = $rb_minus(dice1, 1);
          index2 = $rb_minus(dice2, 1);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index1)['$[]'](index2));
        }, $D66GridTable_roll$3.$$arity = 1), nil) && 'roll';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2;
  self.$require("bcdice/arithmetic_evaluator");
  self.$require("bcdice/format");
  self.$require("bcdice/normalize");
  self.$require("bcdice/dice_table/table");
  self.$require("bcdice/dice_table/d66_grid_table");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BeastBindTrinity');
        var $nesting = [self].concat($parent_nesting),
            $BeastBindTrinity_initialize$1,
            $BeastBindTrinity_eval_game_system_specific_command$17;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "BeastBindTrinity");
        Opal.const_set($nesting[0], 'NAME', "ビーストバインド トリニティ");
        Opal.const_set($nesting[0], 'SORT_KEY', "ひいすとはいんととりにてい");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定　(nBB+m%w@x#y$z&v)\n" + "　n個のD6を振り、出目の大きい2個から達成値を算出。修正mも可能。\n" + "\n" + "　%w、@x、#y、$z、&vはすべて省略可能。\n" + "＞%w：現在の人間性が w であるとして、クリティカル値(C値)を計算。\n" + "・省略した場合、C値=12として達成値を算出する。\n" + "＞@x：クリティカル値修正。（加減式でも入力可能）\n" + "・xに直接数字を書くと、C値をその数字に上書きする。\n" + "　「絶対にクリティカルしない」状態は、@13など xを13以上に指定すること。\n" + "・xの先頭が「+」か「-」なら、計算したC値にその値を加算。例）@-1、@+2\n" + "　この方法でC値をプラスする場合、上限は12となる。\n" + "＞#y、#Ay：ファンブル値修正。（加減式でも入力可能）\n" + "・yに直接数字を書くと、ファンブル値をその数字に設定。\n" + "・yの数字の先頭が「+」か「-」なら、ファンブル値=2にその数字を加算。例）#+2\n" + "・※#Ayとすると、ファンブルしても達成値を通常通り算出。　例）#A+1\n" + "＞$z：ダイスの出目をzに固定して判定する。複数指定可。\n" + "　　　《運命歪曲》など「ダイスの１個を振り直す」効果等に使用する。\n" + "　例）2BB$1 →ダイスを2個振る判定で、ダイス1個の出目を1で固定\n" + "　例）2BB$16→ダイスを2個振る判定で、ダイスの出目を1と6で固定\n" + "＞&v：出目がv未満のダイスがあれば、出目がvだったものとして達成値を計算する。\n" + "　例）2BB&3 →出目3未満（→出目1、2）を出目3だったものとして計算。\n" + "\n" + "・D66ダイスあり\n" + "・邂逅表：EMO\n" + "・暴露表：EXPO_A\n" + "・魔獣化暴露表：EXPO_B\n" + "・アイドル専用暴露表：EXPO_I\n" + "・アイドル専用魔獣化暴露表：EXPO_J\n" + "・正体判明チャートA～C：FACE_A, FACE_B, FACE_C\n");
        Opal.def(self, '$initialize', $BeastBindTrinity_initialize$1 = function $$initialize(command) {
          var $iter = $BeastBindTrinity_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $BeastBindTrinity_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $BeastBindTrinity_initialize$1, false, true), 'initialize', [command], null);
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $BeastBindTrinity_initialize$1.$$arity = 1);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'BBCommand');
          var $nesting = [self].concat($parent_nesting),
              $BBCommand_initialize$2,
              $BBCommand_roll$3,
              $BBCommand_parse$5,
              $BBCommand_parse_critical$6,
              $BBCommand_critical_from_humanity$7,
              $BBCommand_parse_fumble$8,
              $BBCommand_roll_with_dice_pool$9,
              $BBCommand_command_expr$10,
              $BBCommand_interim_expr$11,
              $BBCommand_dice_status$12,
              $BBCommand_fumble$ques$13,
              $BBCommand_critical$ques$14,
              $BBCommand_calc_total$15,
              $BBCommand_result_compare$16;
          self.$$prototype.parse_error = self.$$prototype.command = self.$$prototype.dice_pool = self.$$prototype.dice_num = self.$$prototype.randomizer = self.$$prototype.modify_number = self.$$prototype.critical = self.$$prototype.fumble = self.$$prototype.cmp_op = self.$$prototype.target_number = self.$$prototype.dice_total = self.$$prototype.keep_value_on_fumble = nil;
          Opal.def(self, '$initialize', $BBCommand_initialize$2 = function $$initialize(command) {
            var self = this;
            self.command = command;
            return self.$parse();
          }, $BBCommand_initialize$2.$$arity = 1);
          Opal.def(self, '$roll', $BBCommand_roll$3 = function $$roll(randomizer) {
            var _$$,
                self = this,
                dice_list_org = nil,
                dice_list_filtered = nil,
                total = nil,
                dice_list_org_str = nil,
                sequence = nil;

            if ($truthy(self.parse_error)) {
              return nil;
            }

            ;
            self.randomizer = randomizer;
            dice_list_org = self.$roll_with_dice_pool();

            if ($truthy(dice_list_org['$empty?']())) {
              return "ERROR:振るダイスの数が0個です";
            }

            ;
            dice_list_filtered = $send(dice_list_org, 'map', [], (_$$ = function $$4(dice) {
              var self = _$$.$$s == null ? this : _$$.$$s;
              if (self.dice_value_lower_limit == null) self.dice_value_lower_limit = nil;

              if (dice == null) {
                dice = nil;
              }

              ;
              return [dice, self.dice_value_lower_limit].$max();
            }, _$$.$$s = self, _$$.$$arity = 1, _$$)).$sort();
            self.dice_total = dice_list_filtered.$last(2).$inject(0, "+");
            total = self.$calc_total();

            if ($truthy(dice_list_filtered['$!='](dice_list_org))) {
              dice_list_org_str = "" + "[" + dice_list_org.$join(",") + "]";
            }

            ;
            sequence = [self.$command_expr(), dice_list_org_str, self.$interim_expr(dice_list_filtered), self.$dice_status(), total.$to_s(), self.$result_compare(total)].$compact();
            return sequence.$join(" ＞ ");
          }, $BBCommand_roll$3.$$arity = 1);
          self.$private();
          Opal.def(self, '$parse', $BBCommand_parse$5 = function $$parse() {
            var $a,
                self = this,
                m = nil;
            m = /^(\d+)(?:R6|BB6?)((?:[+\-]\d+)+)?(?:%(-?\d+))?(?:@([+\-\d]+))?(?:#(A)?([+\-\d]+))?(?:\$([1-6]+))?(?:&([1-6]))?(?:([>=]+)(\d+))?$/.$match(self.command);

            if ($truthy(m)) {} else {
              self.parse_error = true;
              return nil;
            }

            ;
            self.dice_num = m['$[]'](1).$to_i();

            self.modify_number = function () {
              if ($truthy(m['$[]'](2))) {
                return $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2));
              } else {
                return 0;
              }

              ;
              return nil;
            }();

            self.critical = self.$parse_critical(m['$[]'](3), m['$[]'](4));
            self.keep_value_on_fumble = m['$[]'](5)['$nil?']()['$!']();
            self.fumble = self.$parse_fumble(m['$[]'](6));

            self.dice_pool = function () {
              if ($truthy(m['$[]'](7))) {
                return $send(m['$[]'](7).$split(""), 'map', [], "to_i".$to_proc());
              } else {
                return [];
              }

              ;
              return nil;
            }();

            if ($truthy($rb_gt(self.dice_pool.$size(), self.dice_num))) {
              self.dice_pool.$pop($rb_minus(self.dice_pool.$size(), self.dice_num));
            }

            ;
            self.dice_value_lower_limit = m['$[]'](8).$to_i();
            self.cmp_op = $$($nesting, 'Normalize').$comparison_operator(m['$[]'](9));
            self.target_number = ($a = m['$[]'](10), $a === nil || $a == null ? nil : $send($a, 'to_i', []));
            return self.parse_error = false;
          }, $BBCommand_parse$5.$$arity = 0);
          Opal.def(self, '$parse_critical', $BBCommand_parse_critical$6 = function $$parse_critical(humanity, atmark) {
            var self = this,
                atmark_value = nil,
                critical = nil;

            humanity = function () {
              if ($truthy(humanity)) {
                return humanity.$to_i();
              } else {
                return 99;
              }

              ;
              return nil;
            }();

            atmark_value = function () {
              if ($truthy(atmark)) {
                return $$($nesting, 'ArithmeticEvaluator').$eval(atmark);
              } else {
                return 0;
              }

              ;
              return nil;
            }();

            critical = function () {
              if ($truthy(/^[+-]/.$match(atmark))) {
                return [$rb_plus(self.$critical_from_humanity(humanity), atmark_value), 12].$min();
              } else if ($truthy(atmark)) {
                return atmark_value;
              } else {
                return self.$critical_from_humanity(humanity);
              }

              ;
              return nil;
            }();

            return critical;
          }, $BBCommand_parse_critical$6.$$arity = 2);
          Opal.def(self, '$critical_from_humanity', $BBCommand_critical_from_humanity$7 = function $$critical_from_humanity(humanity) {
            var self = this;

            if ($truthy($rb_le(humanity, 0))) {
              return 9;
            } else if ($truthy($rb_le(humanity, 20))) {
              return 10;
            } else if ($truthy($rb_le(humanity, 40))) {
              return 11;
            } else {
              return 12;
            }
          }, $BBCommand_critical_from_humanity$7.$$arity = 1);
          Opal.def(self, '$parse_fumble', $BBCommand_parse_fumble$8 = function $$parse_fumble(sharp) {
            var self = this,
                sharp_value = nil;

            sharp_value = function () {
              if ($truthy(sharp)) {
                return $$($nesting, 'ArithmeticEvaluator').$eval(sharp);
              } else {
                return 0;
              }

              ;
              return nil;
            }();

            if ($truthy(/^[+-]/.$match(sharp))) {
              return $rb_plus(2, sharp_value);
            } else if ($truthy(sharp)) {
              return sharp_value;
            } else {
              return 2;
            }

            ;
          }, $BBCommand_parse_fumble$8.$$arity = 1);
          Opal.def(self, '$roll_with_dice_pool', $BBCommand_roll_with_dice_pool$9 = function $$roll_with_dice_pool() {
            var self = this,
                dice_times = nil,
                dice_list = nil;
            dice_times = $rb_minus(self.dice_num, self.dice_pool.$size());
            dice_list = $rb_plus(self.randomizer.$roll_barabara(dice_times, 6), self.dice_pool);
            return dice_list.$sort();
          }, $BBCommand_roll_with_dice_pool$9.$$arity = 0);
          Opal.def(self, '$command_expr', $BBCommand_command_expr$10 = function $$command_expr() {
            var self = this,
                modifier = nil;
            modifier = $$($nesting, 'Format').$modifier(self.modify_number);
            return "" + "(" + self.dice_num + "BB" + modifier + "@" + self.critical + "#" + self.fumble + self.cmp_op + self.target_number + ")";
          }, $BBCommand_command_expr$10.$$arity = 0);
          Opal.def(self, '$interim_expr', $BBCommand_interim_expr$11 = function $$interim_expr(dice_list) {
            var self = this,
                expr = nil;
            expr = "" + self.dice_total + "[" + dice_list.$join(",") + "]" + $$($nesting, 'Format').$modifier(self.modify_number);

            if ($truthy(self['$critical?']())) {
              expr = $rb_plus(expr, "+20");
            }

            ;
            return expr;
          }, $BBCommand_interim_expr$11.$$arity = 1);
          Opal.def(self, '$dice_status', $BBCommand_dice_status$12 = function $$dice_status() {
            var self = this;

            if ($truthy(self['$fumble?']())) {
              return "ファンブル";
            } else if ($truthy(self['$critical?']())) {
              return "クリティカル";
            } else {
              return nil;
            }
          }, $BBCommand_dice_status$12.$$arity = 0);
          Opal.def(self, '$fumble?', $BBCommand_fumble$ques$13 = function $BBCommand_fumble$ques$13() {
            var self = this;
            return $rb_le(self.dice_total, self.fumble);
          }, $BBCommand_fumble$ques$13.$$arity = 0);
          Opal.def(self, '$critical?', $BBCommand_critical$ques$14 = function $BBCommand_critical$ques$14() {
            var self = this;
            return $rb_ge(self.dice_total, self.critical);
          }, $BBCommand_critical$ques$14.$$arity = 0);
          Opal.def(self, '$calc_total', $BBCommand_calc_total$15 = function $$calc_total() {
            var self = this,
                total = nil;
            total = $rb_plus(self.dice_total, self.modify_number);

            if ($truthy(self['$fumble?']())) {
              if ($truthy(self.keep_value_on_fumble)) {} else {
                total = 0;
              }
            } else if ($truthy(self['$critical?']())) {
              total = $rb_plus(total, 20);
            }

            ;

            if ($truthy($rb_lt(total, 0))) {
              total = 0;
            }

            ;
            return total;
          }, $BBCommand_calc_total$15.$$arity = 0);
          return (Opal.def(self, '$result_compare', $BBCommand_result_compare$16 = function $$result_compare(total) {
            var self = this;

            if ($truthy(self.cmp_op)) {
              if ($truthy(total.$send(self.cmp_op, self.target_number))) {
                return "成功";
              } else {
                return "失敗";
              }
            } else {
              return nil;
            }
          }, $BBCommand_result_compare$16.$$arity = 1), nil) && 'result_compare';
        })($nesting[0], null, $nesting);

        Opal.def(self, '$eval_game_system_specific_command', $BeastBindTrinity_eval_game_system_specific_command$17 = function $$eval_game_system_specific_command(command) {
          var self = this,
              ret = nil,
              bb = nil;

          if ($truthy(ret = self.$roll_tables(command, $$($nesting, 'TABLES')))) {
            return ret;
          }

          ;
          bb = $$($nesting, 'BBCommand').$new(command);
          return bb.$roll(self.randomizer);
        }, $BeastBindTrinity_eval_game_system_specific_command$17.$$arity = 1);
        Opal.const_set($nesting[0], 'TABLES', $hash2(["EMO", "EXPO_A", "EXPO_B", "EXPO_I", "EXPO_J", "FACE_A", "FACE_B", "FACE_C"], {
          "EMO": $$$($$($nesting, 'DiceTable'), 'D66GridTable').$new("邂逅表", [["家族", "家族", "信頼", "信頼", "忘却", "忘却"], ["慈愛", "慈愛", "憧憬", "憧憬", "感銘", "感銘"], ["同志", "同志", "幼子", "幼子", "興味", "興味"], ["ビジネス", "ビジネス", "師事", "師事", "好敵手", "好敵手"], ["友情", "友情", "忠誠", "忠誠", "恐怖", "恐怖"], ["執着", "執着", "軽蔑", "軽蔑", "憎悪", "憎悪"]]),
          "EXPO_A": $$$($$($nesting, 'DiceTable'), 'Table').$new("暴露表", "1D6", ["噂になるがすぐ忘れられる", "都市伝説として処理される", "ワイドショーをにぎわす", "シナリオ中［迫害状態］になる", "絆の対象ひとりに正体が知られる", "魔獣化暴露表へ"]),
          "EXPO_B": $$$($$($nesting, 'DiceTable'), 'Table').$new("魔獣化暴露表", "1D6", ["トンデモ業界の伝説になる", "シナリオ中［迫害状態］になる", "シナリオ中［迫害状態］になる", "絆の対象ひとりに正体が知られる", "絆の対象ひとりに正体が知られる", "自衛隊退魔部隊×2D6体の襲撃"]),
          "EXPO_I": $$$($$($nesting, 'DiceTable'), 'Table').$new("アイドル専用暴露表", "1D6", ["愉快な伝説として人気になる", "ワイドショーをにぎわす", "炎上。シナリオ中［迫害状態］", "所属事務所に2D6時間説教される", "絆の対象ひとりに正体が知られる", "アイドル専用魔獣化暴露表へ"]),
          "EXPO_J": $$$($$($nesting, 'DiceTable'), 'Table').$new("アイドル専用魔獣化暴露表", "1D6", ["シナリオ中［迫害状態］になる", "シナリオ中［迫害状態］になる", "絆の対象ひとりに正体が知られる", "事務所から契約を解除される", "絆の対象ひとりに正体が知られる", "1D6本のレギュラー番組を失う"]),
          "FACE_A": $$$($$($nesting, 'DiceTable'), 'Table').$new("正体判明チャートA", "1D6", ["あなたを受け入れてくれる", "あなたを受け入れてくれる", "絆が（拒絶）に書き換わる", "絆がエゴに書き換わる", "気絶しその事実を忘れる", "精神崩壊する"]),
          "FACE_B": $$$($$($nesting, 'DiceTable'), 'Table').$new("正体判明チャートB", "1D6", ["あなたを受け入れてくれる", "狂乱し攻撃してくる", "退場。その場から逃亡。暴露表へ", "絆がエゴに書き換わる", "精神崩壊する", "精神崩壊する"]),
          "FACE_C": $$$($$($nesting, 'DiceTable'), 'Table').$new("正体判明チャートC", "1D6", ["あなたを受け入れてくれる", "退場。その場から逃亡。暴露表へ", "退場。その場から逃亡。暴露表へ", "絆がエゴに書き換わる", "精神崩壊する", "精神崩壊する"])
        }).$freeze());
        return self.$register_prefix("\\d+BB", "\\d+R6", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~BeastBindTrinity~index.js.map