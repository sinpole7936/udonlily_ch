(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~BlindMythos~index"],{

/***/ "AYPM":
/*!*******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/BlindMythos.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BlindMythos');
        var $nesting = [self].concat($parent_nesting),
            $BlindMythos_eval_game_system_specific_command$1,
            $BlindMythos_judgeRoll$2,
            $BlindMythos_reRoll$3,
            $BlindMythos_getRollResult$5,
            $BlindMythos_getTotalResultMessageText$9,
            $BlindMythos_getSameDieList$12,
            $BlindMythos_getSuccessResultText$15,
            $BlindMythos_getRulingPlanetDiceCommandResult$17,
            $BlindMythos_getRulingPlanetDice$19,
            $BlindMythos_changeRulingPlanetDice$20,
            $BlindMythos_getDurtyTableCommandReuslt$21;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "BlindMythos");
        Opal.const_set($nesting[0], 'NAME', "ブラインド・ミトスRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "ふらいんとみとすRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定：BMx@y>=z、BMSx@y>=z\n" + "  　x:スキルレベル\n" + "　　y:目標難易度（省略可。デフォルト4）\n" + "　　z:必要成功度\n" + "　BMコマンドはダイスの振り足しを常に行い、\n" + "　BMSは振り足しを自動では行いません。\n" + " 例）BM>=1　BM@3>=1　BMS2>=1\n" + "\n" + "・判定振り足し：ReRollx,x,x...@y>=1\n" + "  　x:振るダイスの個数\n" + "　　y:目標難易度（省略可。デフォルト4）\n" + "　　z:必要成功度\n" + "　振り足しを自動で行わない場合（BMSコマンド）に使用します。\n" + "\n" + "・LE：失う感情表\n" + "・感情後遺症表 ESx\n" + "　ESH：喜、ESA：怒、ESS：哀、ESP：楽、ESL：愛、ESE：感\n" + "・DT：汚染チャート\n" + "・RPxyz：守護星表チェック\n" + " xyz:守護星ナンバーを指定\n" + " 例）RP123　RP258\n");
        Opal.def(self, '$eval_game_system_specific_command', $BlindMythos_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var $a,
              $b,
              self = this,
              text = nil,
              isStop = nil;
          self.$debug("eval_game_system_specific_command Begin");
          text = self.$judgeRoll(command);

          if ($truthy(text['$nil?']())) {} else {
            return text;
          }

          ;
          isStop = true;
          $b = self.$reRoll(command, isStop), $a = Opal.to_ary($b), text = $a[0] == null ? nil : $a[0], $b;

          if ($truthy(text['$nil?']())) {} else {
            return text;
          }

          ;
          text = self.$getRulingPlanetDiceCommandResult(command);

          if ($truthy(text['$nil?']())) {} else {
            return text;
          }

          ;
          text = self.$getDurtyTableCommandReuslt(command);

          if ($truthy(text['$nil?']())) {} else {
            return text;
          }

          ;
          return self.$roll_tables(command, $$($nesting, 'TABLES'));
        }, $BlindMythos_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$judgeRoll', $BlindMythos_judgeRoll$2 = function $$judgeRoll(command) {
          var $a,
              $b,
              self = this,
              isStop = nil,
              skillRank = nil,
              judgeNumberText = nil,
              judgeNumber = nil,
              $ret_or_1 = nil,
              targetNumber = nil,
              $ret_or_2 = nil,
              message = nil,
              diceCount = nil,
              isReRoll = nil,
              text = nil,
              bitList = nil,
              successList = nil,
              countOneList = nil,
              canReRoll = nil;

          if ($truthy(/^BM(S)?(\d*)(@(\d+))?>=(\d+)$/i['$=~'](command))) {} else {
            return nil;
          }

          ;
          isStop = $$($nesting, 'Regexp').$last_match(1)['$nil?']()['$!']();
          skillRank = $$($nesting, 'Regexp').$last_match(2).$to_i();
          judgeNumberText = $$($nesting, 'Regexp').$last_match(3);

          judgeNumber = function () {
            if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(4))) {
              return $ret_or_1;
            } else {
              return 4;
            }

            ;
            return nil;
          }().$to_i();

          targetNumber = function () {
            if ($truthy($ret_or_2 = $$($nesting, 'Regexp').$last_match(5))) {
              return $ret_or_2;
            } else {
              return 1;
            }

            ;
            return nil;
          }().$to_i();

          message = "";
          diceCount = $rb_plus(skillRank, 2);
          isReRoll = false;
          $b = self.$getRollResult([diceCount], judgeNumberText, judgeNumber, targetNumber, isReRoll, isStop), $a = Opal.to_ary($b), text = $a[0] == null ? nil : $a[0], bitList = $a[1] == null ? nil : $a[1], successList = $a[2] == null ? nil : $a[2], countOneList = $a[3] == null ? nil : $a[3], canReRoll = $a[4] == null ? nil : $a[4], $b;
          message = $rb_plus(message, text);
          message = $rb_plus(message, self.$getTotalResultMessageText(bitList, successList, countOneList, targetNumber, isStop, canReRoll));
          return message;
        }, $BlindMythos_judgeRoll$2.$$arity = 1);
        Opal.def(self, '$reRoll', $BlindMythos_reRoll$3 = function $$reRoll(command, isStop) {
          var _$$,
              $a,
              $b,
              self = this,
              rerollCountsText = nil,
              judgeNumberText = nil,
              judgeNumber = nil,
              $ret_or_3 = nil,
              targetNumber = nil,
              rerollCounts = nil,
              commandText = nil,
              message = nil,
              $ret_or_4 = nil,
              isReRoll = nil,
              text = nil,
              _bitList = nil,
              successList = nil,
              countOneList = nil;

          self.$debug("ReRoll Begin", command);

          if ($truthy(/^ReRoll([\d,]+)(@(\d+))?>=(\d+)$/i['$=~'](command))) {} else {
            return nil;
          }

          ;
          self.$debug("ReRoll pass");
          rerollCountsText = $$($nesting, 'Regexp').$last_match(1);
          judgeNumberText = $$($nesting, 'Regexp').$last_match(2);

          judgeNumber = function () {
            if ($truthy($ret_or_3 = $$($nesting, 'Regexp').$last_match(3))) {
              return $ret_or_3;
            } else {
              return 4;
            }

            ;
            return nil;
          }().$to_i();

          targetNumber = $$($nesting, 'Regexp').$last_match(4).$to_i();
          rerollCounts = $send(rerollCountsText.$split(/,/), 'map', [], "to_i".$to_proc());
          commandText = "";
          $send(rerollCounts, 'each', [], (_$$ = function $$4(diceCount) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (diceCount == null) {
              diceCount = nil;
            }

            ;

            if ($truthy(commandText['$empty?']())) {} else {
              commandText = $rb_plus(commandText, ",");
            }

            ;
            return commandText = $rb_plus(commandText, "" + "ReRoll" + diceCount + judgeNumberText + ">=" + targetNumber);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          self.$debug("commandText", commandText);
          message = "";

          if ($truthy(function () {
            if ($truthy($ret_or_4 = $rb_gt(rerollCounts.$size(), 1))) {
              return isStop;
            } else {
              return $ret_or_4;
            }

            ;
            return nil;
          }())) {
            message = $rb_plus(message, "" + "(" + commandText + ")");
          }

          ;
          message = $rb_plus(message, "\n");
          isReRoll = true;
          $b = self.$getRollResult(rerollCounts, judgeNumberText, judgeNumber, targetNumber, isReRoll, isStop), $a = Opal.to_ary($b), text = $a[0] == null ? nil : $a[0], _bitList = $a[1] == null ? nil : $a[1], successList = $a[2] == null ? nil : $a[2], countOneList = $a[3] == null ? nil : $a[3], $b;
          message = $rb_plus(message, text);
          return [message, successList, countOneList, targetNumber];
        }, $BlindMythos_reRoll$3.$$arity = 2);
        Opal.def(self, '$getRollResult', $BlindMythos_getRollResult$5 = function $$getRollResult(rerollCounts, judgeNumberText, judgeNumber, targetNumber, isReRoll, isStop) {
          var _$$4,
              $a,
              $b,
              self = this,
              bitList = nil,
              successList = nil,
              countOneList = nil,
              rerollTargetList = nil,
              message = nil,
              rerollCommand = nil,
              canReRoll = nil,
              $ret_or_5 = nil,
              text = nil,
              successListTmp = nil,
              countOneListTmp = nil;

          bitList = [];
          successList = [];
          countOneList = [];
          rerollTargetList = [];
          message = "";
          $send(rerollCounts, 'each_with_index', [], (_$$4 = function $$6(diceCount, index) {
            var self = _$$4.$$s == null ? this : _$$4.$$s,
                $a,
                $b,
                _$$2,
                _$$3,
                commandName = nil,
                commandText = nil,
                diceList = nil,
                diceText = nil,
                success = nil,
                countOne = nil,
                resultText = nil,
                sameDiceList = nil,
                rerollText = nil;

            if (self.randomizer == null) self.randomizer = nil;

            if (diceCount == null) {
              diceCount = nil;
            }

            ;

            if (index == null) {
              index = nil;
            }

            ;

            if (index['$=='](0)) {} else {
              message = $rb_plus(message, "\n");
            }

            ;
            commandName = "" + "ReRoll" + diceCount;

            if ($truthy(isReRoll)) {} else if ($truthy(isStop)) {
              commandName = "" + "BMS" + $rb_minus(diceCount, 2);
            } else {
              commandName = "" + "BM" + $rb_minus(diceCount, 2);
            }

            ;
            commandText = "" + commandName + judgeNumberText + ">=" + targetNumber;
            diceList = self.randomizer.$roll_barabara(diceCount, 6).$sort();
            diceText = diceList.$join(",");

            if ($truthy(isReRoll)) {
              message = $rb_plus(message, " ＞ ");
            }

            ;
            message = $rb_plus(message, "" + "(" + commandText + ") ＞ " + diceCount + "D6[" + diceText + "] ＞ ");
            $b = self.$getSuccessResultText(diceList, judgeNumber), $a = Opal.to_ary($b), success = $a[0] == null ? nil : $a[0], countOne = $a[1] == null ? nil : $a[1], resultText = $a[2] == null ? nil : $a[2], $b;

            if ($truthy(isReRoll)) {} else {
              bitList = $rb_plus(bitList, $send(diceList, 'find_all', [], (_$$2 = function $$7(i) {
                var self = _$$2.$$s == null ? this : _$$2.$$s;

                if (i == null) {
                  i = nil;
                }

                ;
                return $rb_ge(i, 4);
              }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2)));
            }

            ;
            successList['$<<'](success);
            countOneList['$<<'](countOne);
            message = $rb_plus(message, resultText);
            sameDiceList = self.$getSameDieList(diceList);

            if ($truthy(sameDiceList['$empty?']())) {
              return nil;
            }

            ;
            rerollText = "";
            $send(sameDiceList, 'each', [], (_$$3 = function $$8(list) {
              var self = _$$3.$$s == null ? this : _$$3.$$s;

              if (list == null) {
                list = nil;
              }

              ;

              if ($truthy(rerollText['$empty?']())) {} else {
                rerollText = $rb_plus(rerollText, ",");
              }

              ;
              return rerollText = $rb_plus(rerollText, list.$join(""));
            }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3));
            rerollTargetList['$<<']($send(sameDiceList, 'map', [], "count".$to_proc()).$join(","));
            return message = $rb_plus(message, "" + "、リロール[" + rerollText + "]");
          }, _$$4.$$s = self, _$$4.$$arity = 2, _$$4));
          rerollCommand = "";

          if ($truthy(rerollTargetList['$empty?']())) {} else {
            rerollCommand = "" + "ReRoll" + rerollTargetList.$join(",") + judgeNumberText + ">=" + targetNumber;

            if ($truthy(isStop)) {
              message = $rb_plus(message, "" + "\n ＞ コマンド：" + rerollCommand);
            }

            ;
          }

          ;
          canReRoll = rerollCommand['$empty?']()['$!']();

          if ($truthy(function () {
            if ($truthy($ret_or_5 = canReRoll)) {
              return isStop['$!']();
            } else {
              return $ret_or_5;
            }

            ;
            return nil;
          }())) {
            $b = self.$reRoll(rerollCommand, isStop), $a = Opal.to_ary($b), text = $a[0] == null ? nil : $a[0], successListTmp = $a[1] == null ? nil : $a[1], countOneListTmp = $a[2] == null ? nil : $a[2], $b;
            message = $rb_plus(message, text);
            successList = $rb_plus(successList, successListTmp);
            countOneList = $rb_plus(countOneList, countOneListTmp);
          }

          ;
          return [message, bitList, successList, countOneList, canReRoll];
        }, $BlindMythos_getRollResult$5.$$arity = 6);
        Opal.def(self, '$getTotalResultMessageText', $BlindMythos_getTotalResultMessageText$9 = function $$getTotalResultMessageText(bitList, successList, countOneList, targetNumber, isStop, canReRoll) {
          var _$$5,
              _$$6,
              self = this,
              success = nil,
              countOne = nil,
              result = nil,
              $ret_or_6 = nil;

          success = $send(successList, 'inject', [], (_$$5 = function $$10(sum, i) {
            var self = _$$5.$$s == null ? this : _$$5.$$s;

            if (sum == null) {
              sum = nil;
            }

            ;

            if (i == null) {
              i = nil;
            }

            ;
            return $rb_plus(sum, i);
          }, _$$5.$$s = self, _$$5.$$arity = 2, _$$5));
          countOne = $send(countOneList, 'inject', [], (_$$6 = function $$11(sum, i) {
            var self = _$$6.$$s == null ? this : _$$6.$$s;

            if (sum == null) {
              sum = nil;
            }

            ;

            if (i == null) {
              i = nil;
            }

            ;
            return $rb_plus(sum, i);
          }, _$$6.$$s = self, _$$6.$$arity = 2, _$$6));
          result = "";

          if ($truthy($rb_gt(successList.$size(), 1))) {
            result = $rb_plus(result, "" + "\n ＞ 最終成功数:" + success);
          }

          ;

          if ($truthy(function () {
            if ($truthy($ret_or_6 = canReRoll)) {
              return isStop;
            } else {
              return $ret_or_6;
            }

            ;
            return nil;
          }())) {
            result = $rb_plus(result, "\n");

            if ($truthy($rb_ge(success, targetNumber))) {
              result = $rb_plus(result, " ＞ 現状で成功。コマンド実行で追加リロールも可能");
            } else {
              result = $rb_plus(result, " ＞ 現状のままでは失敗");

              if ($truthy($rb_ge(countOne, 1))) {
                result = $rb_plus(result, "" + "。汚染ポイント+" + countOne);
              }

              ;
            }

            ;
            return result;
          }

          ;

          if ($truthy($rb_ge(success, targetNumber))) {
            result = $rb_plus(result, " ＞ 成功");

            if ($truthy($rb_ge(bitList.$size(), 1))) {
              result = $rb_plus(result, "" + "、禁書ビット発生[" + bitList.$join(",") + "]");
            }

            ;
          } else {
            result = $rb_plus(result, " ＞ 失敗");

            if ($truthy($rb_ge(countOne, 1))) {
              result = $rb_plus(result, "" + "。汚染ポイント+" + countOne);
            }

            ;
          }

          ;
          return result;
        }, $BlindMythos_getTotalResultMessageText$9.$$arity = 6);
        Opal.def(self, '$getSameDieList', $BlindMythos_getSameDieList$12 = function $$getSameDieList(diceList) {
          var _$$8,
              self = this,
              sameDiceList = nil;

          sameDiceList = [];
          $send(diceList.$uniq(), 'each', [], (_$$8 = function $$13(i) {
            var self = _$$8.$$s == null ? this : _$$8.$$s,
                _$$7,
                list = nil;

            if (i == null) {
              i = nil;
            }

            ;

            if (i['$=='](1)) {
              return nil;
            }

            ;
            list = $send(diceList, 'find_all', [], (_$$7 = function $$14(dice) {
              var self = _$$7.$$s == null ? this : _$$7.$$s;

              if (dice == null) {
                dice = nil;
              }

              ;
              return dice['$=='](i);
            }, _$$7.$$s = self, _$$7.$$arity = 1, _$$7));

            if ($truthy($rb_le(list.$length(), 1))) {
              return nil;
            }

            ;
            return sameDiceList['$<<'](list);
          }, _$$8.$$s = self, _$$8.$$arity = 1, _$$8));
          return sameDiceList;
        }, $BlindMythos_getSameDieList$12.$$arity = 1);
        Opal.def(self, '$getSuccessResultText', $BlindMythos_getSuccessResultText$15 = function $$getSuccessResultText(diceList, judgeNumber) {
          var _$$9,
              self = this,
              success = nil,
              countOne = nil,
              result = nil;

          success = 0;
          countOne = 0;
          $send(diceList, 'each', [], (_$$9 = function $$16(i) {
            var self = _$$9.$$s == null ? this : _$$9.$$s;

            if (i == null) {
              i = nil;
            }

            ;

            if (i['$=='](1)) {
              countOne = $rb_plus(countOne, 1);
            }

            ;

            if ($truthy($rb_ge(i, judgeNumber))) {} else {
              return nil;
            }

            ;
            return success = $rb_plus(success, 1);
          }, _$$9.$$s = self, _$$9.$$arity = 1, _$$9));
          result = "" + "成功数:" + success;
          return [success, countOne, result];
        }, $BlindMythos_getSuccessResultText$15.$$arity = 2);
        Opal.def(self, '$getRulingPlanetDiceCommandResult', $BlindMythos_getRulingPlanetDiceCommandResult$17 = function $$getRulingPlanetDiceCommandResult(command) {
          var _$$10,
              self = this,
              targetNumbers = nil,
              diceList = nil,
              matchResult = nil,
              text = nil;

          if ($truthy(command['$=~'](/^RP(\d+)/i))) {} else {
            return nil;
          }

          ;
          targetNumbers = $send($$($nesting, 'Regexp').$last_match(1).$split(/(?:)/), 'map', [], "to_i".$to_proc());
          diceList = self.$getRulingPlanetDice();
          matchResult = "失敗";

          (function () {
            var $brk = Opal.new_brk();

            try {
              return $send(targetNumbers, 'each', [], (_$$10 = function $$18(i) {
                var self = _$$10.$$s == null ? this : _$$10.$$s;

                if (i == null) {
                  i = nil;
                }

                ;

                if ($truthy(diceList['$include?'](i))) {
                  matchResult = "発動";
                  Opal.brk(nil, $brk);
                } else {
                  return nil;
                }

                ;
              }, _$$10.$$s = self, _$$10.$$brk = $brk, _$$10.$$arity = 1, _$$10));
            } catch (err) {
              if (err === $brk) {
                return err.$v;
              } else {
                throw err;
              }
            }
          })();

          text = "" + "守護星表チェック(" + targetNumbers.$join(",") + ") ＞ " + diceList.$count() + "D10[" + diceList.$join(",") + "] ＞ " + matchResult;
          return text;
        }, $BlindMythos_getRulingPlanetDiceCommandResult$17.$$arity = 1);
        Opal.def(self, '$getRulingPlanetDice', $BlindMythos_getRulingPlanetDice$19 = function $$getRulingPlanetDice() {
          var $a,
              self = this,
              dice1 = nil,
              dice2 = nil;
          dice1 = self.randomizer.$roll_once(10);
          dice2 = dice1;

          while (dice1['$=='](dice2)) {
            dice2 = self.randomizer.$roll_once(10);
          }

          ;
          dice1 = self.$changeRulingPlanetDice(dice1);
          dice2 = self.$changeRulingPlanetDice(dice2);
          return [dice1, dice2];
        }, $BlindMythos_getRulingPlanetDice$19.$$arity = 0);
        Opal.def(self, '$changeRulingPlanetDice', $BlindMythos_changeRulingPlanetDice$20 = function $$changeRulingPlanetDice(dice) {
          var self = this;

          if (dice['$=='](10)) {
            return 0;
          }

          ;
          return dice;
        }, $BlindMythos_changeRulingPlanetDice$20.$$arity = 1);
        Opal.def(self, '$getDurtyTableCommandReuslt', $BlindMythos_getDurtyTableCommandReuslt$21 = function $$getDurtyTableCommandReuslt(command) {
          var self = this,
              table = nil,
              dice1 = nil,
              dice2 = nil,
              index = nil;

          if ($truthy(/^DT$/i['$=~'](command))) {} else {
            return nil;
          }

          ;
          table = "" + "汚染チャートを２回振り、その効果を適用する（1・2-2,5・6-12 なら振り直す）\n" + "ＰＣ全員の「トラウマ」「喪失」すべてに２ダメージ\n" + "ＰＣ全員の「喪失」２つに４ダメージ\n" + "ＰＣ全員の「トラウマ」すべてに２ダメージ。その後さらに汚染が２増える\n" + "ＰＣ全員、１つの【記憶】の両方の値が０になる。このときアクロバットダイス獲得不可\n" + "ＰＣ全員の「喪失」１つに４ダメージ。このときアクロバットダイス獲得不可\n" + "ＰＣ全員の「トラウマ」すべてに１ダメージ。その後さらに汚染が３増える\n" + "ＰＣ全員の「トラウマ」すべてに１ダメージ。その後アクロバットダイスをＰＣ人数分失う\n" + "ＰＣ全員の「喪失」すべてに２ダメージ。禁書ビットをすべて失う\n" + "ＰＣ全員の「トラウマ」２つに３ダメージ。その後さらに汚染が１増える\n" + "ＰＣ全員の「トラウマ」「喪失」すべてに１ダメージ\n" + "ＰＣ全員の「喪失」１つに４ダメージ。禁書ビットをすべて失う\n" + "ＰＣ全員の「トラウマ」すべてに２ダメージ\n" + "ＰＣ全員の１つの【記憶】の「トラウマ」「喪失」それぞれに３ダメージ\n" + "ＰＣ全員の「喪失」すべてに１ダメージ\n" + "ＰＣ全員の「トラウマ」３つに２ダメージ\n" + "ＰＣ全員の「トラウマ」と「喪失」それぞれ１つに３ダメージ\n" + "ＰＣ全員の「喪失」３つに２ダメージ\n" + "ＰＣ全員のすべての「トラウマ」に1 ダメージ\n" + "ＰＣ全員のひとつの【記憶】の「トラウマ」「喪失」それぞれに３ダメージ\n" + "ＰＣ全員の「喪失」すべてに２ダメージ\n" + "ＰＣ全員の「トラウマ」ひとつに４ダメージ。禁書ビットをすべて失う\n" + "ＰＣ全員の「トラウマ」「喪失」すべてに１ダメージ\n" + "ＰＣ全員の「喪失」２つに３ダメージ。その後さらに汚染が１増える\n" + "ＰＣ全員の「トラウマ」すべてに２ダメージ。禁書ビットをすべて失う\n" + "ＰＣ全員の「喪失」すべてに１ダメージ。その後アクロバットダイスをＰＣ人数分失う\n" + "ＰＣ全員の「喪失」すべてに１ダメージ。その後さらに汚染が３増える\n" + "ＰＣ全員の「トラウマ」１つに４ダメージ。このときアクロバットダイス獲得不可\n" + "ＰＣ全員、１つの【記憶】の両方の値が０になる。このときアクロバットダイス獲得不可\n" + "ＰＣ全員の「喪失」すべてに２ダメージ。その後さらに汚染が２増える\n" + "ＰＣ全員の「トラウマ」２つに４ダメージ\n" + "ＰＣ全員の「トラウマ」「喪失」すべてに２ダメージ\n" + "汚染チャートを２回振り、その効果を適用する（1・2-2,5・6-12 なら振り直す）\n";
          table = table.$split("\n");
          dice1 = self.randomizer.$roll_once(6);
          dice2 = self.randomizer.$roll_sum(2, 6);
          index = $rb_minus($rb_plus($rb_times($rb_minus(dice2, 2), 3), $rb_divide(dice1, 2.0).$ceil()), 1);
          return "" + "汚染チャート(" + dice1 + "," + dice2 + ") ＞ " + table['$[]'](index);
        }, $BlindMythos_getDurtyTableCommandReuslt$21.$$arity = 1);
        Opal.const_set($nesting[0], 'TABLES', $hash2(["LE", "ESH", "ESA", "ESS", "ESP", "ESL", "ESE"], {
          "LE": $$$($$($nesting, 'DiceTable'), 'Table').$new("失う感情表", "1D6", ["喜：喜びは消えた。嬉しい気持ちとは、なんだっただろう。", "怒：激情は失われ、憎しみもどこかへと消える。", "哀：どんなに辛くても、悲しさを感じない。どうやら涙も涸れたらしい。", "楽：もはや楽しいことなどない。希望を抱くだけ無駄なのだ。", "愛：愛など幻想……無力で儚い、役に立たない世迷い言だ。", "感：なにを見ても、感動はない。心は凍てついている。"]),
          "ESH": $$$($$($nesting, 'DiceTable'), 'Table').$new("「喜」の感情後遺症表", "2D6", ["日々喜びを求めてしまう。", "日々喜びを求めてしまう。", "嬉しい時間が長続きしない。", "素直に喜びを共有できないことがある。", "小さなことで大きく喜びを感じる。", "小さなことで大きく喜びを感じる。", "影響なし。", "影響なし。", "「喜」の後遺症をひとつ消してもよい。", "「喜」の後遺症をひとつ消してもよい。", "「喜」の後遺症をひとつ消してもよい。"]),
          "ESA": $$$($$($nesting, 'DiceTable'), 'Table').$new("「怒」の感情後遺症表", "2D6", ["始終不機嫌になる。", "始終不機嫌になる。", "一度怒ると、なかなか収まらない。", "怒りっぽくなる", "怒りかたが激しくなる。", "怒りかたが激しくなる。", "影響なし。", "影響なし。", "「怒」の後遺症をひとつ消してもよい。", "「怒」の後遺症をひとつ消してもよい。", "「怒」の後遺症をひとつ消してもよい。"]),
          "ESS": $$$($$($nesting, 'DiceTable'), 'Table').$new("「哀」の感情後遺症表", "2D6", ["一度涙が出るとなかなか止まらない。", "一度涙が出るとなかなか止まらない。", "夜、哀しいことを思い出して目が覚める。", "不意に哀しい気持ちになる。", "涙もろくなる。", "涙もろくなる。", "影響なし。", "影響なし。", "「哀」の後遺症をひとつ消してもよい。", "「哀」の後遺症をひとつ消してもよい。", "「哀」の後遺症をひとつ消してもよい。"]),
          "ESP": $$$($$($nesting, 'DiceTable'), 'Table').$new("「楽」の感情後遺症表", "2D6", ["突然陽気になったり、不意に笑い出してしまう。", "突然陽気になったり、不意に笑い出してしまう。", "周りが楽しくなさそうだと不安になる。", "楽しいことがないと落ち着かない。", "些細なことでも笑ってしまう。", "些細なことでも笑ってしまう。", "影響なし。", "影響なし。", "「楽」の後遺症をひとつ消してもよい。", "「楽」の後遺症をひとつ消してもよい。", "「楽」の後遺症をひとつ消してもよい。"]),
          "ESL": $$$($$($nesting, 'DiceTable'), 'Table').$new("「愛」の感情後遺症表", "2D6", ["少しでも気になる相手に愛を求めてしまう。", "少しでも気になる相手に愛を求めてしまう。", "愛する相手（恋人・家族・ペット・空想）から離れたくない。", "誰彼構わず優しくしてしまう。", "ひとりでいると不安を感じる。", "ひとりでいると不安を感じる。", "影響なし。", "影響なし。", "「愛」の後遺症をひとつ消してもよい。", "「愛」の後遺症をひとつ消してもよい。", "「愛」の後遺症をひとつ消してもよい。"]),
          "ESE": $$$($$($nesting, 'DiceTable'), 'Table').$new("「感」の感情後遺症表", "2D6", ["感動を共有できない相手を不信に思ってしまう。", "感動を共有できない相手を不信に思ってしまう。", "嬉しくても哀しくてもすぐに涙が出る。", "リアクションがオーバーになる。", "ちょっとしたことで感動する。", "ちょっとしたことで感動する。", "影響なし。", "影響なし。", "「感」の後遺症をひとつ消してもよい。", "「感」の後遺症をひとつ消してもよい。", "「感」の後遺症をひとつ消してもよい。"])
        }).$freeze());
        return self.$register_prefix("BM", "ReRoll", "RP", "DT", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~BlindMythos~index.js.map