(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~ChaosFlare~index"],{

/***/ "C64a":
/*!******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/ChaosFlare.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $range = Opal.range,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ChaosFlare');
        var $nesting = [self].concat($parent_nesting),
            $ChaosFlare_result_2d6$1,
            $ChaosFlare_eval_game_system_specific_command$2,
            $ChaosFlare_roll_fate_table$3,
            $ChaosFlare_cf_roll$4,
            $ChaosFlare_difference$5;
        self.$$prototype.randomizer = self.$$prototype.cmd = nil;
        Opal.const_set($nesting[0], 'ID', "ChaosFlare");
        Opal.const_set($nesting[0], 'NAME', "カオスフレア");
        Opal.const_set($nesting[0], 'SORT_KEY', "かおすふれあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "判定\n" + "CF\n" + "  書式: [ダイスの数]CF[修正値][@クリティカル値][#ファンブル値][>=目標値]\n" + "    CF以外は全て省略可能\n" + "  例:\n" + "  - CF 2D6,クリティカル値12,ファンブル値2で判定\n" + "  - CF+10@10 修正値+10,クリティカル値10で判定\n" + "  - CF+10#3 修正値+10,ファンブル値3で判定\n" + "  - CF+10>=10 目標値を指定した場合、差分値も出力する\n" + "  - 3CF+10@10#3>=10 3D6での判定\n" + "  - CF@9#3+8>=10\n" + "\n" + "2D6\n" + "  ファンブル値2で判定する。クリティカルの判定は行われない。\n" + "  目標値が設定された場合、差分値を出力する。\n" + "  - 2D6+4>=10\n" + "\n" + "各種表\n" + "  FT: 因縁表\n" + "  FTx: 数値を指定すると因果表の値を出力する\n" + "  - FT -> 11から66の間でランダム決定\n" + "  - FT23 -> 23の項目を出力\n" + "  - FT0\n" + "  - FT7\n");
        self.$register_prefix("\\d*CF", "FT");
        Opal.def(self, '$result_2d6', $ChaosFlare_result_2d6$1 = function $$result_2d6(total, dice_total, _dice_list, cmp_op, target) {
          var self = this,
              sequence = nil,
              result = nil,
              $writer = nil;

          if (cmp_op['$=='](">=")) {} else {
            return nil;
          }

          ;
          sequence = [];
          result = $$($nesting, 'Result').$new();

          if ($truthy($rb_le(dice_total, 2))) {
            total = $rb_minus(total, 20);
            sequence.$push("ファンブル(-20)");
            $writer = [true];
            $send(result, 'fumble=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
          }

          ;

          if ($truthy(target['$!=']("?"))) {
            if ($truthy($rb_ge(total, target))) {
              sequence.$push("成功");
              $writer = [true];
              $send(result, 'success=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
            } else {
              sequence.$push("失敗");
              $writer = [true];
              $send(result, 'failure=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
            }

            ;

            if ($truthy($rb_minus(total, target)['$!='](0))) {
              sequence.$push("" + "差分値" + $rb_minus(total, target));
            }

            ;
          }

          ;

          if ($truthy(sequence['$empty?']())) {
            return $$($nesting, 'Result').$nothing();
          }

          ;
          $writer = [sequence.$join(" ＞ ")];
          $send(result, 'text=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $ChaosFlare_result_2d6$1.$$arity = 5);
        Opal.def(self, '$eval_game_system_specific_command', $ChaosFlare_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this;

          if ($truthy(command['$start_with?']("FT"))) {
            return self.$roll_fate_table(command);
          } else {
            return self.$cf_roll(command);
          }
        }, $ChaosFlare_eval_game_system_specific_command$2.$$arity = 1);
        self.$private();
        Opal.def(self, '$roll_fate_table', $ChaosFlare_roll_fate_table$3 = function $$roll_fate_table(command) {
          var self = this,
              m = nil,
              num = nil,
              dice1 = nil,
              dice2 = nil,
              $ret_or_1 = nil,
              index1 = nil,
              index2 = nil;
          m = /^FT(\d+)?/.$match(command);

          if ($truthy(m['$[]'](1))) {
            num = m['$[]'](1).$to_i();

            if ($truthy([0, 7]['$include?'](num))) {
              return "" + "因果表(" + num + ") ＞ " + $$($nesting, 'FATE_TABLE')['$[]'](num)['$[]'](0);
            }

            ;
            dice1 = $rb_divide(num, 10).$to_i();
            dice2 = num['$%'](10);

            if ($truthy(function () {
              if ($truthy($ret_or_1 = $range(1, 6, false)['$include?'](dice1)['$!']())) {
                return $ret_or_1;
              } else {
                return $range(1, 6, false)['$include?'](dice2)['$!']();
              }

              ;
              return nil;
            }())) {
              return nil;
            }

            ;
          } else {
            dice1 = self.randomizer.$roll_once(6);
            dice2 = self.randomizer.$roll_once(6);
          }

          ;
          index1 = dice1;
          index2 = $rb_minus($rb_divide(dice2, 2).$to_i(), 1);
          return "" + "因果表(" + dice1 + dice2 + ") ＞ " + $$($nesting, 'FATE_TABLE')['$[]'](index1)['$[]'](index2);
        }, $ChaosFlare_roll_fate_table$3.$$arity = 1);
        Opal.def(self, '$cf_roll', $ChaosFlare_cf_roll$4 = function $$cf_roll(command) {
          var self = this,
              parser = nil,
              times = nil,
              critical = nil,
              $ret_or_2 = nil,
              fumble = nil,
              $ret_or_3 = nil,
              $writer = nil,
              $ret_or_4 = nil,
              dice_list = nil,
              dice_total = nil,
              dice_list_text = nil,
              is_critical = nil,
              is_fumble = nil,
              total = nil,
              sequence = nil;
          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\d*CF/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$enable_critical().$enable_fumble();
          self.cmd = parser.$parse(command);

          if ($truthy(self.cmd)) {} else {
            return nil;
          }

          ;

          times = function () {
            if (self.cmd.$command()['$==']("CF")) {
              return 2;
            } else {
              return self.cmd.$command().$to_i();
            }

            ;
            return nil;
          }();

          critical = function () {
            if ($truthy($ret_or_2 = self.cmd.$critical())) {
              return $ret_or_2;
            } else {
              return 12;
            }

            ;
            return nil;
          }();

          fumble = function () {
            if ($truthy($ret_or_3 = self.cmd.$fumble())) {
              return $ret_or_3;
            } else {
              return 2;
            }

            ;
            return nil;
          }();

          $writer = [nil];
          $send(self.cmd, 'dollar=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;

          if ($truthy(function () {
            if ($truthy($ret_or_4 = $rb_lt(times, 0))) {
              return $ret_or_4;
            } else {
              return [">=", nil]['$include?'](self.cmd.$cmp_op())['$!']();
            }

            ;
            return nil;
          }())) {
            return nil;
          }

          ;
          dice_list = self.randomizer.$roll_barabara(times, 6);
          dice_total = dice_list.$sum();
          dice_list_text = dice_list.$join(",");
          is_critical = $rb_ge(dice_total, critical);
          is_fumble = $rb_le(dice_total, fumble);

          total = function () {
            if ($truthy(is_critical)) {
              return 30;
            } else if ($truthy(is_fumble)) {
              return -20;
            } else {
              return dice_total;
            }

            ;
            return nil;
          }();

          total = $rb_plus(total, self.cmd.$modify_number());
          sequence = ["" + "(" + self.cmd.$to_s("after_modify_number") + ")", "" + dice_total + "[" + dice_list_text + "]", total.$to_s(), function () {
            if ($truthy($rb_lt(total, 0))) {
              return "0";
            } else {
              return nil;
            }

            ;
            return nil;
          }(), function () {
            if ($truthy(is_critical)) {
              return "クリティカル";
            } else {
              return nil;
            }

            ;
            return nil;
          }(), function () {
            if ($truthy(is_fumble)) {
              return "ファンブル";
            } else {
              return nil;
            }

            ;
            return nil;
          }(), function () {
            if ($truthy(self.cmd.$target_number())) {
              return "" + "差分値 " + self.$difference(total);
            } else {
              return nil;
            }

            ;
            return nil;
          }()].$compact();
          return sequence.$join(" ＞ ");
        }, $ChaosFlare_cf_roll$4.$$arity = 1);
        Opal.def(self, '$difference', $ChaosFlare_difference$5 = function $$difference(total) {
          var self = this;

          if ($truthy($rb_lt(total, 0))) {
            return self.cmd.$target_number()['$-@']();
          } else {
            return $rb_minus(total, self.cmd.$target_number());
          }
        }, $ChaosFlare_difference$5.$$arity = 1);
        return Opal.const_set($nesting[0], 'FATE_TABLE', [["腐れ縁"], ["純愛", "親近感", "庇護"], ["信頼", "感服", "共感"], ["友情", "尊敬", "慕情"], ["好敵手", "期待", "借り"], ["興味", "憎悪", "悲しみ"], ["恐怖", "執着", "利用"], ["任意"]].$freeze());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~ChaosFlare~index.js.map