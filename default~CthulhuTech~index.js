(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~CthulhuTech~index"],{

/***/ "Hu7I":
/*!*******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/CthulhuTech.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/arithmetic_evaluator"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'ArithmeticEvaluator');
      var $nesting = [self].concat($parent_nesting);

      (function (self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting),
            $eval$1;
        return (Opal.def(self, '$eval', $eval$1 = function $eval$1(expr, $kwargs) {
          var round_type,
              self = this,
              $ret_or_1 = nil;

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          round_type = $kwargs.$$smap["round_type"];

          if (round_type == null) {
            round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
          }

          ;

          if ($truthy(expr)) {} else {
            return 0;
          }

          ;

          if ($truthy($ret_or_1 = $$($nesting, 'Arithmetic').$eval(expr, round_type))) {
            return $ret_or_1;
          } else {
            return 0;
          }

          ;
        }, $eval$1.$$arity = -2), nil) && 'eval';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $send2 = Opal.send2;
  self.$require("bcdice/arithmetic_evaluator");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CthulhuTech');
        var $nesting = [self].concat($parent_nesting),
            $CthulhuTech_initialize$10,
            $CthulhuTech_eval_game_system_specific_command$11,
            $CthulhuTech_parse$12;
        self.$$prototype.randomizer = nil;
        self.$register_prefix("\\d+D10");
        Opal.const_set($nesting[0], 'ID', "CthulhuTech");
        Opal.const_set($nesting[0], 'NAME', "クトゥルフテック");
        Opal.const_set($nesting[0], 'SORT_KEY', "くとうるふてつく");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定（test）：nD10+m>=d\n" + "　n個のダイスを使用して、修正値m、難易度dで行為判定（test）を行います。\n" + "　修正値mは省略可能、複数指定可能（例：+2-4）です。\n" + "　成功、失敗、クリティカル、ファンブルを自動判定します。\n" + "　例）2D10>=12　4D10+2>=28　5D10+2-4>=32\n" + "\n" + "・対抗判定（contest）：nD10+m>d\n" + "　行為判定と同様ですが、防御側有利のため「>=」ではなく「>」を入力します。\n" + "　ダメージダイスも表示します。\n");

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Test');
          var $nesting = [self].concat($parent_nesting),
              $Test_initialize$1,
              $Test_execute$2,
              $Test_expression$3,
              $Test_test_value_expression$4,
              $Test_result_str$5,
              $Test_calculate_roll_result$6,
              $Test_sum_of_largest_straight$7;
          self.$$prototype.num = self.$$prototype.modifier = self.$$prototype.difficulty = nil;
          Opal.const_set($nesting[0], 'COMPARE_OP', ">=");
          Opal.def(self, '$initialize', $Test_initialize$1 = function $$initialize(num, modifier, difficulty) {
            var self = this;
            self.num = num;
            self.modifier = modifier;
            return self.difficulty = difficulty;
          }, $Test_initialize$1.$$arity = 3);
          Opal.def(self, '$execute', $Test_execute$2 = function $$execute(randomizer) {
            var self = this,
                dice_values = nil,
                fumble = nil,
                sorted_dice_values = nil,
                roll_result = nil,
                test_value = nil,
                diff = nil,
                success = nil,
                $ret_or_1 = nil,
                critical = nil,
                output_parts = nil;
            dice_values = randomizer.$roll_barabara(self.num, 10);
            fumble = $rb_ge(dice_values.$count(1), $rb_divide($rb_plus(dice_values.$length(), 1), 2).$to_i());
            sorted_dice_values = dice_values.$sort();
            roll_result = self.$calculate_roll_result(sorted_dice_values);
            test_value = $rb_plus(roll_result, self.modifier);
            diff = $rb_minus(test_value, self.difficulty);

            success = function () {
              if ($truthy($ret_or_1 = fumble['$!']())) {
                return diff.$send($$$(self.$class(), 'COMPARE_OP'), 0);
              } else {
                return $ret_or_1;
              }

              ;
              return nil;
            }();

            critical = $rb_ge(diff, 10);
            output_parts = ["" + "(" + self.$expression() + ")", self.$test_value_expression(sorted_dice_values, roll_result), test_value, self.$result_str(success, fumble, critical, diff)];
            return output_parts.$join(" ＞ ");
          }, $Test_execute$2.$$arity = 1);
          self.$private();
          Opal.def(self, '$expression', $Test_expression$3 = function $$expression() {
            var self = this,
                modifier_str = nil;
            modifier_str = $$($nesting, 'Format').$modifier(self.modifier);
            return "" + self.num + "D10" + modifier_str + $$$(self.$class(), 'COMPARE_OP') + self.difficulty;
          }, $Test_expression$3.$$arity = 0);
          Opal.def(self, '$test_value_expression', $Test_test_value_expression$4 = function $$test_value_expression(dice_values, roll_result) {
            var self = this,
                dice_str = nil,
                modifier_str = nil;
            dice_str = dice_values.$join(",");
            modifier_str = $$($nesting, 'Format').$modifier(self.modifier);
            return "" + roll_result + "[" + dice_str + "]" + modifier_str;
          }, $Test_test_value_expression$4.$$arity = 2);
          Opal.def(self, '$result_str', $Test_result_str$5 = function $$result_str(success, fumble, critical, _diff) {
            var self = this;

            if ($truthy(fumble)) {
              return "ファンブル";
            }

            ;

            if ($truthy(critical)) {
              return "クリティカル";
            }

            ;
            return function () {
              if ($truthy(success)) {
                return "成功";
              } else {
                return "失敗";
              }

              ;
              return nil;
            }();
          }, $Test_result_str$5.$$arity = 4);
          Opal.def(self, '$calculate_roll_result', $Test_calculate_roll_result$6 = function $$calculate_roll_result(sorted_dice_values) {
            var self = this,
                highest_single_roll = nil,
                sum_of_highest_set_of_multiples = nil,
                candidates = nil;
            highest_single_roll = sorted_dice_values.$last();
            sum_of_highest_set_of_multiples = $send($send(sorted_dice_values, 'group_by', [], "itself".$to_proc()).$values(), 'map', [], "sum".$to_proc()).$max();
            candidates = [highest_single_roll, sum_of_highest_set_of_multiples, self.$sum_of_largest_straight(sorted_dice_values)];
            return candidates.$max();
          }, $Test_calculate_roll_result$6.$$arity = 1);
          return (Opal.def(self, '$sum_of_largest_straight', $Test_sum_of_largest_straight$7 = function $$sum_of_largest_straight(sorted_dice_values) {
            var _$$,
                self = this,
                max_sum = nil,
                n_consecutive_values = nil,
                sum = nil,
                last = nil;

            if ($truthy($rb_lt(sorted_dice_values.$length(), 3))) {
              return 0;
            }

            ;
            max_sum = 0;
            n_consecutive_values = 0;
            sum = 0;
            last = -1;
            $send(sorted_dice_values.$uniq(), 'each', [], (_$$ = function $$8(value) {
              var self = _$$.$$s == null ? this : _$$.$$s,
                  $ret_or_2 = nil;

              if (value == null) {
                value = nil;
              }

              ;

              if ($truthy($rb_gt($rb_minus(value, last), 1))) {
                n_consecutive_values = 1;
                sum = value;
                last = value;
                return nil;
                ;
              }

              ;
              n_consecutive_values = $rb_plus(n_consecutive_values, 1);
              sum = $rb_plus(sum, value);
              last = value;

              if ($truthy(function () {
                if ($truthy($ret_or_2 = $rb_ge(n_consecutive_values, 3))) {
                  return $rb_gt(sum, max_sum);
                } else {
                  return $ret_or_2;
                }

                ;
                return nil;
              }())) {
                return max_sum = sum;
              } else {
                return nil;
              }

              ;
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));
            return max_sum;
          }, $Test_sum_of_largest_straight$7.$$arity = 1), nil) && 'sum_of_largest_straight';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Contest');
          var $nesting = [self].concat($parent_nesting),
              $Contest_result_str$9;
          Opal.const_set($nesting[0], 'COMPARE_OP', ">");
          return (Opal.def(self, '$result_str', $Contest_result_str$9 = function $$result_str(success, _fumble, _critical, diff) {
            var $iter = $Contest_result_str$9.$$p,
                $yield = $iter || nil,
                self = this,
                formatted = nil,
                damage_roll_num = nil,
                damage_roll = nil,
                $zuper = nil,
                $zuper_i = nil,
                $zuper_ii = nil;
            if ($iter) $Contest_result_str$9.$$p = null; // Prepare super implicit arguments

            for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }

            formatted = $send2(self, Opal.find_super_dispatcher(self, 'result_str', $Contest_result_str$9, false, true), 'result_str', $zuper, $iter);

            if ($truthy(success)) {
              damage_roll_num = $rb_divide(diff, 5.0).$ceil();
              damage_roll = "" + damage_roll_num + "D10";
              return "" + formatted + "（ダメージ：" + damage_roll + "）";
            } else {
              return formatted;
            }

            ;
          }, $Contest_result_str$9.$$arity = 4), nil) && 'result_str';
        })($nesting[0], $$($nesting, 'Test'), $nesting);

        Opal.def(self, '$initialize', $CthulhuTech_initialize$10 = function $$initialize(command) {
          var $iter = $CthulhuTech_initialize$10.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $CthulhuTech_initialize$10.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $CthulhuTech_initialize$10, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $CthulhuTech_initialize$10.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $CthulhuTech_eval_game_system_specific_command$11 = function $$eval_game_system_specific_command(command) {
          var self = this,
              node = nil;
          node = self.$parse(command);

          if ($truthy(node)) {} else {
            return nil;
          }

          ;
          return node.$execute(self.randomizer);
        }, $CthulhuTech_eval_game_system_specific_command$11.$$arity = 1);
        self.$private();
        Opal.const_set($nesting[0], 'TEST_RE', /^(\d+)D10((?:[-+]\d+)+)?(>=?)(\d+)$/.$freeze());
        return (Opal.def(self, '$parse', $CthulhuTech_parse$12 = function $$parse(command) {
          var self = this,
              m = nil,
              num = nil,
              modifier = nil,
              node_class = nil,
              difficulty = nil;
          m = $$($nesting, 'TEST_RE').$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          num = m['$[]'](1).$to_i();

          modifier = function () {
            if ($truthy(m['$[]'](2))) {
              return $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2));
            } else {
              return 0;
            }

            ;
            return nil;
          }();

          node_class = function () {
            if (m['$[]'](3)['$=='](">")) {
              return $$($nesting, 'Contest');
            } else {
              return $$($nesting, 'Test');
            }

            ;
            return nil;
          }();

          difficulty = m['$[]'](4).$to_i();
          return node_class.$new(num, modifier, difficulty);
        }, $CthulhuTech_parse$12.$$arity = 1), nil) && 'parse';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~CthulhuTech~index.js.map