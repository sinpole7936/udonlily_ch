(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~DetatokoSaga~index"],{

/***/ "HPYb":
/*!********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/DetatokoSaga.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DetatokoSaga');
        var $nesting = [self].concat($parent_nesting),
            $DetatokoSaga_initialize$1,
            $DetatokoSaga_eval_game_system_specific_command$2,
            $DetatokoSaga_checkRoll$3,
            $DetatokoSaga_getRollResult$4,
            $DetatokoSaga_getSuccess$5,
            $DetatokoSaga_getCheckFlagResult$6,
            $DetatokoSaga_getDownWill$7,
            $DetatokoSaga_checkJudgeValue$8,
            $DetatokoSaga_getModifyText$9,
            $DetatokoSaga_getTotalResultValue$10,
            $DetatokoSaga_getTotalResultValueWhenSlash$11,
            $DetatokoSaga_translate_tables$12;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "DetatokoSaga");
        Opal.const_set($nesting[0], 'NAME', "でたとこサーガ");
        Opal.const_set($nesting[0], 'SORT_KEY', "てたとこさあか");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・通常判定　xDS or xDSy or xDS>=t or xDSy>=t or xDS+z>=t or xDSy+z>=t\n" + "　(x＝スキルランク、y＝現在フラグ値(省略時0)、z＝修正値(省略時０)、t＝目標値(省略時８))\n" + "　例）3DS　2DS5　0DS　3DS>=10　3DS7>=12 2DS3+1 3DS2+1>=10\n" + "・判定値　xJD or xJDy or xJDy+z or xJDy-z or xJDy/z\n" + "　(x＝スキルランク、y＝現在フラグ値(省略時0)、z＝修正値(省略時０))\n" + "　例）3JD　2JD5　3JD7+1　4JD/3\n" + "・体力烙印表　SST (StrengthStigmaTable)\n" + "・気力烙印表　WST (WillStigmaTable)\n" + "・体力バッドエンド表　SBET (StrengthBadEndTable)\n" + "・気力バッドエンド表　WBET (WillBadEndTable)\n");
        self.$register_prefix("\\d+DS", "\\d+JD");
        Opal.def(self, '$initialize', $DetatokoSaga_initialize$1 = function $$initialize(command) {
          var $iter = $DetatokoSaga_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $DetatokoSaga_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $DetatokoSaga_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $DetatokoSaga_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $DetatokoSaga_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil,
              $ret_or_1 = nil;
          self.$debug("eval_game_system_specific_command begin string", command);
          result = self.$checkRoll(command);

          if ($truthy(result)) {
            return result;
          }

          ;
          result = self.$checkJudgeValue(command);

          if ($truthy(result)) {
            return result;
          }

          ;
          self.$debug("各種表として処理");
          return self.$roll_tables(function () {
            if ($truthy($ret_or_1 = $$($nesting, 'ALIAS')['$[]'](command))) {
              return $ret_or_1;
            } else {
              return command;
            }

            ;
            return nil;
          }(), $$$(self.$class(), 'TABLES'));
        }, $DetatokoSaga_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$checkRoll', $DetatokoSaga_checkRoll$3 = function $$checkRoll(string) {
          var $a,
              $b,
              $c,
              self = this,
              m = nil,
              skill = nil,
              flag = nil,
              operator = nil,
              value = nil,
              target = nil,
              $ret_or_2 = nil,
              result = nil,
              modifyText = nil,
              total = nil,
              rollText = nil,
              totalResult = nil,
              $case = nil,
              success = nil;
          self.$debug("checkRoll begin string", string);
          m = /^(\d+)DS(\d+)?(([+-\/])(\d+))?(?:>=(\d+))?$/i.$match(string);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          skill = m['$[]'](1).$to_i();
          flag = m['$[]'](2).$to_i();
          operator = m['$[]'](4);
          value = m['$[]'](5).$to_i();

          target = function () {
            if ($truthy($ret_or_2 = ($a = m['$[]'](6), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_2;
            } else {
              return 8;
            }

            ;
            return nil;
          }();

          result = self.$translate("DetatokoSaga.DS.input_options", $hash2(["skill", "flag", "target"], {
            "skill": skill,
            "flag": flag,
            "target": target
          }));
          modifyText = self.$getModifyText(operator, value);

          if ($truthy(modifyText['$empty?']())) {} else {
            result = $rb_plus(result, self.$translate("DetatokoSaga.DS.modifier", $hash2(["modifier"], {
              "modifier": modifyText
            })));
          }

          ;
          $c = self.$getRollResult(skill), $b = Opal.to_ary($c), total = $b[0] == null ? nil : $b[0], rollText = $b[1] == null ? nil : $b[1], $c;
          result = $rb_plus(result, "" + " ＞ " + total + "[" + rollText + "]" + modifyText);
          totalResult = self.$getTotalResultValue(total, value, operator);
          result = $rb_plus(result, "" + " ＞ " + totalResult);

          if ($truthy(modifyText['$empty?']())) {} else {
            $case = operator;

            if ("+"['$===']($case)) {
              total = $rb_plus(total, value);
            } else if ("-"['$===']($case)) {
              total = $rb_minus(total, value);
            }
          }

          ;
          success = self.$getSuccess(total, target);
          result = $rb_plus(result, "" + " ＞ " + success);
          result = $rb_plus(result, self.$getCheckFlagResult(total, flag));
          return result;
        }, $DetatokoSaga_checkRoll$3.$$arity = 1);
        Opal.def(self, '$getRollResult', $DetatokoSaga_getRollResult$4 = function $$getRollResult(skill) {
          var self = this,
              diceCount = nil,
              dice = nil,
              diceText = nil,
              total = nil;
          diceCount = $rb_plus(skill, 1);

          if (skill['$=='](0)) {
            diceCount = 3;
          }

          ;
          dice = self.randomizer.$roll_barabara(diceCount, 6);
          diceText = dice.$join(",");
          dice = dice.$sort();

          if ($truthy(skill['$!='](0))) {
            dice = dice.$reverse();
          }

          ;
          total = $rb_plus(dice['$[]'](0), dice['$[]'](1));
          return [total, diceText];
        }, $DetatokoSaga_getRollResult$4.$$arity = 1);
        Opal.def(self, '$getSuccess', $DetatokoSaga_getSuccess$5 = function $$getSuccess(check, target) {
          var self = this;

          if ($truthy($rb_ge(check, target))) {
            return self.$translate("DetatokoSaga.DS.success");
          } else {
            return self.$translate("DetatokoSaga.DS.failure");
          }
        }, $DetatokoSaga_getSuccess$5.$$arity = 2);
        Opal.def(self, '$getCheckFlagResult', $DetatokoSaga_getCheckFlagResult$6 = function $$getCheckFlagResult(total, flag) {
          var self = this,
              will = nil;

          if ($truthy($rb_gt(total, flag))) {
            return "";
          }

          ;
          will = self.$getDownWill(flag);
          return self.$translate("DetatokoSaga.less_than_flag", $hash2(["will"], {
            "will": will
          }));
        }, $DetatokoSaga_getCheckFlagResult$6.$$arity = 2);
        Opal.def(self, '$getDownWill', $DetatokoSaga_getDownWill$7 = function $$getDownWill(flag) {
          var self = this,
              dice = nil;

          if ($truthy($rb_ge(flag, 10))) {
            return "6";
          }

          ;
          dice = self.randomizer.$roll_once(6);
          return "" + "1D6->" + dice;
        }, $DetatokoSaga_getDownWill$7.$$arity = 1);
        Opal.def(self, '$checkJudgeValue', $DetatokoSaga_checkJudgeValue$8 = function $$checkJudgeValue(string) {
          var $a,
              $b,
              self = this,
              m = nil,
              skill = nil,
              flag = nil,
              operator = nil,
              value = nil,
              result = nil,
              modifyText = nil,
              total = nil,
              rollText = nil,
              totalResult = nil;
          self.$debug("checkJudgeValue begin string", string);
          m = /^(\d+)JD(\d+)?(([+-\/])(\d+))?$/i.$match(string);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          skill = m['$[]'](1).$to_i();
          flag = m['$[]'](2).$to_i();
          operator = m['$[]'](4);
          value = m['$[]'](5).$to_i();
          result = self.$translate("DetatokoSaga.JD.input_options", $hash2(["skill", "flag"], {
            "skill": skill,
            "flag": flag
          }));
          modifyText = self.$getModifyText(operator, value);

          if ($truthy(modifyText['$empty?']())) {} else {
            result = $rb_plus(result, self.$translate("DetatokoSaga.JD.modifier", $hash2(["modifier"], {
              "modifier": modifyText
            })));
          }

          ;
          $b = self.$getRollResult(skill), $a = Opal.to_ary($b), total = $a[0] == null ? nil : $a[0], rollText = $a[1] == null ? nil : $a[1], $b;
          result = $rb_plus(result, "" + " ＞ " + total + "[" + rollText + "]" + modifyText);
          totalResult = self.$getTotalResultValue(total, value, operator);
          result = $rb_plus(result, "" + " ＞ " + totalResult);
          result = $rb_plus(result, self.$getCheckFlagResult(total, flag));
          return result;
        }, $DetatokoSaga_checkJudgeValue$8.$$arity = 1);
        Opal.def(self, '$getModifyText', $DetatokoSaga_getModifyText$9 = function $$getModifyText(operator, value) {
          var self = this,
              operatorText = nil,
              $case = nil;

          if (value['$=='](0)) {
            return "";
          }

          ;

          operatorText = function () {
            $case = operator;

            if ("+"['$===']($case)) {
              return "＋";
            } else if ("-"['$===']($case)) {
              return "－";
            } else if ("/"['$===']($case)) {
              return "÷";
            } else {
              return "";
            }
          }();

          return "" + operatorText + value;
        }, $DetatokoSaga_getModifyText$9.$$arity = 2);
        Opal.def(self, '$getTotalResultValue', $DetatokoSaga_getTotalResultValue$10 = function $$getTotalResultValue(total, value, operator) {
          var self = this,
              $case = nil;
          return function () {
            $case = operator;

            if ("+"['$===']($case)) {
              return $rb_plus("" + total + "+" + value + " ＞ ", self.$translate("DetatokoSaga.total_value", $hash2(["total"], {
                "total": $rb_plus(total, value)
              })));
            } else if ("-"['$===']($case)) {
              return $rb_plus("" + total + "-" + value + " ＞ ", self.$translate("DetatokoSaga.total_value", $hash2(["total"], {
                "total": $rb_minus(total, value)
              })));
            } else if ("/"['$===']($case)) {
              return self.$getTotalResultValueWhenSlash(total, value);
            } else {
              return self.$translate("DetatokoSaga.total_value", $hash2(["total"], {
                "total": total
              }));
            }
          }();
        }, $DetatokoSaga_getTotalResultValue$10.$$arity = 3);
        Opal.def(self, '$getTotalResultValueWhenSlash', $DetatokoSaga_getTotalResultValueWhenSlash$11 = function $$getTotalResultValueWhenSlash(total, value) {
          var self = this,
              quotient = nil,
              result = nil;

          if (value['$=='](0)) {
            return self.$translate("DetatokoSaga.division_by_zero_error");
          }

          ;
          quotient = $rb_divide($rb_times(1.0, total), value).$ceil();
          result = $rb_plus("" + total + "÷" + value + " ＞ ", self.$translate("DetatokoSaga.total_value", $hash2(["total"], {
            "total": quotient
          })));
          return result;
        }, $DetatokoSaga_getTotalResultValueWhenSlash$11.$$arity = 2);
        Opal.const_set($nesting[0], 'ALIAS', $send($hash2(["StrengthStigmaTable", "WillStigmaTable", "StrengthBadEndTable", "WillBadEndTable"], {
          "StrengthStigmaTable": "SST",
          "WillStigmaTable": "WST",
          "StrengthBadEndTable": "SBET",
          "WillBadEndTable": "WBET"
        }), 'transform_keys', [], "upcase".$to_proc()).$freeze());
        Opal.defs(self, '$translate_tables', $DetatokoSaga_translate_tables$12 = function $$translate_tables(locale) {
          var self = this;
          return $hash2(["SST", "WST", "SBET", "WBET"], {
            "SST": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("DetatokoSaga.table.SST", locale),
            "WST": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("DetatokoSaga.table.WST", locale),
            "SBET": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("DetatokoSaga.table.SBET", locale),
            "WBET": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("DetatokoSaga.table.WBET", locale)
          });
        }, $DetatokoSaga_translate_tables$12.$$arity = 1);
        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ja_jp").$freeze());
        return self.$register_prefix($$($nesting, 'TABLES').$keys(), $$($nesting, 'ALIAS').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~DetatokoSaga~index.js.map