(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~DoubleCross_Korean~index"],{

/***/ "m91d":
/*!**************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/DoubleCross_Korean.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/arithmetic_evaluator"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'ArithmeticEvaluator');
      var $nesting = [self].concat($parent_nesting);

      (function (self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting),
            $eval$1;
        return (Opal.def(self, '$eval', $eval$1 = function $eval$1(expr, $kwargs) {
          var round_type,
              self = this,
              $ret_or_1 = nil;

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          round_type = $kwargs.$$smap["round_type"];

          if (round_type == null) {
            round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
          }

          ;

          if ($truthy(expr)) {} else {
            return 0;
          }

          ;

          if ($truthy($ret_or_1 = $$($nesting, 'Arithmetic').$eval(expr, round_type))) {
            return $ret_or_1;
          } else {
            return 0;
          }

          ;
        }, $eval$1.$$arity = -2), nil) && 'eval';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/range_table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeTable');

        var $nesting = [self].concat($parent_nesting),
            _$RangeTable$,
            $RangeTable_initialize$3,
            $RangeTable_fetch$4,
            $RangeTable_roll$6,
            $RangeTable_store$7,
            $RangeTable_coerce_to_int_range$11,
            $RangeTable_assert_min_sum_is_covered$12,
            $RangeTable_assert_max_sum_is_covered$13,
            $RangeTable_assert_no_gap_or_overlap_in_ranges$14;

        self.$$prototype.name = self.$$prototype.items = self.$$prototype.num_of_dice = self.$$prototype.num_of_sides = self.$$prototype.formatter = nil;
        Opal.const_set($nesting[0], 'RollResult', $send($$($nesting, 'Struct'), 'new', ["sum", "values", "content", "formatted"], (_$RangeTable$ = function $RangeTable$1() {
          var self = _$RangeTable$.$$s == null ? this : _$RangeTable$.$$s;
          return self.$alias_method("to_s", "formatted");
        }, _$RangeTable$.$$s = self, _$RangeTable$.$$arity = 0, _$RangeTable$)));
        Opal.const_set($nesting[0], 'Item', $$($nesting, 'Struct').$new("range", "content"));
        Opal.const_set($nesting[0], 'DICE_ROLL_METHOD_RE', /^(\d+)D(\d+)$/i.$freeze());
        Opal.const_set($nesting[0], 'DEFAULT_FORMATTER', $send(self, 'lambda', [], ($$2 = function (_$$) {
          function $$2(_x, _x2) {
            return _$$.apply(this, arguments);
          }

          $$2.toString = function () {
            return _$$.toString();
          };

          return $$2;
        }(function (table, result) {
          var self = $$2.$$s == null ? this : $$2.$$s;

          if (table == null) {
            table = nil;
          }

          ;

          if (result == null) {
            result = nil;
          }

          ;
          return "" + table.$name() + "(" + result.$sum() + ") ＞ " + result.$content();
        }), $$2.$$s = self, $$2.$$arity = 2, $$2)));
        self.$attr_reader("name");
        self.$attr_reader("num_of_dice");
        self.$attr_reader("num_of_sides");
        Opal.def(self, '$initialize', $RangeTable_initialize$3 = function $$initialize(name, dice_roll_method, items) {
          var $iter = $RangeTable_initialize$3.$$p,
              formatter = $iter || nil,
              self = this,
              $ret_or_1 = nil,
              m = nil;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          ;
          self.name = name.$freeze();

          self.formatter = function () {
            if ($truthy($ret_or_1 = formatter)) {
              return $ret_or_1;
            } else {
              return $$($nesting, 'DEFAULT_FORMATTER');
            }

            ;
            return nil;
          }();

          m = $$($nesting, 'DICE_ROLL_METHOD_RE').$match(dice_roll_method);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + self.name + ": invalid dice roll method: " + dice_roll_method);
          }

          ;
          self.num_of_dice = m['$[]'](1).$to_i();
          self.num_of_sides = m['$[]'](2).$to_i();
          return self.$store(items);
        }, $RangeTable_initialize$3.$$arity = 3);
        Opal.def(self, '$fetch', $RangeTable_fetch$4 = function $$fetch(value) {
          var _$$2,
              self = this,
              item = nil;

          item = $send(self.items, 'find', [], (_$$2 = function $$5(i) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return i.$range()['$include?'](value);
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));

          if ($truthy(item)) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": value is out of range: " + value);
          }

          ;
          return item;
        }, $RangeTable_fetch$4.$$arity = 1);
        Opal.def(self, '$roll', $RangeTable_roll$6 = function $$roll(randomizer) {
          var self = this,
              values = nil,
              sum = nil,
              result = nil,
              $writer = nil;
          values = randomizer.$roll_barabara(self.num_of_dice, self.num_of_sides);
          sum = values.$sum();
          result = $$($nesting, 'RollResult').$new(sum, values, self.$fetch(sum).$content());
          $writer = [self.formatter['$[]'](self, result)];
          $send(result, 'formatted=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $RangeTable_roll$6.$$arity = 1);
        self.$private();
        Opal.def(self, '$store', $RangeTable_store$7 = function $$store(items) {
          var _$$3,
              _$$4,
              _$$5,
              self = this,
              items_with_range = nil,
              sorted_items = nil;

          items_with_range = $send(items, 'map', [], (_$$3 = function $$8(r, c) {
            var self = _$$3.$$s == null ? this : _$$3.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (c == null) {
              c = nil;
            }

            ;
            return [self.$coerce_to_int_range(r), c];
          }, _$$3.$$s = self, _$$3.$$arity = 2, _$$3));
          sorted_items = $send(items_with_range, 'sort_by', [], (_$$4 = function $$9(r, _) {
            var self = _$$4.$$s == null ? this : _$$4.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (_ == null) {
              _ = nil;
            }

            ;
            return r.$min();
          }, _$$4.$$s = self, _$$4.$$arity = 2, _$$4));
          self.$assert_min_sum_is_covered(sorted_items);
          self.$assert_max_sum_is_covered(sorted_items);
          self.$assert_no_gap_or_overlap_in_ranges(sorted_items);
          self.items = $send(sorted_items, 'map', [], (_$$5 = function $$10(range, content) {
            var self = _$$5.$$s == null ? this : _$$5.$$s;

            if (range == null) {
              range = nil;
            }

            ;

            if (content == null) {
              content = nil;
            }

            ;
            return $$($nesting, 'Item').$new(range, content.$freeze()).$freeze();
          }, _$$5.$$s = self, _$$5.$$arity = 2, _$$5)).$freeze();
          return self;
        }, $RangeTable_store$7.$$arity = 1);
        Opal.def(self, '$coerce_to_int_range', $RangeTable_coerce_to_int_range$11 = function $$coerce_to_int_range(x) {
          var self = this,
              $case = nil,
              $ret_or_2 = nil;
          $case = x;

          if ($$($nesting, 'Integer')['$===']($case)) {
            return $$($nesting, 'Range').$new(x, x);
          } else if ($$($nesting, 'Range')['$===']($case)) {
            if ($truthy(function () {
              if ($truthy($ret_or_2 = x.$begin()['$is_a?']($$($nesting, 'Integer')))) {
                return x.$end()['$is_a?']($$($nesting, 'Integer'));
              } else {
                return $ret_or_2;
              }

              ;
              return nil;
            }())) {
              return x;
            }
          }

          ;
          return self.$raise($$($nesting, 'TypeError'), "" + self.name + ": " + x + " (" + x.$class() + ") must be an Integer or a Range with Integers ");
        }, $RangeTable_coerce_to_int_range$11.$$arity = 1);
        Opal.def(self, '$assert_min_sum_is_covered', $RangeTable_assert_min_sum_is_covered$12 = function $$assert_min_sum_is_covered(sorted_items) {
          var self = this,
              min_sum = nil,
              range = nil;
          min_sum = self.num_of_dice;
          range = sorted_items.$first()['$[]'](0);

          if ($truthy(range['$include?'](min_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": min value (" + min_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_min_sum_is_covered$12.$$arity = 1);
        Opal.def(self, '$assert_max_sum_is_covered', $RangeTable_assert_max_sum_is_covered$13 = function $$assert_max_sum_is_covered(sorted_items) {
          var self = this,
              max_sum = nil,
              range = nil;
          max_sum = $rb_times(self.num_of_dice, self.num_of_sides);
          range = sorted_items.$last()['$[]'](0);

          if ($truthy(range['$include?'](max_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": max value (" + max_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_max_sum_is_covered$13.$$arity = 1);
        return (Opal.def(self, '$assert_no_gap_or_overlap_in_ranges', $RangeTable_assert_no_gap_or_overlap_in_ranges$14 = function $$assert_no_gap_or_overlap_in_ranges(sorted_items) {
          var _$$6,
              self = this;

          $send(sorted_items, 'each_cons', [2], (_$$6 = function $$15(i1, i2) {
            var self = _$$6.$$s == null ? this : _$$6.$$s,
                r1 = nil,
                r2 = nil,
                max1 = nil,
                next_of_max1 = nil;
            if (self.name == null) self.name = nil;

            if (i1 == null) {
              i1 = nil;
            }

            ;

            if (i2 == null) {
              i2 = nil;
            }

            ;
            r1 = i1['$[]'](0);
            r2 = i2['$[]'](0);
            max1 = r1.$max();
            next_of_max1 = $rb_plus(max1, 1);

            if ($truthy(r2['$include?'](max1))) {
              self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range overlap: " + r1 + " and " + r2);
            }

            ;

            if ($truthy(r2['$include?'](next_of_max1))) {
              return nil;
            } else {
              return self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range gap: " + r1 + " and " + r2);
            }

            ;
          }, _$$6.$$s = self, _$$6.$$arity = 2, _$$6));
          return self;
        }, $RangeTable_assert_no_gap_or_overlap_in_ranges$14.$$arity = 1), nil) && 'assert_no_gap_or_overlap_in_ranges';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/DoubleCross"] = function (Opal) {
  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2,
      $range = Opal.range;
  self.$require("bcdice/arithmetic_evaluator");
  self.$require("bcdice/dice_table/range_table");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DoubleCross');
        var $nesting = [self].concat($parent_nesting),
            $DoubleCross_eval_game_system_specific_command$12,
            $DoubleCross_parse_dx$13,
            $DoubleCross_parse_dx_od$14,
            $DoubleCross_parse_dx_shippu_doto$15,
            $DoubleCross_roll_emotion_table$17;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "DoubleCross");
        Opal.const_set($nesting[0], 'NAME', "ダブルクロス2nd,3rd");
        Opal.const_set($nesting[0], 'SORT_KEY', "たふるくろす2");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定コマンド（xDX+y@c or xDXc+y）\n" + "　\"(個数)DX(修正)@(クリティカル値)\" もしくは \"(個数)DX(クリティカル値)(修正)\" で指定します。\n" + "　修正値も付けられます。\n" + "　例）10dx　　10dx+5@8（OD tool式)　　5DX7+7-3（疾風怒濤式）\n" + "\n" + "・各種表\n" + "　・感情表（ET）\n" + "　　ポジティブとネガティブの両方を振って、表になっている側に○を付けて表示します。\n" + "　　もちろん任意で選ぶ部分は変更して構いません。\n" + "\n" + "・D66ダイスあり\n");
        self.$register_prefix("\\d+DX", "ET");

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DX');
          var $nesting = [self].concat($parent_nesting),
              $DX_initialize$1,
              $DX_execute$2,
              $DX_node_expression$3,
              $DX_result$4;
          self.$$prototype.modifier = self.$$prototype.critical_value = self.$$prototype.expression = self.$$prototype.num = self.$$prototype.modifier_str = self.$$prototype.target_value = nil;
          self.$include($$($nesting, 'Translate'));
          Opal.def(self, '$initialize', $DX_initialize$1 = function $$initialize(num, critical_value, modifier, target_value) {
            var self = this;
            self.num = num;
            self.critical_value = critical_value;
            self.modifier = modifier;
            self.target_value = target_value;
            self.modifier_str = $$($nesting, 'Format').$modifier(self.modifier);
            self.expression = self.$node_expression();
            return self.locale = "ja_jp";
          }, $DX_initialize$1.$$arity = 4);
          Opal.def(self, '$execute', $DX_execute$2 = function $$execute(randomizer) {
            var $a,
                self = this,
                value_groups = nil,
                num_of_dice = nil,
                loop_count = nil,
                $ret_or_1 = nil,
                values = nil,
                value_group = nil;

            if ($truthy($rb_lt(self.critical_value, 2))) {
              return $$($nesting, 'Result').$new("" + "(" + self.expression + ") ＞ " + self.$translate("DoubleCross.DX.invalid_critical"));
            }

            ;

            if ($truthy($rb_lt(self.num, 1))) {
              return $$($nesting, 'Result').$failure("" + "(" + self.expression + ") ＞ " + self.$translate("DoubleCross.DX.auto_failure"));
            }

            ;
            value_groups = [];
            num_of_dice = self.num;
            loop_count = 0;

            while ($truthy(function () {
              if ($truthy($ret_or_1 = $rb_gt(num_of_dice, 0))) {
                return $rb_lt(loop_count, $$$($$$($$($nesting, 'CommonCommand'), 'RerollDice'), 'REROLL_LIMIT'));
              } else {
                return $ret_or_1;
              }

              ;
              return nil;
            }())) {
              values = randomizer.$roll_barabara(num_of_dice, 10);
              value_group = $$($nesting, 'ValueGroup').$new(values, self.critical_value);
              value_groups.$push(value_group);
              num_of_dice = value_group.$num_of_critical_occurrences();
              loop_count = $rb_plus(loop_count, 1);
            }

            ;
            return self.$result(value_groups);
          }, $DX_execute$2.$$arity = 1);
          self.$private();
          Opal.def(self, '$node_expression', $DX_node_expression$3 = function $$node_expression() {
            var self = this,
                lhs = nil;
            lhs = "" + self.num + "DX" + self.critical_value + self.modifier_str;
            return function () {
              if ($truthy(self.target_value)) {
                return "" + lhs + ">=" + self.target_value;
              } else {
                return lhs;
              }

              ;
              return nil;
            }();
          }, $DX_node_expression$3.$$arity = 0);
          return (Opal.def(self, '$result', $DX_result$4 = function $$result(value_groups) {
            var self = this,
                r = nil,
                $writer = nil,
                sum = nil,
                achieved_value = nil,
                achieved_value_with_if_fumble = nil,
                parts = nil,
                success = nil,
                $ret_or_2 = nil,
                compare_result_text = nil;
            r = $$($nesting, 'Result').$new();
            $writer = [value_groups['$[]'](0).$values()['$all?'](1)];
            $send(r, 'fumble=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            sum = $send(value_groups, 'map', [], "max".$to_proc()).$sum();

            achieved_value = function () {
              if ($truthy(r['$fumble?']())) {
                return 0;
              } else {
                return $rb_plus(sum, self.modifier);
              }

              ;
              return nil;
            }();

            achieved_value_with_if_fumble = function () {
              if ($truthy(r['$fumble?']())) {
                return "" + achieved_value + " (" + self.$translate("fumble") + ")";
              } else {
                return achieved_value.$to_s();
              }

              ;
              return nil;
            }();

            parts = ["" + "(" + self.expression + ")", "" + value_groups.$join("+") + self.modifier_str, achieved_value_with_if_fumble];

            if ($truthy(self.target_value)) {
              success = function () {
                if ($truthy($ret_or_2 = r['$fumble?']()['$!']())) {
                  return $rb_ge(achieved_value, self.target_value);
                } else {
                  return $ret_or_2;
                }

                ;
                return nil;
              }();

              if ($truthy(success)) {
                $writer = [true];
                $send(r, 'success=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else {
                $writer = [true];
                $send(r, 'failure=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }

              ;
              compare_result_text = self.$translate(function () {
                if ($truthy(success)) {
                  return "success";
                } else {
                  return "failure";
                }

                ;
                return nil;
              }());
              parts.$push(compare_result_text);
            }

            ;
            $writer = [parts.$join(" ＞ ")];
            $send(r, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            return r;
          }, $DX_result$4.$$arity = 1), nil) && 'result';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ValueGroup');
          var $nesting = [self].concat($parent_nesting),
              $ValueGroup_initialize$5,
              $ValueGroup_to_s$6,
              $ValueGroup_max$7,
              $ValueGroup_num_of_critical_occurrences$9,
              $ValueGroup_critical$ques$11;
          self.$$prototype.values = self.$$prototype.critical_value = nil;
          self.$attr_reader("values");
          self.$attr_reader("critical_value");
          Opal.def(self, '$initialize', $ValueGroup_initialize$5 = function $$initialize(values, critical_value) {
            var self = this;
            self.values = values.$sort();
            return self.critical_value = critical_value;
          }, $ValueGroup_initialize$5.$$arity = 2);
          Opal.def(self, '$to_s', $ValueGroup_to_s$6 = function $$to_s() {
            var self = this;
            return "" + self.$max() + "[" + self.values.$join(",") + "]";
          }, $ValueGroup_to_s$6.$$arity = 0);
          Opal.def(self, '$max', $ValueGroup_max$7 = function $$max() {
            var _$$7,
                self = this;

            if ($truthy($send(self.values, 'any?', [], (_$$7 = function $$8(value) {
              var self = _$$7.$$s == null ? this : _$$7.$$s;

              if (value == null) {
                value = nil;
              }

              ;
              return self['$critical?'](value);
            }, _$$7.$$s = self, _$$7.$$arity = 1, _$$7)))) {
              return 10;
            } else {
              return self.values.$max();
            }
          }, $ValueGroup_max$7.$$arity = 0);
          Opal.def(self, '$num_of_critical_occurrences', $ValueGroup_num_of_critical_occurrences$9 = function $$num_of_critical_occurrences() {
            var _$$8,
                self = this;

            return $send(self.values, 'count', [], (_$$8 = function $$10(value) {
              var self = _$$8.$$s == null ? this : _$$8.$$s;

              if (value == null) {
                value = nil;
              }

              ;
              return self['$critical?'](value);
            }, _$$8.$$s = self, _$$8.$$arity = 1, _$$8));
          }, $ValueGroup_num_of_critical_occurrences$9.$$arity = 0);
          self.$private();
          return (Opal.def(self, '$critical?', $ValueGroup_critical$ques$11 = function $ValueGroup_critical$ques$11(value) {
            var self = this;
            return $rb_ge(value, self.critical_value);
          }, $ValueGroup_critical$ques$11.$$arity = 1), nil) && 'critical?';
        })($nesting[0], null, $nesting);

        Opal.def(self, '$eval_game_system_specific_command', $DoubleCross_eval_game_system_specific_command$12 = function $$eval_game_system_specific_command(command) {
          var self = this,
              dx = nil;

          if ($truthy(dx = self.$parse_dx(command))) {
            return dx.$execute(self.randomizer);
          }

          ;

          if (command['$==']("ET")) {
            return self.$roll_emotion_table();
          }

          ;
          return nil;
        }, $DoubleCross_eval_game_system_specific_command$12.$$arity = 1);
        self.$private();
        Opal.def(self, '$parse_dx', $DoubleCross_parse_dx$13 = function $$parse_dx(command) {
          var self = this,
              $ret_or_3 = nil;

          if ($truthy($ret_or_3 = self.$parse_dx_od(command))) {
            return $ret_or_3;
          } else {
            return self.$parse_dx_shippu_doto(command);
          }
        }, $DoubleCross_parse_dx$13.$$arity = 1);
        Opal.def(self, '$parse_dx_od', $DoubleCross_parse_dx_od$14 = function $$parse_dx_od(command) {
          var self = this,
              parser = nil,
              parsed = nil,
              num = nil,
              critical_value = nil,
              $ret_or_4 = nil;
          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\d+DX/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$enable_critical().$restrict_cmp_op_to(nil, ">=");
          parsed = parser.$parse(command);

          if ($truthy(parsed)) {} else {
            return nil;
          }

          ;
          num = parsed.$command().$to_i();

          critical_value = function () {
            if ($truthy($ret_or_4 = parsed.$critical())) {
              return $ret_or_4;
            } else {
              return 10;
            }

            ;
            return nil;
          }();

          return $$$(self.$class(), 'DX').$new(num, critical_value, parsed.$modify_number(), parsed.$target_number());
        }, $DoubleCross_parse_dx_od$14.$$arity = 1);
        Opal.def(self, '$parse_dx_shippu_doto', $DoubleCross_parse_dx_shippu_doto$15 = function $$parse_dx_shippu_doto(command) {
          var $a,
              $b,
              _$$9,
              self = this,
              parser = nil,
              parsed = nil,
              num = nil,
              critical_value = nil,
              $ret_or_5 = nil;

          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\d+DX\d*/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$restrict_cmp_op_to(nil, ">=");
          parsed = parser.$parse(command);

          if ($truthy(parsed)) {} else {
            return nil;
          }

          ;
          $b = $send(parsed.$command().$split("DX", 2), 'map', [], (_$$9 = function $$16(x) {
            var self = _$$9.$$s == null ? this : _$$9.$$s,
                $c;

            if (x == null) {
              x = nil;
            }

            ;
            return $c = x, $c === nil || $c == null ? nil : $send($c, 'to_i', []);
          }, _$$9.$$s = self, _$$9.$$arity = 1, _$$9)), $a = Opal.to_ary($b), num = $a[0] == null ? nil : $a[0], critical_value = $a[1] == null ? nil : $a[1], $b;

          critical_value = function () {
            if ($truthy($ret_or_5 = critical_value)) {
              return $ret_or_5;
            } else {
              return 10;
            }

            ;
            return nil;
          }();

          return $$$(self.$class(), 'DX').$new(num, critical_value, parsed.$modify_number(), parsed.$target_number());
        }, $DoubleCross_parse_dx_shippu_doto$15.$$arity = 1);
        Opal.def(self, '$roll_emotion_table', $DoubleCross_roll_emotion_table$17 = function $$roll_emotion_table() {
          var self = this,
              pos_result = nil,
              neg_result = nil,
              positive = nil,
              pos_neg_text = nil,
              name = nil,
              output_parts = nil;
          pos_result = $$$(self.$class(), 'POSITIVE_EMOTION_TABLE').$roll(self.randomizer);
          neg_result = $$$(self.$class(), 'NEGATIVE_EMOTION_TABLE').$roll(self.randomizer);
          positive = self.randomizer.$roll_once(2)['$=='](1);

          pos_neg_text = function () {
            if ($truthy(positive)) {
              return ["" + "○" + pos_result.$content(), neg_result.$content()];
            } else {
              return [pos_result.$content(), "" + "○" + neg_result.$content()];
            }

            ;
            return nil;
          }();

          name = self.$translate("DoubleCross.ET.name");
          output_parts = ["" + name + "(" + pos_result.$sum() + "-" + neg_result.$sum() + ")", pos_neg_text.$join(" - ")];
          return $$($nesting, 'Result').$new(output_parts.$join(" ＞ "));
        }, $DoubleCross_roll_emotion_table$17.$$arity = 0);

        (function (self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting),
              $positive_emotion_table$18,
              $negative_emotion_table$19;
          self.$private();
          Opal.def(self, '$positive_emotion_table', $positive_emotion_table$18 = function $$positive_emotion_table(locale) {
            var self = this;
            return $$$($$($nesting, 'DiceTable'), 'RangeTable').$new($$($nesting, 'I18n').$translate("DoubleCross.ET.positive.name", $hash2(["locale"], {
              "locale": locale
            })), "1D100", [[$range(1, 5, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.1_5", $hash2(["locale"], {
              "locale": locale
            }))], [$range(6, 10, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.6_10", $hash2(["locale"], {
              "locale": locale
            }))], [$range(11, 15, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.11_15", $hash2(["locale"], {
              "locale": locale
            }))], [$range(16, 20, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.16_20", $hash2(["locale"], {
              "locale": locale
            }))], [$range(21, 25, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.21_25", $hash2(["locale"], {
              "locale": locale
            }))], [$range(26, 30, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.26_30", $hash2(["locale"], {
              "locale": locale
            }))], [$range(31, 35, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.31_35", $hash2(["locale"], {
              "locale": locale
            }))], [$range(36, 40, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.36_40", $hash2(["locale"], {
              "locale": locale
            }))], [$range(41, 45, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.41_45", $hash2(["locale"], {
              "locale": locale
            }))], [$range(46, 50, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.46_50", $hash2(["locale"], {
              "locale": locale
            }))], [$range(51, 55, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.51_55", $hash2(["locale"], {
              "locale": locale
            }))], [$range(56, 60, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.56_60", $hash2(["locale"], {
              "locale": locale
            }))], [$range(61, 65, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.61_65", $hash2(["locale"], {
              "locale": locale
            }))], [$range(66, 70, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.66_70", $hash2(["locale"], {
              "locale": locale
            }))], [$range(71, 75, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.71_75", $hash2(["locale"], {
              "locale": locale
            }))], [$range(76, 80, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.76_80", $hash2(["locale"], {
              "locale": locale
            }))], [$range(81, 85, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.81_85", $hash2(["locale"], {
              "locale": locale
            }))], [$range(86, 90, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.86_90", $hash2(["locale"], {
              "locale": locale
            }))], [$range(91, 95, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.91_95", $hash2(["locale"], {
              "locale": locale
            }))], [$range(96, 100, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.positive.items.96_100", $hash2(["locale"], {
              "locale": locale
            }))]]);
          }, $positive_emotion_table$18.$$arity = 1);
          return (Opal.def(self, '$negative_emotion_table', $negative_emotion_table$19 = function $$negative_emotion_table(locale) {
            var self = this;
            return $$$($$($nesting, 'DiceTable'), 'RangeTable').$new($$($nesting, 'I18n').$translate("DoubleCross.ET.negative.name", $hash2(["locale"], {
              "locale": locale
            })), "1D100", [[$range(1, 5, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.1_5", $hash2(["locale"], {
              "locale": locale
            }))], [$range(6, 10, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.6_10", $hash2(["locale"], {
              "locale": locale
            }))], [$range(11, 15, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.11_15", $hash2(["locale"], {
              "locale": locale
            }))], [$range(16, 20, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.16_20", $hash2(["locale"], {
              "locale": locale
            }))], [$range(21, 25, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.21_25", $hash2(["locale"], {
              "locale": locale
            }))], [$range(26, 30, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.26_30", $hash2(["locale"], {
              "locale": locale
            }))], [$range(31, 35, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.31_35", $hash2(["locale"], {
              "locale": locale
            }))], [$range(36, 40, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.36_40", $hash2(["locale"], {
              "locale": locale
            }))], [$range(41, 45, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.41_45", $hash2(["locale"], {
              "locale": locale
            }))], [$range(46, 50, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.46_50", $hash2(["locale"], {
              "locale": locale
            }))], [$range(51, 55, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.51_55", $hash2(["locale"], {
              "locale": locale
            }))], [$range(56, 60, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.56_60", $hash2(["locale"], {
              "locale": locale
            }))], [$range(61, 65, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.61_65", $hash2(["locale"], {
              "locale": locale
            }))], [$range(66, 70, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.66_70", $hash2(["locale"], {
              "locale": locale
            }))], [$range(71, 75, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.71_75", $hash2(["locale"], {
              "locale": locale
            }))], [$range(76, 80, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.76_80", $hash2(["locale"], {
              "locale": locale
            }))], [$range(81, 85, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.81_85", $hash2(["locale"], {
              "locale": locale
            }))], [$range(86, 90, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.86_90", $hash2(["locale"], {
              "locale": locale
            }))], [$range(91, 95, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.91_95", $hash2(["locale"], {
              "locale": locale
            }))], [$range(96, 100, false), $$($nesting, 'I18n').$translate("DoubleCross.ET.negative.items.96_100", $hash2(["locale"], {
              "locale": locale
            }))]]).$freeze();
          }, $negative_emotion_table$19.$$arity = 1), nil) && 'negative_emotion_table';
        })(Opal.get_singleton_class(self), $nesting);

        Opal.const_set($nesting[0], 'POSITIVE_EMOTION_TABLE', self.$positive_emotion_table("ja_jp").$freeze());
        return Opal.const_set($nesting[0], 'NEGATIVE_EMOTION_TABLE', self.$negative_emotion_table("ja_jp").$freeze());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  self.$require("bcdice/game_system/DoubleCross");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DoubleCross_Korean');
        var $nesting = [self].concat($parent_nesting),
            $DoubleCross_Korean_initialize$1;
        Opal.const_set($nesting[0], 'ID', "DoubleCross:Korean");
        Opal.const_set($nesting[0], 'NAME', "더블크로스2nd,3rd");
        Opal.const_set($nesting[0], 'SORT_KEY', "国際化:Korean:더블크로스");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・판정 커맨드（xDX+y@c or xDXc+y）\n" + "　\"(개수)DX(수정)@(크리티컬치)\" 혹은 \"(개수)DX(크리티컬치)(수정)\" 으로 지정합니다.\n" + "　수정치도 붙일 수 있습니다.\n" + "　예）10dx　　10dx+5@8（OD tool식)　　5DX7+7-3（질풍노도식）\n" + "・각종표\n" + "　・감정표（ET）\n" + "　　포지티브와 네거티브 양쪽을 굴려, 겉으로 나타는 쪽에 O를 붙여 표시합니다.\n" + "　　물론 임의로 정하는 부분을 변경해도 괜찮습니다.\n" + "・D66다이스 있음\n");
        self.$register_prefix_from_super_class();
        Opal.def(self, '$initialize', $DoubleCross_Korean_initialize$1 = function $$initialize(command) {
          var $iter = $DoubleCross_Korean_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $DoubleCross_Korean_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $DoubleCross_Korean_initialize$1, false, true), 'initialize', [command], null);
          return self.locale = "ko_kr";
        }, $DoubleCross_Korean_initialize$1.$$arity = 1);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DX');
          var $nesting = [self].concat($parent_nesting),
              $DX_initialize$2;
          return (Opal.def(self, '$initialize', $DX_initialize$2 = function $$initialize(num, critical_value, modifier, target_value) {
            var $iter = $DX_initialize$2.$$p,
                $yield = $iter || nil,
                self = this;
            if ($iter) $DX_initialize$2.$$p = null;
            $send2(self, Opal.find_super_dispatcher(self, 'initialize', $DX_initialize$2, false, true), 'initialize', [num, critical_value, modifier, target_value], null);
            return self.locale = "ko_kr";
          }, $DX_initialize$2.$$arity = 4), nil) && 'initialize';
        })($nesting[0], $$$($$($nesting, 'DoubleCross'), 'DX'), $nesting);

        Opal.const_set($nesting[0], 'POSITIVE_EMOTION_TABLE', self.$positive_emotion_table("ko_kr").$freeze());
        return Opal.const_set($nesting[0], 'NEGATIVE_EMOTION_TABLE', self.$negative_emotion_table("ko_kr").$freeze());
      })($nesting[0], $$($nesting, 'DoubleCross'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~DoubleCross_Korean~index.js.map