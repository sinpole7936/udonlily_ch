(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~Dracurouge_Korean~index"],{

/***/ "0DEk":
/*!*************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Dracurouge_Korean.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/Dracurouge"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Dracurouge');
        var $nesting = [self].concat($parent_nesting),
            $Dracurouge_initialize$1,
            $Dracurouge_eval_game_system_specific_command$2,
            $Dracurouge_roll_conduct_dice$3,
            $Dracurouge_count_glory_dice$4,
            $Dracurouge_apply_thirsty_point$5,
            $Dracurouge_roll_resist_dice$7,
            $Dracurouge_getReactionDiceCommandResult$8,
            $Dracurouge_getHeresyReactionDiceCommandResult$9,
            $Dracurouge_getReactionText$10,
            $Dracurouge_checkTypeText$11,
            $Dracurouge_getReactionTextFull$12,
            $Dracurouge_getReactionTex$14,
            $Dracurouge_getCorruptionDiceCommandResult$15;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Dracurouge");
        Opal.const_set($nesting[0], 'NAME', "ドラクルージュ");
        Opal.const_set($nesting[0], 'SORT_KEY', "とらくるうしゆ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行い判定（DRx+y）\n" + "　x：振るサイコロの数（省略時４）、y：渇き修正（省略時０）\n" + "　例） DR　DR6　DR+1　DR5+2\n" + "・抗い判定（DRRx）\n" + "　x：振るサイコロの数\n" + "　例） DRR3\n" + "・原風景表（ST）、叙勲表（CO）、叙勲後表（CA）、遥か過去表（EP）\n" + "　原罪表（OS）、受難表（PN）、近況表（RS）、平和な過去表（PP）\n" + "・堕落表（CTx） x：渇き （例） CT3\n" + "・堕落の兆し表（CS）、拡張・堕落の兆し表（ECS）\n" + "・絆内容決定表（BT）\n" + "・反応表（RTxy）x：血統、y：道　xy省略で一括表示\n" + "　血統　D：ドラク、R：ローゼンブルク、H：ヘルズガルド、M：ダストハイム\n" + "　　　　A：アヴァローム　N：ノスフェラス、G：ゲイズヴァルト、K：カインシルト\n" + "　道　F：領主、G：近衛、R：遍歴、W：賢者、J：狩人、N：夜獣\n" + "　　　E：将軍、B：僧正、H：空駆、K：船長、L：寵童、V：仲立、U：技師、D：博士\n" + "　　　S：星読、G2：後見\n" + "　例）RT（一括表示）、RTDF（ドラクの領主）、RTAG2（アヴァロームの後見人）\n" + "・異端の反応表（HRTxy）x：血統、y：道　xy省略で一括表示\n" + "　血統　L：異端卿、V：ヴルコラク、N：ナハツェーラ、K：カルンシュタイン\n" + "　　　　G：グリマルキン、S：ストリガ、M：メリュジーヌ、F：フォーン\n" + "　　　　H：ホムンクルス、E：エナメルム、S2：サングィナリエ、A：アールヴ\n" + "　　　　V2：ヴィーヴル、L2：ルーガルー、A2：アルラウネ、F2：フリッガ\n" + "　道　W：野伏、N：流浪、S：密使、H：魔女、F：剣士、X：検体\n" + "　例）HRT（一括表示）、HRTVW（ヴルコラクの野伏）、HRTF2X（フリッガの検体）\n" + "・D66ダイスあり\n");
        Opal.def(self, '$initialize', $Dracurouge_initialize$1 = function $$initialize(command) {
          var $iter = $Dracurouge_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Dracurouge_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Dracurouge_initialize$1, false, true), 'initialize', [command], null);
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'NO_SORT');
        }, $Dracurouge_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Dracurouge_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $ret_or_1 = nil,
              $ret_or_2 = nil,
              $ret_or_3 = nil,
              $ret_or_4 = nil,
              $ret_or_5 = nil;

          if ($truthy($ret_or_1 = function () {
            if ($truthy($ret_or_2 = function () {
              if ($truthy($ret_or_3 = function () {
                if ($truthy($ret_or_4 = function () {
                  if ($truthy($ret_or_5 = self.$roll_conduct_dice(command))) {
                    return $ret_or_5;
                  } else {
                    return self.$roll_resist_dice(command);
                  }

                  ;
                  return nil;
                }())) {
                  return $ret_or_4;
                } else {
                  return self.$getReactionDiceCommandResult(command);
                }

                ;
                return nil;
              }())) {
                return $ret_or_3;
              } else {
                return self.$getHeresyReactionDiceCommandResult(command);
              }

              ;
              return nil;
            }())) {
              return $ret_or_2;
            } else {
              return self.$getCorruptionDiceCommandResult(command);
            }

            ;
            return nil;
          }())) {
            return $ret_or_1;
          } else {
            return self.$roll_tables(command, $$$(self.$class(), 'TABLES'));
          }
        }, $Dracurouge_eval_game_system_specific_command$2.$$arity = 1);
        self.$private();
        Opal.def(self, '$roll_conduct_dice', $Dracurouge_roll_conduct_dice$3 = function $$roll_conduct_dice(command) {
          var $a,
              self = this,
              m = nil,
              dice_count = nil,
              $ret_or_6 = nil,
              thirsty_point = nil,
              dice_list = nil,
              glory_dice = nil,
              calculation_process = nil,
              sequence = nil;
          m = /^DR(\d*[1-9])?(\+\d+)?$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;

          dice_count = function () {
            if ($truthy($ret_or_6 = ($a = m['$[]'](1), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_6;
            } else {
              return 4;
            }

            ;
            return nil;
          }();

          thirsty_point = m['$[]'](2).$to_i();
          dice_list = self.randomizer.$roll_barabara(dice_count, 6).$sort();
          glory_dice = self.$count_glory_dice(dice_list);
          dice_list = $rb_plus(dice_list, $$($nesting, 'Array').$new(glory_dice, 10));
          calculation_process = self.$apply_thirsty_point(dice_list, thirsty_point);
          sequence = ["" + "(" + command + ")", "" + dice_count + "D6" + $$($nesting, 'Format').$modifier(thirsty_point), calculation_process, "" + "[ " + dice_list.$join(", ") + " ]"].$compact();
          return sequence.$join(" ＞ ");
        }, $Dracurouge_roll_conduct_dice$3.$$arity = 1);
        Opal.def(self, '$count_glory_dice', $Dracurouge_count_glory_dice$4 = function $$count_glory_dice(dice_list) {
          var self = this,
              one_count = nil,
              six_count = nil;
          one_count = dice_list.$count(1);
          six_count = dice_list.$count(6);
          return $rb_plus($rb_divide(one_count, 2).$to_i(), $rb_divide(six_count, 2).$to_i());
        }, $Dracurouge_count_glory_dice$4.$$arity = 1);
        Opal.def(self, '$apply_thirsty_point', $Dracurouge_apply_thirsty_point$5 = function $$apply_thirsty_point(dice_list, thirsty_point) {
          var _$$,
              self = this,
              idx = nil,
              text_list = nil,
              $writer = nil;

          if (thirsty_point['$=='](0)) {
            return nil;
          }

          ;
          idx = $send(dice_list, 'rindex', [], (_$$ = function $$6(i) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return $rb_le(i, 6);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          text_list = $send(dice_list, 'map', [], "to_s".$to_proc());
          $writer = [idx, $rb_plus(text_list['$[]'](idx), "" + "+" + thirsty_point)];
          $send(text_list, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [idx, $rb_plus(dice_list['$[]'](idx), thirsty_point)];
          $send(dice_list, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return "" + "[ " + text_list.$join(", ") + " ]";
        }, $Dracurouge_apply_thirsty_point$5.$$arity = 2);
        Opal.def(self, '$roll_resist_dice', $Dracurouge_roll_resist_dice$7 = function $$roll_resist_dice(command) {
          var self = this,
              m = nil,
              dice_count = nil,
              dice_list = nil;
          m = /^DRR(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          dice_count = m['$[]'](1).$to_i();

          if (dice_count['$=='](0)) {
            dice_count = 4;
          }

          ;
          dice_list = self.randomizer.$roll_barabara(dice_count, 6).$sort();
          return "" + "(" + command + ") ＞ " + dice_count + "D6 ＞ [ " + dice_list.$join(", ") + " ]";
        }, $Dracurouge_roll_resist_dice$7.$$arity = 1);
        Opal.def(self, '$getReactionDiceCommandResult', $Dracurouge_getReactionDiceCommandResult$8 = function $$getReactionDiceCommandResult(command) {
          var self = this,
              typeText1 = nil,
              typeText2 = nil,
              name = nil,
              blood = nil,
              style = nil;

          if ($truthy(command['$=~'](/^RT((\w\d*)(\w\d*))?/))) {} else {
            return nil;
          }

          ;
          typeText1 = $$($nesting, 'Regexp').$last_match(2);
          typeText2 = $$($nesting, 'Regexp').$last_match(3);
          name = self.$translate("Dracurouge.RT.name");
          blood = self.$translate("Dracurouge.RT.blood");
          style = self.$translate("Dracurouge.RT.style");
          return self.$getReactionText(name, typeText1, typeText2, blood, style);
        }, $Dracurouge_getReactionDiceCommandResult$8.$$arity = 1);
        Opal.def(self, '$getHeresyReactionDiceCommandResult', $Dracurouge_getHeresyReactionDiceCommandResult$9 = function $$getHeresyReactionDiceCommandResult(command) {
          var self = this,
              typeText1 = nil,
              typeText2 = nil,
              name = nil,
              blood = nil,
              style = nil;

          if ($truthy(command['$=~'](/^HRT((\w\d*)(\w\d*))?/))) {} else {
            return nil;
          }

          ;
          typeText1 = $$($nesting, 'Regexp').$last_match(2);
          typeText2 = $$($nesting, 'Regexp').$last_match(3);
          name = self.$translate("Dracurouge.HRT.name");
          blood = self.$translate("Dracurouge.HRT.blood");
          style = self.$translate("Dracurouge.HRT.style");
          return self.$getReactionText(name, typeText1, typeText2, blood, style);
        }, $Dracurouge_getHeresyReactionDiceCommandResult$9.$$arity = 1);
        Opal.def(self, '$getReactionText', $Dracurouge_getReactionText$10 = function $$getReactionText(name, typeText1, typeText2, infos1, infos2) {
          var self = this,
              ten_value = nil,
              one_value = nil,
              number = nil,
              isBefore = nil,
              infos = nil,
              typeText = nil,
              index = nil,
              resultText = nil,
              info = nil;

          if ($truthy(self.$checkTypeText(typeText1, infos1))) {} else {
            return nil;
          }

          ;

          if ($truthy(self.$checkTypeText(typeText2, infos2))) {} else {
            return nil;
          }

          ;
          ten_value = self.randomizer.$roll_once(6);
          one_value = self.randomizer.$roll_once(6);
          number = "" + ten_value + one_value;
          isBefore = $rb_lt(ten_value, 4);

          infos = function () {
            if ($truthy(isBefore)) {
              return infos1;
            } else {
              return infos2;
            }

            ;
            return nil;
          }();

          typeText = function () {
            if ($truthy(isBefore)) {
              return typeText1;
            } else {
              return typeText2;
            }

            ;
            return nil;
          }();

          index = $rb_plus($rb_minus(one_value, 1), $rb_times(function () {
            if ($truthy(isBefore)) {
              return $rb_minus(ten_value, 1);
            } else {
              return $rb_minus(ten_value, 4);
            }

            ;
            return nil;
          }(), 6));
          self.$debug("index", index);

          if ($truthy(typeText['$nil?']())) {
            resultText = self.$getReactionTextFull(infos, index);
          } else {
            info = infos['$[]'](typeText.$to_sym());

            if ($truthy(info['$nil?']())) {
              return nil;
            }

            ;
            resultText = self.$getReactionTex(info, index);
          }

          ;
          return "" + name + "(" + number + ") ＞ " + resultText;
        }, $Dracurouge_getReactionText$10.$$arity = 5);
        Opal.def(self, '$checkTypeText', $Dracurouge_checkTypeText$11 = function $$checkTypeText(typeText, infos) {
          var self = this;

          if ($truthy(typeText['$nil?']())) {
            return true;
          }

          ;
          return infos.$keys()['$include?'](typeText.$to_sym());
        }, $Dracurouge_checkTypeText$11.$$arity = 2);
        Opal.def(self, '$getReactionTextFull', $Dracurouge_getReactionTextFull$12 = function $$getReactionTextFull(infos, index) {
          var _$$2,
              self = this,
              resultTexts = nil;

          resultTexts = [];
          $send(infos, 'each_value', [], (_$$2 = function $$13(info) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (info == null) {
              info = nil;
            }

            ;
            return resultTexts['$<<'](self.$getReactionTex(info, index));
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          return resultTexts.$join("／");
        }, $Dracurouge_getReactionTextFull$12.$$arity = 2);
        Opal.def(self, '$getReactionTex', $Dracurouge_getReactionTex$14 = function $$getReactionTex(info, index) {
          var self = this,
              typeName = nil,
              text = nil;
          typeName = info['$[]']("name");
          text = info['$[]']("table")['$[]'](index);
          return "" + typeName + "：" + text;
        }, $Dracurouge_getReactionTex$14.$$arity = 2);
        Opal.def(self, '$getCorruptionDiceCommandResult', $Dracurouge_getCorruptionDiceCommandResult$15 = function $$getCorruptionDiceCommandResult(command) {
          var self = this,
              modify = nil,
              name = nil,
              table = nil,
              dice_list = nil,
              number = nil,
              number_text = nil,
              index = nil,
              text = nil;

          if ($truthy(command['$=~'](/^CT(\d+)$/))) {} else {
            return nil;
          }

          ;
          modify = $$($nesting, 'Regexp').$last_match(1).$to_i();
          name = self.$translate("Dracurouge.CT.name");
          table = [[0, self.$translate("Dracurouge.CT.table.0")], [1, self.$translate("Dracurouge.CT.table.1")], [3, self.$translate("Dracurouge.CT.table.3")], [5, self.$translate("Dracurouge.CT.table.5")], [6, self.$translate("Dracurouge.CT.table.6")], [7, self.$translate("Dracurouge.CT.table.7")], [8, self.$translate("Dracurouge.CT.table.8")], [99, self.$translate("Dracurouge.CT.table.99")]];
          dice_list = self.randomizer.$roll_barabara(2, 6);
          number = dice_list.$sum();
          number_text = dice_list.$join(",");
          index = $rb_minus(number, modify);
          self.$debug("index", index);
          text = self.$get_table_by_number(index, table);
          return "" + "2D6[" + number_text + "]-" + modify + " ＞  " + name + "(" + index + ") ＞ " + text;
        }, $Dracurouge_getCorruptionDiceCommandResult$15.$$arity = 1);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'YearTable');
          var $nesting = [self].concat($parent_nesting),
              $YearTable_from_i18n$16,
              $YearTable_initialize$17,
              $YearTable_roll$18,
              $YearTable_roll_d6x$20;
          self.$$prototype.items = self.$$prototype.name = self.$$prototype.year_title = nil;
          Opal.defs(self, '$from_i18n', $YearTable_from_i18n$16 = function $$from_i18n(key, locale, years) {
            var self = this,
                table = nil,
                items = nil;
            table = $$($nesting, 'I18n').$translate(key, $hash2(["locale", "raise"], {
              "locale": locale,
              "raise": true
            }));
            items = table['$[]']("items").$zip(years);
            return self.$new(table['$[]']("name"), table['$[]']("year_title"), items);
          }, $YearTable_from_i18n$16.$$arity = 3);
          Opal.def(self, '$initialize', $YearTable_initialize$17 = function $$initialize(name, year_title, items) {
            var self = this;
            self.name = name;
            self.year_title = year_title;
            return self.items = items.$freeze();
          }, $YearTable_initialize$17.$$arity = 3);
          Opal.def(self, '$roll', $YearTable_roll$18 = function $$roll(randomizer) {
            var $a,
                $b,
                _$$3,
                self = this,
                tens = nil,
                ones = nil,
                index = nil,
                text = nil,
                year_expr = nil,
                interim_expr = nil,
                year = nil;

            $b = randomizer.$roll_barabara(2, 6), $a = Opal.to_ary($b), tens = $a[0] == null ? nil : $a[0], ones = $a[1] == null ? nil : $a[1], $b;
            index = $rb_plus($rb_times($rb_minus(tens, 1), 6), $rb_minus(ones, 1));
            $b = self.items['$[]'](index), $a = Opal.to_ary($b), text = $a[0] == null ? nil : $a[0], year_expr = $a[1] == null ? nil : $a[1], $b;
            interim_expr = $send(year_expr, 'gsub', [/\d+D6+/], (_$$3 = function $$19(expr) {
              var self = _$$3.$$s == null ? this : _$$3.$$s;

              if (expr == null) {
                expr = nil;
              }

              ;
              return self.$roll_d6x(expr, randomizer);
            }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3));
            year = $$($nesting, 'ArithmeticEvaluator').$eval(interim_expr.$gsub("×", "*"));
            return "" + self.name + "(" + tens + ones + ") ＞ " + text + " ＞ " + self.year_title + "：" + year_expr + " ＞ (" + interim_expr + ") ＞ " + self.year_title + "：" + year + "年";
          }, $YearTable_roll$18.$$arity = 1);
          self.$private();
          return (Opal.def(self, '$roll_d6x', $YearTable_roll_d6x$20 = function $$roll_d6x(expr, randomizer) {
            var $a,
                $b,
                _$$5,
                self = this,
                times = nil,
                sides = nil,
                list = nil;

            $b = expr.$split("D", 2), $a = Opal.to_ary($b), times = $a[0] == null ? nil : $a[0], sides = $a[1] == null ? nil : $a[1], $b;
            times = times.$to_i();
            list = $send($$($nesting, 'Array'), 'new', [times], (_$$5 = function $$21() {
              var self = _$$5.$$s == null ? this : _$$5.$$s,
                  _$$4;

              return $send(randomizer.$roll_barabara(sides.$length(), 6).$reverse().$map(), 'with_index', [], (_$$4 = function $$22(x, idx) {
                var self = _$$4.$$s == null ? this : _$$4.$$s;

                if (x == null) {
                  x = nil;
                }

                ;

                if (idx == null) {
                  idx = nil;
                }

                ;
                return $rb_times(x, 10['$**'](idx).$to_i());
              }, _$$4.$$s = self, _$$4.$$arity = 2, _$$4)).$sum();
            }, _$$5.$$s = self, _$$5.$$arity = 0, _$$5));
            return list.$sum();
          }, $YearTable_roll_d6x$20.$$arity = 2), nil) && 'roll_d6x';
        })($nesting[0], null, $nesting);

        (function (self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting),
              $translate_tables$23;
          self.$private();
          return (Opal.def(self, '$translate_tables', $translate_tables$23 = function $$translate_tables(locale) {
            var self = this;
            return $hash2(["CO", "CA", "EP", "OS", "RS", "PP", "ST", "PN", "CS", "ECS", "BT"], {
              "CO": $$($nesting, 'YearTable').$from_i18n("Dracurouge.table.CO", locale, ["7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "10+2D6", "7+1D6×1D6", "14+1D6×1D6", "7+1D6×1D6", "10+1D6×1D6", "7+1D6×1D6", "10+2D6", "7+1D6×1D6", "14+1D6×1D6", "10+2D6", "7+1D6×1D6", "14+1D6×1D6", "18+1D6×1D6", "10+2D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "30+1D6×1D6", "14+1D6×1D6", "7+1D6×1D6", "14+1D6×1D6", "10+2D6", "14+1D6×1D6", "14+1D6×1D6", "7+4D6", "14+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6"]),
              "CA": $$($nesting, 'YearTable').$from_i18n("Dracurouge.table.CA", locale, ["2D6×10", "1D6×1D6", "1D6×1D6", "2D6×5", "2D6×10", "1D6×1D6", "2D6×10", "1D6×5", "2D6×10", "2D6×3", "1D6×1D6", "1D6×1D6", "2D6×10", "2D6×10", "2D6×20", "2D6×10", "2D6×20", "1D6×1D6", "1D6×3", "1D6×1D6", "1D6×5", "2D6×10", "1D6×1D6", "2D6×10", "2D6", "1D6×1D6", "2D6", "1D6×1D6", "2D6×20", "2D6×10", "1D6×1D6", "2D6×50", "2D6×10", "1D6×1D6", "2D6×5", "1D6×1D6"]),
              "EP": $$($nesting, 'YearTable').$from_i18n("Dracurouge.table.EP", locale, ["1D66+1300", "1D666", "1D666", "1D666", "1D66+1250", "1D666", "3D6×100", "2D6×100", "1D66+1210", "1D666", "2D6×100", "3D6×100", "1D66+1300", "2D6×100", "1D6+1250", "1D666", "1D666", "1D666", "1D66+1250", "2D6×100", "1D666", "3D6×100", "2D6×100", "2D6×100", "1D6×150", "2D6×100", "1D66+1250", "1D66+400", "1212", "2D6×100", "2D6×100", "1D66×10", "3D6×100", "3D6×100", "1D66+1300", "1D66+1833"]),
              "OS": $$($nesting, 'YearTable').$from_i18n("Dracurouge.table.OS", locale, ["7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "13+1D6×1D6", "7+1D6×1D6", "13+1D6×1D6", "7+1D6×1D6", "13+1D6×1D6", "13+1D6×1D6", "13+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "10+1D6×1D6", "7+1D6×1D6", "15+1D6×1D6", "6+2D6", "7+1D6×1D6", "7+1D6×1D6", "13+1D6×1D6", "35+1D6×1D6", "9+2D6", "13+1D6×1D6", "9+2D6", "6+2D6", "7+1D6×1D6", "7+2D6", "7+1D6×1D5", "7+1D6×1D6", "13+1D6×1D6", "7+1D6×1D6"]),
              "RS": $$($nesting, 'YearTable').$from_i18n("Dracurouge.table.RS", locale, ["2D6×10", "1D6×1D6", "1D6×1D6", "1D6×1D6", "3D6×30", "3D6×30", "2D6×10", "2D6×10", "2D6×10", "2D6×10", "2D6×20", "1D6×1D6", "1D6×1D6", "1D6×1D6", "1", "2D6×10", "2D6×20", "1D6×1D6", "1D6×1D6", "3D6×30", "3D6×20", "1D6×1D6", "3D6×30", "3D6×20", "1D6×1D6", "1D6×1D6", "1D6×1D6", "1D6×1D6", "1D6×10", "2D6×10", "3D6×50", "1D6×1D6", "3D6×20", "2D6×10", "1D6×1D6", "3D6×50"]),
              "PP": $$($nesting, 'YearTable').$from_i18n("Dracurouge.table.PP", locale, ["8+2D6", "6+2D6", "7+1D6×1D6", "15+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "6+2D6", "7+1D6×1D6", "9+2D6", "15+1D6×1D6", "9+3D6", "7+1D6×1D6", "10+1D6×1D6", "9+2D6", "9+2D6", "9+3D6", "6+2D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "6+2D6", "10+1D6×1D6", "7+1D6×1D6", "12+1D6×1D6", "15+1D6×1D6", "9+3D6", "7+1D6×1D6", "7+1D6×1D6", "7+1D6×1D6", "12+4D6"]),
              "ST": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("Dracurouge.table.ST", locale),
              "PN": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("Dracurouge.table.PN", locale),
              "CS": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Dracurouge.table.CS", locale),
              "ECS": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("Dracurouge.table.ECS", locale),
              "BT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("Dracurouge.table.BT", locale)
            });
          }, $translate_tables$23.$$arity = 1), nil) && 'translate_tables';
        })(Opal.get_singleton_class(self), $nesting);

        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ja_jp"));
        return self.$register_prefix("DR", "RT", "HRT", "CT", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  self.$require("bcdice/game_system/Dracurouge");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Dracurouge_Korean');
        var $nesting = [self].concat($parent_nesting),
            $Dracurouge_Korean_initialize$1;
        Opal.const_set($nesting[0], 'ID', "Dracurouge:Korean");
        Opal.const_set($nesting[0], 'NAME', "드라크루주");
        Opal.const_set($nesting[0], 'SORT_KEY', "国際化:Korean:드라크루주");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・행동판정（DRx+y）\n" + "　x：굴리는 주사위의 수（생략시４）, y：갈증수정（생략시０）\n" + "　예） DR　DR6　DR+1　DR5+2\n" + "・저항판정（DRRx）\n" + "　x：굴리는 주사위의\n" + "　예） DRR3\n" + "・原風景表（ST）, 叙勲表（CO）, 叙勲後表（CA）, 遥か過去表（EP）\n" + "　原罪表（OS）, 受難表（PN）, 近況表（RS）, 平和な過去表（PP）\n" + "・타락표（CTx） x：갈증（예） CT3\n" + "・타락의 전조표（CS）, 拡張・堕落の兆し表（ECS）\n" + "・인연 내용 결정표（BT）\n" + "・반응표（RTxy）x：혈통, y：길　xy생략으로 일괄표시\n" + "　　혈통　D：드라크, R：로젠부르크, H：헬스가르드, M：더스트하임,\n" + "　　　　　A：아발롬　N：노스페라스\n" + "　　길　　F：영주, G：근위, R：방랑, W：현자, J：사냥꾼, N：야수\n" + "　예）RT（일괄표시）, RTDF（드라크 영주）, RTAN（아발롬 야수）\n" + "・異端の反応表（HRTxy）x：血統, y：道　xy省略で一括表示\n" + "　血統　L：異端卿, V：ヴルコラク, N：ナハツェーラ, K：カルンシュタイン\n" + "　　　　G：グリマルキン, S：ストリガ, M：メリュジーヌ, F：フォーン\n" + "　　　　H：ホムンクルス, E：エナメルム, S2：サングィナリエ, A：アールヴ\n" + "　　　　V2：ヴィーヴル, L2：ルーガルー, A2：アルラウネ, F2：フリッガ\n" + "　道　W：野伏, N：流浪, S：密使, H：魔女, F：剣士, X：検体\n" + "・D66 다이스 있음\n");
        self.$register_prefix_from_super_class();
        Opal.def(self, '$initialize', $Dracurouge_Korean_initialize$1 = function $$initialize(command) {
          var $iter = $Dracurouge_Korean_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Dracurouge_Korean_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Dracurouge_Korean_initialize$1, false, true), 'initialize', [command], null);
          return self.locale = "ko_kr";
        }, $Dracurouge_Korean_initialize$1.$$arity = 1);
        return Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ko_kr"));
      })($nesting[0], $$($nesting, 'Dracurouge'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~Dracurouge_Korean~index.js.map