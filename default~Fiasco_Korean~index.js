(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~Fiasco_Korean~index"],{

/***/ "VGU6":
/*!*********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Fiasco_Korean.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/Fiasco"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Fiasco');
        var $nesting = [self].concat($parent_nesting),
            $Fiasco_eval_game_system_specific_command$1,
            $Fiasco_roll_fs$2,
            $Fiasco_roll_white_black_single$5,
            $Fiasco_roll_white_black$6,
            $Fiasco_color$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Fiasco");
        Opal.const_set($nesting[0], 'NAME', "フィアスコ");
        Opal.const_set($nesting[0], 'SORT_KEY', "ふいあすこ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "  ・判定コマンド(FSx, WxBx)\n" + "    相関図・転落要素用(FSx)：相関図や転落要素のためにx個ダイスを振り、出目ごとに分類する\n" + "    黒白差分判定用(WxBx)  ：転落、残響のために白ダイス(W指定)と黒ダイス(B指定)で差分を求める\n" + "      ※ WとBは片方指定(Bx, Wx)、入替指定(WxBx,BxWx)可能\n");
        self.$register_prefix("FS", "W", "B");
        Opal.def(self, '$eval_game_system_specific_command', $Fiasco_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $ret_or_1 = nil,
              $ret_or_2 = nil;

          if ($truthy($ret_or_1 = function () {
            if ($truthy($ret_or_2 = self.$roll_fs(command))) {
              return $ret_or_2;
            } else {
              return self.$roll_white_black(command);
            }

            ;
            return nil;
          }())) {
            return $ret_or_1;
          } else {
            return self.$roll_white_black_single(command);
          }
        }, $Fiasco_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$roll_fs', $Fiasco_roll_fs$2 = function $$roll_fs(command) {
          var _$$,
              _$$2,
              self = this,
              m = nil,
              dice_count = nil,
              dice_list = nil,
              bucket = nil;

          m = /^FS(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          dice_count = m['$[]'](1).$to_i();
          dice_list = self.randomizer.$roll_barabara(dice_count, 6);
          bucket = [nil, 0, 0, 0, 0, 0, 0];
          $send(dice_list, 'each', [], (_$$ = function $$3(val) {
            var self = _$$.$$s == null ? this : _$$.$$s,
                $writer = nil;

            if (val == null) {
              val = nil;
            }

            ;
            $writer = [val, $rb_plus(bucket['$[]'](val), 1)];
            $send(bucket, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          $send(bucket, 'map!', [], (_$$2 = function $$4(count) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (count == null) {
              count = nil;
            }

            ;
            return self.$translate("Fiasco.fs.count", $hash2(["count"], {
              "count": count
            }));
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          return "" + "1 => " + bucket['$[]'](1) + ", 2 => " + bucket['$[]'](2) + ", 3 => " + bucket['$[]'](3) + ", 4 => " + bucket['$[]'](4) + ", 5 => " + bucket['$[]'](5) + ", 6 => " + bucket['$[]'](6);
        }, $Fiasco_roll_fs$2.$$arity = 1);
        Opal.def(self, '$roll_white_black_single', $Fiasco_roll_white_black_single$5 = function $$roll_white_black_single(command) {
          var self = this,
              m = nil,
              a = nil,
              result = nil;
          m = /^([WB])(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          a = $$($nesting, 'Side').$new(self.$color(m['$[]'](1)), m['$[]'](2).$to_i());
          result = a.$roll(self.randomizer);
          return "" + result + " ＞ " + a.$color() + a.$total();
        }, $Fiasco_roll_white_black_single$5.$$arity = 1);
        Opal.def(self, '$roll_white_black', $Fiasco_roll_white_black$6 = function $$roll_white_black(command) {
          var self = this,
              m = nil,
              $case = nil,
              a = nil,
              result_a = nil,
              b = nil,
              result_b = nil;
          m = /^([WB])(\d+)([WB])(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          $case = command;

          if (/^W\d+W\d+$/['$===']($case)) {
            return "" + command + "：" + self.$translate("Fiasco.wb.duplicate_error.white");
          } else if (/^B\d+B\d+$/['$===']($case)) {
            return "" + command + "：" + self.$translate("Fiasco.wb.duplicate_error.black");
          }

          ;
          a = $$($nesting, 'Side').$new(self.$color(m['$[]'](1)), m['$[]'](2).$to_i());
          result_a = a.$roll(self.randomizer);
          b = $$($nesting, 'Side').$new(self.$color(m['$[]'](3)), m['$[]'](4).$to_i());
          result_b = b.$roll(self.randomizer);
          return "" + result_a + " " + result_b + " ＞ " + a.$diff(b);
        }, $Fiasco_roll_white_black$6.$$arity = 1);
        Opal.def(self, '$color', $Fiasco_color$7 = function $$color(c) {
          var self = this;

          if (c['$==']("W")) {
            return self.$translate("Fiasco.white");
          } else {
            return self.$translate("Fiasco.black");
          }
        }, $Fiasco_color$7.$$arity = 1);
        return function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Side');
          var $nesting = [self].concat($parent_nesting),
              $Side_initialize$8,
              $Side_roll$9,
              $Side_diff$10;
          self.$$prototype.count = self.$$prototype.dice_list = self.$$prototype.color = self.$$prototype.total = nil;
          Opal.def(self, '$initialize', $Side_initialize$8 = function $$initialize(color, count) {
            var self = this;
            self.color = color;
            return self.count = count;
          }, $Side_initialize$8.$$arity = 2);
          Opal.def(self, '$roll', $Side_roll$9 = function $$roll(randomizer) {
            var self = this;

            self.dice_list = function () {
              if (self.count['$=='](0)) {
                return [0];
              } else {
                return randomizer.$roll_barabara(self.count, 6);
              }

              ;
              return nil;
            }();

            self.total = self.dice_list.$sum();
            return "" + self.color + self.total + "[" + self.dice_list.$join(",") + "]";
          }, $Side_roll$9.$$arity = 1);
          Opal.def(self, '$diff', $Side_diff$10 = function $$diff(other) {
            var self = this;

            if (self.total['$=='](other.$total())) {
              return "0";
            } else if ($truthy($rb_gt(self.total, other.$total()))) {
              return "" + self.color + $rb_minus(self.total, other.$total());
            } else {
              return "" + other.$color() + $rb_minus(other.$total(), self.total);
            }
          }, $Side_diff$10.$$arity = 1);
          return self.$attr_reader("color", "total");
        }($nesting[0], null, $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  self.$require("bcdice/game_system/Fiasco");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Fiasco_Korean');
        var $nesting = [self].concat($parent_nesting),
            $Fiasco_Korean_initialize$1;
        Opal.const_set($nesting[0], 'ID', "Fiasco:Korean");
        Opal.const_set($nesting[0], 'NAME', "피아스코");
        Opal.const_set($nesting[0], 'SORT_KEY', "国際化:Korean:피아스코");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "  ・판정 커맨드(FSx, WxBx)\n" + "    관계, 비틀기 요소용(FSx)：관계나 비틀기 요소를 위해 x개의 다이스를 굴려 나온 값별로 분류한다.\n" + "    흑백차이판정용(WxBx)    ：비틀기, 후기를 위해 흰 다이스(W지정)과 검은 다이스(B지정)으로 차이를 구한다.\n" + "      ※ W와B는 한 쪽만 지정(Bx, Wx), 앞뒤 바꿔 지정(WxBx,BxWx)도 가능\n");
        self.$register_prefix_from_super_class();
        return (Opal.def(self, '$initialize', $Fiasco_Korean_initialize$1 = function $$initialize(command) {
          var $iter = $Fiasco_Korean_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Fiasco_Korean_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Fiasco_Korean_initialize$1, false, true), 'initialize', [command], null);
          return self.locale = "ko_kr";
        }, $Fiasco_Korean_initialize$1.$$arity = 1), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'Fiasco'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~Fiasco_Korean~index.js.map