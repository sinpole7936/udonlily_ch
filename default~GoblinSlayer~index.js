(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~GoblinSlayer~index"],{

/***/ "WOO6":
/*!********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/GoblinSlayer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GoblinSlayer');
        var $nesting = [self].concat($parent_nesting),
            $GoblinSlayer_initialize$1,
            $GoblinSlayer_eval_game_system_specific_command$2,
            $GoblinSlayer_getCheckResult$3,
            $GoblinSlayer_murmurChantPrayInvoke$4,
            $GoblinSlayer_damageBonus$5,
            $GoblinSlayer_resultStr$6;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "GoblinSlayer");
        Opal.const_set($nesting[0], 'NAME', "ゴブリンスレイヤーTRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "こふりんすれいやあTRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定　GS(x)>=y\n" + "　2d6の判定を行い、達成値を出力します。\n" + "　xは基準値、yは目標値です。いずれも省略可能です。\n" + "　yが設定されている場合、大成功/成功/失敗/大失敗を自動判定します。\n" + "　例）GS>=12　GS>10　GS(10)>14　GS+10>=15　GS10>=15　GS(10)　GS+10　GS10　GS\n" + "\n" + "・祈念　MCPI(n)$m\n" + "　祈念を行います。\n" + "　nは【幸運】などによるボーナスです。この値は省略可能です。\n" + "　mは因果点の現在値です。\n" + "　因果点の現在値を使用して祈念を行い、成功/失敗を自動判定します。\n" + "　例）MCPI$3　MCPI(1)$4　MCPI+2$5　MCPI2$6\n" + "\n" + "・命中判定の効力値によるボーナス　DB(n)\n" + "　ダメージ効力表による威力へのボーナスを自動で求めます。\n" + "　nは命中判定の効力値です。\n" + "　例）DB(15)　DB12\n" + "\n" + "※上記コマンドの計算内で割り算を行った場合、小数点以下は切り上げされます。\n" + "　ただしダイス出目を割り算した場合、小数点以下は切り捨てされます。\n" + "　例）入力：GS(8+3/2)　実行結果：(GS10) ＞ 10 + 3[1,2] ＞ 13\n" + "　　　入力：2d6/2    　実行結果：(2D6/2) ＞ 3[1,2]/2 ＞ 1\n" + "\n" + "※MCPIでは、シークレットダイスを使用できません。\n");
        self.$register_prefix("GS", "^MCPI.*$", "DB");
        Opal.def(self, '$initialize', $GoblinSlayer_initialize$1 = function $$initialize(command) {
          var $iter = $GoblinSlayer_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $GoblinSlayer_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $GoblinSlayer_initialize$1, false, true), 'initialize', [command], null);
          return self.round_type = $$$($$($nesting, 'RoundType'), 'CEIL');
        }, $GoblinSlayer_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $GoblinSlayer_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $case = nil;
          return function () {
            $case = command;

            if (/^GS/i['$===']($case)) {
              return self.$getCheckResult(command);
            } else if (/^MCPI/i['$===']($case)) {
              return self.$murmurChantPrayInvoke(command);
            } else if (/^DB/i['$===']($case)) {
              return self.$damageBonus(command);
            } else {
              return nil;
            }
          }();
        }, $GoblinSlayer_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$getCheckResult', $GoblinSlayer_getCheckResult$3 = function $$getCheckResult(command) {
          var self = this,
              m = nil,
              basis = nil,
              target = nil,
              without_compare = nil,
              $ret_or_1 = nil,
              cmp_op = nil,
              dice_list = nil,
              total = nil,
              diceText = nil,
              achievement = nil,
              fumble = nil,
              critical = nil,
              result = nil,
              $ret_or_2 = nil,
              $ret_or_3 = nil,
              basis_str = nil;
          m = /^GS([-+]?\d+)?((>=?)(\d+))?$/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          basis = m['$[]'](1).$to_i();
          target = m['$[]'](4).$to_i();

          without_compare = function () {
            if ($truthy($ret_or_1 = m['$[]'](2)['$nil?']())) {
              return $ret_or_1;
            } else {
              return $rb_le(target, 0);
            }

            ;
            return nil;
          }();

          cmp_op = m['$[]'](3);
          dice_list = self.randomizer.$roll_barabara(2, 6);
          total = dice_list.$sum();
          diceText = dice_list.$join(",");
          achievement = $rb_plus(basis, total);
          fumble = diceText['$==']("1,1");
          critical = diceText['$==']("6,6");
          result = "" + " ＞ " + self.$resultStr(achievement, target, cmp_op, fumble, critical);

          if ($truthy(function () {
            if ($truthy($ret_or_2 = function () {
              if ($truthy($ret_or_3 = without_compare)) {
                return fumble['$!']();
              } else {
                return $ret_or_3;
              }

              ;
              return nil;
            }())) {
              return critical['$!']();
            } else {
              return $ret_or_2;
            }

            ;
            return nil;
          }())) {
            result = "";
          }

          ;

          basis_str = function () {
            if (basis['$=='](0)) {
              return "";
            } else {
              return "" + basis + " + ";
            }

            ;
            return nil;
          }();

          return "" + "(" + command + ") ＞ " + basis_str + total + "[" + diceText + "] ＞ " + achievement + result;
        }, $GoblinSlayer_getCheckResult$3.$$arity = 1);
        Opal.def(self, '$murmurChantPrayInvoke', $GoblinSlayer_murmurChantPrayInvoke$4 = function $$murmurChantPrayInvoke(command) {
          var self = this,
              m = nil,
              luck = nil,
              volition = nil,
              dice_list = nil,
              total = nil,
              diceText = nil,
              achievement = nil,
              result = nil,
              luck_str = nil;
          m = /^MCPI(\+?\d+)?\$(\d+)$/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          luck = m['$[]'](1).$to_i();
          volition = m['$[]'](2).$to_i();

          if ($truthy($rb_ge(volition, 12))) {
            return "因果点が12点以上の場合、因果点は使用できません。";
          }

          ;
          dice_list = self.randomizer.$roll_barabara(2, 6);
          total = dice_list.$sum();
          diceText = dice_list.$join(",");
          achievement = $rb_plus(total, luck);
          result = "" + " ＞ " + self.$resultStr(achievement, volition, ">=", false, false);

          luck_str = function () {
            if (luck['$=='](0)) {
              return "";
            } else {
              return "" + "+" + luck;
            }

            ;
            return nil;
          }();

          return "" + "祈念(2d6" + luck_str + ") ＞ " + total + "[" + diceText + "]" + luck_str + " ＞ " + achievement + result + ", 因果点：" + volition + "点 → " + $rb_plus(volition, 1) + "点";
        }, $GoblinSlayer_murmurChantPrayInvoke$4.$$arity = 1);
        Opal.def(self, '$damageBonus', $GoblinSlayer_damageBonus$5 = function $$damageBonus(command) {
          var self = this,
              m = nil,
              num = nil,
              fmt = nil,
              times = nil,
              dice_list = nil,
              total = nil,
              diceText = nil;
          m = /^DB(\d+)$/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          num = m['$[]'](1).$to_i();
          fmt = "命中判定の効力値によるボーナス ＞ ";

          if ($truthy($rb_lt(num, 15))) {
            return $rb_plus(fmt, "なし");
          }

          ;

          times = function () {
            if ($truthy($rb_ge(num, 40))) {
              return 5;
            } else if ($truthy($rb_ge(num, 30))) {
              return 4;
            } else if ($truthy($rb_ge(num, 25))) {
              return 3;
            } else if ($truthy($rb_ge(num, 20))) {
              return 2;
            } else {
              return 1;
            }

            ;
            return nil;
          }();

          dice_list = self.randomizer.$roll_barabara(times, 6);
          total = dice_list.$sum();
          diceText = dice_list.$join(",");
          return $rb_plus(fmt, "" + total + "[" + diceText + "] ＞ " + total);
        }, $GoblinSlayer_damageBonus$5.$$arity = 1);
        return (Opal.def(self, '$resultStr', $GoblinSlayer_resultStr$6 = function $$resultStr(achievement, target, cmp_op, fumble, critical) {
          var self = this;

          if ($truthy(fumble)) {
            return "大失敗";
          }

          ;

          if ($truthy(critical)) {
            return "大成功";
          }

          ;

          if (cmp_op['$=='](">=")) {
            return function () {
              if ($truthy($rb_ge(achievement, target))) {
                return "成功";
              } else {
                return "失敗";
              }

              ;
              return nil;
            }();
          } else {
            return function () {
              if ($truthy($rb_gt(achievement, target))) {
                return "成功";
              } else {
                return "失敗";
              }

              ;
              return nil;
            }();
          }

          ;
        }, $GoblinSlayer_resultStr$6.$$arity = 5), nil) && 'resultStr';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~GoblinSlayer~index.js.map