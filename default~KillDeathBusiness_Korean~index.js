(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~KillDeathBusiness_Korean~index"],{

/***/ "0zZo":
/*!********************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/KillDeathBusiness_Korean.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/KillDeathBusiness"] = function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $hash2 = Opal.hash2,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KillDeathBusiness');
        var $nesting = [self].concat($parent_nesting),
            $KillDeathBusiness_initialize$1,
            $KillDeathBusiness_result_2d6$2,
            $KillDeathBusiness_eval_game_system_specific_command$3,
            $KillDeathBusiness_judgeDice$4,
            $KillDeathBusiness_judge_expr$5,
            $KillDeathBusiness_rollTableCommand$6,
            $KillDeathBusiness_getSceneTableResult$7,
            $KillDeathBusiness_getNameTableResult$8,
            $KillDeathBusiness_getServiceSceneTableResult$9,
            $KillDeathBusiness_getHairStylistAbuseTableResult$10,
            $KillDeathBusiness_getExtraTableResult$11;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "KillDeathBusiness");
        Opal.const_set($nesting[0], 'NAME', "キルデスビジネス");
        Opal.const_set($nesting[0], 'SORT_KEY', "きるてすひしねす");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定\n" + "　JDx or JDx±y or JDx,z JDx#z or JDx±y,z JDx±y#z\n" + "　（x＝難易度、y＝補正、z＝ファンブル率(リスク)）\n" + "・履歴表 (HST)\n" + "・願い事表 (-WT)\n" + "　死(DWT)、復讐(RWT)、勝利(VWT)、獲得(PWT)、支配(CWT)、繁栄(FWT)\n" + "　強化(IWT)、健康(HWT)、安全(SAWT)、長寿(LWT)、生(EWT)\n" + "・万能命名表 (NAME, NAMEx) xに数字(1,2,3)で表を個別ロール\n" + "・サブプロット表 (-SPT)\n" + "　オカルト(OSPT)、家族(FSPT)、恋愛(LOSPT)、正義(JSPT)、修行(TSPT)\n" + "　笑い(BSPT)、意地悪(MASPT)、恨み(UMSPT)、人気(POSPT)、仕切り(PASPT)\n" + "　金儲け(MOSPT)、対悪魔(ANSPT)\n" + "・シーン表 (ST)、サービスシーン表 (EST)\n" + "・CM表 (CMT)\n" + "・蘇生副作用表 (ERT)\n" + "・一週間表（WKT)\n" + "・ソウル放出表 (SOUL)\n" + "・汎用演出表 (STGT)\n" + "・ヘルスタイリスト罵倒表 (HSAT、HSATx) xに数字(1,2)で表を個別ロール\n" + "・指定特技ランダム決定表 (SKLT, RTTn nは分野番号)、指定特技分野ランダム決定表 (RCT, SKLJ)\n" + "・エキストラ表 (EXT、EXTx) xに数字(1,2,3,4)で表を個別ロール\n" + "・製作委員決定表　PCDT/実際どうだったのか表　OHT\n" + "・タスク表　ヘルライオン　PCT1/ヘルクロウ　PCT2/ヘルスネーク　PCT3/\n" + "　ヘルドラゴン　PCT4/ヘルフライ　PCT5/ヘルゴート　PCT6/ヘルベア　PCT7\n" + "・D66ダイスあり\n");
        Opal.def(self, '$initialize', $KillDeathBusiness_initialize$1 = function $$initialize(command) {
          var $iter = $KillDeathBusiness_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $KillDeathBusiness_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $KillDeathBusiness_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $KillDeathBusiness_initialize$1.$$arity = 1);
        Opal.def(self, '$result_2d6', $KillDeathBusiness_result_2d6$2 = function $$result_2d6(_total, dice_total, _dice_list, cmp_op, _target) {
          var self = this;

          if (cmp_op['$=='](">=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_le(dice_total, 2))) {
            return $$($nesting, 'Result').$fumble(self.$translate("KillDeathBusiness.fumble"));
          } else if ($truthy($rb_ge(dice_total, 12))) {
            return $$($nesting, 'Result').$critical(self.$translate("KillDeathBusiness.special"));
          } else {
            return nil;
          }

          ;
        }, $KillDeathBusiness_result_2d6$2.$$arity = 5);
        Opal.def(self, '$eval_game_system_specific_command', $KillDeathBusiness_eval_game_system_specific_command$3 = function $$eval_game_system_specific_command(command) {
          var self = this;
          self.$debug("eval_game_system_specific_command command", command);

          if ($truthy(command['$start_with?']("JD"))) {
            return self.$judgeDice(command);
          } else {
            return self.$rollTableCommand(command);
          }

          ;
        }, $KillDeathBusiness_eval_game_system_specific_command$3.$$arity = 1);
        self.$private();
        Opal.def(self, '$judgeDice', $KillDeathBusiness_judgeDice$4 = function $$judgeDice(command) {
          var $a,
              self = this,
              fumble_match = nil,
              parser = nil,
              cmd = nil,
              $ret_or_1 = nil,
              target = nil,
              modify = nil,
              fumble = nil,
              result = nil,
              dice_list = nil,
              number = nil,
              diceText = nil;
          fumble_match = /,(\d+)$/.$match(command);
          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/JD\d+/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$enable_critical().$enable_fumble().$restrict_cmp_op_to(nil);
          cmd = parser.$parse(function () {
            if ($truthy($ret_or_1 = ($a = fumble_match, $a === nil || $a == null ? nil : $send($a, 'pre_match', [])))) {
              return $ret_or_1;
            } else {
              return command;
            }

            ;
            return nil;
          }());

          if ($truthy(cmd)) {} else {
            return nil;
          }

          ;
          target = cmd.$command().$delete_prefix("JD").$to_i();
          modify = cmd.$modify_number();

          fumble = function () {
            if ($truthy(fumble_match)) {
              return fumble_match['$[]'](1).$to_i();
            } else {
              return cmd.$fumble().$to_i();
            }

            ;
            return nil;
          }();

          command = self.$judge_expr(target, modify, fumble);
          result = "";

          if ($truthy($rb_gt(target, 12))) {
            result = $rb_plus(result, "" + "【" + command + "】 ＞ " + self.$translate("KillDeathBusiness.JD.warning.over_target_number") + "\n");
            target = 12;
          }

          ;

          if ($truthy($rb_lt(target, 5))) {
            result = $rb_plus(result, "" + "【" + command + "】 ＞ " + self.$translate("KillDeathBusiness.JD.warning.min_target_is_five") + "\n");
            target = 5;
          }

          ;

          if ($truthy($rb_lt(fumble, 2))) {
            fumble = 2;
          } else if ($truthy($rb_gt(fumble, 11))) {
            result = $rb_plus(result, "" + "【" + command + "】 ＞ " + self.$translate("KillDeathBusiness.JD.warning.over_fumble") + "\n");
            fumble = 11;
          }

          ;
          dice_list = self.randomizer.$roll_barabara(2, 6);
          number = dice_list.$sum();
          diceText = dice_list.$join(",");
          result = $rb_plus(result, [self.$translate("KillDeathBusiness.JD.options", $hash2(["target", "modifier", "fumble"], {
            "target": target,
            "modifier": modify,
            "fumble": fumble
          })), " ＞ ", self.$translate("KillDeathBusiness.JD.dice_value", $hash2(["dice_value"], {
            "dice_value": diceText
          })), " ＞ "].$join(""));

          if (number['$=='](2)) {
            result = $rb_plus(result, self.$translate("KillDeathBusiness.JD.fumble"));
          } else if (number['$=='](12)) {
            result = $rb_plus(result, self.$translate("KillDeathBusiness.JD.special"));
          } else if ($truthy($rb_le(number, fumble))) {
            result = $rb_plus(result, self.$translate("KillDeathBusiness.JD.less_than_fumble_target"));
          } else {
            number = $rb_plus(number, modify);

            if ($truthy($rb_lt(number, target))) {
              result = $rb_plus(result, self.$translate("KillDeathBusiness.JD.failure", $hash2(["value"], {
                "value": number
              })));
            } else {
              result = $rb_plus(result, self.$translate("KillDeathBusiness.JD.success", $hash2(["value"], {
                "value": number
              })));
            }

            ;
          }

          ;
          return $rb_plus(self.$translate("KillDeathBusiness.JD.name"), result);
        }, $KillDeathBusiness_judgeDice$4.$$arity = 1);
        Opal.def(self, '$judge_expr', $KillDeathBusiness_judge_expr$5 = function $$judge_expr(target, modifier, fumble) {
          var self = this;
          modifier = $$($nesting, 'Format').$modifier(modifier);

          if ($truthy($rb_gt(fumble, 0))) {
            fumble = "" + "," + fumble;
          }

          ;
          return "" + "JD" + target + modifier + fumble;
        }, $KillDeathBusiness_judge_expr$5.$$arity = 3);
        Opal.def(self, '$rollTableCommand', $KillDeathBusiness_rollTableCommand$6 = function $$rollTableCommand(command) {
          var $a,
              $b,
              self = this,
              $ret_or_2 = nil,
              result = nil,
              $ret_or_3 = nil,
              tableName = nil,
              $case = nil,
              type = nil,
              number = nil,
              text = nil;

          command = function () {
            if ($truthy($ret_or_2 = $$($nesting, 'ALIAS')['$[]'](command))) {
              return $ret_or_2;
            } else {
              return command;
            }

            ;
            return nil;
          }();

          result = function () {
            if ($truthy($ret_or_3 = self.$roll_tables(command, $$$(self.$class(), 'TABLES')))) {
              return $ret_or_3;
            } else {
              return $$$(self.$class(), 'RTT').$roll_command(self.randomizer, command);
            }

            ;
            return nil;
          }();

          if ($truthy(result)) {
            return result;
          }

          ;
          tableName = "";
          result = "";
          $case = command;

          if (/^ST(\d)?$/['$===']($case)) {
            type = $$($nesting, 'Regexp').$last_match(1).$to_i();
            $b = self.$getSceneTableResult(type), $a = Opal.to_ary($b), tableName = $a[0] == null ? nil : $a[0], result = $a[1] == null ? nil : $a[1], number = $a[2] == null ? nil : $a[2], $b;
          } else if (/^NAME(\d)?$/['$===']($case)) {
            type = $$($nesting, 'Regexp').$last_match(1).$to_i();
            $b = self.$getNameTableResult(type), $a = Opal.to_ary($b), tableName = $a[0] == null ? nil : $a[0], result = $a[1] == null ? nil : $a[1], number = $a[2] == null ? nil : $a[2], $b;
          } else if (/^EST$/i['$===']($case) || /^sErviceST$/i['$===']($case)) {
            $b = self.$getServiceSceneTableResult(), $a = Opal.to_ary($b), tableName = $a[0] == null ? nil : $a[0], result = $a[1] == null ? nil : $a[1], number = $a[2] == null ? nil : $a[2], $b;
          } else if (/^HSAT(\d)?$/['$===']($case)) {
            type = $$($nesting, 'Regexp').$last_match(1).$to_i();
            $b = self.$getHairStylistAbuseTableResult(type), $a = Opal.to_ary($b), tableName = $a[0] == null ? nil : $a[0], result = $a[1] == null ? nil : $a[1], number = $a[2] == null ? nil : $a[2], $b;
          } else if (/^EXT(\d)?$/['$===']($case)) {
            type = $$($nesting, 'Regexp').$last_match(1).$to_i();
            $b = self.$getExtraTableResult(type), $a = Opal.to_ary($b), tableName = $a[0] == null ? nil : $a[0], result = $a[1] == null ? nil : $a[1], number = $a[2] == null ? nil : $a[2], $b;
          }

          ;

          if ($truthy(result['$empty?']())) {
            return "";
          }

          ;
          text = "" + tableName + "(" + number + ") ＞ " + result;
          return text;
        }, $KillDeathBusiness_rollTableCommand$6.$$arity = 1);
        Opal.def(self, '$getSceneTableResult', $KillDeathBusiness_getSceneTableResult$7 = function $$getSceneTableResult(type) {
          var $a,
              $b,
              self = this,
              tableName = nil,
              sceneTable1 = nil,
              sceneTable2 = nil,
              result = nil,
              number = nil,
              $case = nil,
              result1 = nil,
              num1 = nil,
              result2 = nil,
              num2 = nil;
          self.$debug("getSceneTableResult type", type);
          tableName = self.$translate("KillDeathBusiness.ST.name");
          sceneTable1 = self.$translate("KillDeathBusiness.ST.table1");
          sceneTable2 = self.$translate("KillDeathBusiness.ST.table2");
          result = "";
          number = 0;
          $case = type;

          if (1['$===']($case)) {
            $b = self.$get_table_by_d66_swap(sceneTable1), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else if (2['$===']($case)) {
            $b = self.$get_table_by_d66_swap(sceneTable2), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else {
            $b = self.$get_table_by_d66_swap(sceneTable1), $a = Opal.to_ary($b), result1 = $a[0] == null ? nil : $a[0], num1 = $a[1] == null ? nil : $a[1], $b;
            $b = self.$get_table_by_d66_swap(sceneTable2), $a = Opal.to_ary($b), result2 = $a[0] == null ? nil : $a[0], num2 = $a[1] == null ? nil : $a[1], $b;
            result = self.$translate("KillDeathBusiness.ST.format", $hash2(["result1", "result2"], {
              "result1": result1,
              "result2": result2
            }));
            number = "" + num1 + "," + num2;
          }

          ;
          return [tableName, result, number];
        }, $KillDeathBusiness_getSceneTableResult$7.$$arity = 1);
        Opal.def(self, '$getNameTableResult', $KillDeathBusiness_getNameTableResult$8 = function $$getNameTableResult(type) {
          var $a,
              $b,
              self = this,
              tableName = nil,
              nameTable1 = nil,
              nameTable2 = nil,
              nameTable3 = nil,
              result = nil,
              number = nil,
              $case = nil,
              result1 = nil,
              num1 = nil,
              result2 = nil,
              num2 = nil,
              result3 = nil,
              num3 = nil;
          tableName = self.$translate("KillDeathBusiness.NAME.name");
          nameTable1 = self.$translate("KillDeathBusiness.NAME.table1");
          nameTable2 = self.$translate("KillDeathBusiness.NAME.table2");
          nameTable3 = self.$translate("KillDeathBusiness.NAME.table3");
          result = "";
          number = 0;
          $case = type;

          if (1['$===']($case)) {
            $b = self.$get_table_by_d66_swap(nameTable1), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else if (2['$===']($case)) {
            $b = self.$get_table_by_d66_swap(nameTable2), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else if (3['$===']($case)) {
            $b = self.$get_table_by_d66_swap(nameTable3), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else {
            $b = self.$get_table_by_d66_swap(nameTable1), $a = Opal.to_ary($b), result1 = $a[0] == null ? nil : $a[0], num1 = $a[1] == null ? nil : $a[1], $b;
            $b = self.$get_table_by_d66_swap(nameTable2), $a = Opal.to_ary($b), result2 = $a[0] == null ? nil : $a[0], num2 = $a[1] == null ? nil : $a[1], $b;
            $b = self.$get_table_by_d66_swap(nameTable3), $a = Opal.to_ary($b), result3 = $a[0] == null ? nil : $a[0], num3 = $a[1] == null ? nil : $a[1], $b;
            result = "" + result1 + result2 + result3;
            number = "" + num1 + "," + num2 + "," + num3;
          }

          ;
          return [tableName, result, number];
        }, $KillDeathBusiness_getNameTableResult$8.$$arity = 1);
        Opal.def(self, '$getServiceSceneTableResult', $KillDeathBusiness_getServiceSceneTableResult$9 = function $$getServiceSceneTableResult() {
          var self = this,
              table_name = nil,
              tables = nil,
              number1 = nil,
              scene_table = nil,
              number2 = nil,
              scene = nil,
              result = nil,
              number = nil;
          table_name = self.$translate("KillDeathBusiness.EST.name");
          tables = [self.$translate("KillDeathBusiness.EST.tables.undressing"), self.$translate("KillDeathBusiness.EST.tables.violence"), self.$translate("KillDeathBusiness.EST.tables.travel"), self.$translate("KillDeathBusiness.EST.tables.love"), self.$translate("KillDeathBusiness.EST.tables.emotion"), self.$translate("KillDeathBusiness.EST.tables.other_genre")];
          number1 = self.randomizer.$roll_once(6);
          scene_table = tables['$[]']($rb_minus(number1, 1));
          number2 = self.randomizer.$roll_once(6);
          scene = scene_table['$[]']("items")['$[]']($rb_minus(number2, 1));
          result = self.$translate("KillDeathBusiness.EST.format", $hash2(["scene", "chosen"], {
            "scene": scene_table['$[]']("name"),
            "chosen": scene
          }));
          number = "" + number1 + number2;
          return [table_name, result, number];
        }, $KillDeathBusiness_getServiceSceneTableResult$9.$$arity = 0);
        Opal.def(self, '$getHairStylistAbuseTableResult', $KillDeathBusiness_getHairStylistAbuseTableResult$10 = function $$getHairStylistAbuseTableResult(type) {
          var $a,
              $b,
              self = this,
              tableName = nil,
              hellStylistAbuseTable1 = nil,
              hellStylistAbuseTable2 = nil,
              hellStylistwtable1 = nil,
              hellStylistwtable2 = nil,
              $case = nil,
              result = nil,
              number = nil,
              result1 = nil,
              num1 = nil,
              result2 = nil,
              num2 = nil,
              before = nil,
              after = nil;
          tableName = self.$translate("KillDeathBusiness.HSAT.name");
          hellStylistAbuseTable1 = self.$translate("KillDeathBusiness.HSAT.abuse_table1");
          hellStylistAbuseTable2 = self.$translate("KillDeathBusiness.HSAT.abuse_table2");
          hellStylistwtable1 = self.$translate("KillDeathBusiness.HSAT.prefix_table");
          hellStylistwtable2 = self.$translate("KillDeathBusiness.HSAT.suffix_table");
          $case = type;

          if (1['$===']($case)) {
            $b = self.$get_table_by_d66_swap(hellStylistAbuseTable1), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else if (2['$===']($case)) {
            $b = self.$get_table_by_d66_swap(hellStylistAbuseTable2), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else {
            $b = self.$get_table_by_d66_swap(hellStylistAbuseTable1), $a = Opal.to_ary($b), result1 = $a[0] == null ? nil : $a[0], num1 = $a[1] == null ? nil : $a[1], $b;
            $b = self.$get_table_by_d66_swap(hellStylistAbuseTable2), $a = Opal.to_ary($b), result2 = $a[0] == null ? nil : $a[0], num2 = $a[1] == null ? nil : $a[1], $b;
            $b = self.$get_table_by_1d6(hellStylistwtable1), $a = Opal.to_ary($b), before = $a[0] == null ? nil : $a[0], $b;
            $b = self.$get_table_by_1d6(hellStylistwtable2), $a = Opal.to_ary($b), after = $a[0] == null ? nil : $a[0], $b;
            result = "" + before + result1 + " " + result2 + after;
            number = "" + num1 + "," + num2;
          }

          ;
          return [tableName, result, number];
        }, $KillDeathBusiness_getHairStylistAbuseTableResult$10.$$arity = 1);
        Opal.def(self, '$getExtraTableResult', $KillDeathBusiness_getExtraTableResult$11 = function $$getExtraTableResult(type) {
          var $a,
              $b,
              self = this,
              tableName = nil,
              extraTable1 = nil,
              extraTable2 = nil,
              extraTable3 = nil,
              extraTable4 = nil,
              $case = nil,
              result = nil,
              number = nil,
              result1 = nil,
              num1 = nil,
              result2 = nil,
              num2 = nil,
              result3 = nil,
              num3 = nil,
              result4 = nil,
              num4 = nil;
          tableName = self.$translate("KillDeathBusiness.EXT.name");
          extraTable1 = [[11, self.$translate("KillDeathBusiness.EXT.table1.11")], [12, self.$translate("KillDeathBusiness.EXT.table1.12")], [13, self.$translate("KillDeathBusiness.EXT.table1.13")], [14, self.$translate("KillDeathBusiness.EXT.table1.14")], [15, self.$translate("KillDeathBusiness.EXT.table1.15")], [16, self.$translate("KillDeathBusiness.EXT.table1.16")], [22, self.$translate("KillDeathBusiness.EXT.table1.22")], [23, self.$translate("KillDeathBusiness.EXT.table1.23")], [24, self.$translate("KillDeathBusiness.EXT.table1.24")], [25, self.$translate("KillDeathBusiness.EXT.table1.25")], [26, self.$translate("KillDeathBusiness.EXT.table1.26")], [33, self.$translate("KillDeathBusiness.EXT.table1.33")], [34, self.$translate("KillDeathBusiness.EXT.table1.34")], [35, self.$translate("KillDeathBusiness.EXT.table1.35")], [36, self.$translate("KillDeathBusiness.EXT.table1.36")], [44, self.$translate("KillDeathBusiness.EXT.table1.44")], [45, self.$translate("KillDeathBusiness.EXT.table1.45")], [46, self.$translate("KillDeathBusiness.EXT.table1.46")], [55, self.$translate("KillDeathBusiness.EXT.table1.55")], [56, $send(self, 'lambda', [], ($$12 = function (_$$) {
            function $$12() {
              return _$$.apply(this, arguments);
            }

            $$12.toString = function () {
              return _$$.toString();
            };

            return $$12;
          }(function () {
            var self = $$12.$$s == null ? this : $$12.$$s;
            return self.$translate("KillDeathBusiness.EXT.table1.56", $hash2(["name"], {
              "name": self.$getNameTableResult(0)['$[]'](1)
            }));
          }), $$12.$$s = self, $$12.$$arity = 0, $$12))], [66, self.$translate("KillDeathBusiness.EXT.table1.66")]];
          extraTable2 = self.$translate("KillDeathBusiness.EXT.table2");
          extraTable3 = self.$translate("KillDeathBusiness.EXT.table3");
          extraTable4 = self.$translate("KillDeathBusiness.EXT.table4");
          $case = type;

          if (1['$===']($case)) {
            $b = self.$get_table_by_d66_swap(extraTable1), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else if (2['$===']($case)) {
            $b = self.$get_table_by_d66_swap(extraTable2), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else if (3['$===']($case)) {
            $b = self.$get_table_by_d66_swap(extraTable3), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else if (4['$===']($case)) {
            $b = self.$get_table_by_d66_swap(extraTable4), $a = Opal.to_ary($b), result = $a[0] == null ? nil : $a[0], number = $a[1] == null ? nil : $a[1], $b;
          } else {
            $b = self.$get_table_by_d66_swap(extraTable1), $a = Opal.to_ary($b), result1 = $a[0] == null ? nil : $a[0], num1 = $a[1] == null ? nil : $a[1], $b;
            $b = self.$get_table_by_d66_swap(extraTable2), $a = Opal.to_ary($b), result2 = $a[0] == null ? nil : $a[0], num2 = $a[1] == null ? nil : $a[1], $b;
            $b = self.$get_table_by_d66_swap(extraTable3), $a = Opal.to_ary($b), result3 = $a[0] == null ? nil : $a[0], num3 = $a[1] == null ? nil : $a[1], $b;
            $b = self.$get_table_by_d66_swap(extraTable4), $a = Opal.to_ary($b), result4 = $a[0] == null ? nil : $a[0], num4 = $a[1] == null ? nil : $a[1], $b;
            result = "" + result1 + result2 + "が" + result3 + result4;
            number = "" + num1 + "," + num2 + "," + num3 + "," + num4;
          }

          ;
          return [tableName, result, number];
        }, $KillDeathBusiness_getExtraTableResult$11.$$arity = 1);
        Opal.const_set($nesting[0], 'ALIAS', $send($hash2(["DeathWT", "RevengeWT", "VictoryWT", "PossesionWT", "ControlWT", "FlourishWT", "IntensifyWT", "HealthWT", "SafetyWT", "LongevityWT", "ExistWT", "OccultSPT", "FamilySPT", "LoveSPT", "JusticeSPT", "TrainingSPT", "BeamSPT"], {
          "DeathWT": "DWT",
          "RevengeWT": "RWT",
          "VictoryWT": "VWT",
          "PossesionWT": "PWT",
          "ControlWT": "CWT",
          "FlourishWT": "FWT",
          "IntensifyWT": "IWT",
          "HealthWT": "HWT",
          "SafetyWT": "SAWT",
          "LongevityWT": "LWT",
          "ExistWT": "EWT",
          "OccultSPT": "OSPT",
          "FamilySPT": "FSPT",
          "LoveSPT": "LOSPT",
          "JusticeSPT": "JSPT",
          "TrainingSPT": "TSPT",
          "BeamSPT": "BSPT"
        }), 'transform_keys', [], "upcase".$to_proc()).$freeze());

        (function (self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting),
              $translate_tables$13,
              $translate_rtt$14;
          self.$private();
          Opal.def(self, '$translate_tables', $translate_tables$13 = function $$translate_tables(locale) {
            var self = this;
            return $hash2(["HST", "DWT", "RWT", "VWT", "PWT", "CWT", "FWT", "IWT", "HWT", "SAWT", "LWT", "EWT", "OSPT", "FSPT", "LOSPT", "JSPT", "TSPT", "BSPT", "CMT", "ERT", "WKT", "SOUL", "STGT", "PCDT", "OHT", "PCT1", "PCT2", "PCT3", "PCT4", "PCT5", "PCT6", "PCT7", "ANSPT", "MASPT", "MOSPT", "PASPT", "POSPT", "UMSPT"], {
              "HST": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.HST", locale),
              "DWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.DWT", locale),
              "RWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.RWT", locale),
              "VWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.VWT", locale),
              "PWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.PWT", locale),
              "CWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.CWT", locale),
              "FWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.FWT", locale),
              "IWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.IWT", locale),
              "HWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.HWT", locale),
              "SAWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.SAWT", locale),
              "LWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.LWT", locale),
              "EWT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.EWT", locale),
              "OSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.OSPT", locale),
              "FSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.FSPT", locale),
              "LOSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.LOSPT", locale),
              "JSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.JSPT", locale),
              "TSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.TSPT", locale),
              "BSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.BSPT", locale),
              "CMT": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("KillDeathBusiness.table.CMT", locale),
              "ERT": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("KillDeathBusiness.table.ERT", locale),
              "WKT": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("KillDeathBusiness.table.WKT", locale),
              "SOUL": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.SOUL", locale),
              "STGT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.STGT", locale),
              "PCDT": $$$($$($nesting, 'DiceTable'), 'D66Table').$from_i18n("KillDeathBusiness.table.PCDT", locale),
              "OHT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.OHT", locale),
              "PCT1": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.PCT1", locale),
              "PCT2": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.PCT2", locale),
              "PCT3": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.PCT3", locale),
              "PCT4": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.PCT4", locale),
              "PCT5": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.PCT5", locale),
              "PCT6": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.PCT6", locale),
              "PCT7": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.PCT7", locale),
              "ANSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.ANSPT", locale),
              "MASPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.MASPT", locale),
              "MOSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.MOSPT", locale),
              "PASPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.PASPT", locale),
              "POSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.POSPT", locale),
              "UMSPT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("KillDeathBusiness.table.UMSPT", locale)
            });
          }, $translate_tables$13.$$arity = 1);
          return (Opal.def(self, '$translate_rtt', $translate_rtt$14 = function $$translate_rtt(locale) {
            var self = this;
            return $$$($$($nesting, 'DiceTable'), 'SaiFicSkillTable').$from_i18n("KillDeathBusiness.RTT", locale, $hash2(["rtt", "rct"], {
              "rtt": "SKLT",
              "rct": "SKLJ"
            }));
          }, $translate_rtt$14.$$arity = 1), nil) && 'translate_rtt';
        })(Opal.get_singleton_class(self), $nesting);

        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ja_jp"));
        Opal.const_set($nesting[0], 'RTT', self.$translate_rtt("ja_jp"));
        self.$register_prefix("ST[1-2]?", "NAME[1-3]?", "EST", "sErviceST", "HSAT[1-2]?", "EXT[1-4]?", "JD");
        return self.$register_prefix($$($nesting, 'TABLES').$keys(), self.$register_prefix($$($nesting, 'ALIAS').$keys()), $$($nesting, 'RTT').$prefixes());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  self.$require("bcdice/game_system/KillDeathBusiness");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KillDeathBusiness_Korean');
        var $nesting = [self].concat($parent_nesting),
            $KillDeathBusiness_Korean_initialize$1;
        Opal.const_set($nesting[0], 'ID', "KillDeathBusiness:Korean");
        Opal.const_set($nesting[0], 'NAME', "Kill Death Business (한국어)");
        Opal.const_set($nesting[0], 'SORT_KEY', "国際化:Korean:Kill Death Business");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・판정\n" + "　JDx or JDx+y or JDx-y or JDx,z or JDx+y,z JDx-y,z\n" + "　（x＝난이도、y＝보정、z＝펌블도(리스크)）\n" + "・이력표 (HST、HSTx) x에 숫자(1,2)로 표를 개별 롤\n" + "・소원표 (-WT)\n" + "　죽음(DWT)、복수(RWT)、승리(VWT)、획득(PWT)、지배(CWT)、번영(FWT)\n" + "　강화(IWT)、건강(HWT)、안전(SAWT)、장생(LWT)、삶(EWT)\n" + "・만능이름표 (NAME) x에 숫자(1,2,3)로 표를 개별 롤\n" + "・서브플롯표 (-SPT)\n" + "　오컬트(OSPT)、가족(FSPT)、연애(LOSPT)、정의(JSPT)、수행(TSPT)\n" + "　웃음(BSPT)、심술쟁이(MASPT)、원한(UMSPT)、인기(POSPT)、구분(PASPT)\n" + "　돈벌이(MOSPT)、대(対)악마(ANSPT)\n" + "・씬 표 (ST)、서비스 씬 표 (EST)\n" + "・CM표 (CMT)\n" + "・소생 부작용 표 (ERT)\n" + "・일주일간 표（WKT)\n" + "・소울 방출표 (SOUL)\n" + "・범용연출표 (STGT)\n" + "・헬 스타일리스트 매도표 (HSAT、HSATx) x에 숫자(1,2)로 표를 개별 롤\n" + "・지정특기 랜덤 결정표 (RTT, SKLT)、지정특기 분야 랜덤 결정표 (RCT, SKLJ)\n" + "・엑스트라 표 (EXT、EXTx) x에 숫자(1,2,3,4)로 표를 개별 롤\n" + "・제작위원 결정표　PCDT/실제 어떠했는가 표　OHT\n" + "・태스크 표　헬 라이온　PCT1/헬 크로우　PCT2/헬 스네이크　PCT3/\n" + "　헬 드래곤　PCT4/헬 플라이　PCT5/헬 갓　PCT6/헬 베어　PCT7\n" + "・D66 다이스 지원\n");
        self.$register_prefix_from_super_class();
        Opal.def(self, '$initialize', $KillDeathBusiness_Korean_initialize$1 = function $$initialize(command) {
          var $iter = $KillDeathBusiness_Korean_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $KillDeathBusiness_Korean_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $KillDeathBusiness_Korean_initialize$1, false, true), 'initialize', [command], null);
          return self.locale = "ko_kr";
        }, $KillDeathBusiness_Korean_initialize$1.$$arity = 1);
        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ko_kr"));
        return Opal.const_set($nesting[0], 'RTT', self.$translate_rtt("ko_kr"));
      })($nesting[0], $$($nesting, 'KillDeathBusiness'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~KillDeathBusiness_Korean~index.js.map