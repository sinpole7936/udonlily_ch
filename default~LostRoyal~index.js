(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~LostRoyal~index"],{

/***/ "fFnV":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/LostRoyal.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $send = Opal.send,
      $range = Opal.range,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LostRoyal');
        var $nesting = [self].concat($parent_nesting),
            $LostRoyal_initialize$1,
            $LostRoyal_eval_game_system_specific_command$2,
            $LostRoyal_check_lostroyal$3,
            $LostRoyal_find_sequence$6,
            $LostRoyal_find_sequence_from_start_key$10,
            $LostRoyal_fumble_$ques$11,
            $LostRoyal_roll_fumble_chart$13,
            $LostRoyal_roll_wind_power_chart$14,
            $LostRoyal_roll_emotion_chart$16,
            $LostRoyal_roll_hope$17,
            $LostRoyal_is_1or2$19;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "LostRoyal");
        Opal.const_set($nesting[0], 'NAME', "ロストロイヤル");
        Opal.const_set($nesting[0], 'SORT_KEY', "ろすとろいやる");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・D66ダイスあり\n" + "\n" + "行為判定\n" + "　LR[x,x,x,x,x,x]\n" + "　　x の並びには【判定表】の数値を順番に入力する。\n" + "　　（例： LR[1,3,0,1,2,3] ）\n" + "\n" + "ファンブル表\n" + "　FC\n" + "\n" + "風力決定表\n" + "　WPC\n" + "\n" + "感情決定表\n" + "　EC\n" + "\n" + "希望点の決定\n" + "　HRx\n" + "　　x にはダイスの数（ 1 - 2 ）を指定\n");
        self.$register_prefix("LR\\[[0-5],[0-5],[0-5],[0-5],[0-5],[0-5]\\]", "FC", "WPC", "EC", "HR[1-2]");
        Opal.def(self, '$initialize', $LostRoyal_initialize$1 = function $$initialize(command) {
          var $iter = $LostRoyal_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $LostRoyal_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $LostRoyal_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'NO_SORT');
        }, $LostRoyal_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $LostRoyal_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $case = nil;
          $case = command;

          if (/LR\[([0-5]),([0-5]),([0-5]),([0-5]),([0-5]),([0-5])\]/i['$===']($case)) {
            return self.$check_lostroyal([$$($nesting, 'Regexp').$last_match(1).$to_i(), $$($nesting, 'Regexp').$last_match(2).$to_i(), $$($nesting, 'Regexp').$last_match(3).$to_i(), $$($nesting, 'Regexp').$last_match(4).$to_i(), $$($nesting, 'Regexp').$last_match(5).$to_i(), $$($nesting, 'Regexp').$last_match(6).$to_i()]);
          } else if (/FC/['$===']($case)) {
            return self.$roll_fumble_chart();
          } else if (/WPC/['$===']($case)) {
            return self.$roll_wind_power_chart();
          } else if (/EC/['$===']($case)) {
            return self.$roll_emotion_chart();
          } else if (/HR([1-2])/['$===']($case)) {
            return self.$roll_hope($$($nesting, 'Regexp').$last_match(1).$to_i());
          }

          ;
          return nil;
        }, $LostRoyal_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$check_lostroyal', $LostRoyal_check_lostroyal$3 = function $$check_lostroyal(checking_table) {
          var _$$,
              _$$2,
              self = this,
              keys = nil,
              scores = nil,
              total_score = nil,
              chained_sequence = nil,
              text = nil,
              $ret_or_1 = nil,
              bonus = nil;

          keys = [];
          $send($range(0, 3, true), 'each', [], (_$$ = function $$4(_i) {
            var self = _$$.$$s == null ? this : _$$.$$s,
                key = nil;
            if (self.randomizer == null) self.randomizer = nil;

            if (_i == null) {
              _i = nil;
            }

            ;
            key = self.randomizer.$roll_once(6);
            return keys['$<<'](key);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          scores = $send(keys, 'map', [], (_$$2 = function $$5(k) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (k == null) {
              k = nil;
            }

            ;
            return checking_table['$[]']($rb_minus(k, 1));
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2)).$to_a();
          total_score = scores.$inject("+");
          chained_sequence = self.$find_sequence(keys);
          text = "" + "3D6 => [" + keys.$join(",") + "] => (" + scores.$join("+") + ") => " + total_score;

          if ($truthy(function () {
            if ($truthy($ret_or_1 = chained_sequence['$nil?']())) {
              return $ret_or_1;
            } else {
              return chained_sequence['$empty?']();
            }

            ;
            return nil;
          }())) {} else {
            bonus = function () {
              if ($truthy(self['$fumble_?'](keys, chained_sequence))) {
                return 3;
              } else {
                return chained_sequence.$size();
              }

              ;
              return nil;
            }();

            text = $rb_plus(text, "" + " | " + chained_sequence.$size() + " chain! (" + chained_sequence.$join(",") + ") => " + $rb_plus(total_score, bonus));

            if ($truthy($rb_ge(chained_sequence.$size(), 3))) {
              text = $rb_plus(text, " [スペシャル]");
            }

            ;

            if ($truthy(self['$fumble_?'](keys, chained_sequence))) {
              text = $rb_plus(text, " [ファンブル]");
            }

            ;
          }

          ;
          return text;
        }, $LostRoyal_check_lostroyal$3.$$arity = 1);
        Opal.def(self, '$find_sequence', $LostRoyal_find_sequence$6 = function $$find_sequence(keys) {
          var _$$3,
              _$$4,
              _$$5,
              self = this,
              sequences = nil;

          keys = keys.$sort();
          sequences = $send($range(1, 6, true), 'map', [], (_$$3 = function $$7(start_key) {
            var self = _$$3.$$s == null ? this : _$$3.$$s;

            if (start_key == null) {
              start_key = nil;
            }

            ;
            return self.$find_sequence_from_start_key(keys, start_key);
          }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3));
          return $send($send(sequences, 'select', [], (_$$4 = function $$8(x) {
            var self = _$$4.$$s == null ? this : _$$4.$$s;

            if (x == null) {
              x = nil;
            }

            ;
            return $rb_gt(x.$size(), 1);
          }, _$$4.$$s = self, _$$4.$$arity = 1, _$$4)), 'max', [], (_$$5 = function $$9(a, b) {
            var self = _$$5.$$s == null ? this : _$$5.$$s;

            if (a == null) {
              a = nil;
            }

            ;

            if (b == null) {
              b = nil;
            }

            ;
            return a.$size()['$<=>'](b.$size());
          }, _$$5.$$s = self, _$$5.$$arity = 2, _$$5));
        }, $LostRoyal_find_sequence$6.$$arity = 1);
        Opal.def(self, '$find_sequence_from_start_key', $LostRoyal_find_sequence_from_start_key$10 = function $$find_sequence_from_start_key(keys, start_key) {
          var $a,
              self = this,
              chained_keys = nil,
              key = nil,
              $ret_or_2 = nil;
          chained_keys = [];
          key = start_key;

          while ($truthy(keys['$include?'](key))) {
            chained_keys['$<<'](key);
            key = $rb_plus(key, 1);
          }

          ;

          if ($truthy(function () {
            if ($truthy($ret_or_2 = chained_keys['$empty?']()['$!']())) {
              return chained_keys['$[]'](0)['$=='](1);
            } else {
              return $ret_or_2;
            }

            ;
            return nil;
          }())) {
            key = 6;

            while ($truthy(keys['$include?'](key))) {
              chained_keys.$unshift(key);
              key = $rb_minus(key, 1);
            }

            ;
          }

          ;
          return chained_keys;
        }, $LostRoyal_find_sequence_from_start_key$10.$$arity = 2);
        Opal.def(self, '$fumble_?', $LostRoyal_fumble_$ques$11 = function $LostRoyal_fumble_$ques$11(keys, chained_sequence) {
          try {
            var _$$6,
                self = this;

            $send(chained_sequence, 'each', [], (_$$6 = function $$12(k) {
              var self = _$$6.$$s == null ? this : _$$6.$$s;

              if (k == null) {
                k = nil;
              }

              ;

              if ($truthy($rb_ge(keys.$count(k), 2))) {
                Opal.ret(true);
              } else {
                return nil;
              }

              ;
            }, _$$6.$$s = self, _$$6.$$arity = 1, _$$6));
            return false;
          } catch ($returner) {
            if ($returner === Opal.returner) {
              return $returner.$v;
            }

            throw $returner;
          }
        }, $LostRoyal_fumble_$ques$11.$$arity = 2);
        Opal.def(self, '$roll_fumble_chart', $LostRoyal_roll_fumble_chart$13 = function $$roll_fumble_chart() {
          var self = this,
              key = nil,
              text = nil;
          key = self.randomizer.$roll_once(6);
          text = ["何かの問題で言い争い、主君に無礼を働いてしまう。あなたは主君の名誉点を１点失うか、【時間】を１点消費して和解の話し合いを持つか選べる。", "見過ごせば人々を不幸にする危険に遭遇する。あなたは逃げ出して冒険の名誉点を１点失うか、これに立ち向かい【命数】を２点減らすかを選べる。", "あなたが惹かれたのは好意に付け込む人だった。あなたはその場を去って恋慕の名誉点を１点失うか【正義】を１点減らして礼を尽くすかを選べる。", "金銭的な問題で、生命と魂の苦しみを背負う人に出会う。あなたは庇護の名誉点を１点失うか出費を３点増やすかを選べる。", "襲撃を受ける。苦もなく叩き伏せると、卑屈な態度で命乞いをしてきた。容赦なく命を奪い寛容の名誉点を１点失うか、密告によって【血路】が１Ｄ６点増えるかを選ぶことができる。", "風聞により、友が悪に身を貶めたと知る。共に並んだ戦場が色褪せる想いだ。戦友の名誉点を１点減らすか、【酒と歌】すべてを失うかを選べる。"]['$[]']($rb_minus(key, 1));
          return "" + "1D6 => [" + key + "] " + text;
        }, $LostRoyal_roll_fumble_chart$13.$$arity = 0);
        Opal.def(self, '$roll_wind_power_chart', $LostRoyal_roll_wind_power_chart$14 = function $$roll_wind_power_chart() {
          try {
            var _$$7,
                self = this,
                key = nil,
                total_bonus = nil,
                text = nil;

            key = 0;
            total_bonus = 0;
            text = "";
            return $send(self, 'loop', [], (_$$7 = function $$15() {
              var self = _$$7.$$s == null ? this : _$$7.$$s,
                  $a,
                  $b,
                  dice = nil,
                  add = nil,
                  bonus = nil,
                  current_text = nil;
              if (self.randomizer == null) self.randomizer = nil;
              dice = self.randomizer.$roll_once(6);
              key = $rb_plus(key, dice);
              $b = [[true, 0, "ほぼ凪（振り足し）"], [true, 0, "弱い風（振り足し）"], [false, 0, "ゆるやかな風"], [false, 0, "ゆるやかな風"], [false, 1, "やや強い風（儀式点プラス１）"], [false, 2, "強い風（龍を幻視、儀式点プラス２）"], [false, 3, "体が揺らぐほどの風（龍を幻視、儀式点プラス３）"]]['$[]']($rb_minus([key, 7].$min(), 1)), $a = Opal.to_ary($b), add = $a[0] == null ? nil : $a[0], bonus = $a[1] == null ? nil : $a[1], current_text = $a[2] == null ? nil : $a[2], $b;
              total_bonus = $rb_plus(total_bonus, bonus);

              if ($truthy(key['$!='](dice))) {
                current_text = "" + "1D6[" + dice + "]+" + $rb_minus(key, dice) + " " + current_text;
              } else {
                current_text = "" + "1D6[" + dice + "] " + current_text;
              }

              ;

              if ($truthy(text['$empty?']())) {
                text = current_text;
              } else {
                text = "" + text + " => " + current_text;
              }

              ;

              if ($truthy(add)) {
                return nil;
              } else {
                text = $rb_plus(text, "" + " [合計：儀式点 +" + total_bonus + " ]");
                Opal.ret(text);
              }

              ;
            }, _$$7.$$s = self, _$$7.$$arity = 0, _$$7));
          } catch ($returner) {
            if ($returner === Opal.returner) {
              return $returner.$v;
            }

            throw $returner;
          }
        }, $LostRoyal_roll_wind_power_chart$14.$$arity = 0);
        Opal.def(self, '$roll_emotion_chart', $LostRoyal_roll_emotion_chart$16 = function $$roll_emotion_chart() {
          var self = this,
              key = nil,
              text = nil;
          key = self.randomizer.$roll_once(6);
          text = ["愛情／殺意", "友情／負目", "崇拝／嫌悪", "興味／侮蔑", "信頼／嫉妬", "守護／欲情"]['$[]']($rb_minus(key, 1));
          return "" + "1D6 => [" + key + "] " + text;
        }, $LostRoyal_roll_emotion_chart$16.$$arity = 0);
        Opal.def(self, '$roll_hope', $LostRoyal_roll_hope$17 = function $$roll_hope(number_of_dice) {
          try {
            var _$$8,
                self = this,
                total = nil,
                text = nil;

            total = 0;
            text = "";
            return $send(self, 'loop', [], (_$$8 = function $$18() {
              var self = _$$8.$$s == null ? this : _$$8.$$s,
                  d1 = nil,
                  d2 = nil,
                  $ret_or_3 = nil;
              if (self.randomizer == null) self.randomizer = nil;
              d1 = self.randomizer.$roll_once(6);
              d2 = 0;

              if ($truthy($rb_ge(number_of_dice, 2))) {
                d2 = self.randomizer.$roll_once(6);
              }

              ;
              total = $rb_plus(total, $rb_plus(d1, d2));

              if (number_of_dice['$=='](2)) {
                text = $rb_plus(text, "" + "2D6[" + d1 + "," + d2 + "]");
              } else {
                text = $rb_plus(text, "" + "1D6[" + d1 + "]");
              }

              ;

              if ($truthy(function () {
                if ($truthy($ret_or_3 = self.$is_1or2(d1))) {
                  return $ret_or_3;
                } else {
                  return self.$is_1or2(d2);
                }

                ;
                return nil;
              }())) {
                return text = $rb_plus(text, " （振り足し） => ");
              } else {
                text = $rb_plus(text, "" + " => 合計 " + total);
                Opal.ret(text);
              }

              ;
            }, _$$8.$$s = self, _$$8.$$arity = 0, _$$8));
          } catch ($returner) {
            if ($returner === Opal.returner) {
              return $returner.$v;
            }

            throw $returner;
          }
        }, $LostRoyal_roll_hope$17.$$arity = 1);
        return (Opal.def(self, '$is_1or2', $LostRoyal_is_1or2$19 = function $$is_1or2(n) {
          var self = this;
          return [1, 2]['$include?'](n);
        }, $LostRoyal_is_1or2$19.$$arity = 1), nil) && 'is_1or2';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~LostRoyal~index.js.map