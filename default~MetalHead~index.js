(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~MetalHead~index"],{

/***/ "euSr":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/MetalHead.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/arithmetic_evaluator"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'ArithmeticEvaluator');
      var $nesting = [self].concat($parent_nesting);

      (function (self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting),
            $eval$1;
        return (Opal.def(self, '$eval', $eval$1 = function $eval$1(expr, $kwargs) {
          var round_type,
              self = this,
              $ret_or_1 = nil;

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          round_type = $kwargs.$$smap["round_type"];

          if (round_type == null) {
            round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
          }

          ;

          if ($truthy(expr)) {} else {
            return 0;
          }

          ;

          if ($truthy($ret_or_1 = $$($nesting, 'Arithmetic').$eval(expr, round_type))) {
            return $ret_or_1;
          } else {
            return 0;
          }

          ;
        }, $eval$1.$$arity = -2), nil) && 'eval';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/range_table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeTable');

        var $nesting = [self].concat($parent_nesting),
            _$RangeTable$,
            $RangeTable_initialize$3,
            $RangeTable_fetch$4,
            $RangeTable_roll$6,
            $RangeTable_store$7,
            $RangeTable_coerce_to_int_range$11,
            $RangeTable_assert_min_sum_is_covered$12,
            $RangeTable_assert_max_sum_is_covered$13,
            $RangeTable_assert_no_gap_or_overlap_in_ranges$14;

        self.$$prototype.name = self.$$prototype.items = self.$$prototype.num_of_dice = self.$$prototype.num_of_sides = self.$$prototype.formatter = nil;
        Opal.const_set($nesting[0], 'RollResult', $send($$($nesting, 'Struct'), 'new', ["sum", "values", "content", "formatted"], (_$RangeTable$ = function $RangeTable$1() {
          var self = _$RangeTable$.$$s == null ? this : _$RangeTable$.$$s;
          return self.$alias_method("to_s", "formatted");
        }, _$RangeTable$.$$s = self, _$RangeTable$.$$arity = 0, _$RangeTable$)));
        Opal.const_set($nesting[0], 'Item', $$($nesting, 'Struct').$new("range", "content"));
        Opal.const_set($nesting[0], 'DICE_ROLL_METHOD_RE', /^(\d+)D(\d+)$/i.$freeze());
        Opal.const_set($nesting[0], 'DEFAULT_FORMATTER', $send(self, 'lambda', [], ($$2 = function (_$$) {
          function $$2(_x, _x2) {
            return _$$.apply(this, arguments);
          }

          $$2.toString = function () {
            return _$$.toString();
          };

          return $$2;
        }(function (table, result) {
          var self = $$2.$$s == null ? this : $$2.$$s;

          if (table == null) {
            table = nil;
          }

          ;

          if (result == null) {
            result = nil;
          }

          ;
          return "" + table.$name() + "(" + result.$sum() + ") ＞ " + result.$content();
        }), $$2.$$s = self, $$2.$$arity = 2, $$2)));
        self.$attr_reader("name");
        self.$attr_reader("num_of_dice");
        self.$attr_reader("num_of_sides");
        Opal.def(self, '$initialize', $RangeTable_initialize$3 = function $$initialize(name, dice_roll_method, items) {
          var $iter = $RangeTable_initialize$3.$$p,
              formatter = $iter || nil,
              self = this,
              $ret_or_1 = nil,
              m = nil;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          ;
          self.name = name.$freeze();

          self.formatter = function () {
            if ($truthy($ret_or_1 = formatter)) {
              return $ret_or_1;
            } else {
              return $$($nesting, 'DEFAULT_FORMATTER');
            }

            ;
            return nil;
          }();

          m = $$($nesting, 'DICE_ROLL_METHOD_RE').$match(dice_roll_method);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + self.name + ": invalid dice roll method: " + dice_roll_method);
          }

          ;
          self.num_of_dice = m['$[]'](1).$to_i();
          self.num_of_sides = m['$[]'](2).$to_i();
          return self.$store(items);
        }, $RangeTable_initialize$3.$$arity = 3);
        Opal.def(self, '$fetch', $RangeTable_fetch$4 = function $$fetch(value) {
          var _$$2,
              self = this,
              item = nil;

          item = $send(self.items, 'find', [], (_$$2 = function $$5(i) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return i.$range()['$include?'](value);
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));

          if ($truthy(item)) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": value is out of range: " + value);
          }

          ;
          return item;
        }, $RangeTable_fetch$4.$$arity = 1);
        Opal.def(self, '$roll', $RangeTable_roll$6 = function $$roll(randomizer) {
          var self = this,
              values = nil,
              sum = nil,
              result = nil,
              $writer = nil;
          values = randomizer.$roll_barabara(self.num_of_dice, self.num_of_sides);
          sum = values.$sum();
          result = $$($nesting, 'RollResult').$new(sum, values, self.$fetch(sum).$content());
          $writer = [self.formatter['$[]'](self, result)];
          $send(result, 'formatted=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $RangeTable_roll$6.$$arity = 1);
        self.$private();
        Opal.def(self, '$store', $RangeTable_store$7 = function $$store(items) {
          var _$$3,
              _$$4,
              _$$5,
              self = this,
              items_with_range = nil,
              sorted_items = nil;

          items_with_range = $send(items, 'map', [], (_$$3 = function $$8(r, c) {
            var self = _$$3.$$s == null ? this : _$$3.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (c == null) {
              c = nil;
            }

            ;
            return [self.$coerce_to_int_range(r), c];
          }, _$$3.$$s = self, _$$3.$$arity = 2, _$$3));
          sorted_items = $send(items_with_range, 'sort_by', [], (_$$4 = function $$9(r, _) {
            var self = _$$4.$$s == null ? this : _$$4.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (_ == null) {
              _ = nil;
            }

            ;
            return r.$min();
          }, _$$4.$$s = self, _$$4.$$arity = 2, _$$4));
          self.$assert_min_sum_is_covered(sorted_items);
          self.$assert_max_sum_is_covered(sorted_items);
          self.$assert_no_gap_or_overlap_in_ranges(sorted_items);
          self.items = $send(sorted_items, 'map', [], (_$$5 = function $$10(range, content) {
            var self = _$$5.$$s == null ? this : _$$5.$$s;

            if (range == null) {
              range = nil;
            }

            ;

            if (content == null) {
              content = nil;
            }

            ;
            return $$($nesting, 'Item').$new(range, content.$freeze()).$freeze();
          }, _$$5.$$s = self, _$$5.$$arity = 2, _$$5)).$freeze();
          return self;
        }, $RangeTable_store$7.$$arity = 1);
        Opal.def(self, '$coerce_to_int_range', $RangeTable_coerce_to_int_range$11 = function $$coerce_to_int_range(x) {
          var self = this,
              $case = nil,
              $ret_or_2 = nil;
          $case = x;

          if ($$($nesting, 'Integer')['$===']($case)) {
            return $$($nesting, 'Range').$new(x, x);
          } else if ($$($nesting, 'Range')['$===']($case)) {
            if ($truthy(function () {
              if ($truthy($ret_or_2 = x.$begin()['$is_a?']($$($nesting, 'Integer')))) {
                return x.$end()['$is_a?']($$($nesting, 'Integer'));
              } else {
                return $ret_or_2;
              }

              ;
              return nil;
            }())) {
              return x;
            }
          }

          ;
          return self.$raise($$($nesting, 'TypeError'), "" + self.name + ": " + x + " (" + x.$class() + ") must be an Integer or a Range with Integers ");
        }, $RangeTable_coerce_to_int_range$11.$$arity = 1);
        Opal.def(self, '$assert_min_sum_is_covered', $RangeTable_assert_min_sum_is_covered$12 = function $$assert_min_sum_is_covered(sorted_items) {
          var self = this,
              min_sum = nil,
              range = nil;
          min_sum = self.num_of_dice;
          range = sorted_items.$first()['$[]'](0);

          if ($truthy(range['$include?'](min_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": min value (" + min_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_min_sum_is_covered$12.$$arity = 1);
        Opal.def(self, '$assert_max_sum_is_covered', $RangeTable_assert_max_sum_is_covered$13 = function $$assert_max_sum_is_covered(sorted_items) {
          var self = this,
              max_sum = nil,
              range = nil;
          max_sum = $rb_times(self.num_of_dice, self.num_of_sides);
          range = sorted_items.$last()['$[]'](0);

          if ($truthy(range['$include?'](max_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": max value (" + max_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_max_sum_is_covered$13.$$arity = 1);
        return (Opal.def(self, '$assert_no_gap_or_overlap_in_ranges', $RangeTable_assert_no_gap_or_overlap_in_ranges$14 = function $$assert_no_gap_or_overlap_in_ranges(sorted_items) {
          var _$$6,
              self = this;

          $send(sorted_items, 'each_cons', [2], (_$$6 = function $$15(i1, i2) {
            var self = _$$6.$$s == null ? this : _$$6.$$s,
                r1 = nil,
                r2 = nil,
                max1 = nil,
                next_of_max1 = nil;
            if (self.name == null) self.name = nil;

            if (i1 == null) {
              i1 = nil;
            }

            ;

            if (i2 == null) {
              i2 = nil;
            }

            ;
            r1 = i1['$[]'](0);
            r2 = i2['$[]'](0);
            max1 = r1.$max();
            next_of_max1 = $rb_plus(max1, 1);

            if ($truthy(r2['$include?'](max1))) {
              self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range overlap: " + r1 + " and " + r2);
            }

            ;

            if ($truthy(r2['$include?'](next_of_max1))) {
              return nil;
            } else {
              return self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range gap: " + r1 + " and " + r2);
            }

            ;
          }, _$$6.$$s = self, _$$6.$$arity = 2, _$$6));
          return self;
        }, $RangeTable_assert_no_gap_or_overlap_in_ranges$14.$$arity = 1), nil) && 'assert_no_gap_or_overlap_in_ranges';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $hash2 = Opal.hash2,
      $send = Opal.send,
      $range = Opal.range;
  self.$require("bcdice/arithmetic_evaluator");
  self.$require("bcdice/dice_table/range_table");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MetalHead');
        var $nesting = [self].concat($parent_nesting),
            $MetalHead_eval_game_system_specific_command$1,
            $MetalHead_change_text$2,
            $MetalHead_result_2d6$5,
            $MetalHead_rollHit$6,
            $MetalHead_result_1d100$7,
            $MetalHead_getHitResult$8,
            $MetalHead_mh_crc_table$9;
        self.$$prototype.round_type = self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "MetalHead");
        Opal.const_set($nesting[0], 'NAME', "メタルヘッド");
        Opal.const_set($nesting[0], 'SORT_KEY', "めたるへつと");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・アビリティロール  AR>=目標値\n" + "・スキルロール      SR<=目標値(%)\n" + "・命中判定ロール    HR<=目標値(%)\n" + "\n" + "  例）AR>=5\n" + "  例）SR<=(40+25)\n" + "  例）HR<=(50-10)\n" + "\n" + "  これらのロールで成否、絶対成功/絶対失敗、クリティカル/アクシデントを自動判定します。\n" + "\n" + "・クリティカルチャート  CC\n" + "・アクシデントチャート  射撃・投擲用:ACL  格闘用:ACS\n" + "・戦闘結果チャート      CRCsn   s=耐久レベル(SUV) n=数値\n" + "\n" + "  例）CRCA61 SUV=Aを対象とした数値61(62に変換される)の戦闘結果を参照する。\n" + "  例）CRCM98 対物で数値98の戦闘結果を参照する。\n");
        self.$register_prefix("AR", "SR", "HR<=", "CC", "ACT", "ACL", "ACS", "CRC[A-Z]");
        Opal.def(self, '$eval_game_system_specific_command', $MetalHead_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil,
              $case = nil,
              suv = nil,
              num = nil,
              target = nil;
          result = self.$roll_tables(command, $$($nesting, 'TABLES'));

          if ($truthy(result)) {
            return result;
          }

          ;
          $case = command;

          if (/^CRC(\w)(\d+)$/['$===']($case)) {
            suv = $$($nesting, 'Regexp').$last_match(1);
            num = $$($nesting, 'Regexp').$last_match(2);
            return self.$mh_crc_table(suv, num);
          } else if (/^HR<=(.+)/['$===']($case)) {
            target = $$($nesting, 'ArithmeticEvaluator').$eval($$($nesting, 'Regexp').$last_match(1), $hash2(["round_type"], {
              "round_type": self.round_type
            }));
            return self.$rollHit(target);
          }

          ;
          return nil;
        }, $MetalHead_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$change_text', $MetalHead_change_text$2 = function $$change_text(string) {
          var _$$7,
              _$$8,
              self = this;

          string = $send(string, 'gsub', [/^(S)?AR/i], (_$$7 = function $$3() {
            var self = _$$7.$$s == null ? this : _$$7.$$s;
            return "" + $$($nesting, 'Regexp').$last_match(1) + "2D6";
          }, _$$7.$$s = self, _$$7.$$arity = 0, _$$7));
          string = $send(string, 'gsub', [/^(S)?SR/i], (_$$8 = function $$4() {
            var self = _$$8.$$s == null ? this : _$$8.$$s;
            return "" + $$($nesting, 'Regexp').$last_match(1) + "1D100";
          }, _$$8.$$s = self, _$$8.$$arity = 0, _$$8));
          return string;
        }, $MetalHead_change_text$2.$$arity = 1);
        Opal.def(self, '$result_2d6', $MetalHead_result_2d6$5 = function $$result_2d6(_total, dice_total, _dice_list, cmp_op, _target) {
          var self = this;

          if ($truthy(cmp_op['$!='](">="))) {
            return nil;
          }

          ;

          if ($truthy($rb_ge(dice_total, 12))) {
            return $$($nesting, 'Result').$critical("絶対成功");
          } else if ($truthy($rb_le(dice_total, 2))) {
            return $$($nesting, 'Result').$fumble("絶対失敗");
          } else {
            return nil;
          }

          ;
        }, $MetalHead_result_2d6$5.$$arity = 5);
        Opal.def(self, '$rollHit', $MetalHead_rollHit$6 = function $$rollHit(target) {
          var self = this,
              total = nil,
              resultText = nil,
              text = nil;
          total = self.randomizer.$roll_once(100);
          resultText = self.$getHitResult(total, total, target);
          text = "" + "(1D100<=" + target + ") ＞ " + total + resultText;
          return text;
        }, $MetalHead_rollHit$6.$$arity = 1);
        Opal.def(self, '$result_1d100', $MetalHead_result_1d100$7 = function $$result_1d100(_total, dice_total, cmp_op, _target) {
          var self = this;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_le(dice_total, 5))) {
            return $$($nesting, 'Result').$critical("絶対成功");
          } else if ($truthy($rb_ge(dice_total, 96))) {
            return $$($nesting, 'Result').$fumble("絶対失敗");
          } else {
            return nil;
          }

          ;
        }, $MetalHead_result_1d100$7.$$arity = 4);
        Opal.def(self, '$getHitResult', $MetalHead_getHitResult$8 = function $$getHitResult(total_n, _dice_n, diff) {
          var self = this,
              diceValue = nil,
              dice1 = nil;
          diceValue = total_n['$%'](100);
          dice1 = diceValue['$%'](10);
          self.$debug("total_n", total_n);

          if ($truthy($rb_gt(total_n, diff))) {
            return " ＞ 失敗";
          }

          ;

          if (dice1['$=='](1)) {
            return " ＞ 成功（クリティカル）";
          }

          ;

          if (dice1['$=='](0)) {
            return " ＞ 失敗（アクシデント）";
          }

          ;
          return " ＞ 成功";
        }, $MetalHead_getHitResult$8.$$arity = 3);
        Opal.def(self, '$mh_crc_table', $MetalHead_mh_crc_table$9 = function $$mh_crc_table(suv, num) {
          var _$$10,
              self = this,
              header_parts = nil,
              separator = nil,
              numbuf = nil,
              num_d1 = nil,
              table_point = nil,
              table_damage = nil,
              damage_level = nil,
              result_parts = nil;

          header_parts = ["戦闘結果チャート", num];
          separator = " ＞ ";
          suv = suv.$to_s().$upcase();
          numbuf = num.$to_i();

          if ($truthy($rb_lt(numbuf, 1))) {
            return $rb_plus(header_parts, ["数値が不正です"]).$join(separator);
          }

          ;
          num_d1 = numbuf['$%'](10);
          self.$debug("" + "num_d1[" + num_d1 + "]");

          if (num_d1['$=='](1)) {
            numbuf = $rb_plus(numbuf, 1);
          }

          ;

          if (num_d1['$=='](0)) {
            numbuf = $rb_minus(numbuf, 1);
          }

          ;
          num_d1 = numbuf['$%'](10);
          self.$debug("" + "num_d1[" + num_d1 + "]");
          table_point = [nil, nil, "腕部", "腕部", "脚部", "脚部", "胴部", "胴部", "胴部", "頭部"];
          table_damage = $hash2(["S", "A", "B", "C", "D", "E", "F", "G", "M"], {
            "S": [$hash2(["N"], {
              "N": 2
            }), $hash2(["LW"], {
              "LW": 16
            }), $hash2(["MD"], {
              "MD": 46
            }), $hash2(["MW"], {
              "MW": 56
            }), $hash2(["HD"], {
              "HD": 76
            }), $hash2(["HW"], {
              "HW": 96
            }), $hash2(["MO"], {
              "MO": 106
            }), $hash2(["K"], {
              "K": 116
            })],
            "A": [$hash2(["LW"], {
              "LW": 2
            }), $hash2(["MW"], {
              "MW": 46
            }), $hash2(["HW"], {
              "HW": 76
            }), $hash2(["MO"], {
              "MO": 96
            }), $hash2(["K"], {
              "K": 116
            })],
            "B": [$hash2(["LW"], {
              "LW": 2
            }), $hash2(["MW"], {
              "MW": 36
            }), $hash2(["HW"], {
              "HW": 66
            }), $hash2(["MO"], {
              "MO": 96
            }), $hash2(["K"], {
              "K": 106
            })],
            "C": [$hash2(["LW"], {
              "LW": 2
            }), $hash2(["MW"], {
              "MW": 26
            }), $hash2(["HW"], {
              "HW": 66
            }), $hash2(["MO"], {
              "MO": 86
            }), $hash2(["K"], {
              "K": 106
            })],
            "D": [$hash2(["LW"], {
              "LW": 2
            }), $hash2(["MW"], {
              "MW": 26
            }), $hash2(["HW"], {
              "HW": 46
            }), $hash2(["MO"], {
              "MO": 76
            }), $hash2(["K"], {
              "K": 96
            })],
            "E": [$hash2(["LW"], {
              "LW": 2
            }), $hash2(["MW"], {
              "MW": 26
            }), $hash2(["HW"], {
              "HW": 39
            }), $hash2(["MO"], {
              "MO": 54
            }), $hash2(["K"], {
              "K": 76
            })],
            "F": [$hash2(["LW"], {
              "LW": 2
            }), $hash2(["MW"], {
              "MW": 16
            }), $hash2(["HW"], {
              "HW": 39
            }), $hash2(["MO"], {
              "MO": 54
            }), $hash2(["K"], {
              "K": 66
            })],
            "G": [$hash2(["LW"], {
              "LW": 2
            }), $hash2(["MW"], {
              "MW": 6
            }), $hash2(["HW"], {
              "HW": 16
            }), $hash2(["MO"], {
              "MO": 26
            }), $hash2(["K"], {
              "K": 39
            })],
            "M": [$hash2(["0"], {
              "0": 2
            }), $hash2(["1"], {
              "1": 22
            }), $hash2(["2"], {
              "2": 42
            }), $hash2(["3"], {
              "3": 62
            }), $hash2(["4"], {
              "4": 82
            }), $hash2(["5"], {
              "5": 92
            }), $hash2(["6"], {
              "6": 102
            }), $hash2(["8"], {
              "8": 112
            })]
          });

          if ($truthy(table_damage['$[]'](suv)['$nil?']())) {
            return $rb_plus(header_parts, ["" + "耐久レベル(SUV)[" + suv + "]", "耐久レベル(SUV)の値が不正です"]).$join(separator);
          }

          ;
          damage_level = "";
          $send(table_damage['$[]'](suv), 'each', [], (_$$10 = function $$10(v) {
            var self = _$$10.$$s == null ? this : _$$10.$$s,
                _$$9;

            if (v == null) {
              v = nil;
            }

            ;
            return $send(v, 'each', [], (_$$9 = function $$11(d, n) {
              var self = _$$9.$$s == null ? this : _$$9.$$s;

              if (d == null) {
                d = nil;
              }

              ;

              if (n == null) {
                n = nil;
              }

              ;
              self.$debug("" + "suv[" + suv + "] " + v + " " + d + " " + n);

              if ($truthy($rb_le(n, numbuf))) {
                return damage_level = d;
              } else {
                return nil;
              }

              ;
            }, _$$9.$$s = self, _$$9.$$arity = 2, _$$9));
          }, _$$10.$$s = self, _$$10.$$arity = 1, _$$10));
          result_parts = [];

          if ($truthy(numbuf['$!='](num.$to_i()))) {
            result_parts.$push(numbuf.$to_s());
          }

          ;

          if (suv['$==']("M")) {
            result_parts.$push("耐物", "" + "HP[" + damage_level + "]");
          } else {
            result_parts.$push("" + "耐久レベル(SUV)[" + suv + "]", "" + "部位[" + table_point['$[]'](num_d1) + "] ： 損傷種別[" + damage_level + "]");
          }

          ;
          return $rb_plus(header_parts, result_parts).$join(separator);
        }, $MetalHead_mh_crc_table$9.$$arity = 2);
        Opal.const_set($nesting[0], 'TABLE_ROLL_RESULT_FORMATTER', $send(self, 'lambda', [], ($$12 = function (_$$11) {
          function $$12(_x3, _x4) {
            return _$$11.apply(this, arguments);
          }

          $$12.toString = function () {
            return _$$11.toString();
          };

          return $$12;
        }(function (table, result) {
          var self = $$12.$$s == null ? this : $$12.$$s;

          if (table == null) {
            table = nil;
          }

          ;

          if (result == null) {
            result = nil;
          }

          ;
          return [table.$name(), result.$sum(), result.$content()].$join(" ＞ ");
        }), $$12.$$s = self, $$12.$$arity = 2, $$12)));
        return Opal.const_set($nesting[0], 'TABLES', $hash2(["CC", "ACL", "ACS"], {
          "CC": $send($$$($$($nesting, 'DiceTable'), 'RangeTable'), 'new', ["クリティカルチャート", "1D10", [[1, "相手は知覚系に多大なダメージを受けた。PERを1にして頭部にHWのダメージ、および心理チェック。"], [2, "相手の運動神経を断ち切った。DEXを1にして腕部にHWのダメージ、および心理チェック。さらに腕に持っていた武器などは落としてしまう。"], [3, "相手の移動手段は完全に奪われた。REFを1にして脚部にHWダメージと心理チェック。また、次回からのこちらの攻撃は必ず命中する。"], [$range(4, 5, false), "相手の急所に命中。激痛のため気絶した上、胴にHWダメージ。"], [6, "効果的な一撃。胴にHWダメージ。心理チェック。"], [7, "効果的な一撃。胴にMOダメージ。心理チェック。"], [$range(8, 10, false), "君の一撃は相手の中枢を完全に破壊した。即死である。"]]], $$($nesting, 'TABLE_ROLL_RESULT_FORMATTER').$to_proc()),
          "ACL": $send($$$($$($nesting, 'DiceTable'), 'RangeTable'), 'new', ["アクシデントチャート（射撃・投擲）", "1D10", [[$range(1, 7, false), "ささいなミス。特にペナルティーはない。"], [8, "不発、またはジャム。弾を取り出さねばならない物は次のターンは射撃できない。"], [9, "ささいな故障。可能なら次のターンから個別武器のスキルロールで修理を行える。"], [10, "武器の暴発、または爆発。頭部HWの心理効果ロール。さらに、その武器は破壊されPERとDEXのどちらか、または両方に計2ポイントのマイナスを与える。（遠隔操作の場合、射手への被害は無し）"]]], $$($nesting, 'TABLE_ROLL_RESULT_FORMATTER').$to_proc()),
          "ACS": $send($$$($$($nesting, 'DiceTable'), 'RangeTable'), 'new', ["アクシデントチャート（格闘）", "1D10", [[$range(1, 3, false), "足を滑らせて転倒し、起き上がるまで相手に+20の命中修正を与える。"], [$range(4, 6, false), "手を滑らせて、武器を落とす。素手の時は関係ない。"], [$range(7, 9, false), "使用武器の破壊。素手戦闘のときはMWのダメージを受ける。"], [10, "手を滑らせ、不幸にも武器は飛んでいき、5m以内に人がいれば誰かに刺さるか、または打撃を与えるかもしれない。ランダムに決定し、普通どおり判定を続ける。素手のときは関係ない。"]]], $$($nesting, 'TABLE_ROLL_RESULT_FORMATTER').$to_proc())
        }).$freeze());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~MetalHead~index.js.map