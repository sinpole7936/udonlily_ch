(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~MetallicGuardian~index"],{

/***/ "gumb":
/*!************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/MetallicGuardian.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/arithmetic_evaluator"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'ArithmeticEvaluator');
      var $nesting = [self].concat($parent_nesting);

      (function (self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting),
            $eval$1;
        return (Opal.def(self, '$eval', $eval$1 = function $eval$1(expr, $kwargs) {
          var round_type,
              self = this,
              $ret_or_1 = nil;

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          round_type = $kwargs.$$smap["round_type"];

          if (round_type == null) {
            round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
          }

          ;

          if ($truthy(expr)) {} else {
            return 0;
          }

          ;

          if ($truthy($ret_or_1 = $$($nesting, 'Arithmetic').$eval(expr, round_type))) {
            return $ret_or_1;
          } else {
            return 0;
          }

          ;
        }, $eval$1.$$arity = -2), nil) && 'eval';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/SRS"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $hash2 = Opal.hash2;
  self.$require("bcdice/arithmetic_evaluator");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SRS');

        var $nesting = [self].concat($parent_nesting),
            $SRS_initialize$12,
            $SRS_help_message$13,
            _$SRS$,
            $SRS_eval_game_system_specific_command$16,
            $SRS_replace_alias_for_srs_roll_with_2d6$17,
            $SRS_parse$18,
            $SRS_eval_modifier$19,
            $SRS_parse_srs_roll_with_target_value$20,
            $SRS_parse_srs_roll_without_target_value$21,
            $SRS_execute_srs_roll$22,
            $SRS_compare_result$23;

        self.$$prototype.round_type = self.$$prototype.randomizer = self.$$prototype.sort_add_dice = nil;
        Opal.const_set($nesting[0], 'ID', "SRS");
        Opal.const_set($nesting[0], 'NAME', "スタンダードRPGシステム");
        Opal.const_set($nesting[0], 'SORT_KEY', "すたんたあとRPGしすてむ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE_1', "" + "・判定\n" + "　・通常判定：2D6+m>=t[c,f]\n" + "　　修正値m、目標値t、クリティカル値c、ファンブル値fで判定ロールを行います。\n" + "　　修正値、クリティカル値、ファンブル値は省略可能です（[]ごと省略可）。\n" + "　　クリティカル値、ファンブル値の既定値は、それぞれ12、2です。\n" + "　　自動成功、自動失敗、成功、失敗を自動表示します。\n" + "\n" + "　　例) 2d6>=10　　　　　修正値0、目標値10で判定\n" + "　　例) 2d6+2>=10　　　　修正値+2、目標値10で判定\n" + "　　例) 2d6+2>=10[11]　　↑をクリティカル値11で判定\n" + "　　例) 2d6+2>=10[12,4]　↑をクリティカル値12、ファンブル値4で判定\n");
        Opal.const_set($nesting[0], 'HELP_MESSAGE_2', "" + "　・クリティカルおよびファンブルのみの判定：2D6+m[c,f]\n" + "　　目標値を指定せず、修正値m、クリティカル値c、ファンブル値fで判定ロールを行います。\n" + "　　修正値、クリティカル値、ファンブル値は省略可能です（[]は省略不可）。\n" + "　　自動成功、自動失敗を自動表示します。\n" + "\n" + "　　例) 2d6[]　　　　修正値0、クリティカル値12、ファンブル値2で判定\n" + "　　例) 2d6+2[11]　　修正値+2、クリティカル値11、ファンブル値2で判定\n" + "　　例) 2d6+2[12,4]　修正値+2、クリティカル値12、ファンブル値4で判定\n");
        Opal.const_set($nesting[0], 'HELP_MESSAGE_3', "・D66ダイスあり（入れ替えなし)\n");
        Opal.const_set($nesting[0], 'DEFAULT_HELP_MESSAGE', "" + $$($nesting, 'HELP_MESSAGE_1') + "\n" + $$($nesting, 'HELP_MESSAGE_2') + "\n" + $$($nesting, 'HELP_MESSAGE_3'));
        Opal.const_set($nesting[0], 'HELP_MESSAGE', $$($nesting, 'DEFAULT_HELP_MESSAGE'));

        (function ($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');
          var $nesting = [self].concat($parent_nesting),
              $ClassMethods_set_aliases_for_srs_roll$1,
              $ClassMethods_clear_aliases_for_srs_roll$3,
              $ClassMethods_prepare_help_msg_for_aliases_for_srs_roll$4,
              $ClassMethods_concatenate_help_messages$7;
          self.$attr_reader("help_message");
          self.$attr_reader("aliases_re_for_srs_roll_with_target_value");
          self.$attr_reader("aliases_re_for_srs_roll_without_target_value");
          Opal.def(self, '$set_aliases_for_srs_roll', $ClassMethods_set_aliases_for_srs_roll$1 = function $$set_aliases_for_srs_roll($a) {
            var $post_args,
                aliases,
                _$$,
                self = this,
                aliases_upcase = nil,
                aliases_part = nil;

            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            aliases = $post_args;
            ;
            aliases_upcase = $send(aliases, 'map', [], "upcase".$to_proc());
            aliases_part = $send(aliases_upcase, 'map', [], (_$$ = function $$2(a) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (a == null) {
                a = nil;
              }

              ;
              return $$($nesting, 'Regexp').$escape(a);
            }, _$$.$$s = self, _$$.$$arity = 1, _$$)).$join("|");
            self.aliases_re_for_srs_roll_with_target_value = $$($nesting, 'Regexp').$new("" + "^" + ("" + "(?:" + aliases_part + ")") + "((?:[-+][-+\\d]+)?>=\\d+(?:\\[\\d*(?:,\\d+)?\\])?)$");
            self.aliases_re_for_srs_roll_without_target_value = $$($nesting, 'Regexp').$new("" + "^" + ("" + "(?:" + aliases_part + ")") + "([-+][-+\\d]+)?(\\[\\d*(?:,\\d+)?\\])?$");
            self.$prepare_help_msg_for_aliases_for_srs_roll(aliases_upcase);
            self.help_message = self.$concatenate_help_messages();
            return self;
          }, $ClassMethods_set_aliases_for_srs_roll$1.$$arity = -1);
          Opal.def(self, '$clear_aliases_for_srs_roll', $ClassMethods_clear_aliases_for_srs_roll$3 = function $$clear_aliases_for_srs_roll() {
            var self = this;
            self.aliases_re_for_srs_roll_with_target_value = nil;
            self.aliases_re_for_srs_roll_without_target_value = nil;
            self.help_message = $$$($$($nesting, 'SRS'), 'DEFAULT_HELP_MESSAGE');
            return self;
          }, $ClassMethods_clear_aliases_for_srs_roll$3.$$arity = 0);
          self.$private();
          Opal.def(self, '$prepare_help_msg_for_aliases_for_srs_roll', $ClassMethods_prepare_help_msg_for_aliases_for_srs_roll$4 = function $$prepare_help_msg_for_aliases_for_srs_roll(aliases) {
            var _$$2,
                _$$3,
                self = this;

            self.help_msg_for_aliases_for_srs_roll_with_target_value = $send(aliases, 'map', [], (_$$2 = function $$5(a) {
              var self = _$$2.$$s == null ? this : _$$2.$$s;

              if (a == null) {
                a = nil;
              }

              ;
              return "" + "　　例) " + a + "+2>=10　　　　 2d6+2>=10と同じ（" + a + "が2D6のショートカットコマンド）\n";
            }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2)).$join();
            self.help_msg_for_aliases_for_srs_roll_without_target_value = $send(aliases, 'map', [], (_$$3 = function $$6(a) {
              var self = _$$3.$$s == null ? this : _$$3.$$s;

              if (a == null) {
                a = nil;
              }

              ;
              return "" + ("" + "　　例) " + a + "　　　　　 2d6[]と同じ（" + a + "が2D6のショートカットコマンド）\n") + ("" + "　　例) " + a + "+2[12,4]　 2d6+2[12,4]と同じ（" + a + "が2D6のショートカットコマンド）\n");
            }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3)).$join();
            return self;
          }, $ClassMethods_prepare_help_msg_for_aliases_for_srs_roll$4.$$arity = 1);
          Opal.def(self, '$concatenate_help_messages', $ClassMethods_concatenate_help_messages$7 = function $$concatenate_help_messages() {
            var self = this;
            if (self.help_msg_for_aliases_for_srs_roll_with_target_value == null) self.help_msg_for_aliases_for_srs_roll_with_target_value = nil;
            if (self.help_msg_for_aliases_for_srs_roll_without_target_value == null) self.help_msg_for_aliases_for_srs_roll_without_target_value = nil;
            return "" + ("" + $$$($$($nesting, 'SRS'), 'HELP_MESSAGE_1')) + ("" + self.help_msg_for_aliases_for_srs_roll_with_target_value + "\n") + ("" + $$$($$($nesting, 'SRS'), 'HELP_MESSAGE_2')) + ("" + self.help_msg_for_aliases_for_srs_roll_without_target_value + "\n") + ("" + $$$($$($nesting, 'SRS'), 'HELP_MESSAGE_3'));
          }, $ClassMethods_concatenate_help_messages$7.$$arity = 0);
        })($nesting[0], $nesting);

        (function (self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting),
              $inherited$8,
              $help_message$9,
              $aliases_re_for_srs_roll_with_target_value$10,
              $aliases_re_for_srs_roll_without_target_value$11;
          Opal.def(self, '$inherited', $inherited$8 = function $$inherited(subclass) {
            var self = this;
            return subclass.$extend($$($nesting, 'ClassMethods')).$clear_aliases_for_srs_roll();
          }, $inherited$8.$$arity = 1);
          Opal.def(self, '$help_message', $help_message$9 = function $$help_message() {
            var self = this;
            return $$($nesting, 'DEFAULT_HELP_MESSAGE');
          }, $help_message$9.$$arity = 0);
          Opal.def(self, '$aliases_re_for_srs_roll_with_target_value', $aliases_re_for_srs_roll_with_target_value$10 = function $$aliases_re_for_srs_roll_with_target_value() {
            var self = this;
            return nil;
          }, $aliases_re_for_srs_roll_with_target_value$10.$$arity = 0);
          return (Opal.def(self, '$aliases_re_for_srs_roll_without_target_value', $aliases_re_for_srs_roll_without_target_value$11 = function $$aliases_re_for_srs_roll_without_target_value() {
            var self = this;
            return nil;
          }, $aliases_re_for_srs_roll_without_target_value$11.$$arity = 0), nil) && 'aliases_re_for_srs_roll_without_target_value';
        })(Opal.get_singleton_class(self), $nesting);

        self.$register_prefix("2D6");
        Opal.def(self, '$initialize', $SRS_initialize$12 = function $$initialize(command) {
          var $iter = $SRS_initialize$12.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $SRS_initialize$12.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $SRS_initialize$12, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'NO_SORT');
        }, $SRS_initialize$12.$$arity = 1);
        Opal.def(self, '$help_message', $SRS_help_message$13 = function $$help_message() {
          var self = this;
          return self.$class().$help_message();
        }, $SRS_help_message$13.$$arity = 0);
        Opal.const_set($nesting[0], 'DEFAULT_CRITICAL_VALUE', 12);
        Opal.const_set($nesting[0], 'DEFAULT_FUMBLE_VALUE', 2);
        Opal.const_set($nesting[0], 'SRS_ROLL_WITH_TARGET_VALUE_RE', /^2D6([-+][-+\d]+)?>=(\d+)(?:\[(\d+)?(?:,(\d+))?\])?$/.$freeze());
        Opal.const_set($nesting[0], 'SRS_ROLL_WITHOUT_TARGET_VALUE_RE', /^2D6([-+][-+\d]+)?\[(\d+)?(?:,(\d+))?\]$/.$freeze());
        Opal.const_set($nesting[0], 'SRS_ROLL_DEFAULT_THRESHOLDS', "" + "[" + $$($nesting, 'DEFAULT_CRITICAL_VALUE') + "," + $$($nesting, 'DEFAULT_FUMBLE_VALUE') + "]");
        Opal.const_set($nesting[0], 'SRSRollNode', $send($$($nesting, 'Struct'), 'new', ["modifier", "critical_value", "fumble_value", "target_value"], (_$SRS$ = function $SRS$14() {
          var self = _$SRS$.$$s == null ? this : _$SRS$.$$s,
              $to_s$15;
          return (Opal.def(self, '$to_s', $to_s$15 = function $$to_s() {
            var self = this,
                lhs = nil,
                expression = nil;
            lhs = "" + "2D6" + $$($nesting, 'Format').$modifier(self.$modifier());

            expression = function () {
              if ($truthy(self.$target_value())) {
                return "" + lhs + ">=" + self.$target_value();
              } else {
                return lhs;
              }

              ;
              return nil;
            }();

            return "" + expression + "[" + self.$critical_value() + "," + self.$fumble_value() + "]";
          }, $to_s$15.$$arity = 0), nil) && 'to_s';
        }, _$SRS$.$$s = self, _$SRS$.$$arity = 0, _$SRS$)));
        Opal.def(self, '$eval_game_system_specific_command', $SRS_eval_game_system_specific_command$16 = function $$eval_game_system_specific_command(command) {
          var self = this,
              alias_replaced_with_2d6 = nil,
              node = nil;
          alias_replaced_with_2d6 = self.$replace_alias_for_srs_roll_with_2d6(command);

          if ($truthy(node = self.$parse(alias_replaced_with_2d6))) {
            return self.$execute_srs_roll(node);
          }

          ;
          return nil;
        }, $SRS_eval_game_system_specific_command$16.$$arity = 1);
        self.$private();
        Opal.def(self, '$replace_alias_for_srs_roll_with_2d6', $SRS_replace_alias_for_srs_roll_with_2d6$17 = function $$replace_alias_for_srs_roll_with_2d6(input) {
          var self = this,
              $case = nil,
              modifier = nil,
              thresholds = nil,
              $ret_or_1 = nil;
          return function () {
            $case = input;

            if (self.$class().$aliases_re_for_srs_roll_with_target_value()['$===']($case)) {
              return "" + "2D6" + $$($nesting, 'Regexp').$last_match(1);
            } else if (self.$class().$aliases_re_for_srs_roll_without_target_value()['$===']($case)) {
              modifier = $$($nesting, 'Regexp').$last_match(1);

              thresholds = function () {
                if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(2))) {
                  return $ret_or_1;
                } else {
                  return $$($nesting, 'SRS_ROLL_DEFAULT_THRESHOLDS');
                }

                ;
                return nil;
              }();

              return "" + "2D6" + modifier + thresholds;
            } else {
              return input;
            }
          }();
        }, $SRS_replace_alias_for_srs_roll_with_2d6$17.$$arity = 1);
        Opal.def(self, '$parse', $SRS_parse$18 = function $$parse(command) {
          var self = this,
              $case = nil;
          return function () {
            $case = command;

            if ($$($nesting, 'SRS_ROLL_WITH_TARGET_VALUE_RE')['$===']($case)) {
              return self.$parse_srs_roll_with_target_value($$($nesting, 'Regexp').$last_match());
            } else if ($$($nesting, 'SRS_ROLL_WITHOUT_TARGET_VALUE_RE')['$===']($case)) {
              return self.$parse_srs_roll_without_target_value($$($nesting, 'Regexp').$last_match());
            } else {
              return nil;
            }
          }();
        }, $SRS_parse$18.$$arity = 1);
        Opal.def(self, '$eval_modifier', $SRS_eval_modifier$19 = function $$eval_modifier(modifier_str) {
          var self = this;

          if ($truthy(modifier_str)) {} else {
            return 0;
          }

          ;
          return $$($nesting, 'ArithmeticEvaluator').$eval(modifier_str, $hash2(["round_type"], {
            "round_type": self.round_type
          }));
        }, $SRS_eval_modifier$19.$$arity = 1);
        Opal.def(self, '$parse_srs_roll_with_target_value', $SRS_parse_srs_roll_with_target_value$20 = function $$parse_srs_roll_with_target_value(m) {
          var $a,
              $b,
              self = this,
              modifier = nil,
              target_value = nil,
              critical_value = nil,
              $ret_or_2 = nil,
              fumble_value = nil,
              $ret_or_3 = nil;
          modifier = self.$eval_modifier(m['$[]'](1));
          target_value = m['$[]'](2).$to_i();

          critical_value = function () {
            if ($truthy($ret_or_2 = ($a = m['$[]'](3), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_2;
            } else {
              return $$($nesting, 'DEFAULT_CRITICAL_VALUE');
            }

            ;
            return nil;
          }();

          fumble_value = function () {
            if ($truthy($ret_or_3 = ($b = m['$[]'](4), $b === nil || $b == null ? nil : $send($b, 'to_i', [])))) {
              return $ret_or_3;
            } else {
              return $$($nesting, 'DEFAULT_FUMBLE_VALUE');
            }

            ;
            return nil;
          }();

          return $$($nesting, 'SRSRollNode').$new(modifier, critical_value, fumble_value, target_value);
        }, $SRS_parse_srs_roll_with_target_value$20.$$arity = 1);
        Opal.def(self, '$parse_srs_roll_without_target_value', $SRS_parse_srs_roll_without_target_value$21 = function $$parse_srs_roll_without_target_value(m) {
          var $a,
              $b,
              self = this,
              modifier = nil,
              critical_value = nil,
              $ret_or_4 = nil,
              fumble_value = nil,
              $ret_or_5 = nil;
          modifier = self.$eval_modifier(m['$[]'](1));

          critical_value = function () {
            if ($truthy($ret_or_4 = ($a = m['$[]'](2), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_4;
            } else {
              return $$($nesting, 'DEFAULT_CRITICAL_VALUE');
            }

            ;
            return nil;
          }();

          fumble_value = function () {
            if ($truthy($ret_or_5 = ($b = m['$[]'](3), $b === nil || $b == null ? nil : $send($b, 'to_i', [])))) {
              return $ret_or_5;
            } else {
              return $$($nesting, 'DEFAULT_FUMBLE_VALUE');
            }

            ;
            return nil;
          }();

          return $$($nesting, 'SRSRollNode').$new(modifier, critical_value, fumble_value, nil);
        }, $SRS_parse_srs_roll_without_target_value$21.$$arity = 1);
        Opal.def(self, '$execute_srs_roll', $SRS_execute_srs_roll$22 = function $$execute_srs_roll(srs_roll) {
          var self = this,
              dice_list = nil,
              sum = nil,
              dice_str = nil,
              modified_sum = nil,
              parts = nil;
          dice_list = self.randomizer.$roll_barabara(2, 6);

          if ($truthy(self.sort_add_dice)) {
            dice_list['$sort!']();
          }

          ;
          sum = dice_list.$sum();
          dice_str = dice_list.$join(",");
          modified_sum = $rb_plus(sum, srs_roll.$modifier());
          parts = ["" + "(" + srs_roll + ")", "" + sum + "[" + dice_str + "]" + $$($nesting, 'Format').$modifier(srs_roll.$modifier()), modified_sum, self.$compare_result(srs_roll, sum, modified_sum)];
          return parts.$compact().$join(" ＞ ");
        }, $SRS_execute_srs_roll$22.$$arity = 1);
        return (Opal.def(self, '$compare_result', $SRS_compare_result$23 = function $$compare_result(srs_roll, sum, modified_sum) {
          var self = this;

          if ($truthy($rb_ge(sum, srs_roll.$critical_value()))) {
            return "自動成功";
          }

          ;

          if ($truthy($rb_le(sum, srs_roll.$fumble_value()))) {
            return "自動失敗";
          }

          ;

          if ($truthy(srs_roll.$target_value())) {
            return function () {
              if ($truthy($rb_ge(modified_sum, srs_roll.$target_value()))) {
                return "成功";
              } else {
                return "失敗";
              }

              ;
              return nil;
            }();
          }

          ;
          return nil;
        }, $SRS_compare_result$23.$$arity = 3), nil) && 'compare_result';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass;
  self.$require("bcdice/game_system/SRS");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MetallicGuardian');
        var $nesting = [self].concat($parent_nesting);
        self.$register_prefix("2D6", "MG");
        self.$set_aliases_for_srs_roll("MG");
        Opal.const_set($nesting[0], 'NAME', "メタリックガーディアンRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "めたりつくかあていあんRPG");
        Opal.const_set($nesting[0], 'ID', "MetallicGuardian");
        return Opal.const_set($nesting[0], 'HELP_MESSAGE', self.$help_message());
      })($nesting[0], $$($nesting, 'SRS'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~MetallicGuardian~index.js.map