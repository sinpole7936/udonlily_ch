(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~MonotoneMuseum~index"],{

/***/ "9Ub2":
/*!**********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/MonotoneMuseum.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Table');
        var $nesting = [self].concat($parent_nesting),
            $Table_from_i18n$1,
            $Table_initialize$2,
            $Table_roll$3,
            $Table_choice$4;
        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $Table_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale"], {
            "locale": locale
          }));
          return self.$new(table['$[]']("name"), table['$[]']("type"), table['$[]']("items"));
        }, $Table_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $Table_initialize$2 = function $$initialize(name, type, items) {
          var self = this,
              m = nil;
          self.name = name;
          self.items = items.$freeze();
          m = /(\d+)D(\d+)/i.$match(type);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
          }

          ;
          self.times = m['$[]'](1).$to_i();
          return self.sides = m['$[]'](2).$to_i();
        }, $Table_initialize$2.$$arity = 3);
        Opal.def(self, '$roll', $Table_roll$3 = function $$roll(bcdice) {
          var self = this,
              value = nil;
          value = bcdice.$roll_sum(self.times, self.sides);
          return self.$choice(value);
        }, $Table_roll$3.$$arity = 1);
        return (Opal.def(self, '$choice', $Table_choice$4 = function $$choice(value) {
          var self = this,
              index = nil;
          index = $rb_minus(value, self.times);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index));
        }, $Table_choice$4.$$arity = 1), nil) && 'choice';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_range_table"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66RangeTable');
        var $nesting = [self].concat($parent_nesting),
            $D66RangeTable_initialize$1,
            $D66RangeTable_roll$2;
        self.$$prototype.items = self.$$prototype.name = nil;
        Opal.def(self, '$initialize', $D66RangeTable_initialize$1 = function $$initialize(name, items) {
          var self = this;
          self.name = name;
          return self.items = items.$freeze();
        }, $D66RangeTable_initialize$1.$$arity = 2);
        return (Opal.def(self, '$roll', $D66RangeTable_roll$2 = function $$roll(randomizer) {
          var _$$,
              self = this,
              dice1 = nil,
              dice2 = nil,
              key = nil,
              chosen = nil;

          dice1 = randomizer.$roll_once(6);
          dice2 = randomizer.$roll_once(6);
          key = $rb_plus($rb_times(dice1, 10), dice2);
          chosen = $send(self.items, 'find', [], (_$$ = function $$3(row) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (row == null) {
              row = nil;
            }

            ;
            return row['$[]'](0)['$include?'](key);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          return $$($nesting, 'RollResult').$new(self.name, key, chosen['$[]'](1));
        }, $D66RangeTable_roll$2.$$arity = 1), nil) && 'roll';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_grid_table"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66GridTable');
        var $nesting = [self].concat($parent_nesting),
            $D66GridTable_from_i18n$1,
            $D66GridTable_initialize$2,
            $D66GridTable_roll$3;
        self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $D66GridTable_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale", "raise"], {
            "locale": locale,
            "raise": true
          }));
          return self.$new(table['$[]']("name"), table['$[]']("items"));
        }, $D66GridTable_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $D66GridTable_initialize$2 = function $$initialize(name, items) {
          var self = this;
          self.name = name;
          return self.items = items.$freeze();
        }, $D66GridTable_initialize$2.$$arity = 2);
        return (Opal.def(self, '$roll', $D66GridTable_roll$3 = function $$roll(randomizer) {
          var self = this,
              dice1 = nil,
              dice2 = nil,
              value = nil,
              index1 = nil,
              index2 = nil;
          dice1 = randomizer.$roll_once(6);
          dice2 = randomizer.$roll_once(6);
          value = $rb_plus($rb_times(dice1, 10), dice2);
          index1 = $rb_minus(dice1, 1);
          index2 = $rb_minus(dice2, 1);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index1)['$[]'](index2));
        }, $D66GridTable_roll$3.$$arity = 1), nil) && 'roll';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/format"] = function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Format');
      var $nesting = [self].concat($parent_nesting),
          $Format_comparison_operator$1,
          $Format_modifier$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if ("=="['$===']($case)) {
            return "=";
          } else if ("!="['$===']($case)) {
            return "<>";
          } else if ($$($nesting, 'Symbol')['$===']($case)) {
            return op.$to_s();
          } else {
            return nil;
          }
        }();
      }, $Format_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {
        var self = this;

        if ($truthy(number['$nil?']())) {
          return nil;
        } else if (number['$=='](0)) {
          return "";
        } else if ($truthy($rb_gt(number, 0))) {
          return "" + "+" + number;
        } else {
          return number.$to_s();
        }
      }, $Format_modifier$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2,
      $range = Opal.range;
  self.$require("bcdice/dice_table/table");
  self.$require("bcdice/dice_table/d66_range_table");
  self.$require("bcdice/dice_table/d66_grid_table");
  self.$require("bcdice/format");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MonotoneMuseum');
        var $nesting = [self].concat($parent_nesting),
            $MonotoneMuseum_initialize$1,
            $MonotoneMuseum_eval_game_system_specific_command$2,
            $MonotoneMuseum_check_roll$3;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "MonotoneMuseum");
        Opal.const_set($nesting[0], 'NAME', "モノトーンミュージアムRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "ものとおんみゆうしあむRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定\n" + "　・通常判定　　　　　　2D6+m>=t[c,f]\n" + "　　修正値m,目標値t,クリティカル値c,ファンブル値fで判定ロールを行います。\n" + "　　クリティカル値、ファンブル値は省略可能です。([]ごと省略できます)\n" + "　　自動成功、自動失敗、成功、失敗を自動表示します。\n" + "・各種表\n" + "　・感情表　ET／感情表 2.0　ET2\n" + "　・兆候表　OT／兆候表ver2.0　OT2／兆候表ver3.0　OT3\n" + "　・歪み表　DT／歪み表ver2.0　DT2／歪み表(野外)　DTO／歪み表(海)　DTS／歪み表(館・城)　DTM\n" + "　・世界歪曲表　WDT／世界歪曲表2.0　WDT2\n" + "　・永劫消失表　EDT\n" + "・D66ダイスあり\n");
        Opal.def(self, '$initialize', $MonotoneMuseum_initialize$1 = function $$initialize(command) {
          var $iter = $MonotoneMuseum_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $MonotoneMuseum_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $MonotoneMuseum_initialize$1, false, true), 'initialize', [command], null);
          self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'NO_SORT');
          return self.sort_add_dice = true;
        }, $MonotoneMuseum_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $MonotoneMuseum_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              ret = nil;

          if ($truthy(ret = self.$check_roll(command))) {
            return ret;
          }

          ;
          return self.$roll_tables(command, $$$(self.$class(), 'TABLES'));
        }, $MonotoneMuseum_eval_game_system_specific_command$2.$$arity = 1);
        self.$private();
        Opal.def(self, '$check_roll', $MonotoneMuseum_check_roll$3 = function $$check_roll(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              dice_count = nil,
              modify_number = nil,
              target = nil,
              critical = nil,
              $ret_or_1 = nil,
              fumble = nil,
              $ret_or_2 = nil,
              dice_list = nil,
              dice_value = nil,
              dice_str = nil,
              total = nil,
              result = nil,
              sequence = nil,
              $writer = nil;
          m = /^(\d+)D6([+\-\d]*)>=(\d+)(\[(\d+)?(,(\d+))?\])?$/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          dice_count = m['$[]'](1).$to_i();

          modify_number = function () {
            if ($truthy(m['$[]'](2))) {
              return $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2));
            } else {
              return 0;
            }

            ;
            return nil;
          }();

          target = m['$[]'](3).$to_i();

          critical = function () {
            if ($truthy($ret_or_1 = ($a = m['$[]'](5), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_1;
            } else {
              return 12;
            }

            ;
            return nil;
          }();

          fumble = function () {
            if ($truthy($ret_or_2 = ($b = m['$[]'](7), $b === nil || $b == null ? nil : $send($b, 'to_i', [])))) {
              return $ret_or_2;
            } else {
              return 2;
            }

            ;
            return nil;
          }();

          dice_list = self.randomizer.$roll_barabara(dice_count, 6).$sort();
          dice_value = dice_list.$sum();
          dice_str = dice_list.$join(",");
          total = $rb_plus(dice_value, modify_number);

          result = function () {
            if ($truthy($rb_le(dice_value, fumble))) {
              return $$($nesting, 'Result').$fumble(self.$translate("MonotoneMuseum.automatic_failure"));
            } else if ($truthy($rb_ge(dice_value, critical))) {
              return $$($nesting, 'Result').$critical(self.$translate("MonotoneMuseum.automatic_success"));
            } else if ($truthy($rb_ge(total, target))) {
              return $$($nesting, 'Result').$success(self.$translate("success"));
            } else {
              return $$($nesting, 'Result').$failure(self.$translate("failure"));
            }

            ;
            return nil;
          }();

          sequence = ["" + "(" + command + ")", "" + dice_value + "[" + dice_str + "]" + $$($nesting, 'Format').$modifier(modify_number), total.$to_s(), result.$text()];
          $writer = [sequence.$join(" ＞ ")];
          $send(result, 'text=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $MonotoneMuseum_check_roll$3.$$arity = 1);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'MMTable');
          var $nesting = [self].concat($parent_nesting),
              $MMTable_from_i18n$4,
              $MMTable_initialize$5;
          Opal.defs(self, '$from_i18n', $MMTable_from_i18n$4 = function $$from_i18n(key, locale) {
            var self = this,
                table = nil;
            table = $$($nesting, 'I18n').$translate(key, $hash2(["locale", "raise"], {
              "locale": locale,
              "raise": true
            }));
            return self.$new(table['$[]']("name"), table['$[]']("items"));
          }, $MMTable_from_i18n$4.$$arity = 2);
          Opal.def(self, '$initialize', $MMTable_initialize$5 = function $$initialize(name, items) {
            var $iter = $MMTable_initialize$5.$$p,
                $yield = $iter || nil,
                self = this,
                items_with_range = nil;
            if ($iter) $MMTable_initialize$5.$$p = null;

            if ($truthy(items.$size()['$!=']($$($nesting, 'RANGE').$size()))) {
              self.$raise($$($nesting, 'UnexpectedTableSize').$new(name, items.$size()));
            }

            ;
            items_with_range = $$($nesting, 'RANGE').$zip(items);
            return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $MMTable_initialize$5, false, true), 'initialize', [name, items_with_range], null);
          }, $MMTable_initialize$5.$$arity = 2);
          return Opal.const_set($nesting[0], 'RANGE', [$range(11, 12, false), $range(13, 14, false), $range(15, 16, false), $range(21, 22, false), $range(23, 24, false), $range(25, 26, false), $range(31, 32, false), $range(33, 34, false), $range(35, 36, false), $range(41, 42, false), $range(43, 44, false), $range(45, 46, false), $range(51, 52, false), $range(53, 54, false), $range(55, 56, false), $range(61, 62, false), $range(63, 64, false), $range(65, 66, false)].$freeze());
        })($nesting[0], $$$($$($nesting, 'DiceTable'), 'D66RangeTable'), $nesting);

        (function (self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting),
              $translate_tables$6;
          self.$private();
          return (Opal.def(self, '$translate_tables', $translate_tables$6 = function $$translate_tables(locale) {
            var self = this;
            return $hash2(["ET", "ET2", "OT", "DT", "DT2", "WDT", "WDT2", "OT2", "DTO", "DTS", "EDT", "DTM", "OT3"], {
              "ET": $$$($$($nesting, 'DiceTable'), 'D66GridTable').$from_i18n("MonotoneMuseum.table.ET", locale),
              "ET2": $$$($$($nesting, 'DiceTable'), 'D66GridTable').$from_i18n("MonotoneMuseum.table.ET2", locale),
              "OT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("MonotoneMuseum.table.OT", locale),
              "DT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("MonotoneMuseum.table.DT", locale),
              "DT2": $$($nesting, 'MMTable').$from_i18n("MonotoneMuseum.table.DT2", locale),
              "WDT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("MonotoneMuseum.table.WDT", locale),
              "WDT2": $$($nesting, 'MMTable').$from_i18n("MonotoneMuseum.table.WDT2", locale),
              "OT2": $$($nesting, 'MMTable').$from_i18n("MonotoneMuseum.table.OT2", locale),
              "DTO": $$($nesting, 'MMTable').$from_i18n("MonotoneMuseum.table.DTO", locale),
              "DTS": $$($nesting, 'MMTable').$from_i18n("MonotoneMuseum.table.DTS", locale),
              "EDT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("MonotoneMuseum.table.EDT", locale),
              "DTM": $$($nesting, 'MMTable').$from_i18n("MonotoneMuseum.table.DTM", locale),
              "OT3": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("MonotoneMuseum.table.OT3", locale)
            });
          }, $translate_tables$6.$$arity = 1), nil) && 'translate_tables';
        })(Opal.get_singleton_class(self), $nesting);

        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ja_jp").$freeze());
        return self.$register_prefix("\\d+D6", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~MonotoneMuseum~index.js.map