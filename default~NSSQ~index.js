(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~NSSQ~index"],{

/***/ "BM3h":
/*!************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/NSSQ.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NSSQ');
        var $nesting = [self].concat($parent_nesting),
            $NSSQ_eval_game_system_specific_command$1,
            $NSSQ_roll_sq$2,
            $NSSQ_damage_roll$3,
            $NSSQ_additional_damage_roll$4,
            $NSSQ_heal_roll$5,
            $NSSQ_damage$6,
            $NSSQ_collecting_roll$8,
            $NSSQ_result_collecting$10;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "NSSQ");
        Opal.const_set($nesting[0], 'NAME', "SRSじゃない世界樹の迷宮TRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "えすああるえすしやないせかいしゆのめいきゆうTRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "■ 判定 (xSQ±y)\n" + "  xD6の判定。3つ以上振ったとき、出目の高い2つを表示します。クリティカル、ファンブルも計算します。\n" + "  ±y: yに修正値を入力。±の計算に対応。省略可能。\n" + "\n" + "■ ダメージロール (xDR(C)(+)y)\n" + "  xD6のダメージロール。クリティカルの自動判定を行います。Cを付けるとクリティカルアップ状態で計算できます。+を付けるとクリティカル時のダイスが8個になります。\n" + "  x: xに振るダイス数を入力。\n" + "  y: yに耐性を入力。\n" + "  例) 5DR3 5DRC4 5DRC+4\n" + "\n" + "■ 回復ロール (xHRy)\n" + "  xD6の回復ロール。クリティカルが発生しません。\n" + "  x: xに振るダイス数を入力。\n" + "  y: yに耐性を入力。省略した場合3。\n" + "  例) 2HR 10HR2\n" + "\n" + "■ 採取ロール (TC±z,SC±z,GC±z)\n" + "  ちょっと(T)、そこそこ(S)、がっつり(G)採取採掘伐採を行う。\n" + "  z: zに追加でロールする回数を入力。省略可能。\n" + "  例) TC SC+1 GC-1\n");
        self.$register_prefix("\\d+SQ[\\+\\-\\d]*", "\\d+DR(C)?(\\+)?\\d+", "[TSG]C", "\\d+HR\\d*");
        Opal.def(self, '$eval_game_system_specific_command', $NSSQ_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $ret_or_1 = nil,
              $ret_or_2 = nil,
              $ret_or_3 = nil;

          if ($truthy($ret_or_1 = function () {
            if ($truthy($ret_or_2 = function () {
              if ($truthy($ret_or_3 = self.$roll_sq(command))) {
                return $ret_or_3;
              } else {
                return self.$damage_roll(command);
              }

              ;
              return nil;
            }())) {
              return $ret_or_2;
            } else {
              return self.$heal_roll(command);
            }

            ;
            return nil;
          }())) {
            return $ret_or_1;
          } else {
            return self.$collecting_roll(command);
          }
        }, $NSSQ_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$roll_sq', $NSSQ_roll_sq$2 = function $$roll_sq(command) {
          var self = this,
              m = nil,
              dice_count = nil,
              modifier = nil,
              dice_list = nil,
              largest_two = nil,
              total = nil,
              additional_result = nil,
              sequence = nil;
          m = /(\d+)SQ([+\-\d]+)?/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          dice_count = m['$[]'](1).$to_i();
          modifier = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2));
          dice_list = self.randomizer.$roll_barabara(dice_count, 6);
          largest_two = dice_list.$sort().$reverse().$take(2);
          total = $rb_plus(largest_two.$sum(), modifier);

          additional_result = function () {
            if (largest_two['$==']([6, 6])) {
              return " クリティカル！";
            } else if (largest_two['$==']([1, 1])) {
              return " ファンブル！";
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          sequence = ["" + "(" + command + ")", "" + "[" + dice_list.$join(",") + "]" + $$($nesting, 'Format').$modifier(modifier), "" + total + "[" + largest_two.$join(",") + "]" + additional_result];
          return sequence.$join(" ＞ ");
        }, $NSSQ_roll_sq$2.$$arity = 1);
        Opal.def(self, '$damage_roll', $NSSQ_damage_roll$3 = function $$damage_roll(command) {
          var self = this,
              m = nil,
              dice_count = nil,
              critical_up = nil,
              increase_critical_dice = nil,
              resist = nil,
              dice_list = nil,
              result = nil,
              critical_target = nil;
          m = /(\d+)DR(C)?(\+)?(\d+)/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          dice_count = m['$[]'](1).$to_i();
          critical_up = m['$[]'](2)['$nil?']()['$!']();
          increase_critical_dice = m['$[]'](3)['$nil?']()['$!']();
          resist = m['$[]'](4).$to_i();
          dice_list = self.randomizer.$roll_barabara(dice_count, 6);
          result = "" + "(" + command + ") ＞ [" + dice_list.$join(",") + "]" + resist + " ＞ " + self.$damage(dice_list, resist) + "ダメージ";

          critical_target = function () {
            if ($truthy(critical_up)) {
              return 1;
            } else {
              return 2;
            }

            ;
            return nil;
          }();

          if ($truthy($rb_ge($rb_minus(dice_list.$count(6), dice_list.$count(1)), critical_target))) {
            result = $rb_plus(result, " クリティカル！\n");
            result = $rb_plus(result, self.$additional_damage_roll(increase_critical_dice, resist));
          }

          ;
          return result;
        }, $NSSQ_damage_roll$3.$$arity = 1);
        Opal.def(self, '$additional_damage_roll', $NSSQ_additional_damage_roll$4 = function $$additional_damage_roll(increase_critical_dice, resist) {
          var self = this,
              dice_count = nil,
              dice_list = nil;

          dice_count = function () {
            if ($truthy(increase_critical_dice)) {
              return 8;
            } else {
              return 4;
            }

            ;
            return nil;
          }();

          dice_list = self.randomizer.$roll_barabara(dice_count, 6);
          return "" + "(" + dice_count + "DR" + resist + ") ＞ [" + dice_list.$join(",") + "]" + resist + " ＞ " + self.$damage(dice_list, resist) + "ダメージ";
        }, $NSSQ_additional_damage_roll$4.$$arity = 2);
        Opal.def(self, '$heal_roll', $NSSQ_heal_roll$5 = function $$heal_roll(command) {
          var $a,
              self = this,
              m = nil,
              dice_count = nil,
              resist = nil,
              $ret_or_4 = nil,
              dice_list = nil;
          m = /^(\d+)HR(\d+)?$/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          dice_count = m['$[]'](1).$to_i();

          resist = function () {
            if ($truthy($ret_or_4 = ($a = m['$[]'](2), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_4;
            } else {
              return 3;
            }

            ;
            return nil;
          }();

          dice_list = self.randomizer.$roll_barabara(dice_count, 6);
          return "" + "(" + command + ") ＞ [" + dice_list.$join(",") + "]" + resist + " ＞ " + self.$damage(dice_list, resist) + "回復";
        }, $NSSQ_heal_roll$5.$$arity = 1);
        Opal.def(self, '$damage', $NSSQ_damage$6 = function $$damage(dice_list, resist) {
          var _$$,
              self = this;

          return $send(dice_list, 'count', [], (_$$ = function $$7(x) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (x == null) {
              x = nil;
            }

            ;
            return $rb_gt(x, resist);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
        }, $NSSQ_damage$6.$$arity = 2);
        Opal.def(self, '$collecting_roll', $NSSQ_collecting_roll$8 = function $$collecting_roll(command) {
          var _$$2,
              self = this,
              m = nil,
              type = nil,
              modifier = nil,
              aatto_param = nil,
              $case = nil,
              roll_times = nil,
              results = nil;

          m = /([TSG])C([+\-\d]+)?/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          type = m['$[]'](1);
          modifier = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2));

          aatto_param = function () {
            $case = type;

            if ("T"['$===']($case)) {
              return 3;
            } else if ("S"['$===']($case)) {
              return 4;
            } else if ("G"['$===']($case)) {
              return 5;
            } else {
              return nil;
            }
          }();

          roll_times = $rb_plus($rb_minus(aatto_param, 2), modifier);

          if ($truthy($rb_le(roll_times, 0))) {
            return nil;
          }

          ;
          results = $send($$($nesting, 'Array'), 'new', [roll_times], (_$$2 = function $$9(i) {
            var self = _$$2.$$s == null ? this : _$$2.$$s,
                dice_list = nil,
                dice = nil;
            if (self.randomizer == null) self.randomizer = nil;

            if (i == null) {
              i = nil;
            }

            ;
            dice_list = self.randomizer.$roll_barabara(2, 6);
            dice = dice_list.$sum();
            return "" + "(" + command + ") ＞ " + dice + "[" + dice_list.$join(",") + "]: " + self.$result_collecting(i, dice, aatto_param);
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          return results.$join("\n");
        }, $NSSQ_collecting_roll$8.$$arity = 1);
        return (Opal.def(self, '$result_collecting', $NSSQ_result_collecting$10 = function $$result_collecting(i, dice, aatto) {
          var self = this,
              $ret_or_5 = nil;

          if ($truthy(function () {
            if ($truthy($ret_or_5 = $rb_le(dice, aatto))) {
              return $rb_gt($rb_minus(aatto, 2), i);
            } else {
              return $ret_or_5;
            }

            ;
            return nil;
          }())) {
            return "！ああっと！";
          } else if ($truthy($rb_le($rb_minus(aatto, 2), i))) {
            return "成功（追加分）";
          } else {
            return "成功";
          }
        }, $NSSQ_result_collecting$10.$$arity = 3), nil) && 'result_collecting';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~NSSQ~index.js.map