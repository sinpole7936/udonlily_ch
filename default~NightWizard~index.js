(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~NightWizard~index"],{

/***/ "Cpab":
/*!*******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/NightWizard.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/normalize"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Normalize');
      var $nesting = [self].concat($parent_nesting),
          $Normalize_comparison_operator$1,
          $Normalize_target_number$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if (/<=|=</['$===']($case)) {
            return "<=";
          } else if (/>=|=>/['$===']($case)) {
            return ">=";
          } else if (/<>|!=|=!/['$===']($case)) {
            return "!=";
          } else if (/</['$===']($case)) {
            return "<";
          } else if (/>/['$===']($case)) {
            return ">";
          } else if (/=/['$===']($case)) {
            return "==";
          } else {
            return nil;
          }
        }();
      }, $Normalize_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
        var self = this;

        if (val['$==']("?")) {
          return val;
        } else {
          return val.$to_i();
        }
      }, $Normalize_target_number$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/format"] = function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Format');
      var $nesting = [self].concat($parent_nesting),
          $Format_comparison_operator$1,
          $Format_modifier$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if ("=="['$===']($case)) {
            return "=";
          } else if ("!="['$===']($case)) {
            return "<>";
          } else if ($$($nesting, 'Symbol')['$===']($case)) {
            return op.$to_s();
          } else {
            return nil;
          }
        }();
      }, $Format_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {
        var self = this;

        if ($truthy(number['$nil?']())) {
          return nil;
        } else if (number['$=='](0)) {
          return "";
        } else if ($truthy($rb_gt(number, 0))) {
          return "" + "+" + number;
        } else {
          return number.$to_s();
        }
      }, $Format_modifier$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  self.$require("bcdice/normalize");
  self.$require("bcdice/format");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NightWizard');
        var $nesting = [self].concat($parent_nesting),
            $NightWizard_initialize$1,
            $NightWizard_eval_game_system_specific_command$2,
            $NightWizard_parse_nw$7,
            $NightWizard_parse_2r6$8,
            $NightWizard_roll_nw$9,
            $NightWizard_roll_once$10,
            $NightWizard_roll_once_first$11,
            $NightWizard_fumble_base_number$12;
        self.$$prototype.nw_command = self.$$prototype.randomizer = self.$$prototype.total = self.$$prototype.interim_expr = self.$$prototype.status = self.$$prototype.fumble_numbers = self.$$prototype.critical_numbers = nil;
        Opal.const_set($nesting[0], 'ID', "NightWizard");
        Opal.const_set($nesting[0], 'NAME', "ナイトウィザード The 2nd Edition");
        Opal.const_set($nesting[0], 'SORT_KEY', "ないとういさあと2");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定用コマンド　(aNW+b@x#y$z+c)\n" + "　　a : 基本値\n" + "　　b : 常時に準じる特技による補正\n" + "　　c : 常時以外の特技、および支援効果による補正（ファンブル時には適用されない）\n" + "　　x : クリティカル値のカンマ区切り（省略時 10）\n" + "　　y : ファンブル値のカンマ区切り（省略時 5）\n" + "　　z : プラーナによる達成値補正のプラーナ消費数（ファンブル時には適用されない）\n" + "　クリティカル値、ファンブル値が無い場合は1や13などのあり得ない数値を入れてください。\n" + "　例）12NW-5@7#2$3 1NW 50nw+5@7,10#2,5 50nw-5+10@7,10#2,5+15+25\n");
        self.$register_prefix("([-+]?\\d+)?NW", "2R6");
        Opal.def(self, '$initialize', $NightWizard_initialize$1 = function $$initialize(command) {
          var $iter = $NightWizard_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $NightWizard_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $NightWizard_initialize$1, false, true), 'initialize', [command], null);
          return self.nw_command = "NW";
        }, $NightWizard_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $NightWizard_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(string) {
          var $a,
              $b,
              self = this,
              cmd = nil,
              $ret_or_1 = nil,
              total = nil,
              interim_expr = nil,
              status = nil,
              result = nil,
              sequence = nil;

          cmd = function () {
            if ($truthy($ret_or_1 = self.$parse_nw(string))) {
              return $ret_or_1;
            } else {
              return self.$parse_2r6(string);
            }

            ;
            return nil;
          }();

          if ($truthy(cmd)) {} else {
            return nil;
          }

          ;
          $b = self.$roll_nw(cmd), $a = Opal.to_ary($b), total = $a[0] == null ? nil : $a[0], interim_expr = $a[1] == null ? nil : $a[1], status = $a[2] == null ? nil : $a[2], $b;

          result = function () {
            if ($truthy(cmd.$cmp_op())) {
              if ($truthy(total.$send(cmd.$cmp_op(), cmd.$target_number()))) {
                return "成功";
              } else {
                return "失敗";
              }
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          sequence = ["" + "(" + cmd + ")", interim_expr, status, total.$to_s(), result].$compact();
          return sequence.$join(" ＞ ");
        }, $NightWizard_eval_game_system_specific_command$2.$$arity = 1);
        self.$private();

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Parsed');
          var $nesting = [self].concat($parent_nesting);
          self.$attr_accessor("critical_numbers");
          self.$attr_accessor("fumble_numbers");
          self.$attr_accessor("prana");
          self.$attr_accessor("active_modify_number");
          self.$attr_accessor("cmp_op");
          return self.$attr_accessor("target_number");
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ParsedNW');
          var $nesting = [self].concat($parent_nesting),
              $ParsedNW_initialize$3,
              $ParsedNW_passive_modify_number$4,
              $ParsedNW_to_s$5;
          self.$$prototype.base = self.$$prototype.modify_number = self.$$prototype.active_modify_number = self.$$prototype.prana = self.$$prototype.command = self.$$prototype.critical_numbers = self.$$prototype.fumble_numbers = self.$$prototype.cmp_op = self.$$prototype.target_number = nil;
          self.$attr_accessor("base");
          self.$attr_accessor("modify_number");
          Opal.def(self, '$initialize', $ParsedNW_initialize$3 = function $$initialize(command) {
            var $iter = $ParsedNW_initialize$3.$$p,
                $yield = $iter || nil,
                self = this;
            if ($iter) $ParsedNW_initialize$3.$$p = null;
            $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ParsedNW_initialize$3, false, true), 'initialize', [], null);
            return self.command = command;
          }, $ParsedNW_initialize$3.$$arity = 1);
          Opal.def(self, '$passive_modify_number', $ParsedNW_passive_modify_number$4 = function $$passive_modify_number() {
            var self = this;
            return $rb_plus(self.base, self.modify_number);
          }, $ParsedNW_passive_modify_number$4.$$arity = 0);
          return (Opal.def(self, '$to_s', $ParsedNW_to_s$5 = function $$to_s() {
            var self = this,
                base = nil,
                modify_number = nil,
                active_modify_number = nil,
                dollar = nil,
                $ret_or_2 = nil;

            base = function () {
              if ($truthy(self.base['$zero?']())) {
                return nil;
              } else {
                return self.base;
              }

              ;
              return nil;
            }();

            modify_number = $$($nesting, 'Format').$modifier(self.modify_number);
            active_modify_number = $$($nesting, 'Format').$modifier(self.active_modify_number);

            dollar = function () {
              if ($truthy($ret_or_2 = self.prana)) {
                return "" + "$" + self.prana;
              } else {
                return $ret_or_2;
              }

              ;
              return nil;
            }();

            return "" + base + self.command + modify_number + "@" + self.critical_numbers.$join(",") + "#" + self.fumble_numbers.$join(",") + dollar + active_modify_number + self.cmp_op + self.target_number;
          }, $ParsedNW_to_s$5.$$arity = 0), nil) && 'to_s';
        })($nesting[0], $$($nesting, 'Parsed'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Parsed2R6');
          var $nesting = [self].concat($parent_nesting),
              $Parsed2R6_to_s$6;
          self.$$prototype.passive_modify_number = self.$$prototype.active_modify_number = self.$$prototype.critical_numbers = self.$$prototype.fumble_numbers = self.$$prototype.cmp_op = self.$$prototype.target_number = nil;
          self.$attr_accessor("passive_modify_number");
          return (Opal.def(self, '$to_s', $Parsed2R6_to_s$6 = function $$to_s() {
            var self = this;
            return "" + "2R6M[" + self.passive_modify_number + "," + self.active_modify_number + "]C[" + self.critical_numbers.$join(",") + "]F[" + self.fumble_numbers.$join(",") + "]" + self.cmp_op + self.target_number;
          }, $Parsed2R6_to_s$6.$$arity = 0), nil) && 'to_s';
        })($nesting[0], $$($nesting, 'Parsed'), $nesting);

        Opal.def(self, '$parse_nw', $NightWizard_parse_nw$7 = function $$parse_nw(string) {
          var $a,
              $b,
              self = this,
              m = nil,
              command = nil,
              $writer = nil;
          m = Opal.regexp(["^([-+]?\\d+)?", self.nw_command, "((?:[-+]\\d+)+)?(?:@(\\d+(?:,\\d+)*))?(?:#(\\d+(?:,\\d+)*))?(?:\\$(\\d+(?:,\\d+)*))?((?:[-+]\\d+)+)?(?:([>=]+)(\\d+))?$"]).$match(string);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          command = $$($nesting, 'ParsedNW').$new(self.nw_command);
          $writer = [m['$[]'](1).$to_i()];
          $send(command, 'base=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [$$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2))];
          $send(command, 'modify_number=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [function () {
            if ($truthy(m['$[]'](3))) {
              return $send(m['$[]'](3).$split(","), 'map', [], "to_i".$to_proc());
            } else {
              return [10];
            }

            ;
            return nil;
          }()];
          $send(command, 'critical_numbers=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [function () {
            if ($truthy(m['$[]'](4))) {
              return $send(m['$[]'](4).$split(","), 'map', [], "to_i".$to_proc());
            } else {
              return [5];
            }

            ;
            return nil;
          }()];
          $send(command, 'fumble_numbers=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [($a = m['$[]'](5), $a === nil || $a == null ? nil : $send($a, 'to_i', []))];
          $send(command, 'prana=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [$$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](6))];
          $send(command, 'active_modify_number=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [$$($nesting, 'Normalize').$comparison_operator(m['$[]'](7))];
          $send(command, 'cmp_op=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [($b = m['$[]'](8), $b === nil || $b == null ? nil : $send($b, 'to_i', []))];
          $send(command, 'target_number=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return command;
        }, $NightWizard_parse_nw$7.$$arity = 1);
        Opal.def(self, '$parse_2r6', $NightWizard_parse_2r6$8 = function $$parse_2r6(string) {
          var $a,
              self = this,
              m = nil,
              command = nil,
              $writer = nil;
          m = /^2R6m\[([-+]?\d+(?:[-+]\d+)*)(?:,([-+]?\d+(?:[-+]\d+)*))?\](?:c\[(\d+(?:,\d+)*)\])?(?:f\[(\d+(?:,\d+)*)\])?(?:([>=]+)(\d+))?/i.$match(string);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          command = $$($nesting, 'Parsed2R6').$new();
          $writer = [$$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](1))];
          $send(command, 'passive_modify_number=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [$$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2))];
          $send(command, 'active_modify_number=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [function () {
            if ($truthy(m['$[]'](3))) {
              return $send(m['$[]'](3).$split(","), 'map', [], "to_i".$to_proc());
            } else {
              return [10];
            }

            ;
            return nil;
          }()];
          $send(command, 'critical_numbers=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [function () {
            if ($truthy(m['$[]'](4))) {
              return $send(m['$[]'](4).$split(","), 'map', [], "to_i".$to_proc());
            } else {
              return [5];
            }

            ;
            return nil;
          }()];
          $send(command, 'fumble_numbers=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [$$($nesting, 'Normalize').$comparison_operator(m['$[]'](5))];
          $send(command, 'cmp_op=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          $writer = [($a = m['$[]'](6), $a === nil || $a == null ? nil : $send($a, 'to_i', []))];
          $send(command, 'target_number=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return command;
        }, $NightWizard_parse_2r6$8.$$arity = 1);
        Opal.def(self, '$roll_nw', $NightWizard_roll_nw$9 = function $$roll_nw(parsed) {
          var $a,
              self = this,
              status = nil,
              $ret_or_3 = nil,
              dice_list = nil,
              prana_bonus = nil,
              prana_list = nil,
              base = nil;
          self.critical_numbers = parsed.$critical_numbers();
          self.fumble_numbers = parsed.$fumble_numbers();
          self.total = 0;
          self.interim_expr = "";
          self.status = nil;
          status = self.$roll_once_first();

          while (status['$==']("critical")) {
            status = self.$roll_once();
          }

          ;

          if ($truthy(function () {
            if ($truthy($ret_or_3 = status['$!=']("fumble"))) {
              return parsed.$prana();
            } else {
              return $ret_or_3;
            }

            ;
            return nil;
          }())) {
            dice_list = self.randomizer.$roll_barabara(parsed.$prana(), 6);
            prana_bonus = dice_list.$sum();
            prana_list = dice_list.$join(",");
            self.total = $rb_plus(self.total, prana_bonus);
            self.interim_expr = $rb_plus(self.interim_expr, "" + "+" + prana_bonus + "[" + prana_list + "]");
          }

          ;

          base = function () {
            if (status['$==']("fumble")) {
              return self.$fumble_base_number(parsed);
            } else {
              return $rb_plus(parsed.$passive_modify_number(), parsed.$active_modify_number());
            }

            ;
            return nil;
          }();

          self.total = $rb_plus(self.total, base);
          self.interim_expr = $rb_plus(base.$to_s(), self.interim_expr);
          return [self.total, self.interim_expr, self.status];
        }, $NightWizard_roll_nw$9.$$arity = 1);
        Opal.def(self, '$roll_once', $NightWizard_roll_once$10 = function $$roll_once(fumbleable) {
          var self = this,
              dice_list = nil,
              dice_value = nil,
              dice_str = nil,
              $ret_or_4 = nil;

          if (fumbleable == null) {
            fumbleable = false;
          }

          ;
          dice_list = self.randomizer.$roll_barabara(2, 6);
          dice_value = dice_list.$sum();
          dice_str = dice_list.$join(",");

          if ($truthy(function () {
            if ($truthy($ret_or_4 = fumbleable)) {
              return self.fumble_numbers['$include?'](dice_value);
            } else {
              return $ret_or_4;
            }

            ;
            return nil;
          }())) {
            self.total = $rb_minus(self.total, 10);
            self.interim_expr = $rb_plus(self.interim_expr, "" + "-10[" + dice_str + "]");
            self.status = "ファンブル";
            return "fumble";
          } else if ($truthy(self.critical_numbers['$include?'](dice_value))) {
            self.total = $rb_plus(self.total, 10);
            self.interim_expr = $rb_plus(self.interim_expr, "" + "+10[" + dice_str + "]");
            self.status = "クリティカル";
            return "critical";
          } else {
            self.total = $rb_plus(self.total, dice_value);
            self.interim_expr = $rb_plus(self.interim_expr, "" + "+" + dice_value + "[" + dice_str + "]");
            return nil;
          }

          ;
        }, $NightWizard_roll_once$10.$$arity = -1);
        Opal.def(self, '$roll_once_first', $NightWizard_roll_once_first$11 = function $$roll_once_first() {
          var self = this;
          return self.$roll_once(true);
        }, $NightWizard_roll_once_first$11.$$arity = 0);
        return (Opal.def(self, '$fumble_base_number', $NightWizard_fumble_base_number$12 = function $$fumble_base_number(parsed) {
          var self = this;
          return parsed.$passive_modify_number();
        }, $NightWizard_fumble_base_number$12.$$arity = 1), nil) && 'fumble_base_number';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~NightWizard~index.js.map