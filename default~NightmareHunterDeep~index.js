(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~NightmareHunterDeep~index"],{

/***/ "NFbI":
/*!***************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/NightmareHunterDeep.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/format"] = function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Format');
      var $nesting = [self].concat($parent_nesting),
          $Format_comparison_operator$1,
          $Format_modifier$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if ("=="['$===']($case)) {
            return "=";
          } else if ("!="['$===']($case)) {
            return "<>";
          } else if ($$($nesting, 'Symbol')['$===']($case)) {
            return op.$to_s();
          } else {
            return nil;
          }
        }();
      }, $Format_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {
        var self = this;

        if ($truthy(number['$nil?']())) {
          return nil;
        } else if (number['$=='](0)) {
          return "";
        } else if ($truthy($rb_gt(number, 0))) {
          return "" + "+" + number;
        } else {
          return number.$to_s();
        }
      }, $Format_modifier$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $send = Opal.send,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  self.$require("bcdice/format");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NightmareHunterDeep');
        var $nesting = [self].concat($parent_nesting),
            $NightmareHunterDeep_initialize$1,
            $NightmareHunterDeep_eval_game_system_specific_command$2,
            $NightmareHunterDeep_result_text$5,
            $NightmareHunterDeep_fate$6,
            $NightmareHunterDeep_interim_expr$7,
            $NightmareHunterDeep_expr_with_revision$8,
            $NightmareHunterDeep_dice_revision$9;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "NightmareHunterDeep");
        Opal.const_set($nesting[0], 'NAME', "ナイトメアハンター=ディープ");
        Opal.const_set($nesting[0], 'SORT_KEY', "ないとめあはんたあていいふ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "判定（xD6+y>=a, xD6+y, xD6)\n" + "  出目6の個数をカウントして、その4倍を合計値に加算します。\n" + "  また、宿命を獲得したか表示します。\n" + "\n" + "  Lv目標値 (xD6+y>=LVn, xD6+y>=NLn)\n" + "    レベルで目標値を指定することができます。\n" + "    LVn -> n*5+1, NLn -> n*5+5 に変換されます。\n" + "  目標値'?' (xD6+y>=?)\n" + "    目標値を '?' にすると何Lv成功か、何NL成功かを表示します。\n" + "\n" + "※判定コマンドは xD6 から始まる必要があります。また xD6 が複数あると反応しません。\n");
        self.$register_prefix("\\d+D6");
        Opal.def(self, '$initialize', $NightmareHunterDeep_initialize$1 = function $$initialize(command) {
          var $iter = $NightmareHunterDeep_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $NightmareHunterDeep_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $NightmareHunterDeep_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $NightmareHunterDeep_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $NightmareHunterDeep_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var _$$,
              _$$2,
              $a,
              $b,
              self = this,
              parser = nil,
              cmd = nil,
              times = nil,
              dice_list = nil,
              dice_total = nil,
              total = nil,
              suffix = nil,
              revision = nil,
              target = nil,
              result = nil,
              sequence = nil;

          command = $send($send(command, 'sub', [/Lv(\d+)/i], (_$$ = function $$3() {
            var self = _$$.$$s == null ? this : _$$.$$s;
            return $rb_minus($rb_times($$($nesting, 'Regexp').$last_match(1).$to_i(), 5), 1).$to_s();
          }, _$$.$$s = self, _$$.$$arity = 0, _$$)), 'sub', [/NL(\d+)/i], (_$$2 = function $$4() {
            var self = _$$2.$$s == null ? this : _$$2.$$s;
            return $rb_plus($rb_times($$($nesting, 'Regexp').$last_match(1).$to_i(), 5), 5).$to_s();
          }, _$$2.$$s = self, _$$2.$$arity = 0, _$$2));
          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\d+D6/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$restrict_cmp_op_to(nil, ">=").$enable_question_target();
          cmd = parser.$parse(command);

          if ($truthy(cmd)) {} else {
            return nil;
          }

          ;
          times = cmd.$command().$to_i();
          dice_list = self.randomizer.$roll_barabara(times, 6).$sort();
          dice_total = dice_list.$sum();
          total = $rb_plus(dice_total, cmd.$modify_number());
          $b = self.$dice_revision(dice_list), $a = Opal.to_ary($b), suffix = $a[0] == null ? nil : $a[0], revision = $a[1] == null ? nil : $a[1], $b;
          total = $rb_plus(total, revision);

          target = function () {
            if ($truthy(cmd['$question_target?']())) {
              return "?";
            } else {
              return cmd.$target_number();
            }

            ;
            return nil;
          }();

          result = self.$result_text(total, cmd.$cmp_op(), target);
          sequence = ["" + "(" + cmd + ")", self.$interim_expr(cmd, dice_total, dice_list), self.$expr_with_revision($rb_plus(dice_total, cmd.$modify_number()), suffix), total, result, self.$fate(dice_list)].$compact();
          return sequence.$join(" ＞ ");
        }, $NightmareHunterDeep_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$result_text', $NightmareHunterDeep_result_text$5 = function $$result_text(total, cmp_op, target) {
          var self = this,
              success_lv = nil,
              success_nl = nil;

          if (cmp_op['$=='](">=")) {} else {
            return nil;
          }

          ;

          if ($truthy(target['$!=']("?"))) {
            return function () {
              if ($truthy($rb_ge(total, target))) {
                return "成功";
              } else {
                return "失敗";
              }

              ;
              return nil;
            }();
          }

          ;
          success_lv = $rb_divide($rb_plus(total, 1), 5).$to_i();
          success_nl = $rb_divide($rb_minus(total, 5), 5).$to_i();
          return function () {
            if ($truthy($rb_gt(success_lv, 0))) {
              return "" + "Lv" + success_lv + "/NL" + success_nl + "成功";
            } else {
              return "失敗";
            }

            ;
            return nil;
          }();
        }, $NightmareHunterDeep_result_text$5.$$arity = 3);
        Opal.def(self, '$fate', $NightmareHunterDeep_fate$6 = function $$fate(dice_list) {
          var self = this;

          if ($truthy($rb_gt(dice_list.$count(1), 0))) {
            return "宿命獲得";
          } else {
            return nil;
          }
        }, $NightmareHunterDeep_fate$6.$$arity = 1);
        Opal.def(self, '$interim_expr', $NightmareHunterDeep_interim_expr$7 = function $$interim_expr(cmd, dice_total, dice_list) {
          var self = this,
              $ret_or_1 = nil,
              modifier = nil;

          if ($truthy(function () {
            if ($truthy($ret_or_1 = $rb_gt(dice_list.$size(), 1))) {
              return $ret_or_1;
            } else {
              return cmd.$modify_number()['$!='](0);
            }

            ;
            return nil;
          }())) {
            modifier = $$($nesting, 'Format').$modifier(cmd.$modify_number());
            return "" + dice_total + "[" + dice_list.$join(",") + "]" + modifier;
          } else {
            return nil;
          }
        }, $NightmareHunterDeep_interim_expr$7.$$arity = 3);
        Opal.def(self, '$expr_with_revision', $NightmareHunterDeep_expr_with_revision$8 = function $$expr_with_revision(total, suffix) {
          var self = this;

          if ($truthy(suffix)) {
            return "" + total + suffix;
          } else {
            return nil;
          }
        }, $NightmareHunterDeep_expr_with_revision$8.$$arity = 2);
        return (Opal.def(self, '$dice_revision', $NightmareHunterDeep_dice_revision$9 = function $$dice_revision(dice_list) {
          var self = this,
              count6 = nil;
          count6 = dice_list.$count(6);

          if ($truthy($rb_gt(count6, 0))) {
            return ["" + "+" + count6 + "*4", $rb_times(count6, 4)];
          } else {
            return [nil, 0];
          }

          ;
        }, $NightmareHunterDeep_dice_revision$9.$$arity = 1), nil) && 'dice_revision';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~NightmareHunterDeep~index.js.map