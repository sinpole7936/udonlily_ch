(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~NinjaSlayer~index"],{

/***/ "mLdZ":
/*!*******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/NinjaSlayer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["racc/parser"] = function (Opal) {
  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var $a,
      self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $gvars = Opal.gvars,
      $send = Opal.send;

  (function ($base, $parent_nesting) {
    var self = $module($base, 'Racc');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParseError');
      var $nesting = [self].concat($parent_nesting);
      return nil;
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  })($nesting[0], $nesting);

  if ($truthy(($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil)) {} else {
    Opal.const_set($nesting[0], 'ParseError', $$$($$($nesting, 'Racc'), 'ParseError'));
  }

  ;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'Racc');
    var $nesting = [self].concat($parent_nesting),
        $a;

    if ($truthy(($a = $$($nesting, 'Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil)) {} else {
      Opal.const_set($nesting[0], 'Racc_No_Extensions', false);
    }

    ;

    (function ($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');
      var $nesting = [self].concat($parent_nesting),
          $Parser_racc_runtime_type$1,
          $Parser__racc_setup$2,
          $Parser__racc_init_sysvars$3,
          $Parser_do_parse$4,
          $Parser_next_token$5,
          $Parser__racc_do_parse_rb$6,
          $Parser_yyparse$8,
          $Parser__racc_yyparse_rb$9,
          $Parser__racc_evalact$12,
          $Parser__racc_do_reduce$14,
          $Parser_on_error$15,
          $Parser_yyerror$16,
          $Parser_yyaccept$17,
          $Parser_yyerrok$18,
          $Parser_racc_read_token$19,
          $Parser_racc_shift$20,
          $Parser_racc_reduce$21,
          $Parser_racc_accept$23,
          $Parser_racc_e_pop$24,
          $Parser_racc_next_state$25,
          $Parser_racc_print_stacks$26,
          $Parser_racc_print_states$28,
          $Parser_racc_token2str$30,
          $Parser_token_to_str$31;
      self.$$prototype.yydebug = self.$$prototype.racc_debug_out = self.$$prototype.racc_error_status = self.$$prototype.racc_t = self.$$prototype.racc_vstack = self.$$prototype.racc_val = self.$$prototype.racc_state = self.$$prototype.racc_tstack = nil;
      Opal.const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      Opal.const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version', $$($nesting, 'Racc_Runtime_Core_Version_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$($nesting, 'Racc_Runtime_Core_Revision_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      Opal.defs($$($nesting, 'Parser'), '$racc_runtime_type', $Parser_racc_runtime_type$1 = function $$racc_runtime_type() {
        var self = this;
        return $$($nesting, 'Racc_Runtime_Type');
      }, $Parser_racc_runtime_type$1.$$arity = 0);
      Opal.def(self, '$_racc_setup', $Parser__racc_setup$2 = function $$_racc_setup() {
        var $a,
            $b,
            self = this,
            $ret_or_1 = nil,
            arg = nil,
            $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        if ($truthy($$$(self.$class(), 'Racc_debug_parser'))) {} else {
          self.yydebug = false;
        }

        ;

        if ($truthy(($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil)) {} else {
          self.yydebug = false;
        }

        ;

        if ($truthy(self.yydebug)) {
          if ($truthy(($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil)) {} else {
            self.racc_debug_out = $gvars.stderr;
          }

          ;

          self.racc_debug_out = function () {
            if ($truthy($ret_or_1 = self.racc_debug_out)) {
              return $ret_or_1;
            } else {
              return $gvars.stderr;
            }

            ;
            return nil;
          }();
        }

        ;
        arg = $$$(self.$class(), 'Racc_arg');

        if ($truthy($rb_lt(arg.$size(), 14))) {
          $writer = [13, true];
          $send(arg, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        }

        ;
        return arg;
      }, $Parser__racc_setup$2.$$arity = 0);
      Opal.def(self, '$_racc_init_sysvars', $Parser__racc_init_sysvars$3 = function $$_racc_init_sysvars() {
        var self = this;
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return self.racc_error_status = 0;
      }, $Parser__racc_init_sysvars$3.$$arity = 0);
      Opal.def(self, '$do_parse', $Parser_do_parse$4 = function $$do_parse() {
        var self = this;
        return self.$__send__($$($nesting, 'Racc_Main_Parsing_Routine'), self.$_racc_setup(), false);
      }, $Parser_do_parse$4.$$arity = 0);
      Opal.def(self, '$next_token', $Parser_next_token$5 = function $$next_token() {
        var self = this;
        return self.$raise($$($nesting, 'NotImplementedError'), "" + self.$class() + "#next_token is not defined");
      }, $Parser_next_token$5.$$arity = 0);
      Opal.def(self, '$_racc_do_parse_rb', $Parser__racc_do_parse_rb$6 = function $$_racc_do_parse_rb(arg, in_debug) {
        var $a,
            $b,
            _$$,
            self = this,
            action_table = nil,
            action_check = nil,
            action_default = nil,
            action_pointer = nil,
            _ = nil,
            token_table = nil,
            tok = nil,
            act = nil,
            i = nil;

        $b = arg, $a = Opal.to_ary($b), action_table = $a[0] == null ? nil : $a[0], action_check = $a[1] == null ? nil : $a[1], action_default = $a[2] == null ? nil : $a[2], action_pointer = $a[3] == null ? nil : $a[3], _ = $a[4] == null ? nil : $a[4], _ = $a[5] == null ? nil : $a[5], _ = $a[6] == null ? nil : $a[6], _ = $a[7] == null ? nil : $a[7], _ = $a[8] == null ? nil : $a[8], _ = $a[9] == null ? nil : $a[9], token_table = $a[10] == null ? nil : $a[10], _ = $a[11] == null ? nil : $a[11], _ = $a[12] == null ? nil : $a[12], _ = $a[13] == null ? nil : $a[13], $b;
        self.$_racc_init_sysvars();
        tok = act = i = nil;
        return $send(self, 'catch', ["racc_end_parse"], (_$$ = function $$7() {
          var self = _$$.$$s == null ? this : _$$.$$s,
              $c,
              $d,
              $e,
              $ret_or_2 = nil,
              $ret_or_3 = nil,
              $ret_or_4 = nil;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

          while ($truthy(true)) {
            if ($truthy(i = action_pointer['$[]'](self.racc_state['$[]'](-1)))) {
              if ($truthy(self.racc_read_next)) {
                if ($truthy(self.racc_t['$!='](0))) {
                  $e = self.$next_token(), $d = Opal.to_ary($e), tok = $d[0] == null ? nil : $d[0], self.racc_val = $d[1] == null ? nil : $d[1], $e;

                  if ($truthy(tok)) {
                    self.racc_t = function () {
                      if ($truthy($ret_or_2 = token_table['$[]'](tok))) {
                        return $ret_or_2;
                      } else {
                        return 1;
                      }

                      ;
                      return nil;
                    }();
                  } else {
                    self.racc_t = 0;
                  }

                  ;

                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val);
                  }

                  ;
                  self.racc_read_next = false;
                }
              }

              ;
              i = $rb_plus(i, self.racc_t);

              if ($truthy(function () {
                if ($truthy($ret_or_3 = function () {
                  if ($truthy($ret_or_4 = $rb_ge(i, 0))) {
                    return act = action_table['$[]'](i);
                  } else {
                    return $ret_or_4;
                  }

                  ;
                  return nil;
                }())) {
                  return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1));
                } else {
                  return $ret_or_3;
                }

                ;
                return nil;
              }())) {} else {
                act = action_default['$[]'](self.racc_state['$[]'](-1));
              }

              ;
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1));
            }

            ;

            while ($truthy(act = self.$_racc_evalact(act, arg))) {}

            ;
          }
        }, _$$.$$s = self, _$$.$$arity = 0, _$$));
      }, $Parser__racc_do_parse_rb$6.$$arity = 2);
      Opal.def(self, '$yyparse', $Parser_yyparse$8 = function $$yyparse(recv, mid) {
        var self = this;
        return self.$__send__($$($nesting, 'Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true);
      }, $Parser_yyparse$8.$$arity = 2);
      Opal.def(self, '$_racc_yyparse_rb', $Parser__racc_yyparse_rb$9 = function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a,
            $b,
            _$$3,
            self = this,
            action_table = nil,
            action_check = nil,
            action_default = nil,
            action_pointer = nil,
            _ = nil,
            token_table = nil,
            act = nil,
            i = nil;

        $b = arg, $a = Opal.to_ary($b), action_table = $a[0] == null ? nil : $a[0], action_check = $a[1] == null ? nil : $a[1], action_default = $a[2] == null ? nil : $a[2], action_pointer = $a[3] == null ? nil : $a[3], _ = $a[4] == null ? nil : $a[4], _ = $a[5] == null ? nil : $a[5], _ = $a[6] == null ? nil : $a[6], _ = $a[7] == null ? nil : $a[7], _ = $a[8] == null ? nil : $a[8], _ = $a[9] == null ? nil : $a[9], token_table = $a[10] == null ? nil : $a[10], _ = $a[11] == null ? nil : $a[11], _ = $a[12] == null ? nil : $a[12], _ = $a[13] == null ? nil : $a[13], $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], (_$$3 = function $$10() {
          var self = _$$3.$$s == null ? this : _$$3.$$s,
              $c,
              $d,
              _$$2;

          if (self.racc_state == null) self.racc_state = nil;

          while (!$truthy(i = action_pointer['$[]'](self.racc_state['$[]'](-1)))) {
            while ($truthy(act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg))) {}
          }

          ;
          return $send(recv, '__send__', [mid], (_$$2 = function $$11(tok, val) {
            var self = _$$2.$$s == null ? this : _$$2.$$s,
                $e,
                $f,
                $ret_or_5 = nil,
                $ret_or_6 = nil,
                $ret_or_7 = nil,
                $ret_or_8 = nil,
                $ret_or_9 = nil,
                $ret_or_10 = nil,
                $ret_or_11 = nil,
                $ret_or_12 = nil,
                $ret_or_13 = nil;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

            if (tok == null) {
              tok = nil;
            }

            ;

            if (val == null) {
              val = nil;
            }

            ;

            if ($truthy(tok)) {
              self.racc_t = function () {
                if ($truthy($ret_or_5 = token_table['$[]'](tok))) {
                  return $ret_or_5;
                } else {
                  return 1;
                }

                ;
                return nil;
              }();
            } else {
              self.racc_t = 0;
            }

            ;
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);

            if ($truthy(function () {
              if ($truthy($ret_or_6 = function () {
                if ($truthy($ret_or_7 = $rb_ge(i, 0))) {
                  return act = action_table['$[]'](i);
                } else {
                  return $ret_or_7;
                }

                ;
                return nil;
              }())) {
                return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1));
              } else {
                return $ret_or_6;
              }

              ;
              return nil;
            }())) {} else {
              act = action_default['$[]'](self.racc_state['$[]'](-1));
            }

            ;

            while ($truthy(act = self.$_racc_evalact(act, arg))) {}

            ;

            while ($truthy(function () {
              if ($truthy($ret_or_8 = function () {
                if ($truthy($ret_or_9 = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']())) {
                  return $ret_or_9;
                } else {
                  return self.racc_read_next['$!']();
                }

                ;
                return nil;
              }())) {
                return $ret_or_8;
              } else {
                return self.racc_t['$=='](0);
              }

              ;
              return nil;
            }())) {
              if ($truthy(function () {
                if ($truthy($ret_or_10 = function () {
                  if ($truthy($ret_or_11 = function () {
                    if ($truthy($ret_or_12 = function () {
                      if ($truthy($ret_or_13 = i)) {
                        return i = $rb_plus(i, self.racc_t);
                      } else {
                        return $ret_or_13;
                      }

                      ;
                      return nil;
                    }())) {
                      return $rb_ge(i, 0);
                    } else {
                      return $ret_or_12;
                    }

                    ;
                    return nil;
                  }())) {
                    return act = action_table['$[]'](i);
                  } else {
                    return $ret_or_11;
                  }

                  ;
                  return nil;
                }())) {
                  return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1));
                } else {
                  return $ret_or_10;
                }

                ;
                return nil;
              }())) {} else {
                act = action_default['$[]'](self.racc_state['$[]'](-1));
              }

              ;

              while ($truthy(act = self.$_racc_evalact(act, arg))) {}

              ;
            }

            ;
          }, _$$2.$$s = self, _$$2.$$arity = 2, _$$2));
        }, _$$3.$$s = self, _$$3.$$arity = 0, _$$3));
      }, $Parser__racc_yyparse_rb$9.$$arity = 4);
      Opal.def(self, '$_racc_evalact', $Parser__racc_evalact$12 = function $$_racc_evalact(act, arg) {
        var $a,
            $b,
            _$$4,
            self = this,
            action_table = nil,
            action_check = nil,
            _ = nil,
            action_pointer = nil,
            shift_n = nil,
            reduce_n = nil,
            $ret_or_14 = nil,
            $ret_or_15 = nil,
            code = nil,
            $case = nil,
            i = nil,
            $ret_or_16 = nil,
            $ret_or_17 = nil;

        $b = arg, $a = Opal.to_ary($b), action_table = $a[0] == null ? nil : $a[0], action_check = $a[1] == null ? nil : $a[1], _ = $a[2] == null ? nil : $a[2], action_pointer = $a[3] == null ? nil : $a[3], _ = $a[4] == null ? nil : $a[4], _ = $a[5] == null ? nil : $a[5], _ = $a[6] == null ? nil : $a[6], _ = $a[7] == null ? nil : $a[7], _ = $a[8] == null ? nil : $a[8], _ = $a[9] == null ? nil : $a[9], _ = $a[10] == null ? nil : $a[10], shift_n = $a[11] == null ? nil : $a[11], reduce_n = $a[12] == null ? nil : $a[12], _ = $a[13] == null ? nil : $a[13], _ = $a[14] == null ? nil : $a[14], $b;

        if ($truthy(function () {
          if ($truthy($ret_or_14 = $rb_gt(act, 0))) {
            return $rb_lt(act, shift_n);
          } else {
            return $ret_or_14;
          }

          ;
          return nil;
        }())) {
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (self.racc_t['$=='](1)) {} else {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1);
            }
          }

          ;
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;

          if ($truthy(self.yydebug)) {
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);
          }

          ;
        } else if ($truthy(function () {
          if ($truthy($ret_or_15 = $rb_lt(act, 0))) {
            return $rb_gt(act, reduce_n['$-@']());
          } else {
            return $ret_or_15;
          }

          ;
          return nil;
        }())) {
          code = $send(self, 'catch', ["racc_jump"], (_$$4 = function $$13() {
            var self = _$$4.$$s == null ? this : _$$4.$$s;
            if (self.racc_state == null) self.racc_state = nil;
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;
          }, _$$4.$$s = self, _$$4.$$arity = 0, _$$4));

          if ($truthy(code)) {
            $case = code;

            if (1['$===']($case)) {
              self.racc_user_yyerror = true;
              return reduce_n['$-@']();
            } else if (2['$===']($case)) {
              return shift_n;
            } else {
              self.$raise("[Racc Bug] unknown jump code");
            }
          }

          ;
        } else if (act['$=='](shift_n)) {
          if ($truthy(self.yydebug)) {
            self.$racc_accept();
          }

          ;
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if (act['$=='](reduce_n['$-@']())) {
          $case = self.racc_error_status;

          if (0['$===']($case)) {
            if ($truthy(arg['$[]'](21))) {} else {
              self.$on_error(self.racc_t, self.racc_val, self.racc_vstack);
            }
          } else if (3['$===']($case)) {
            if (self.racc_t['$=='](0)) {
              self.$throw("racc_end_parse", nil);
            }

            ;
            self.racc_read_next = true;
          }

          ;
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;

          while ($truthy(true)) {
            if ($truthy(i = action_pointer['$[]'](self.racc_state['$[]'](-1)))) {
              i = $rb_plus(i, 1);

              if ($truthy(function () {
                if ($truthy($ret_or_16 = function () {
                  if ($truthy($ret_or_17 = $rb_ge(i, 0))) {
                    return act = action_table['$[]'](i);
                  } else {
                    return $ret_or_17;
                  }

                  ;
                  return nil;
                }())) {
                  return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1));
                } else {
                  return $ret_or_16;
                }

                ;
                return nil;
              }())) {
                break;
              }

              ;
            }

            ;

            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil);
            }

            ;
            self.racc_state.$pop();
            self.racc_vstack.$pop();

            if ($truthy(self.yydebug)) {
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);
            }

            ;
          }

          ;
          return act;
        } else {
          self.$raise("" + "[Racc Bug] unknown action " + act.$inspect());
        }

        ;

        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state);
        }

        ;
        return nil;
      }, $Parser__racc_evalact$12.$$arity = 2);
      Opal.def(self, '$_racc_do_reduce', $Parser__racc_do_reduce$14 = function $$_racc_do_reduce(arg, act) {
        var $a,
            $b,
            self = this,
            _ = nil,
            goto_table = nil,
            goto_check = nil,
            goto_default = nil,
            goto_pointer = nil,
            nt_base = nil,
            reduce_table = nil,
            use_result = nil,
            state = nil,
            vstack = nil,
            tstack = nil,
            i = nil,
            len = nil,
            reduce_to = nil,
            method_id = nil,
            void_array = nil,
            tmp_t = nil,
            tmp_v = nil,
            $writer = nil,
            k1 = nil,
            $ret_or_18 = nil,
            $ret_or_19 = nil,
            curstate = nil;
        $b = arg, $a = Opal.to_ary($b), _ = $a[0] == null ? nil : $a[0], _ = $a[1] == null ? nil : $a[1], _ = $a[2] == null ? nil : $a[2], _ = $a[3] == null ? nil : $a[3], goto_table = $a[4] == null ? nil : $a[4], goto_check = $a[5] == null ? nil : $a[5], goto_default = $a[6] == null ? nil : $a[6], goto_pointer = $a[7] == null ? nil : $a[7], nt_base = $a[8] == null ? nil : $a[8], reduce_table = $a[9] == null ? nil : $a[9], _ = $a[10] == null ? nil : $a[10], _ = $a[11] == null ? nil : $a[11], _ = $a[12] == null ? nil : $a[12], use_result = $a[13] == null ? nil : $a[13], $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];

        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len);
        }

        ;
        tmp_v = vstack['$[]'](len['$-@'](), len);

        if ($truthy(self.yydebug)) {
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        }

        ;
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        ;
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        ;

        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)));
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack));
        }

        ;
        tstack.$push(reduce_to);

        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack);
        }

        ;
        k1 = $rb_minus(reduce_to, nt_base);

        if ($truthy(i = goto_pointer['$[]'](k1))) {
          i = $rb_plus(i, state['$[]'](-1));

          if ($truthy(function () {
            if ($truthy($ret_or_18 = function () {
              if ($truthy($ret_or_19 = $rb_ge(i, 0))) {
                return curstate = goto_table['$[]'](i);
              } else {
                return $ret_or_19;
              }

              ;
              return nil;
            }())) {
              return goto_check['$[]'](i)['$=='](k1);
            } else {
              return $ret_or_18;
            }

            ;
            return nil;
          }())) {
            return curstate;
          }

          ;
        }

        ;
        return goto_default['$[]'](k1);
      }, $Parser__racc_do_reduce$14.$$arity = 2);
      Opal.def(self, '$on_error', $Parser_on_error$15 = function $$on_error(t, val, vstack) {
        var self = this,
            $ret_or_20 = nil;
        return self.$raise($$($nesting, 'ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), function () {
          if ($truthy($ret_or_20 = self.$token_to_str(t))) {
            return $ret_or_20;
          } else {
            return "?";
          }

          ;
          return nil;
        }()));
      }, $Parser_on_error$15.$$arity = 3);
      Opal.def(self, '$yyerror', $Parser_yyerror$16 = function $$yyerror() {
        var self = this;
        return self.$throw("racc_jump", 1);
      }, $Parser_yyerror$16.$$arity = 0);
      Opal.def(self, '$yyaccept', $Parser_yyaccept$17 = function $$yyaccept() {
        var self = this;
        return self.$throw("racc_jump", 2);
      }, $Parser_yyaccept$17.$$arity = 0);
      Opal.def(self, '$yyerrok', $Parser_yyerrok$18 = function $$yyerrok() {
        var self = this;
        return self.racc_error_status = 0;
      }, $Parser_yyerrok$18.$$arity = 0);
      Opal.def(self, '$racc_read_token', $Parser_racc_read_token$19 = function $$racc_read_token(t, tok, val) {
        var self = this;
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, $Parser_racc_read_token$19.$$arity = 3);
      Opal.def(self, '$racc_shift', $Parser_racc_shift$20 = function $$racc_shift(tok, tstack, vstack) {
        var self = this;
        self.racc_debug_out.$puts("" + "shift   " + self.$racc_token2str(tok));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_shift$20.$$arity = 3);
      Opal.def(self, '$racc_reduce', $Parser_racc_reduce$21 = function $$racc_reduce(toks, sim, tstack, vstack) {
        var _$$5,
            self = this,
            out = nil;

        out = self.racc_debug_out;
        out.$print("reduce ");

        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>");
        } else {
          $send(toks, 'each', [], (_$$5 = function $$22(t) {
            var self = _$$5.$$s == null ? this : _$$5.$$s;

            if (t == null) {
              t = nil;
            }

            ;
            return out.$print(" ", self.$racc_token2str(t));
          }, _$$5.$$s = self, _$$5.$$arity = 1, _$$5));
        }

        ;
        out.$puts("" + " --> " + self.$racc_token2str(sim));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_reduce$21.$$arity = 4);
      Opal.def(self, '$racc_accept', $Parser_racc_accept$23 = function $$racc_accept() {
        var self = this;
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, $Parser_racc_accept$23.$$arity = 0);
      Opal.def(self, '$racc_e_pop', $Parser_racc_e_pop$24 = function $$racc_e_pop(state, tstack, vstack) {
        var self = this;
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_e_pop$24.$$arity = 3);
      Opal.def(self, '$racc_next_state', $Parser_racc_next_state$25 = function $$racc_next_state(curstate, state) {
        var self = this;
        self.racc_debug_out.$puts("" + "goto    " + curstate);
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_next_state$25.$$arity = 2);
      Opal.def(self, '$racc_print_stacks', $Parser_racc_print_stacks$26 = function $$racc_print_stacks(t, v) {
        var _$$6,
            self = this,
            out = nil;

        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], (_$$6 = function $$27(i) {
          var self = _$$6.$$s == null ? this : _$$6.$$s;

          if (i == null) {
            i = nil;
          }

          ;
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");
        }, _$$6.$$s = self, _$$6.$$arity = 1, _$$6));
        return out.$puts(" ]");
      }, $Parser_racc_print_stacks$26.$$arity = 2);
      Opal.def(self, '$racc_print_states', $Parser_racc_print_states$28 = function $$racc_print_states(s) {
        var _$$7,
            self = this,
            out = nil;

        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], (_$$7 = function $$29(st) {
          var self = _$$7.$$s == null ? this : _$$7.$$s;

          if (st == null) {
            st = nil;
          }

          ;
          return out.$print(" ", st);
        }, _$$7.$$s = self, _$$7.$$arity = 1, _$$7));
        return out.$puts(" ]");
      }, $Parser_racc_print_states$28.$$arity = 1);
      Opal.def(self, '$racc_token2str', $Parser_racc_token2str$30 = function $$racc_token2str(tok) {
        var self = this,
            $ret_or_21 = nil;

        if ($truthy($ret_or_21 = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok))) {
          return $ret_or_21;
        } else {
          return self.$raise("" + "[Racc Bug] can't convert token " + tok + " to string");
        }
      }, $Parser_racc_token2str$30.$$arity = 1);
      return (Opal.def(self, '$token_to_str', $Parser_token_to_str$31 = function $$token_to_str(t) {
        var self = this;
        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t);
      }, $Parser_token_to_str$31.$$arity = 1), nil) && 'token_to_str';
    })($nesting[0], null, $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["strscan"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StringScanner');
    var $nesting = [self].concat($parent_nesting),
        $StringScanner_initialize$1,
        $StringScanner_beginning_of_line$ques$2,
        $StringScanner_scan$3,
        $StringScanner_scan_until$4,
        $StringScanner_$$$5,
        $StringScanner_check$6,
        $StringScanner_check_until$7,
        $StringScanner_peek$8,
        $StringScanner_eos$ques$9,
        $StringScanner_exist$ques$10,
        $StringScanner_skip$11,
        $StringScanner_skip_until$12,
        $StringScanner_get_byte$13,
        $StringScanner_match$ques$14,
        $StringScanner_pos$eq$15,
        $StringScanner_matched_size$16,
        $StringScanner_post_match$17,
        $StringScanner_pre_match$18,
        $StringScanner_reset$19,
        $StringScanner_rest$20,
        $StringScanner_rest$ques$21,
        $StringScanner_rest_size$22,
        $StringScanner_terminate$23,
        $StringScanner_unscan$24,
        $StringScanner_anchor$25;
    self.$$prototype.pos = self.$$prototype.string = self.$$prototype.working = self.$$prototype.matched = self.$$prototype.prev_pos = self.$$prototype.match = nil;
    self.$attr_reader("pos");
    self.$attr_reader("matched");
    Opal.def(self, '$initialize', $StringScanner_initialize$1 = function $$initialize(string) {
      var self = this;
      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return self.match = [];
    }, $StringScanner_initialize$1.$$arity = 1);
    self.$attr_reader("string");
    Opal.def(self, '$beginning_of_line?', $StringScanner_beginning_of_line$ques$2 = function $StringScanner_beginning_of_line$ques$2() {
      var self = this;
      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n";
    }, $StringScanner_beginning_of_line$ques$2.$$arity = 0);
    Opal.alias(self, "bol?", "beginning_of_line?");
    Opal.def(self, '$scan', $StringScanner_scan$3 = function $$scan(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      } else if (typeof result === 'object') {
        self.prev_pos = self.pos;
        self.pos += result[0].length;
        self.working = self.working.substring(result[0].length);
        self.matched = result[0];
        self.match = result;
        return result[0];
      } else if (typeof result === 'string') {
        self.pos += result.length;
        self.working = self.working.substring(result.length);
        return result;
      } else {
        return nil;
      }

      ;
    }, $StringScanner_scan$3.$$arity = 1);
    Opal.def(self, '$scan_until', $StringScanner_scan_until$4 = function $$scan_until(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var pos = self.pos,
          working = self.working,
          result;

      while (true) {
        result = pattern.exec(working);
        pos += 1;
        working = working.substr(1);

        if (result == null) {
          if (working.length === 0) {
            self.match = [];
            return self.matched = nil;
          }

          continue;
        }

        self.matched = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);
        self.match = result;
        self.prev_pos = pos - 1;
        self.pos = pos;
        self.working = working.substr(result[0].length);
        return self.matched;
      }

      ;
    }, $StringScanner_scan_until$4.$$arity = 1);
    Opal.def(self, '$[]', $StringScanner_$$$5 = function $StringScanner_$$$5(idx) {
      var self = this,
          $case = nil;

      if ($truthy(self.match['$empty?']())) {
        return nil;
      }

      ;
      $case = idx;

      if ($$($nesting, 'Symbol')['$===']($case)) {
        idx = idx.$to_s();
      } else if ($$($nesting, 'String')['$===']($case)) {
        nil;
      } else {
        idx = $$($nesting, 'Opal')['$coerce_to!'](idx, $$($nesting, 'Integer'), "to_int");
      }

      ;
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      if (match[idx] == null) {
        return nil;
      }

      return match[idx];
      ;
    }, $StringScanner_$$$5.$$arity = 1);
    Opal.def(self, '$check', $StringScanner_check$6 = function $$check(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
      ;
    }, $StringScanner_check$6.$$arity = 1);
    Opal.def(self, '$check_until', $StringScanner_check_until$7 = function $$check_until(pattern) {
      var self = this;
      var prev_pos = self.prev_pos,
          pos = self.pos;
      var result = self.$scan_until(pattern);

      if (result !== nil) {
        self.matched = result.substr(-1);
        self.working = self.string.substr(pos);
      }

      self.prev_pos = prev_pos;
      self.pos = pos;
      return result;
    }, $StringScanner_check_until$7.$$arity = 1);
    Opal.def(self, '$peek', $StringScanner_peek$8 = function $$peek(length) {
      var self = this;
      return self.working.substring(0, length);
    }, $StringScanner_peek$8.$$arity = 1);
    Opal.def(self, '$eos?', $StringScanner_eos$ques$9 = function $StringScanner_eos$ques$9() {
      var self = this;
      return self.working.length === 0;
    }, $StringScanner_eos$ques$9.$$arity = 0);
    Opal.def(self, '$exist?', $StringScanner_exist$ques$10 = function $StringScanner_exist$ques$10(pattern) {
      var self = this;
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      } else if (result.index == 0) {
        return 0;
      } else {
        return result.index + 1;
      }
    }, $StringScanner_exist$ques$10.$$arity = 1);
    Opal.def(self, '$skip', $StringScanner_skip$11 = function $$skip(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var result = pattern.exec(self.working);

      if (result == null) {
        self.match = [];
        return self.matched = nil;
      } else {
        var match_str = result[0];
        var match_len = match_str.length;
        self.matched = match_str;
        self.match = result;
        self.prev_pos = self.pos;
        self.pos += match_len;
        self.working = self.working.substring(match_len);
        return match_len;
      }

      ;
    }, $StringScanner_skip$11.$$arity = 1);
    Opal.def(self, '$skip_until', $StringScanner_skip_until$12 = function $$skip_until(pattern) {
      var self = this;
      var result = self.$scan_until(pattern);

      if (result === nil) {
        return nil;
      } else {
        self.matched = result.substr(-1);
        return result.length;
      }
    }, $StringScanner_skip_until$12.$$arity = 1);
    Opal.def(self, '$get_byte', $StringScanner_get_byte$13 = function $$get_byte() {
      var self = this;
      var result = nil;

      if (self.pos < self.string.length) {
        self.prev_pos = self.pos;
        self.pos += 1;
        result = self.matched = self.working.substring(0, 1);
        self.working = self.working.substring(1);
      } else {
        self.matched = nil;
      }

      return result;
    }, $StringScanner_get_byte$13.$$arity = 0);
    Opal.alias(self, "getch", "get_byte");
    Opal.def(self, '$match?', $StringScanner_match$ques$14 = function $StringScanner_match$ques$14(pattern) {
      var self = this;
      pattern = self.$anchor(pattern);
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      } else {
        self.prev_pos = self.pos;
        return result[0].length;
      }

      ;
    }, $StringScanner_match$ques$14.$$arity = 1);
    Opal.def(self, '$pos=', $StringScanner_pos$eq$15 = function $StringScanner_pos$eq$15(pos) {
      var self = this;

      if (pos < 0) {
        pos += self.string.$length();
      }

      ;
      self.pos = pos;
      return self.working = self.string.slice(pos);
    }, $StringScanner_pos$eq$15.$$arity = 1);
    Opal.def(self, '$matched_size', $StringScanner_matched_size$16 = function $$matched_size() {
      var self = this;

      if (self.matched === nil) {
        return nil;
      }

      return self.matched.length;
    }, $StringScanner_matched_size$16.$$arity = 0);
    Opal.def(self, '$post_match', $StringScanner_post_match$17 = function $$post_match() {
      var self = this;

      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(self.pos);
    }, $StringScanner_post_match$17.$$arity = 0);
    Opal.def(self, '$pre_match', $StringScanner_pre_match$18 = function $$pre_match() {
      var self = this;

      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(0, self.prev_pos);
    }, $StringScanner_pre_match$18.$$arity = 0);
    Opal.def(self, '$reset', $StringScanner_reset$19 = function $$reset() {
      var self = this;
      self.working = self.string;
      self.matched = nil;
      return self.pos = 0;
    }, $StringScanner_reset$19.$$arity = 0);
    Opal.def(self, '$rest', $StringScanner_rest$20 = function $$rest() {
      var self = this;
      return self.working;
    }, $StringScanner_rest$20.$$arity = 0);
    Opal.def(self, '$rest?', $StringScanner_rest$ques$21 = function $StringScanner_rest$ques$21() {
      var self = this;
      return self.working.length !== 0;
    }, $StringScanner_rest$ques$21.$$arity = 0);
    Opal.def(self, '$rest_size', $StringScanner_rest_size$22 = function $$rest_size() {
      var self = this;
      return self.$rest().$size();
    }, $StringScanner_rest_size$22.$$arity = 0);
    Opal.def(self, '$terminate', $StringScanner_terminate$23 = function $$terminate() {
      var self = this,
          $writer = nil;
      self.match = nil;
      $writer = [self.string.$length()];
      $send(self, 'pos=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
      ;
    }, $StringScanner_terminate$23.$$arity = 0);
    Opal.def(self, '$unscan', $StringScanner_unscan$24 = function $$unscan() {
      var self = this;
      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    }, $StringScanner_unscan$24.$$arity = 0);
    self.$private();
    return (Opal.def(self, '$anchor', $StringScanner_anchor$25 = function $$anchor(pattern) {
      var self = this;
      var flags = pattern.toString().match(/\/([^\/]+)$/);
      flags = flags ? flags[1] : undefined;
      return new RegExp('^(?:' + pattern.source + ')', flags);
    }, $StringScanner_anchor$25.$$arity = 1), nil) && 'anchor';
  }($nesting[0], null, $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/normalize"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Normalize');
      var $nesting = [self].concat($parent_nesting),
          $Normalize_comparison_operator$1,
          $Normalize_target_number$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if (/<=|=</['$===']($case)) {
            return "<=";
          } else if (/>=|=>/['$===']($case)) {
            return ">=";
          } else if (/<>|!=|=!/['$===']($case)) {
            return "!=";
          } else if (/</['$===']($case)) {
            return "<";
          } else if (/>/['$===']($case)) {
            return ">";
          } else if (/=/['$===']($case)) {
            return "==";
          } else {
            return nil;
          }
        }();
      }, $Normalize_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
        var self = this;

        if (val['$==']("?")) {
          return val;
        } else {
          return val.$to_i();
        }
      }, $Normalize_target_number$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/common_command/lexer"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  self.$require("strscan");
  self.$require("bcdice/normalize");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'CommonCommand');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Lexer');
        var $nesting = [self].concat($parent_nesting),
            $Lexer_initialize$1,
            $Lexer_next_token$2,
            $Lexer_source$3;
        self.$$prototype.scanner = nil;
        Opal.const_set($nesting[0], 'SYMBOLS', $hash2(["+", "-", "*", "/", "(", ")", "[", "]", "?", "@"], {
          "+": "PLUS",
          "-": "MINUS",
          "*": "ASTERISK",
          "/": "SLASH",
          "(": "PARENL",
          ")": "PARENR",
          "[": "BRACKETL",
          "]": "BRACKETR",
          "?": "QUESTION",
          "@": "AT"
        }).$freeze());
        Opal.def(self, '$initialize', $Lexer_initialize$1 = function $$initialize(source) {
          var self = this,
              $ret_or_1 = nil;

          source = function () {
            if ($truthy($ret_or_1 = source.$split(" ", 2).$first())) {
              return $ret_or_1;
            } else {
              return "";
            }

            ;
            return nil;
          }();

          return self.scanner = $$($nesting, 'StringScanner').$new(source);
        }, $Lexer_initialize$1.$$arity = 1);
        Opal.def(self, '$next_token', $Lexer_next_token$2 = function $$next_token() {
          var self = this,
              number = nil,
              cmp_op = nil,
              char$ = nil,
              type = nil,
              $ret_or_2 = nil;

          if ($truthy(self.scanner['$eos?']())) {
            return [false, "$"];
          }

          ;

          if ($truthy(number = self.scanner.$scan(/\d+/))) {
            return ["NUMBER", number.$to_i()];
          } else if ($truthy(cmp_op = self.scanner.$scan(/[<>!=]+/))) {
            return ["CMP_OP", $$($nesting, 'Normalize').$comparison_operator(cmp_op)];
          } else {
            char$ = self.scanner.$getch().$upcase();

            type = function () {
              if ($truthy($ret_or_2 = $$($nesting, 'SYMBOLS')['$[]'](char$))) {
                return $ret_or_2;
              } else {
                return char$.$to_sym();
              }

              ;
              return nil;
            }();

            return [type, char$];
          }

          ;
        }, $Lexer_next_token$2.$$arity = 0);
        return (Opal.def(self, '$source', $Lexer_source$3 = function $$source() {
          var self = this;
          return self.scanner.$string();
        }, $Lexer_source$3.$$arity = 0), nil) && 'source';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/common_command/reroll_dice/node"] = function (Opal) {
  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'CommonCommand');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $parent_nesting) {
        var self = $module($base, 'RerollDice');
        var $nesting = [self].concat($parent_nesting);

        (function ($base, $parent_nesting) {
          var self = $module($base, 'Node');
          var $nesting = [self].concat($parent_nesting);

          (function ($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Command');
            var $nesting = [self].concat($parent_nesting),
                $Command_initialize$1,
                $Command_eval$2,
                $Command_roll$7,
                $Command_expr$9,
                $Command_result_with_text$11;
            self.$$prototype.cmp_op = self.$$prototype.reroll_cmp_op = self.$$prototype.target_number_node = self.$$prototype.reroll_threshold_node = self.$$prototype.notations = self.$$prototype.source = nil;
            Opal.def(self, '$initialize', $Command_initialize$1 = function $$initialize($kwargs) {
              var secret,
                  notations,
                  source,
                  cmp_op,
                  target_number,
                  reroll_cmp_op,
                  reroll_threshold,
                  self = this;

              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else if (!$kwargs.$$is_hash) {
                throw Opal.ArgumentError.$new('expected kwargs');
              }

              ;

              if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'secret')) {
                throw Opal.ArgumentError.$new('missing keyword: secret');
              }

              secret = $kwargs.$$smap["secret"];
              ;

              if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'notations')) {
                throw Opal.ArgumentError.$new('missing keyword: notations');
              }

              notations = $kwargs.$$smap["notations"];
              ;

              if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'source')) {
                throw Opal.ArgumentError.$new('missing keyword: source');
              }

              source = $kwargs.$$smap["source"];
              ;
              cmp_op = $kwargs.$$smap["cmp_op"];

              if (cmp_op == null) {
                cmp_op = nil;
              }

              ;
              target_number = $kwargs.$$smap["target_number"];

              if (target_number == null) {
                target_number = nil;
              }

              ;
              reroll_cmp_op = $kwargs.$$smap["reroll_cmp_op"];

              if (reroll_cmp_op == null) {
                reroll_cmp_op = nil;
              }

              ;
              reroll_threshold = $kwargs.$$smap["reroll_threshold"];

              if (reroll_threshold == null) {
                reroll_threshold = nil;
              }

              ;
              self.secret = secret;
              self.notations = notations;
              self.cmp_op = cmp_op;
              self.target_number_node = target_number;
              self.reroll_cmp_op = reroll_cmp_op;
              self.reroll_threshold_node = reroll_threshold;
              return self.source = source;
            }, $Command_initialize$1.$$arity = 1);
            Opal.def(self, '$eval', $Command_eval$2 = function $Command_eval$2(game_system, randomizer) {
              var $a,
                  $b,
                  _$$8,
                  _$$9,
                  _$$10,
                  _$$11,
                  self = this,
                  round_type = nil,
                  cmp_op = nil,
                  $ret_or_1 = nil,
                  reroll_cmp_op = nil,
                  $ret_or_2 = nil,
                  $ret_or_3 = nil,
                  target_number = nil,
                  $ret_or_4 = nil,
                  reroll_threshold = nil,
                  $ret_or_5 = nil,
                  $ret_or_6 = nil,
                  reroll_condition = nil,
                  dice_queue = nil,
                  dice_list_list = nil,
                  dice_list = nil,
                  one_count = nil,
                  success_count = nil,
                  sequence = nil;

              round_type = game_system.$round_type();

              cmp_op = function () {
                if ($truthy($ret_or_1 = self.cmp_op)) {
                  return $ret_or_1;
                } else {
                  return game_system.$default_cmp_op();
                }

                ;
                return nil;
              }();

              reroll_cmp_op = function () {
                if ($truthy($ret_or_2 = function () {
                  if ($truthy($ret_or_3 = self.reroll_cmp_op)) {
                    return $ret_or_3;
                  } else {
                    return cmp_op;
                  }

                  ;
                  return nil;
                }())) {
                  return $ret_or_2;
                } else {
                  return ">=";
                }

                ;
                return nil;
              }();

              target_number = function () {
                if ($truthy($ret_or_4 = ($a = self.target_number_node, $a === nil || $a == null ? nil : $send($a, 'eval', [round_type])))) {
                  return $ret_or_4;
                } else {
                  return game_system.$default_target_number();
                }

                ;
                return nil;
              }();

              reroll_threshold = function () {
                if ($truthy($ret_or_5 = function () {
                  if ($truthy($ret_or_6 = ($b = self.reroll_threshold_node, $b === nil || $b == null ? nil : $send($b, 'eval', [round_type])))) {
                    return $ret_or_6;
                  } else {
                    return game_system.$reroll_dice_reroll_threshold();
                  }

                  ;
                  return nil;
                }())) {
                  return $ret_or_5;
                } else {
                  return target_number;
                }

                ;
                return nil;
              }();

              reroll_condition = $$($nesting, 'RerollCondition').$new(reroll_cmp_op, reroll_threshold);
              dice_queue = $send(self.notations, 'map', [], (_$$8 = function $$3(node) {
                var self = _$$8.$$s == null ? this : _$$8.$$s;

                if (node == null) {
                  node = nil;
                }

                ;
                return node.$to_dice(round_type);
              }, _$$8.$$s = self, _$$8.$$arity = 1, _$$8));

              if ($truthy($send(dice_queue, 'all?', [], (_$$9 = function $$4(d) {
                var self = _$$9.$$s == null ? this : _$$9.$$s;

                if (d == null) {
                  d = nil;
                }

                ;
                return reroll_condition['$valid?'](d.$sides());
              }, _$$9.$$s = self, _$$9.$$arity = 1, _$$9)))) {} else {
                return self.$result_with_text("" + self.source + " ＞ 条件が間違っています。2R6>=5 あるいは 2R6[5] のように振り足し目標値を指定してください。");
              }

              ;
              dice_list_list = self.$roll(dice_queue, randomizer, reroll_condition, game_system['$sort_barabara_dice?']());
              dice_list = dice_list_list.$flatten();
              one_count = dice_list_list.$take(self.notations.$size()).$flatten().$count(1);

              success_count = function () {
                if ($truthy(cmp_op)) {
                  return $send(dice_list, 'count', [], (_$$10 = function $$5(val) {
                    var self = _$$10.$$s == null ? this : _$$10.$$s;

                    if (val == null) {
                      val = nil;
                    }

                    ;
                    return val.$send(cmp_op, target_number);
                  }, _$$10.$$s = self, _$$10.$$arity = 1, _$$10));
                } else {
                  return 0;
                }

                ;
                return nil;
              }();

              sequence = [self.$expr(round_type, reroll_condition, cmp_op, target_number), $send(dice_list_list, 'map', [], (_$$11 = function $$6(list) {
                var self = _$$11.$$s == null ? this : _$$11.$$s;

                if (list == null) {
                  list = nil;
                }

                ;
                return list.$join(",");
              }, _$$11.$$s = self, _$$11.$$arity = 1, _$$11)).$join(" + "), "" + "成功数" + success_count, game_system.$grich_text(one_count, dice_list.$size(), success_count)].$compact();
              return self.$result_with_text(sequence.$join(" ＞ "));
            }, $Command_eval$2.$$arity = 2);
            self.$private();
            Opal.def(self, '$roll', $Command_roll$7 = function $$roll(dice_queue, randomizer, reroll_condition, sort) {
              var $a,
                  _$$12,
                  self = this,
                  dice_list_list = nil,
                  loop_count = nil,
                  $ret_or_7 = nil,
                  dice = nil,
                  dice_list = nil,
                  reroll_count = nil;

              dice_list_list = [];
              loop_count = 0;

              while ($truthy(function () {
                if ($truthy($ret_or_7 = dice_queue['$empty?']()['$!']())) {
                  return $rb_lt(loop_count, $$($nesting, 'REROLL_LIMIT'));
                } else {
                  return $ret_or_7;
                }

                ;
                return nil;
              }())) {
                dice = dice_queue.$shift();
                loop_count = $rb_plus(loop_count, 1);
                dice_list = dice.$roll(randomizer);

                if ($truthy(sort)) {
                  dice_list['$sort!']();
                }

                ;
                dice_list_list.$push(dice_list);
                reroll_count = $send(dice_list, 'count', [], (_$$12 = function $$8(val) {
                  var self = _$$12.$$s == null ? this : _$$12.$$s;

                  if (val == null) {
                    val = nil;
                  }

                  ;
                  return reroll_condition['$reroll?'](val);
                }, _$$12.$$s = self, _$$12.$$arity = 1, _$$12));

                if ($truthy($rb_gt(reroll_count, 0))) {
                  dice_queue.$push($$($nesting, 'Dice').$new(reroll_count, dice.$sides()));
                }

                ;
              }

              ;
              return dice_list_list;
            }, $Command_roll$7.$$arity = 4);
            Opal.def(self, '$expr', $Command_expr$9 = function $$expr(round_type, reroll_condition, cmp_op, target_number) {
              var _$$13,
                  self = this,
                  notation = nil,
                  reroll_cmp_op_text = nil,
                  cmp_op_text = nil;

              notation = $send(self.notations, 'map', [], (_$$13 = function $$10(n) {
                var self = _$$13.$$s == null ? this : _$$13.$$s;

                if (n == null) {
                  n = nil;
                }

                ;
                return n.$to_dice(round_type);
              }, _$$13.$$s = self, _$$13.$$arity = 1, _$$13)).$join("+");

              reroll_cmp_op_text = function () {
                if (reroll_condition.$cmp_op()['$=='](cmp_op)) {
                  return "";
                } else {
                  return $$($nesting, 'Format').$comparison_operator(reroll_condition.$cmp_op());
                }

                ;
                return nil;
              }();

              cmp_op_text = $$($nesting, 'Format').$comparison_operator(cmp_op);
              return "" + "(" + notation + "[" + reroll_cmp_op_text + reroll_condition.$threshold() + "]" + cmp_op_text + target_number + ")";
            }, $Command_expr$9.$$arity = 4);
            return (Opal.def(self, '$result_with_text', $Command_result_with_text$11 = function $$result_with_text(text) {
              var _$$14,
                  self = this;

              return $send($$($nesting, 'Result').$new(), 'tap', [], (_$$14 = function $$12(r) {
                var self = _$$14.$$s == null ? this : _$$14.$$s,
                    $writer = nil;
                if (self.secret == null) self.secret = nil;

                if (r == null) {
                  r = nil;
                }

                ;
                $writer = [self.secret];
                $send(r, 'secret=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                ;
                $writer = [text];
                $send(r, 'text=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                ;
              }, _$$14.$$s = self, _$$14.$$arity = 1, _$$14));
            }, $Command_result_with_text$11.$$arity = 1), nil) && 'result_with_text';
          })($nesting[0], null, $nesting);

          (function ($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'RerollCondition');
            var $nesting = [self].concat($parent_nesting),
                $RerollCondition_initialize$13,
                $RerollCondition_valid$ques$14,
                $RerollCondition_reroll$ques$15;
            self.$$prototype.threshold = self.$$prototype.cmp_op = nil;
            self.$attr_reader("cmp_op");
            self.$attr_reader("threshold");
            Opal.def(self, '$initialize', $RerollCondition_initialize$13 = function $$initialize(cmp_op, threshold) {
              var self = this;
              self.cmp_op = cmp_op;
              return self.threshold = threshold;
            }, $RerollCondition_initialize$13.$$arity = 2);
            Opal.def(self, '$valid?', $RerollCondition_valid$ques$14 = function $RerollCondition_valid$ques$14(sides) {
              var self = this,
                  $case = nil;

              if ($truthy(self.threshold)) {} else {
                return false;
              }

              ;
              return function () {
                $case = self.cmp_op;

                if ("<="['$===']($case)) {
                  return $rb_lt(self.threshold, sides);
                } else if ("<"['$===']($case)) {
                  return $rb_le(self.threshold, sides);
                } else if (">="['$===']($case)) {
                  return $rb_gt(self.threshold, 1);
                } else if (">"['$===']($case)) {
                  return $rb_ge(self.threshold, 1);
                } else if ("!="['$===']($case)) {
                  return Opal.Range.$new(1, sides, false)['$include?'](self.threshold);
                } else {
                  return true;
                }
              }();
            }, $RerollCondition_valid$ques$14.$$arity = 1);
            return (Opal.def(self, '$reroll?', $RerollCondition_reroll$ques$15 = function $RerollCondition_reroll$ques$15(value) {
              var self = this;
              return value.$send(self.cmp_op, self.threshold);
            }, $RerollCondition_reroll$ques$15.$$arity = 1), nil) && 'reroll?';
          })($nesting[0], null, $nesting);

          (function ($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Notation');
            var $nesting = [self].concat($parent_nesting),
                $Notation_initialize$16,
                $Notation_to_dice$17;
            self.$$prototype.times = self.$$prototype.sides = nil;
            Opal.def(self, '$initialize', $Notation_initialize$16 = function $$initialize(times, sides) {
              var self = this;
              self.times = times;
              return self.sides = sides;
            }, $Notation_initialize$16.$$arity = 2);
            return (Opal.def(self, '$to_dice', $Notation_to_dice$17 = function $$to_dice(round_type) {
              var self = this,
                  times = nil,
                  sides = nil;
              times = self.times.$eval(round_type);
              sides = self.sides.$eval(round_type);
              return $$($nesting, 'Dice').$new(times, sides);
            }, $Notation_to_dice$17.$$arity = 1), nil) && 'to_dice';
          })($nesting[0], null, $nesting);

          (function ($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'Dice');
            var $nesting = [self].concat($parent_nesting),
                $Dice_initialize$18,
                $Dice_roll$19,
                $Dice_to_s$20;
            self.$attr_reader("times", "sides");
            Opal.def(self, '$initialize', $Dice_initialize$18 = function $$initialize(times, sides) {
              var self = this;
              self.times = times;
              return self.sides = sides;
            }, $Dice_initialize$18.$$arity = 2);
            Opal.def(self, '$roll', $Dice_roll$19 = function $$roll(randomizer) {
              var self = this;
              return randomizer.$roll_barabara(self.$times(), self.$sides());
            }, $Dice_roll$19.$$arity = 1);
            return (Opal.def(self, '$to_s', $Dice_to_s$20 = function $$to_s() {
              var self = this;
              return "" + self.$times() + "R" + self.$sides();
            }, $Dice_to_s$20.$$arity = 0), nil) && 'to_s';
          })($nesting[0], null, $nesting);
        })($nesting[0], $nesting);
      })($nesting[0], $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/arithmetic/node"] = function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Arithmetic');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $parent_nesting) {
        var self = $module($base, 'Node');
        var $nesting = [self].concat($parent_nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'BinaryOp');
          var $nesting = [self].concat($parent_nesting),
              $BinaryOp_initialize$1,
              $BinaryOp_eval$2,
              $BinaryOp_output$3,
              $BinaryOp_s_exp$4,
              $BinaryOp_op_for_s_exp$5;
          self.$$prototype.lhs = self.$$prototype.rhs = self.$$prototype.op = nil;
          Opal.def(self, '$initialize', $BinaryOp_initialize$1 = function $$initialize(lhs, op, rhs) {
            var self = this;
            self.lhs = lhs;
            self.op = op;
            return self.rhs = rhs;
          }, $BinaryOp_initialize$1.$$arity = 3);
          Opal.def(self, '$eval', $BinaryOp_eval$2 = function $BinaryOp_eval$2(round_type) {
            var self = this,
                l = nil,
                r = nil;
            l = self.lhs.$eval(round_type);
            r = self.rhs.$eval(round_type);
            return l.$send(self.op, r);
          }, $BinaryOp_eval$2.$$arity = 1);
          Opal.def(self, '$output', $BinaryOp_output$3 = function $$output() {
            var self = this;
            return "" + self.lhs.$output() + self.op + self.rhs.$output();
          }, $BinaryOp_output$3.$$arity = 0);
          Opal.def(self, '$s_exp', $BinaryOp_s_exp$4 = function $$s_exp() {
            var self = this;
            return "" + "(" + self.$op_for_s_exp() + " " + self.lhs.$s_exp() + " " + self.rhs.$s_exp() + ")";
          }, $BinaryOp_s_exp$4.$$arity = 0);
          return (Opal.def(self, '$op_for_s_exp', $BinaryOp_op_for_s_exp$5 = function $$op_for_s_exp() {
            var self = this;
            return self.op;
          }, $BinaryOp_op_for_s_exp$5.$$arity = 0), nil) && 'op_for_s_exp';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideBase');
          var $nesting = [self].concat($parent_nesting),
              $DivideBase_initialize$6,
              $DivideBase_eval$7,
              $DivideBase_output$8,
              $DivideBase_rounding_method$9,
              $DivideBase_op_for_s_exp$10,
              $DivideBase_divide_and_round$11;
          self.$$prototype.lhs = self.$$prototype.rhs = self.$$prototype.op = nil;
          Opal.def(self, '$initialize', $DivideBase_initialize$6 = function $$initialize(lhs, rhs) {
            var $iter = $DivideBase_initialize$6.$$p,
                $yield = $iter || nil,
                self = this;
            if ($iter) $DivideBase_initialize$6.$$p = null;
            return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $DivideBase_initialize$6, false, true), 'initialize', [lhs, "/", rhs], null);
          }, $DivideBase_initialize$6.$$arity = 2);
          Opal.def(self, '$eval', $DivideBase_eval$7 = function $DivideBase_eval$7(round_type) {
            var self = this,
                l = nil,
                r = nil;
            l = self.lhs.$eval(round_type);
            r = self.rhs.$eval(round_type);

            if (r['$=='](0)) {
              self.$raise($$($nesting, 'ZeroDivisionError'));
            }

            ;
            return self.$divide_and_round(l, r, round_type);
          }, $DivideBase_eval$7.$$arity = 1);
          Opal.def(self, '$output', $DivideBase_output$8 = function $$output() {
            var $iter = $DivideBase_output$8.$$p,
                $yield = $iter || nil,
                self = this,
                $zuper = nil,
                $zuper_i = nil,
                $zuper_ii = nil;
            if ($iter) $DivideBase_output$8.$$p = null; // Prepare super implicit arguments

            for ($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }

            return "" + $send2(self, Opal.find_super_dispatcher(self, 'output', $DivideBase_output$8, false, true), 'output', $zuper, $iter) + self.$rounding_method();
          }, $DivideBase_output$8.$$arity = 0);
          self.$private();
          Opal.def(self, '$rounding_method', $DivideBase_rounding_method$9 = function $$rounding_method() {
            var self = this;
            return $$$(self.$class(), 'ROUNDING_METHOD');
          }, $DivideBase_rounding_method$9.$$arity = 0);
          Opal.def(self, '$op_for_s_exp', $DivideBase_op_for_s_exp$10 = function $$op_for_s_exp() {
            var self = this;
            return "" + self.op + self.$rounding_method();
          }, $DivideBase_op_for_s_exp$10.$$arity = 0);
          return (Opal.def(self, '$divide_and_round', $DivideBase_divide_and_round$11 = function $$divide_and_round(_dividend, _divisor, _round_type) {
            var self = this;
            return self.$raise($$($nesting, 'NotImplementedError'));
          }, $DivideBase_divide_and_round$11.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'BinaryOp'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideWithGameSystemDefault');
          var $nesting = [self].concat($parent_nesting),
              $DivideWithGameSystemDefault_divide_and_round$12;
          Opal.const_set($nesting[0], 'ROUNDING_METHOD', "");
          self.$private();
          return (Opal.def(self, '$divide_and_round', $DivideWithGameSystemDefault_divide_and_round$12 = function $$divide_and_round(dividend, divisor, round_type) {
            var self = this,
                $case = nil;
            return function () {
              $case = round_type;

              if ($$$($$($nesting, 'RoundType'), 'CEIL')['$===']($case)) {
                return $rb_divide(dividend.$to_f(), divisor).$ceil();
              } else if ($$$($$($nesting, 'RoundType'), 'ROUND')['$===']($case)) {
                return $rb_divide(dividend.$to_f(), divisor).$round();
              } else {
                return $rb_divide(dividend, divisor).$to_i();
              }
            }();
          }, $DivideWithGameSystemDefault_divide_and_round$12.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'DivideBase'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideWithCeil');
          var $nesting = [self].concat($parent_nesting),
              $DivideWithCeil_divide_and_round$13;
          Opal.const_set($nesting[0], 'ROUNDING_METHOD', "C");
          self.$private();
          return (Opal.def(self, '$divide_and_round', $DivideWithCeil_divide_and_round$13 = function $$divide_and_round(dividend, divisor, _round_type) {
            var self = this;
            return $rb_divide(dividend.$to_f(), divisor).$ceil();
          }, $DivideWithCeil_divide_and_round$13.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'DivideBase'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideWithRound');
          var $nesting = [self].concat($parent_nesting),
              $DivideWithRound_divide_and_round$14;
          Opal.const_set($nesting[0], 'ROUNDING_METHOD', "R");
          self.$private();
          return (Opal.def(self, '$divide_and_round', $DivideWithRound_divide_and_round$14 = function $$divide_and_round(dividend, divisor, _round_type) {
            var self = this;
            return $rb_divide(dividend.$to_f(), divisor).$round();
          }, $DivideWithRound_divide_and_round$14.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'DivideBase'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DivideWithFloor');
          var $nesting = [self].concat($parent_nesting),
              $DivideWithFloor_divide_and_round$15;
          Opal.const_set($nesting[0], 'ROUNDING_METHOD', "F");
          self.$private();
          return (Opal.def(self, '$divide_and_round', $DivideWithFloor_divide_and_round$15 = function $$divide_and_round(dividend, divisor, _round_type) {
            var self = this;
            return $rb_divide(dividend, divisor).$to_i();
          }, $DivideWithFloor_divide_and_round$15.$$arity = 3), nil) && 'divide_and_round';
        })($nesting[0], $$($nesting, 'DivideBase'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Negative');
          var $nesting = [self].concat($parent_nesting),
              $Negative_initialize$16,
              $Negative_eval$17,
              $Negative_output$18,
              $Negative_s_exp$19;
          self.$$prototype.body = nil;
          Opal.def(self, '$initialize', $Negative_initialize$16 = function $$initialize(body) {
            var self = this;
            return self.body = body;
          }, $Negative_initialize$16.$$arity = 1);
          Opal.def(self, '$eval', $Negative_eval$17 = function $Negative_eval$17(round_type) {
            var self = this;
            return self.body.$eval(round_type)['$-@']();
          }, $Negative_eval$17.$$arity = 1);
          Opal.def(self, '$output', $Negative_output$18 = function $$output() {
            var self = this;
            return "" + "-" + self.body.$output();
          }, $Negative_output$18.$$arity = 0);
          return (Opal.def(self, '$s_exp', $Negative_s_exp$19 = function $$s_exp() {
            var self = this;
            return "" + "(- " + self.body.$s_exp() + ")";
          }, $Negative_s_exp$19.$$arity = 0), nil) && 's_exp';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Parenthesis');
          var $nesting = [self].concat($parent_nesting),
              $Parenthesis_initialize$20,
              $Parenthesis_eval$21,
              $Parenthesis_output$22,
              $Parenthesis_s_exp$23;
          self.$$prototype.expr = nil;
          Opal.def(self, '$initialize', $Parenthesis_initialize$20 = function $$initialize(expr) {
            var self = this;
            return self.expr = expr;
          }, $Parenthesis_initialize$20.$$arity = 1);
          Opal.def(self, '$eval', $Parenthesis_eval$21 = function $Parenthesis_eval$21(round_type) {
            var self = this;
            return self.expr.$eval(round_type);
          }, $Parenthesis_eval$21.$$arity = 1);
          Opal.def(self, '$output', $Parenthesis_output$22 = function $$output() {
            var self = this;
            return "" + "(" + self.expr.$output() + ")";
          }, $Parenthesis_output$22.$$arity = 0);
          return (Opal.def(self, '$s_exp', $Parenthesis_s_exp$23 = function $$s_exp() {
            var self = this;
            return "" + "(Parenthesis " + self.expr.$s_exp() + ")";
          }, $Parenthesis_s_exp$23.$$arity = 0), nil) && 's_exp';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Number');
          var $nesting = [self].concat($parent_nesting),
              $Number_initialize$24,
              $Number_eval$25,
              $Number_output$26;
          self.$$prototype.value = nil;
          Opal.def(self, '$initialize', $Number_initialize$24 = function $$initialize(value) {
            var self = this;
            return self.value = value;
          }, $Number_initialize$24.$$arity = 1);
          Opal.def(self, '$eval', $Number_eval$25 = function $Number_eval$25(_round_type) {
            var self = this;
            return self.value;
          }, $Number_eval$25.$$arity = 1);
          Opal.def(self, '$output', $Number_output$26 = function $$output() {
            var self = this;
            return self.value.$to_s();
          }, $Number_output$26.$$arity = 0);
          return Opal.alias(self, "s_exp", "output");
        })($nesting[0], null, $nesting);
      })($nesting[0], $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/common_command/barabara_dice/parser"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash = Opal.hash,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  self.$require("racc/parser.rb");
  self.$require("bcdice/common_command/lexer");
  self.$require("bcdice/common_command/reroll_dice/node");
  self.$require("bcdice/arithmetic/node");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'CommonCommand');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $parent_nesting) {
        var self = $module($base, 'BarabaraDice');
        var $nesting = [self].concat($parent_nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Parser');
          var $nesting = [self].concat($parent_nesting),
              $Parser_parse$1,
              $Parser_parse$2,
              $Parser_next_token$3,
              $Parser__reduce_1$4,
              $Parser__reduce_2$5,
              $Parser__reduce_3$6,
              $Parser__reduce_4$7,
              $Parser__reduce_5$8,
              $Parser__reduce_6$9,
              $Parser__reduce_7$10,
              $Parser__reduce_8$11,
              $Parser__reduce_9$12,
              $Parser__reduce_10$13,
              $Parser__reduce_12$14,
              $Parser__reduce_13$15,
              $Parser__reduce_15$16,
              $Parser__reduce_16$17,
              $Parser__reduce_17$18,
              $Parser__reduce_18$19,
              $Parser__reduce_19$20,
              $Parser__reduce_20$21,
              $Parser__reduce_21$22,
              $Parser__reduce_23$23,
              $Parser__reduce_24$24,
              $Parser__reduce_none$25,
              racc_action_table = nil,
              racc_action_check = nil,
              racc_action_pointer = nil,
              racc_action_default = nil,
              racc_goto_table = nil,
              racc_goto_check = nil,
              racc_goto_pointer = nil,
              racc_goto_default = nil,
              racc_reduce_table = nil,
              racc_reduce_n = nil,
              racc_shift_n = nil,
              racc_token_table = nil,
              racc_nt_base = nil,
              racc_use_result_var = nil;
          self.$$prototype.lexer = nil;
          Opal.defs(self, '$parse', $Parser_parse$1 = function $$parse(source) {
            var self = this;
            return self.$new().$parse(source);
          }, $Parser_parse$1.$$arity = 1);
          Opal.def(self, '$parse', $Parser_parse$2 = function $$parse(source) {
            var self = this;

            try {
              self.lexer = $$($nesting, 'Lexer').$new(source);
              return self.$do_parse();
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'ParseError')])) {
                try {
                  return nil;
                } finally {
                  Opal.pop_exception();
                }
              } else {
                throw $err;
              }
            }
          }, $Parser_parse$2.$$arity = 1);
          self.$private();
          Opal.def(self, '$next_token', $Parser_next_token$3 = function $$next_token() {
            var self = this;
            return self.lexer.$next_token();
          }, $Parser_next_token$3.$$arity = 0);
          racc_action_table = [13, 9, 3, 9, 24, 25, 9, 9, 9, 26, 18, 19, 8, 12, 8, 18, 19, 8, 8, 8, 9, 4, 9, 38, 36, 37, 39, 18, 19, 18, 19, 8, 9, 8, 9, 27, 28, 24, 25, 18, 19, 18, 19, 8, 9, 8, 9, 27, 28, 27, 28, 18, 19, 18, 19, 8, 10, 8, 14];
          racc_action_check = [5, 2, 0, 8, 15, 15, 13, 14, 12, 15, 8, 8, 2, 5, 8, 12, 12, 13, 14, 12, 18, 1, 19, 34, 34, 34, 34, 18, 18, 19, 19, 18, 24, 19, 25, 16, 16, 21, 21, 24, 24, 25, 25, 24, 27, 25, 28, 31, 31, 32, 32, 27, 27, 28, 28, 27, 4, 28, 7];
          racc_action_pointer = [-6, 21, -1, nil, 56, -9, nil, 55, 1, nil, nil, nil, 6, 4, 5, -5, 24, nil, 18, 20, nil, 28, nil, nil, 30, 32, nil, 42, 44, nil, nil, 36, 38, nil, 19, nil, nil, nil, nil, nil];
          racc_action_default = [-2, -25, -25, -3, -25, -4, -7, -25, -25, -24, 40, -1, -25, -25, -25, -25, -11, -14, -25, -25, -22, -5, -6, -8, -25, -25, -23, -25, -25, -20, -21, -9, -10, -12, -15, -13, -16, -17, -18, -19];
          racc_goto_table = [7, 1, 6, 15, 2, 29, 30, 21, 31, 32, 5, 7, 23, 22, 33, 34, 11, 35];
          racc_goto_check = [7, 1, 6, 5, 2, 9, 9, 5, 8, 8, 3, 7, 7, 6, 9, 9, 4, 10];
          racc_goto_pointer = [nil, 1, 4, 8, 11, -5, 0, -2, -16, -13, -17];
          racc_goto_default = [nil, nil, nil, nil, nil, nil, nil, 20, 16, 17, nil];
          racc_reduce_table = [0, 0, "racc_error", 3, 24, "_reduce_1", 0, 25, "_reduce_2", 1, 25, "_reduce_3", 0, 27, "_reduce_4", 2, 27, "_reduce_5", 3, 26, "_reduce_6", 1, 26, "_reduce_7", 3, 29, "_reduce_8", 3, 28, "_reduce_9", 3, 28, "_reduce_10", 1, 28, "_reduce_none", 3, 31, "_reduce_12", 4, 31, "_reduce_13", 1, 31, "_reduce_none", 0, 33, "_reduce_15", 1, 33, "_reduce_16", 1, 33, "_reduce_17", 1, 33, "_reduce_18", 1, 33, "_reduce_19", 2, 32, "_reduce_20", 2, 32, "_reduce_21", 1, 32, "_reduce_none", 3, 30, "_reduce_23", 1, 30, "_reduce_24"];
          racc_reduce_n = 25;
          racc_shift_n = 40;
          racc_token_table = $hash(false, 0, "error", 1, "NUMBER", 2, "B", 3, "R", 4, "U", 5, "C", 6, "F", 7, "S", 8, "PLUS", 9, "MINUS", 10, "ASTERISK", 11, "SLASH", 12, "PARENL", 13, "PARENR", 14, "BRACKETL", 15, "BRACKETR", 16, "LESS", 17, "GREATER", 18, "EQUAL", 19, "NOT", 20, "AT", 21, "CMP_OP", 22);
          racc_nt_base = 23;
          racc_use_result_var = true;
          Opal.const_set($nesting[0], 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);
          Opal.const_set($nesting[0], 'Racc_token_to_s_table', ["$end", "error", "NUMBER", "B", "R", "U", "C", "F", "S", "PLUS", "MINUS", "ASTERISK", "SLASH", "PARENL", "PARENR", "BRACKETL", "BRACKETR", "LESS", "GREATER", "EQUAL", "NOT", "AT", "CMP_OP", "$start", "expr", "secret", "notations", "target", "add", "dice", "term", "mul", "unary", "round_type"]);
          Opal.const_set($nesting[0], 'Racc_debug_parser', false);
          Opal.def(self, '$_reduce_1', $Parser__reduce_1$4 = function $$_reduce_1(val, _values, result) {
            var self = this;
            result = $$$($$($nesting, 'Node'), 'Command').$new($hash2(["secret", "notations", "cmp_op", "target_number"], {
              "secret": val['$[]'](0),
              "notations": val['$[]'](1),
              "cmp_op": val['$[]'](2)['$[]']("cmp_op"),
              "target_number": val['$[]'](2)['$[]']("target")
            }));
            return result;
          }, $Parser__reduce_1$4.$$arity = 3);
          Opal.def(self, '$_reduce_2', $Parser__reduce_2$5 = function $$_reduce_2(val, _values, result) {
            var self = this;
            result = false;
            return result;
          }, $Parser__reduce_2$5.$$arity = 3);
          Opal.def(self, '$_reduce_3', $Parser__reduce_3$6 = function $$_reduce_3(val, _values, result) {
            var self = this;
            result = true;
            return result;
          }, $Parser__reduce_3$6.$$arity = 3);
          Opal.def(self, '$_reduce_4', $Parser__reduce_4$7 = function $$_reduce_4(val, _values, result) {
            var self = this;
            result = $hash2([], {});
            return result;
          }, $Parser__reduce_4$7.$$arity = 3);
          Opal.def(self, '$_reduce_5', $Parser__reduce_5$8 = function $$_reduce_5(val, _values, result) {
            var $a,
                $b,
                self = this,
                cmp_op = nil,
                target = nil;
            $b = val, $a = Opal.to_ary($b), cmp_op = $a[0] == null ? nil : $a[0], target = $a[1] == null ? nil : $a[1], $b;

            if ($truthy(cmp_op)) {} else {
              self.$raise($$($nesting, 'ParseError'));
            }

            ;
            result = $hash2(["cmp_op", "target"], {
              "cmp_op": cmp_op,
              "target": target
            });
            return result;
          }, $Parser__reduce_5$8.$$arity = 3);
          Opal.def(self, '$_reduce_6', $Parser__reduce_6$9 = function $$_reduce_6(val, _values, result) {
            var self = this,
                notations = nil;
            notations = val['$[]'](0);
            notations.$push(val['$[]'](2));
            result = notations;
            return result;
          }, $Parser__reduce_6$9.$$arity = 3);
          Opal.def(self, '$_reduce_7', $Parser__reduce_7$10 = function $$_reduce_7(val, _values, result) {
            var self = this;
            result = [val['$[]'](0)];
            return result;
          }, $Parser__reduce_7$10.$$arity = 3);
          Opal.def(self, '$_reduce_8', $Parser__reduce_8$11 = function $$_reduce_8(val, _values, result) {
            var self = this,
                times = nil,
                sides = nil;
            times = val['$[]'](0);
            sides = val['$[]'](2);
            result = $$$($$($nesting, 'Node'), 'Notation').$new(times, sides);
            return result;
          }, $Parser__reduce_8$11.$$arity = 3);
          Opal.def(self, '$_reduce_9', $Parser__reduce_9$12 = function $$_reduce_9(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'BinaryOp').$new(val['$[]'](0), "+", val['$[]'](2));
            return result;
          }, $Parser__reduce_9$12.$$arity = 3);
          Opal.def(self, '$_reduce_10', $Parser__reduce_10$13 = function $$_reduce_10(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'BinaryOp').$new(val['$[]'](0), "-", val['$[]'](2));
            return result;
          }, $Parser__reduce_10$13.$$arity = 3);
          Opal.def(self, '$_reduce_12', $Parser__reduce_12$14 = function $$_reduce_12(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'BinaryOp').$new(val['$[]'](0), "*", val['$[]'](2));
            return result;
          }, $Parser__reduce_12$14.$$arity = 3);
          Opal.def(self, '$_reduce_13', $Parser__reduce_13$15 = function $$_reduce_13(val, _values, result) {
            var self = this,
                divied_class = nil;
            divied_class = val['$[]'](3);
            result = divied_class.$new(val['$[]'](0), val['$[]'](2));
            return result;
          }, $Parser__reduce_13$15.$$arity = 3);
          Opal.def(self, '$_reduce_15', $Parser__reduce_15$16 = function $$_reduce_15(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithGameSystemDefault');
            return result;
          }, $Parser__reduce_15$16.$$arity = 3);
          Opal.def(self, '$_reduce_16', $Parser__reduce_16$17 = function $$_reduce_16(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithCeil');
            return result;
          }, $Parser__reduce_16$17.$$arity = 3);
          Opal.def(self, '$_reduce_17', $Parser__reduce_17$18 = function $$_reduce_17(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithCeil');
            return result;
          }, $Parser__reduce_17$18.$$arity = 3);
          Opal.def(self, '$_reduce_18', $Parser__reduce_18$19 = function $$_reduce_18(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithRound');
            return result;
          }, $Parser__reduce_18$19.$$arity = 3);
          Opal.def(self, '$_reduce_19', $Parser__reduce_19$20 = function $$_reduce_19(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'DivideWithFloor');
            return result;
          }, $Parser__reduce_19$20.$$arity = 3);
          Opal.def(self, '$_reduce_20', $Parser__reduce_20$21 = function $$_reduce_20(val, _values, result) {
            var self = this;
            result = val['$[]'](1);
            return result;
          }, $Parser__reduce_20$21.$$arity = 3);
          Opal.def(self, '$_reduce_21', $Parser__reduce_21$22 = function $$_reduce_21(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'Negative').$new(val['$[]'](1));
            return result;
          }, $Parser__reduce_21$22.$$arity = 3);
          Opal.def(self, '$_reduce_23', $Parser__reduce_23$23 = function $$_reduce_23(val, _values, result) {
            var self = this;
            result = val['$[]'](1);
            return result;
          }, $Parser__reduce_23$23.$$arity = 3);
          Opal.def(self, '$_reduce_24', $Parser__reduce_24$24 = function $$_reduce_24(val, _values, result) {
            var self = this;
            result = $$$($$$($$($nesting, 'Arithmetic'), 'Node'), 'Number').$new(val['$[]'](0));
            return result;
          }, $Parser__reduce_24$24.$$arity = 3);
          return (Opal.def(self, '$_reduce_none', $Parser__reduce_none$25 = function $$_reduce_none(val, _values, result) {
            var self = this;
            return val['$[]'](0);
          }, $Parser__reduce_none$25.$$arity = 3), nil) && '_reduce_none';
        })($nesting[0], $$$($$($nesting, 'Racc'), 'Parser'), $nesting);
      })($nesting[0], $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/common_command/barabara_dice"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $send = Opal.send;
  self.$require("bcdice/common_command/barabara_dice/parser");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'CommonCommand');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $parent_nesting) {
        var self = $module($base, 'BarabaraDice');
        var $nesting = [self].concat($parent_nesting);
        Opal.const_set($nesting[0], 'PREFIX_PATTERN', /\d+B\d+/.$freeze());

        (function (self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting),
              $eval$1;
          return (Opal.def(self, '$eval', $eval$1 = function $eval$1(command, game_system, randomizer) {
            var $a,
                self = this,
                cmd = nil;
            cmd = $$($nesting, 'Parser').$parse(command);
            return $a = cmd, $a === nil || $a == null ? nil : $send($a, 'eval', [game_system, randomizer]);
          }, $eval$1.$$arity = 3), nil) && 'eval';
        })(Opal.get_singleton_class(self), $nesting);
      })($nesting[0], $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Table');
        var $nesting = [self].concat($parent_nesting),
            $Table_from_i18n$1,
            $Table_initialize$2,
            $Table_roll$3,
            $Table_choice$4;
        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $Table_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale"], {
            "locale": locale
          }));
          return self.$new(table['$[]']("name"), table['$[]']("type"), table['$[]']("items"));
        }, $Table_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $Table_initialize$2 = function $$initialize(name, type, items) {
          var self = this,
              m = nil;
          self.name = name;
          self.items = items.$freeze();
          m = /(\d+)D(\d+)/i.$match(type);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
          }

          ;
          self.times = m['$[]'](1).$to_i();
          return self.sides = m['$[]'](2).$to_i();
        }, $Table_initialize$2.$$arity = 3);
        Opal.def(self, '$roll', $Table_roll$3 = function $$roll(bcdice) {
          var self = this,
              value = nil;
          value = bcdice.$roll_sum(self.times, self.sides);
          return self.$choice(value);
        }, $Table_roll$3.$$arity = 1);
        return (Opal.def(self, '$choice', $Table_choice$4 = function $$choice(value) {
          var self = this,
              index = nil;
          index = $rb_minus(value, self.times);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index));
        }, $Table_choice$4.$$arity = 1), nil) && 'choice';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  self.$require("bcdice/common_command/barabara_dice");
  self.$require("bcdice/dice_table/table");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NinjaSlayer');
        var $nesting = [self].concat($parent_nesting),
            $NinjaSlayer_initialize$1,
            $NinjaSlayer_change_text$2,
            $NinjaSlayer_eval_game_system_specific_command$3,
            $NinjaSlayer_parse$4,
            $NinjaSlayer_parseEV$5,
            $NinjaSlayer_parseAT$6,
            $NinjaSlayer_parseEL$7,
            $NinjaSlayer_executeEV$8,
            $NinjaSlayer_executeAT$9,
            $NinjaSlayer_executeEL$11,
            $NinjaSlayer_integerValueOfDifficulty$14,
            $NinjaSlayer_bRollCommand$15;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "NinjaSlayer");
        Opal.const_set($nesting[0], 'NAME', "ニンジャスレイヤーTRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "にんしやすれいやあRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・通常判定　NJ\n" + "　NJx[y] or NJx@y or NJx\n" + "　x=判定ダイス y=難易度 省略時はNORMAL(4)\n" + "　例:NJ4@H 難易度HARD、判定ダイス4で判定\n" + "・回避判定　EV\n" + "　EVx[y]/z or EVx@y/z or EVx/z or EVx[y] or EVx@y or EVx\n" + "　x=判定ダイス y=難易度 z=攻撃側の成功数(省略可) 難易度を省略時はNORMAL(4)\n" + "　攻撃側の成功数を指定した場合、カウンターカラテ発生時には表示\n" + "　例:EV5/3 難易度NORMAL(省略時)、判定ダイス5、攻撃側の成功数3で判定\n" + "・近接攻撃　AT\n" + "　ATx[y] or ATx@y or ATx\n" + "　x=判定ダイス y=難易度 省略時はNORMAL(4) サツバツ！発生時には表示\n" + "　例:AT6[H] 難易度HARD,判定ダイス5で近接攻撃の判定\n" + "・サツバツ判定　SB\n" + "・電子戦　EL\n" + "　ELx[y] or ELx@y or ELx\n" + "　x=判定ダイス y=難易度 省略時はNORMAL(4)\n" + "　例:EL6[H] 難易度HARD,判定ダイス5で電子戦の判定\n" + "\n" + "・難易度\n" + "　KIDS=K,EASY=E,NORMAL=N,HARD=H,ULTRA HARD=UH 数字にも対応\n");
        Opal.def(self, '$initialize', $NinjaSlayer_initialize$1 = function $$initialize(command) {
          var $iter = $NinjaSlayer_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $NinjaSlayer_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $NinjaSlayer_initialize$1, false, true), 'initialize', [command], null);
          self.default_cmp_op = ">=";
          return self.default_target_number = 4;
        }, $NinjaSlayer_initialize$1.$$arity = 1);
        Opal.const_set($nesting[0], 'DIFFICULTY_VALUE_RE', "UH|[2-6KENH]".$freeze());
        Opal.const_set($nesting[0], 'DIFFICULTY_RE', ("" + "(\\[(" + $$($nesting, 'DIFFICULTY_VALUE_RE') + ")\\]|@(" + $$($nesting, 'DIFFICULTY_VALUE_RE') + "))").$freeze());
        Opal.const_set($nesting[0], 'NJ_RE', Opal.regexp(["^(S)?NJ(\\d+)", $$($nesting, 'DIFFICULTY_RE'), "?$"], 'i').$freeze());
        Opal.const_set($nesting[0], 'EV_RE', Opal.regexp(["^EV(\\d+)", $$($nesting, 'DIFFICULTY_RE'), "?(?:/(\\d+))?$"], 'i').$freeze());
        Opal.const_set($nesting[0], 'AT_RE', Opal.regexp(["^AT(\\d+)", $$($nesting, 'DIFFICULTY_RE'), "?$"], 'i').$freeze());
        Opal.const_set($nesting[0], 'EL_RE', Opal.regexp(["^EL(\\d+)", $$($nesting, 'DIFFICULTY_RE'), "?$"], 'i').$freeze());
        Opal.const_set($nesting[0], 'EV', $$($nesting, 'Struct').$new("num", "difficulty", "targetValue"));
        Opal.const_set($nesting[0], 'AT', $$($nesting, 'Struct').$new("num", "difficulty"));
        Opal.const_set($nesting[0], 'EL', $$($nesting, 'Struct').$new("num", "difficulty"));
        Opal.const_set($nesting[0], 'DIFFICULTY_SYMBOL_TO_INTEGER', $hash2(["K", "E", "N", "H", "UH"], {
          "K": 2,
          "E": 3,
          "N": 4,
          "H": 5,
          "UH": 6
        }).$freeze());
        Opal.def(self, '$change_text', $NinjaSlayer_change_text$2 = function $$change_text(str) {
          var self = this,
              m = nil,
              b_roll = nil,
              $ret_or_1 = nil;
          m = $$($nesting, 'NJ_RE').$match(str);

          if ($truthy(m)) {} else {
            return str;
          }

          ;
          b_roll = self.$bRollCommand(m['$[]'](2), self.$integerValueOfDifficulty(function () {
            if ($truthy($ret_or_1 = m['$[]'](4))) {
              return $ret_or_1;
            } else {
              return m['$[]'](5);
            }

            ;
            return nil;
          }()));
          return "" + m['$[]'](1) + b_roll;
        }, $NinjaSlayer_change_text$2.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $NinjaSlayer_eval_game_system_specific_command$3 = function $$eval_game_system_specific_command(command) {
          var self = this,
              table = nil,
              $case = nil,
              node = nil;
          self.$debug("eval_game_system_specific_command begin string", command);

          if ($truthy(table = $$($nesting, 'TABLES')['$[]'](command))) {
            return table.$roll(self.$randomizer());
          }

          ;
          return function () {
            $case = node = self.$parse(command);

            if ($$($nesting, 'EV')['$===']($case)) {
              return self.$executeEV(node);
            } else if ($$($nesting, 'AT')['$===']($case)) {
              return self.$executeAT(node);
            } else if ($$($nesting, 'EL')['$===']($case)) {
              return self.$executeEL(node);
            } else {
              return nil;
            }
          }();
        }, $NinjaSlayer_eval_game_system_specific_command$3.$$arity = 1);
        self.$private();
        Opal.def(self, '$parse', $NinjaSlayer_parse$4 = function $$parse(command) {
          var self = this,
              $case = nil;
          return function () {
            $case = command;

            if ($$($nesting, 'EV_RE')['$===']($case)) {
              return self.$parseEV($$($nesting, 'Regexp').$last_match());
            } else if ($$($nesting, 'AT_RE')['$===']($case)) {
              return self.$parseAT($$($nesting, 'Regexp').$last_match());
            } else if ($$($nesting, 'EL_RE')['$===']($case)) {
              return self.$parseEL($$($nesting, 'Regexp').$last_match());
            } else {
              return nil;
            }
          }();
        }, $NinjaSlayer_parse$4.$$arity = 1);
        Opal.def(self, '$parseEV', $NinjaSlayer_parseEV$5 = function $$parseEV(m) {
          var $a,
              self = this,
              num = nil,
              difficulty = nil,
              $ret_or_2 = nil,
              targetValue = nil;
          num = m['$[]'](1).$to_i();
          difficulty = self.$integerValueOfDifficulty(function () {
            if ($truthy($ret_or_2 = m['$[]'](3))) {
              return $ret_or_2;
            } else {
              return m['$[]'](4);
            }

            ;
            return nil;
          }());
          targetValue = ($a = m['$[]'](5), $a === nil || $a == null ? nil : $send($a, 'to_i', []));
          return $$($nesting, 'EV').$new(num, difficulty, targetValue);
        }, $NinjaSlayer_parseEV$5.$$arity = 1);
        Opal.def(self, '$parseAT', $NinjaSlayer_parseAT$6 = function $$parseAT(m) {
          var self = this,
              num = nil,
              difficulty = nil,
              $ret_or_3 = nil;
          num = m['$[]'](1).$to_i();
          difficulty = self.$integerValueOfDifficulty(function () {
            if ($truthy($ret_or_3 = m['$[]'](3))) {
              return $ret_or_3;
            } else {
              return m['$[]'](4);
            }

            ;
            return nil;
          }());
          return $$($nesting, 'AT').$new(num, difficulty);
        }, $NinjaSlayer_parseAT$6.$$arity = 1);
        Opal.def(self, '$parseEL', $NinjaSlayer_parseEL$7 = function $$parseEL(m) {
          var self = this,
              num = nil,
              difficulty = nil,
              $ret_or_4 = nil;
          num = m['$[]'](1).$to_i();
          difficulty = self.$integerValueOfDifficulty(function () {
            if ($truthy($ret_or_4 = m['$[]'](3))) {
              return $ret_or_4;
            } else {
              return m['$[]'](4);
            }

            ;
            return nil;
          }());
          return $$($nesting, 'EL').$new(num, difficulty);
        }, $NinjaSlayer_parseEL$7.$$arity = 1);
        Opal.def(self, '$executeEV', $NinjaSlayer_executeEV$8 = function $$executeEV(ev) {
          var self = this,
              command = nil,
              roll_result = nil,
              parts = nil,
              $ret_or_5 = nil;
          command = self.$bRollCommand(ev.$num(), ev.$difficulty());
          roll_result = $$$($$$($$($nesting, 'BCDice'), 'CommonCommand'), 'BarabaraDice').$eval(command, self, self.randomizer);
          parts = [roll_result.$text()];

          if ($truthy(function () {
            if ($truthy($ret_or_5 = ev.$targetValue())) {
              return $rb_gt(roll_result.$success_num(), ev.$targetValue());
            } else {
              return $ret_or_5;
            }

            ;
            return nil;
          }())) {
            parts.$push("カウンターカラテ!!");
          }

          ;
          return parts.$join(" ＞ ");
        }, $NinjaSlayer_executeEV$8.$$arity = 1);
        Opal.def(self, '$executeAT', $NinjaSlayer_executeAT$9 = function $$executeAT(at) {
          var _$$15,
              self = this,
              command = nil,
              roll_result = nil,
              values = nil,
              num_of_max_values = nil,
              parts = nil;

          command = self.$bRollCommand(at.$num(), at.$difficulty());
          roll_result = $$$($$$($$($nesting, 'BCDice'), 'CommonCommand'), 'BarabaraDice').$eval(command, self, self.randomizer);
          values = $send(roll_result.$rands(), 'map', [], (_$$15 = function $$10(v, _) {
            var self = _$$15.$$s == null ? this : _$$15.$$s;

            if (v == null) {
              v = nil;
            }

            ;

            if (_ == null) {
              _ = nil;
            }

            ;
            return v;
          }, _$$15.$$s = self, _$$15.$$arity = 2, _$$15));
          num_of_max_values = values.$count(6);
          parts = [roll_result.$text()];

          if ($truthy($rb_ge(num_of_max_values, 2))) {
            parts.$push("サツバツ!!");
          }

          ;
          return parts.$join(" ＞ ");
        }, $NinjaSlayer_executeAT$9.$$arity = 1);
        Opal.def(self, '$executeEL', $NinjaSlayer_executeEL$11 = function $$executeEL(el) {
          var _$$16,
              _$$17,
              self = this,
              command = nil,
              roll_result = nil,
              values = nil,
              num_of_max_values = nil,
              sum_of_true_values = nil;

          command = self.$bRollCommand(el.$num(), el.$difficulty());
          roll_result = $$$($$$($$($nesting, 'BCDice'), 'CommonCommand'), 'BarabaraDice').$eval(command, self, self.randomizer);
          values = $send(roll_result.$rands(), 'map', [], (_$$16 = function $$12(v, _) {
            var self = _$$16.$$s == null ? this : _$$16.$$s;

            if (v == null) {
              v = nil;
            }

            ;

            if (_ == null) {
              _ = nil;
            }

            ;
            return v;
          }, _$$16.$$s = self, _$$16.$$arity = 2, _$$16));
          num_of_max_values = values.$count(6);
          sum_of_true_values = $send(values, 'count', [], (_$$17 = function $$13(v) {
            var self = _$$17.$$s == null ? this : _$$17.$$s;

            if (v == null) {
              v = nil;
            }

            ;
            return $rb_ge(v, el.$difficulty());
          }, _$$17.$$s = self, _$$17.$$arity = 1, _$$17));

          if ($truthy($rb_ge(num_of_max_values, 1))) {
            return ["" + roll_result.$text() + " + " + num_of_max_values, $rb_plus(sum_of_true_values, num_of_max_values)].$join(" ＞ ");
          }

          ;
          return roll_result.$text();
        }, $NinjaSlayer_executeEL$11.$$arity = 1);
        Opal.def(self, '$integerValueOfDifficulty', $NinjaSlayer_integerValueOfDifficulty$14 = function $$integerValueOfDifficulty(s) {
          var self = this;

          if ($truthy(s)) {} else {
            return 4;
          }

          ;

          if ($truthy(/^[2-6]$/.$match(s))) {
            return s.$to_i();
          }

          ;
          return $$($nesting, 'DIFFICULTY_SYMBOL_TO_INTEGER').$fetch(s.$upcase());
        }, $NinjaSlayer_integerValueOfDifficulty$14.$$arity = 1);
        Opal.def(self, '$bRollCommand', $NinjaSlayer_bRollCommand$15 = function $$bRollCommand(num, difficulty) {
          var self = this;
          return "" + num + "B6>=" + difficulty;
        }, $NinjaSlayer_bRollCommand$15.$$arity = 2);
        Opal.const_set($nesting[0], 'SATSUBATSU_TABLE', ["「死ねーッ！」腹部に強烈な一撃！　敵はくの字に折れ曲がり、ワイヤーアクションめいて吹っ飛んだ！：本来のダメージ+1ダメージを与える。敵は後方の壁または障害物に向かって、何マスでもまっすぐ弾き飛ばされる（他のキャラのいるマスは通過する）。壁または障害物に接触した時点で、敵はさらに1ダメージを受ける。敵はこの激突ダメージに対して改めて『回避判定』を行っても良い。", "「イヤーッ！」頭部への痛烈なカラテ！　眼球破壊もしくは激しい脳震盪が敵を襲う！：本来のダメージを与える。さらに敵の【ニューロン】と【ワザマエ】がそれぞれ1ずつ減少する（これによる最低値は1）。残虐ボーナスにより【万札】がD3発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD3上昇する。", "「苦しみ抜いて死ぬがいい」急所を情け容赦なく破壊！：本来のダメージ+1ダメージを与える。耐え難い苦痛により、敵は【精神力】が-2され、【ニューロン】が1減少する（これによる最低値は1）。残虐ボーナスにより【万札】がD3発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD3上昇する。", "「逃げられるものなら逃げてみよ」敵の脚を粉砕！：本来のダメージを与える。さらに敵の【脚力】がD3減少する（最低値は1）。残虐ボーナスにより【万札】がD3発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD3上昇する。", "「これで手も足も出まい！」敵の両腕を切り飛ばした！　鮮血がスプリンクラーめいて噴き出す！：本来のダメージ+1ダメージを与える。さらに敵の【ワザマエ】と【カラテ】がそれぞれ2減少する（最低値は1）。残虐ボーナスにより【万札】がD3発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD3上昇する。", "「イイイヤアアアアーーーーッ！」ヤリめいたチョップが敵の胸を貫通！　さらに心臓を掴み取り、握りつぶした！　ナムアミダブツ！：敵は残り【体力】に関係なく即死する。残虐ボーナスにより【万札】がD6発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD6上昇する。"].$freeze());
        Opal.const_set($nesting[0], 'TABLES', $hash2(["SB"], {
          "SB": $$$($$($nesting, 'DiceTable'), 'Table').$new("サツバツ表", "1D6", $$($nesting, 'SATSUBATSU_TABLE'))
        }).$freeze());
        return self.$register_prefix("NJ", "EV", "AT", "EL", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~NinjaSlayer~index.js.map