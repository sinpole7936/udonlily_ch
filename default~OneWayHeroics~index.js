(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~OneWayHeroics~index"],{

/***/ "+vCw":
/*!*********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/OneWayHeroics.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/one_way_heroics/tables"] = function (Opal) {
  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $hash = Opal.hash,
      $range = Opal.range;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OneWayHeroics');
        var $nesting = [self].concat($parent_nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'GoldFlow');
          var $nesting = [self].concat($parent_nesting),
              $GoldFlow_initialize$1,
              $GoldFlow_roll$2;
          self.$$prototype.times = self.$$prototype.action = nil;
          Opal.def(self, '$initialize', $GoldFlow_initialize$1 = function $$initialize(times, action) {
            var self = this;
            self.times = times;
            return self.action = action;
          }, $GoldFlow_initialize$1.$$arity = 2);
          return (Opal.def(self, '$roll', $GoldFlow_roll$2 = function $$roll(randomizer) {
            var self = this,
                dice_list = nil,
                dice_total = nil,
                gold = nil,
                sequence = nil;
            dice_list = randomizer.$roll_barabara(self.times, 6);
            dice_total = dice_list.$sum();
            gold = $rb_times(dice_total, 100);
            sequence = ["" + self.times + "D6に100を掛け、それだけの【所持金】を" + self.action, "" + self.times + "D6[" + dice_list.$join(",") + "]*100", "" + "【所持金】" + gold + " を" + self.action];
            return sequence.$join(" ＞ ");
          }, $GoldFlow_roll$2.$$arity = 1), nil) && 'roll';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'StatusDown');
          var $nesting = [self].concat($parent_nesting),
              $StatusDown_initialize$3,
              $StatusDown_roll$4;
          self.$$prototype.times = self.$$prototype.status = nil;
          Opal.def(self, '$initialize', $StatusDown_initialize$3 = function $$initialize(status, times) {
            var self = this;
            self.status = status;
            return self.times = times;
          }, $StatusDown_initialize$3.$$arity = 2);
          return (Opal.def(self, '$roll', $StatusDown_roll$4 = function $$roll(randomizer) {
            var self = this,
                dice_list = nil,
                total = nil,
                sequence = nil;
            dice_list = randomizer.$roll_barabara(self.times, 6);
            total = dice_list.$sum();
            sequence = ["" + self.status + "が" + self.times + "D6減少する", "" + self.times + "D6[" + dice_list.$join(",") + "]", "" + self.status + "が " + total + " 減少する"];
            return sequence.$join(" ＞ ");
          }, $StatusDown_roll$4.$$arity = 1), nil) && 'roll';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'MoveToTable');
          var $nesting = [self].concat($parent_nesting),
              $MoveToTable_initialize$5,
              $MoveToTable_roll$6;
          self.$$prototype.text = self.$$prototype.table_key = nil;
          Opal.def(self, '$initialize', $MoveToTable_initialize$5 = function $$initialize(text, table_key) {
            var self = this;
            self.text = text;
            return self.table_key = table_key;
          }, $MoveToTable_initialize$5.$$arity = 2);
          return (Opal.def(self, '$roll', $MoveToTable_roll$6 = function $$roll(randomizer) {
            var self = this;
            return ("" + self.text + " ＞\n" + " " + self.table_key + " ＞ " + $$($nesting, 'TABLES')['$[]'](self.table_key).$roll(randomizer) + "\n").$chomp();
          }, $MoveToTable_roll$6.$$arity = 1), nil) && 'roll';
        })($nesting[0], null, $nesting);

        return Opal.const_set($nesting[0], 'TABLES', $hash2(["FT", "DC", "PR", "TT", "EC", "RNPC", "SCT", "FCLT", "FCLTP", "OUTENC", "OUTENCP", "MONFT", "MONFTP", "RANI", "DROP", "DROPWP", "DROPAR", "DROPHW", "DROPFD", "DROPSC", "DROPOT", "DROPP", "DROPDRP", "DROPSC2", "DROPWP2", "DROPAR2", "DROPHWP", "DROPFD2", "DROPOT2", "DROPRAREBOX2", "KNGFTP"], {
          "FT": $$$($$($nesting, 'DiceTable'), 'ChainTable').$new("ファンブル表", "1D6", ["装備以外のアイテムのうちプレイヤー指定の１つを失う", "装備のうちプレイヤー指定の１つを失う", $$($nesting, 'GoldFlow').$new(1, "失う"), $$($nesting, 'GoldFlow').$new(1, "拾う"), "【経験値】２を獲得する", "【経験値】４を獲得する"]),
          "DC": $$$($$($nesting, 'DiceTable'), 'ChainTable').$new("魔王追撃表", "1D6", ["装備以外のアイテムのうちＧＭ指定の１つを失う", "装備のうちＧＭ指定の１つを失う", $$($nesting, 'GoldFlow').$new(2, "失う"), $$($nesting, 'StatusDown').$new("【ＬＩＦＥ】", 1), $$($nesting, 'StatusDown').$new("【ＳＴ】", 1), $$($nesting, 'StatusDown').$new("【ＬＩＦＥ】", 2)]),
          "PR": $$$($$($nesting, 'DiceTable'), 'Table').$new("進行ルート表", "1D6", ["少し荒れた地形が続く。【日数】から【筋力】を引いただけ【ＳＴ】が減少する（最低０）", "穏やかな地形が続く。【日数】から【敏捷】を引いただけ【ＳＴ】が減少する（最低０）", "険しい岩山だ。【日数】に１を足して【生命】を引いただけ【ＳＴ】が減少する（最低０）「登山」", "山で迷った。【日数】に２を足して【知力】を引いただけ【ＳＴ】が減少する（最低０）「登山」", "川を泳ぐ。【日数】に１を足して【意志】を引いただけ【ＳＴ】が減少する（最低０）「水泳」", "広い川を船で渡る。【日数】に２を足して【魅力】を引いただけ【ＳＴ】が減少する（最低０）「水泳」"]),
          "TT": $$$($$($nesting, 'DiceTable'), 'Table').$new("会話テーマ表", "1D6", ["身体の悩みごとについて話す。【筋力】で判定。", "仕事の悩みごとについて話す。【敏捷】で判定。", "家族の悩みごとについて話す。【生命】で判定。", "勇者としてこれでいいのか的悩みごとを話す。【知力】で判定。", "友人関係の悩みごとを話す。【意志】で判定。", "恋の悩みごとを話す。【魅力】で判定。"]),
          "EC": $$$($$($nesting, 'DiceTable'), 'Table').$new("逃走判定表", "1D6", ["崖を登れば逃げられそうだ。【筋力】を使用する。", "障害物はない。走るしかない。【敏捷】を使用する。", "しつこく追われる。【生命】を使用する。", "隠れられる地形がある。【知力】を使用する。", "背中を向ける勇気が出るか？　【意志】を使用す", "もう人徳しか頼れない。【魅力】を使用する。"]),
          "RNPC": $$$($$($nesting, 'DiceTable'), 'Table').$new("ランダムNPC特徴表", "2D6", ["【物持ちの】", "【目のいい】", "【弱そうな】", "【宝石好きな】", "【エッチな】", "【ケチな】", "【変態の】", "【金持ちの】", "【強そうな】", "【目の悪い】", "【すばやい】"]),
          "SCT": $$$($$($nesting, 'DiceTable'), 'Table').$new("偵察表", "1D6", ["山に突き当たる。「登山」判定：【筋力】　ジャッジ：山を登る描写。", "川を流れ下る。「水泳」判定：【敏捷】　ジャッジ：川でピンチに陥る描写。", "広い湖だ……。「水泳」判定：【生命】　ジャッジ：湖面を泳ぐ描写。", "山の楽なルートを探そう。「登山」判定：【知力】　ジャッジ：山の豆知識。", "迫る闇から恐怖のあまり目を離せない。判定：【意志】　ジャッジ：勇者としての決意。", "任意のＮＰＣに会って情報を聞く。判定：【魅力】　ジャッジ：相手を立てる会話。"]),
          "FCLT": $$$($$($nesting, 'DiceTable'), 'Table').$new("施設表", "2D6", ["聖なる神殿（１５２ページ）。", "魔王の力を封じた神殿（１５２ページ）。", "耳長たちの村（１５２ページ）。", "「村遭遇表」へ移動。大きな街なので村遭遇表を２回使用し、好きな結果を選べる。", "「村遭遇表」へ移動。小さな村だ。", "エリアの地形が「雪原」なら雪国の小屋（１５２ページ）。エリアの地形が「山岳」なら山小屋（１５２ページ）。それ以外の地形なら「村遭遇表」へ移動。この村は「石の小屋」だ。", "村遭遇表」へ移動。小さな村だ。", "村遭遇表」へ移動。大きな街なので村遭遇表を２回使用し、好きな結果を選べる。", "滅びた石の小屋（１５２ページ）。", "滅びた小さな村（１５２ページ）。", "闇ギルド（１５２ページ）。"]),
          "FCLTP": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("施設表プラス", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "聖なる神殿（基本１５２ページ）", 12, "魔王の力を封じた神殿（基本１５２ページ）", 13, "耳長たちの村（基本１５２ページ）判定成功時に【耳長の軽い弓】【耳長の杖】を購入可能", 14, "村遭遇表へ移動（基本１５１ページ）大きな街なので村遭遇表を2回振り、好きな結果を選べる", 15, "村遭遇表へ移動（基本１５１ページ）小さな村", 16, "エリアの地形が雪原なら雪国の小屋（基本１５２ページ）エリアの地形が山岳なら山小屋（基本１５２ページ）それ以外の地形なら石の小屋、村遭遇表へ移動（基本１５１ページ）", 22, "村遭遇表へ移動（基本１５１ページ）小さな村", 23, "村遭遇表へ移動（基本１５１ページ）大きな街なので村遭遇表を2回振り、好きな結果を選べる", 24, "滅びた石の小屋（基本１５２ページ）", 25, "滅びた小さな村（基本１５２ページ）", 26, "闇ギルド（基本１５２ページ）判定成功時に一度だけ【闇ギルド袋屋】に３０００シルバ支払い【所持重量】を１増加することができる。", 33, "小さな店遭遇表プラスへ移動（０２３ページ）", 34, "酒場遭遇表プラスへ移動", 35, "酒場遭遇表プラスへ移動", 36, "錬金おばばの家（０２４ページ）", 44, "鍛冶屋の家（０２４ページ）", 45, "半獣人の隠れ家（０２４ページ）", 46, "罪人の街（０２４ページ）", 55, "封印の街（０２４ページ）", 56, "水上の街（０２４ページ）", 66, "人魚の集落（０２４ページ）")),
          "OUTENC": $$$($$($nesting, 'DiceTable'), 'ChainTable').$new("野外遭遇表", "1D6", [$$($nesting, 'MoveToTable').$new("エリアの地形ごとの野外モンスター表へ移動。モンスターのうち１体にランダムな特徴がつく。モンスター特徴表（１５６ページ）を使用する。", "MONFT"), "エリアの地形ごとの野外モンスター表へ移動", "エリアの地形ごとの野外モンスター表へ移動", "アンデッドの群れ（１５６ページ）", "盗賊の群れ（１５６ページ）", $$($nesting, 'MoveToTable').$new("希少動物表（基本１５６ページ）へ移動", "RANI")]),
          "OUTENCP": $$$($$($nesting, 'DiceTable'), 'ChainTable').$new("野外遭遇表プラス", "1D6", [$$($nesting, 'MoveToTable').$new("エリアの地形ごとの野外モンスター表プラスへ移動。モンスターのうち1体にランダムな特徴がつく。モンスター特徴表プラス（０２７ページ）を使用する。", "MONFTP"), "エリアの地形ごとの野外モンスター表プラスへ移動し、出現したモンスターとの戦闘が発生する", "スライムモンスター表プラス（０２７ページ）へ移動", "アンデッドの群れ（基本１５６ページ）", "盗賊の群れ（基本１５６ページ）", $$($nesting, 'MoveToTable').$new("希少動物表（基本１５６ページ）へ移動", "RANI")]),
          "MONFT": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("モンスター特徴表", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【エッチな】", 12, "【変態の】", 13, "【弱そうな】", 14, "【目のいい】", 15, "【目の悪い】", 16, "【強そうな】", 22, "【強そうな】", 23, "【宝石好きな】", 24, "【幻の】", 25, "【違法な】", 26, "【イカした】", 33, "【物持ちの】", 34, "【炎を吐く】", 35, "【必中の】", 36, "【すばやい】", 44, "【やたら硬い】", 45, "【名の知れた】", 46, "【凶悪な】", 55, "【賞金首の】", 56, "【古代種の】", 66, "【最強の】")),
          "MONFTP": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("モンスター特徴表プラス", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【エッチな】（基本１７８ページ）", 12, "【変態の】（基本１７８ページ）", 13, "【目のいい】（基本１７８ページ）", 14, "【目の悪い】（基本１７８ページ）", 15, "【強そうな】（基本１７８ページ）", 16, "【宝石好きな】（基本１７８ページ）", 22, "【幻の】（基本１７８ページ）", 23, "【違法な】（基本１７８ページ）", 24, "【イカした】（基本１７８ページ）", 25, "【物持ちの】（基本１７８ページ）", 26, "【炎を吐く】（基本１７８ページ）", 33, "【やたら硬い】（基本１７８ページ）", 34, "【古代種の】（基本１７８ページ）", 35, "【最強の】（基本１７８ページ）", 36, "【異国風の】（０４７ページ）", 44, "【毛深い】（０４７ページ）", 45, "【耐火の】（０４７ページ）", 46, "【耐雷の】（０４７ページ） ", 55, "【浮遊の】（０４７ページ）", 56, "【臭い】（０４７ページ）", 66, "【恐怖の】（０４７ページ）")),
          "RANI": $$$($$($nesting, 'DiceTable'), 'RangeTable').$new("希少動物表", "1D6", [[1, "【『緑の森』隊長】1体と遭遇する。今回のセッションで【雪ウサギ】【山岳ゴート】【遺跡白馬】【草原カワウソ】【砂漠キツネ】のいずれかを倒したことがあれば、戦闘が発生する。戦闘にならなかった場合はなごやかに別れる。"], [$range(2, 3, false), "【『緑の森』団員】1体と遭遇する。今回のセッションで【雪ウサギ】【山岳ゴート】【遺跡白馬】【草原カワウソ】【砂漠キツネ】のいずれかを倒したことがあれば、戦闘が発生する。戦闘にならなかった場合はなごやかに別れる。"], [$range(4, 6, false), "地形によって異なる希少動物が1体出現する。雪原なら【雪ウサギ】、山岳なら【山岳ゴート】、遺跡なら【遺跡白馬】、草原なら【草原カワウソ】、砂漠と荒野は【砂漠キツネ】。それ以外は【緑の森団員】となる。戦闘を挑んでもいいし、見送ってもいい。"]]),
          "DROP": $$$($$($nesting, 'DiceTable'), 'ChainTable').$new("ドロップアイテム表", "1D6", [$$($nesting, 'MoveToTable').$new("武器ドロップ表へ移動", "DROPWP"), $$($nesting, 'MoveToTable').$new("武器ドロップ表へ移動", "DROPWP"), $$($nesting, 'MoveToTable').$new("防具ドロップ表へ移動", "DROPAR"), $$($nesting, 'MoveToTable').$new("食品ドロップ表へ移動", "DROPFD"), $$($nesting, 'MoveToTable').$new("巻物ドロップ表へ移動", "DROPSC"), $$($nesting, 'MoveToTable').$new("その他ドロップ表へ移動", "DROPOT")]),
          "DROPWP": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("武器ドロップ表", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【さびた小剣】", 12, "【さびた長剣】", 13, "【さびた大剣】", 14, "【長い棒】", 15, "【ダガー】", 16, "【木こりの大斧】", 22, "【ショートブレイド】", 23, "【木の杖】", 24, "【狩人の弓】", 25, "【レイピア】", 26, "【携帯弓】", 33, "【ロングブレイド】", 34, "【スレンドスピア】", 35, "【バトルアックス】", 36, "【軍用剛弓】", 44, "【グランドブレイド】", 45, "【祈りの杖】", 46, "【ヘビィボウガン】", 55, "【シルバーランス】", 56, "【イーグルブレイド】", 66, "【クレセントアクス】")),
          "DROPAR": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("防具ドロップ表", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【旅人の服】", 12, "【旅人の服】", 13, "【旅人の服】", 14, "【レザーシールド】", 15, "【レザーシールド】", 16, "【騎士のコート】", 22, "【騎士のコート】", 23, "【スケイルシールド】", 24, "【スケイルシールド】", 25, "【レザーベスト】", 26, "【レザーベスト】", 33, "【ヘビィシールド】", 34, "【チェインクロス】", 35, "【チェインクロス】", 36, "【試練の腕輪】", 44, "【精霊のローブ】", 45, "【必殺の腕輪】", 46, "【ギガントプレート】", 55, "【破壊の腕輪】", 56, "【理力の腕輪】", 66, "【加速の腕輪】")),
          "DROPHW": $$$($$($nesting, 'DiceTable'), 'Table').$new("聖武具ドロップ表", "2D6", ["【紅き太陽の剣】", "【紅き太陽の剣】", "【聖剣カレドヴルフ】 ", "【聖斧エルサーベス】 ", "【水霊のマント】", "【大地の鎧】", "【大気の盾】", "【聖弓ル・アルシャ】", "【聖槍ヴァルキウス】", "【聖なる月の剣】", "【聖なる月の剣】"]),
          "DROPFD": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("食品ドロップ表", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【枯れた草】", 12, "【こげた草】", 13, "【サボテンの肉】", 14, "【動物の肉】", 15, "【癒しの草】、地形が火山なら【こげた草】", 16, "【癒しの草】、地形が火山なら【こげた草】、地形が雪原なら【スノークリスタ草】", 22, "【スタミナ草】、地形が火山なら【こげた草】", 23, "【スタミナ草】、地形が火山なら【こげた草】、地形が雪原なら【スノークリスタ草】", 24, "【触手の草】、地形が火山なら【こげた草】", 25, "【触手の草】、地形が火山なら【こげた草】、地形が雪原なら【スノークリスタ草】", 26, "【スタミナのアンプル】", 33, "【癒しのアンプル】", 34, "【癒しのアンプル】", 35, "【ナユタの実】、地形が火山なら【こげた草】", 36, "【ナユタの実】、地形が火山なら【こげた草】", 44, "【火炎のアンプル】", 45, "【強酸のアンプル】", 46, "【とぶクスリ】", 55, "【竜炎のアンプル】", 56, "【おいしいお弁当】", 66, "【自然治癒のアンプル】")),
          "DROPSC": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("巻物ドロップ表", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【石壁の巻物】", 12, "【石壁の巻物】", 13, "【周辺の地図】", 14, "【周辺の地図】", 15, "【周辺の地図】", 16, "【火炎付与の巻物】", 22, "【混乱の巻物】", 23, "【剣の巻物】", 24, "【剣の巻物】", 25, "【鎧の巻物】", 26, "【鎧の巻物】", 33, "【応急修理の巻物】", 34, "【応急修理の巻物】", 35, "【移動不能付与の巻物】", 36, "【移動不能付与の巻物】", 44, "【宝の地図】", 45, "【宝の地図】", 46, "【召喚の巻物】", 55, "【剣の王の巻物】", 56, "【守りの神の巻物】", 66, "【高度修復の巻物】")),
          "DROPOT": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("その他ドロップ表", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【大きな石】、地形が火山なら【くすんだ宝石】", 12, "【大きな石】、地形が火山なら【くすんだ宝石】", 13, "【大きな石】、地形が火山なら【美しい宝石】", 14, "【木製の矢】", 15, "【理力の矢】", 16, "【鉄製の矢】", 22, "【投げナイフ】", 23, "【爆弾矢】", 24, "【くすんだ宝石】", 25, "【盾修復キット】", 26, "【上質の研ぎ石】", 33, "【エルザイト爆弾】", 34, "【セーブクリスタル】", 35, "【試練の腕輪】", 36, "【必殺の腕輪】", 44, "【破壊の腕輪】", 45, "【理力の腕輪】", 46, "【加速の腕輪】", 55, "【美しい宝石】", 56, "【封印のカギ】", 66, "【闇ギルド会員証】")),
          "DROPP": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("ドロップアイテム表プラス", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, $$($nesting, 'MoveToTable').$new("武器ドロップ表", "DROPWP"), 12, $$($nesting, 'MoveToTable').$new("武器ドロップ表", "DROPWP"), 13, $$($nesting, 'MoveToTable').$new("武器ドロップ表2", "DROPWP2"), 14, $$($nesting, 'MoveToTable').$new("武器ドロップ表2", "DROPWP2"), 15, $$($nesting, 'MoveToTable').$new("防具ドロップ表", "DROPAR"), 16, $$($nesting, 'MoveToTable').$new("防具ドロップ表", "DROPAR"), 22, $$($nesting, 'MoveToTable').$new("防具ドロップ表2", "DROPAR2"), 23, $$($nesting, 'MoveToTable').$new("防具ドロップ表2", "DROPAR2"), 24, $$($nesting, 'MoveToTable').$new("食品ドロップ表", "DROPFD"), 25, $$($nesting, 'MoveToTable').$new("食品ドロップ表", "DROPFD"), 26, $$($nesting, 'MoveToTable').$new("食品ドロップ表2", "DROPFD2"), 33, $$($nesting, 'MoveToTable').$new("食品ドロップ表2", "DROPFD2"), 34, $$($nesting, 'MoveToTable').$new("薬品ドロップ表プラス", "DROPDRP"), 35, $$($nesting, 'MoveToTable').$new("薬品ドロップ表プラス", "DROPDRP"), 36, $$($nesting, 'MoveToTable').$new("巻物ドロップ表", "DROPSC"), 44, $$($nesting, 'MoveToTable').$new("巻物ドロップ表", "DROPSC"), 45, $$($nesting, 'MoveToTable').$new("巻物ドロップ表2", "DROPSC2"), 46, $$($nesting, 'MoveToTable').$new("巻物ドロップ表2", "DROPSC2"), 55, $$($nesting, 'MoveToTable').$new("その他ドロップ表", "DROPOT"), 56, $$($nesting, 'MoveToTable').$new("その他ドロップ表", "DROPOT"), 66, $$($nesting, 'MoveToTable').$new("その他ドロップ表2", "DROPOT2"))),
          "DROPDRP": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("薬品ドロップ表プラス", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【燃料油のビン】", 12, "【燃料油のビン】", 13, "【燃料油のビン】", 14, "【弱体の薬】", 15, "【弱体の薬】", 16, "【弱体の薬】", 22, "【成長の薬】", 23, "【ベルセルクアンプル】", 24, "【ベルセルクアンプル】", 25, "【浮遊の薬】", 26, "【浮遊の薬】", 33, "【反動解消の薬】", 34, "【反動解消の薬】", 35, "【癒しの大ボトル】", 36, "【癒しの大ボトル】", 44, "【超元気のアンプル】", 45, "【超元気のアンプル】", 46, "【薬命酒】", 55, "【薬命酒】", 56, "【洗脳のクスリ】", 66, "【洗脳のクスリ】")),
          "DROPSC2": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("巻物ドロップ表2", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【火炎波の巻物】", 12, "【悟りの巻物】", 13, "【理盾の巻物】", 14, "【泉の巻物】", 15, "【雷神の巻物】", 16, "【超激震の巻物】", 22, "【闇を阻む巻物】", 23, "【引きこもりの巻物】", 24, "【鋼鉄の巻物】", 25, "【回廊の巻物】", 26, "【騎士団の巻物】", 33, "【水泳能力の巻物】", 34, "【浮遊能力の巻物】", 35, "【治癒の書】", 36, "【浮遊の書】", 44, "【突風の書】", 45, "【睡眠の書】", 46, "【火炎の書】", 55, "【鋼鉄の書】", 56, "【加速の書】", 66, "【闇払いの書】")),
          "DROPWP2": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("武器ドロップ表2", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【さびた巨大斧】", 12, "【さびた巨大斧】", 13, "【モコモコのバトン】", 14, "【モコモコのバトン】", 15, "【ベルセルクアクス】", 16, "【ベルセルクアクス】", 22, "【クナイ】", 23, "【クナイ】", 24, "【術殺槍】", 25, "【ウィンドスピア】", 26, "【ウィンドスピア】", 33, "【つるはし】", 34, "【つるはし】", 35, "【理力の剣】", 36, "【蒼い短刀】", 44, "【クリムゾンクロウ】", 45, "【ナユタの杖】", 46, "【ナユタの杖】", 55, "【一撃斧】", 56, "【ファイアブランド】", 66, "【ソードクロスボウ】")),
          "DROPAR2": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("防具ドロップ表2", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【ボロボロの服】", 12, "【ボロボロの服】", 13, "【穴だらけの鎧】", 14, "【穴だらけの鎧】", 15, "【木製の追加装甲】", 16, "【木製の追加装甲】", 22, "【ガラスの鎧】", 23, "【ガラスの鎧】", 24, "【鉄板の追加装甲】", 25, "【鉄板の追加装甲】", 26, "【太陽のランタン】", 33, "【耐火服】", 34, "【獣の革のバッグ】", 35, "【重量ブーツ】", 36, "【冒険者のブーツ】", 44, "【ラバーブーツ】", 45, "【風のマント】", 46, "【狩人の服】", 55, "【ドラゴンスケイル】", 56, "【不育の腕輪】", 66, "【竜革の大きなバッグ】")),
          "DROPHWP": $$$($$($nesting, 'DiceTable'), 'D66Table').$new("聖武具ドロップ表プラス", $$$($$($nesting, 'D66SortType'), 'ASC'), $hash(11, "【大気の盾】", 23, "【聖剣カレドヴルフ】", 36, "【紅蓮の書】", 12, "【大気の盾】", 24, "【聖斧エルサーベス】", 44, "【聖弓ル・アルシャ】", 13, "【大地の鎧】", 25, "【聖斧エルサーベス】", 45, "【聖弓ル・アルシャ】", 14, "【大地の鎧】", 26, "【聖槍ヴァルキウス】", 46, "【聖なる月の剣】", 15, "【水霊のマント】", 33, "【聖槍ヴァルキウス】", 55, "【紅き太陽の剣】", 16, "【水霊のマント】", 34, "【聖槍ヴァルキウス】", 56, "【嵐の聖剣】", 22, "【聖剣カレドヴルフ】", 35, "【紅蓮の書】", 66, "【超重の聖斧】")),
          "DROPFD2": $$$($$($nesting, 'DiceTable'), 'Table').$new("食品ドロップ表2", "1D6", ["【解毒の草】、地形が火 山なら【こげた草】、地 形が海岸なら【おいし い海藻】", "【気付けの草】、地形が 火山なら【こげた草】、 地形が海岸なら【おい しい海藻】", "【夜目の草】", "【力が湧く草】", "【集中の草】", "【牛乳】"]),
          "DROPOT2": $$$($$($nesting, 'DiceTable'), 'Table').$new("その他 ドロップ表2", "2D6", ["【五連の矢】", "【炎の矢】", "【聖なる投げ刃】", "【物体破壊爆弾】", "【閃光弾】", "【聖なる短剣の破片】", "【閃光弾】", "【旋風の投げ刃】", "【スーパーエルザイト 爆弾】", "【炎の矢】", "【五連の矢】"]),
          "DROPRAREBOX2": $$$($$($nesting, 'DiceTable'), 'Table').$new("珍しい箱ドロップ表2", "2D6", ["聖武具ドロップ表プラ スへ", "【耐久力の結晶】", "【偉大な筋力の結晶】", "【偉大な敏捷の結晶】", "【偉大な生命の結晶】", "【竜鱗の追加装甲】", "【偉大な魅力の結晶】", "【偉大な意志の結晶】", "【偉大な知力の結晶】", "【スタミナの結晶】", "【闇払いの書】"]),
          "KNGFTP": $$$($$($nesting, 'DiceTable'), 'Table').$new("王特徴表プラス", "1D6", ["【力の王の】（０４７ページ）", "【力の王の】（０４７ページ）", "【疾風の王の】（０４７ページ）", "【疾風の王の】（０４７ページ）", "【炎の王の】（０４７ページ）", "【絶望の王の】（０４７ページ）"])
        }).$freeze());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/one_way_heroics/dungeon_table"] = function (Opal) {
  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OneWayHeroics');
        var $nesting = [self].concat($parent_nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DungeonTable');
          var $nesting = [self].concat($parent_nesting),
              $DungeonTable_initialize$1,
              $DungeonTable_roll_with_day$2;
          self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
          self.$attr_reader("key");
          Opal.def(self, '$initialize', $DungeonTable_initialize$1 = function $$initialize(name, key, type, items) {
            var self = this,
                m = nil;
            self.name = name;
            self.key = key;
            self.items = items.$freeze();
            m = /(\d+)D(\d+)/i.$match(type);

            if ($truthy(m)) {} else {
              self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
            }

            ;
            self.times = m['$[]'](1).$to_i();
            return self.sides = m['$[]'](2).$to_i();
          }, $DungeonTable_initialize$1.$$arity = 4);
          return (Opal.def(self, '$roll_with_day', $DungeonTable_roll_with_day$2 = function $$roll_with_day(day, randomizer) {
            var self = this,
                value = nil,
                index = nil;
            value = randomizer.$roll_sum(self.times, self.sides);

            if ($truthy($rb_ge(day, 4))) {
              value = $rb_plus(value, self.times);
            }

            ;
            index = $rb_minus(value, self.times);
            return "" + self.name + "(" + value + ") ＞ " + self.items['$[]'](index);
          }, $DungeonTable_roll_with_day$2.$$arity = 2), nil) && 'roll_with_day';
        })($nesting[0], null, $nesting);

        Opal.const_set($nesting[0], 'DUNGEON_TABLE', $$($nesting, 'DungeonTable').$new("ダンジョン表", "DNGN", "1D6", ["犬小屋（１５５ページ）", "犬小屋（１５５ページ）", "「ダンジョン遭遇表」（１５３ページ）へ移動。小型ダンジョンだ。", "「ダンジョン遭遇表」（１５３ページ）へ移動。小型ダンジョンだ。", "「ダンジョン遭遇表」（１５３ページ）へ移動。ここは中型ダンジョンなので、モンスターが出現した場合、数が1体増加する。さらにイベントの経験値が1増加する。", "「ダンジョン遭遇表」（１５３ページ）へ移動。ここは大型ダンジョンなので、モンスターが出現した場合、数が2体増加する。さらにイベントの経験値が2増加する。", "牢獄遭遇表へ移動（１５４ページ）。牢獄つきダンジョン。"]));
        return Opal.const_set($nesting[0], 'DUNGEON_TABLE_PLUS', $$($nesting, 'DungeonTable').$new("ダンジョン表プラス", "DNGNP", "2D6", ["犬小屋（基本１５５ページ）", "犬小屋（基本１５５ページ）", "犬小屋（基本１５５ページ）", "犬小屋（基本１５５ページ）", "「ダンジョン遭遇表」（基本１５３ページ）へ移動。小型ダンジョンだ。", "「ダンジョン遭遇表」（基本１５３ページ）へ移動。小型ダンジョンだ。", "「ダンジョン遭遇表」（基本１５３ページ）へ移動。ここは中型ダンジョンのため、モンスターが出現した場合、数が１体増加する。またイベントの【経験値】が１増加する。", "「ダンジョン遭遇表」（基本１５３ページ）へ移動。ここは大型ダンジョンのため、モンスターが出現した場合、数が２体増加する。またイベントの【経験値】が２増加する。", "「ダンジョン遭遇表」（基本１５３ページ）へ移動。近くに寄っただけで吸い込まれる罠のダンジョンだ。「ダンジョン遭遇表」を使用したあと、中央にあるモニュメントに触れて転移して出るか、【鉄格子】と戦闘して出るか選択する。転移した場合は闇の目の前に出てしまい、全力ダッシュで【ＳＴ】を１Ｄ６消費する。【鉄格子】との戦闘では逃走を選択できない。", "「ダンジョン遭遇表」（基本１５３ページ）へ移動。水浸しのダンジョンで、「ダンジョン遭遇表」を使用した直後に【ＳＴ】が３減少する。「水泳」", "水路に囲まれた水上遺跡だ。なかに入るなら【ＳＴ】を４消費（「水泳」）してから「ダンジョン遭遇表」（基本１５３ページ）へ移動。イベントの判定に成功すると追加で【豪華な宝箱】が１つ出現し、戦闘か開錠を試みられる。", "「牢獄遭遇表」（基本１５４ページ）へ移動。牢獄つきダンジョンだ。", "砂の遺跡にたどりつき、「牢獄遭遇表」（基本１５４ページ）へ移動。モンスターが出現した場合、数が２体増加する。またイベントの【経験値】が２増加する。イベントの判定に成功すると追加で【珍しい箱】が１つ出現し、戦闘か開錠を試みられる。"]));
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/game_system/one_way_heroics/random_event_table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OneWayHeroics');
        var $nesting = [self].concat($parent_nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'RandomEventTable');
          var $nesting = [self].concat($parent_nesting),
              $RandomEventTable_initialize$1,
              $RandomEventTable_roll_with_day$2;
          self.$$prototype.times = self.$$prototype.sides = self.$$prototype.items = self.$$prototype.name = nil;
          Opal.def(self, '$initialize', $RandomEventTable_initialize$1 = function $$initialize(name, type, items) {
            var self = this,
                m = nil;
            self.name = name;
            self.items = items.$freeze();
            m = /(\d+)D(\d+)/i.$match(type);

            if ($truthy(m)) {} else {
              self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
            }

            ;
            self.times = m['$[]'](1).$to_i();
            return self.sides = m['$[]'](2).$to_i();
          }, $RandomEventTable_initialize$1.$$arity = 3);
          return (Opal.def(self, '$roll_with_day', $RandomEventTable_roll_with_day$2 = function $$roll_with_day(day, randomizer) {
            var self = this,
                value = nil,
                index = nil,
                chosen = nil;
            value = randomizer.$roll_sum(self.times, self.sides);
            index = $rb_minus(value, 1);
            chosen = self.items['$[]'](index);

            chosen = function () {
              if ($truthy(chosen['$respond_to?']("roll"))) {
                return chosen.$roll(randomizer);
              } else if ($truthy(chosen['$respond_to?']("roll_with_day"))) {
                return chosen.$roll_with_day(day, randomizer);
              } else {
                return chosen;
              }

              ;
              return nil;
            }();

            return "" + self.name + "(" + value + ") ＞ " + chosen;
          }, $RandomEventTable_roll_with_day$2.$$arity = 2), nil) && 'roll_with_day';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'BranchByDay');
          var $nesting = [self].concat($parent_nesting),
              $BranchByDay_initialize$3,
              $BranchByDay_roll_with_day$4,
              $BranchByDay_choise$5,
              $BranchByDay_branch_result$6;
          self.$$prototype.text = nil;
          Opal.def(self, '$initialize', $BranchByDay_initialize$3 = function $$initialize(text, less_than_equal, greater) {
            var self = this;
            self.text = text;
            self.greater = greater;
            return self.less_than_equal = less_than_equal;
          }, $BranchByDay_initialize$3.$$arity = 3);
          Opal.def(self, '$roll_with_day', $BranchByDay_roll_with_day$4 = function $$roll_with_day(day, randomizer) {
            var self = this,
                value = nil,
                chosen = nil,
                result = nil;
            value = randomizer.$roll_once(6);
            chosen = self.$choise(value, day);

            chosen = function () {
              if ($truthy(chosen['$respond_to?']("roll_with_day"))) {
                return "" + chosen.$key() + day + " ＞ " + chosen.$roll_with_day(day, randomizer);
              } else if ($truthy(chosen['$ascii_only?']())) {
                return [chosen, $$($nesting, 'TABLES')['$[]'](chosen).$roll(randomizer)].$join(" ＞ ");
              } else {
                return chosen;
              }

              ;
              return nil;
            }();

            result = ("" + self.text + " ＞\n" + " 1D6 ＞ " + value + " ＞ " + self.$branch_result(value, day) + " ＞\n" + " " + chosen + "\n").$chomp();
            return result;
          }, $BranchByDay_roll_with_day$4.$$arity = 2);
          Opal.def(self, '$choise', $BranchByDay_choise$5 = function $$choise(value, day) {
            var self = this;
            return self.$raise($$($nesting, 'NotImplementedError'));
          }, $BranchByDay_choise$5.$$arity = 2);
          return (Opal.def(self, '$branch_result', $BranchByDay_branch_result$6 = function $$branch_result(value, day) {
            var self = this;
            return self.$raise($$($nesting, 'NotImplementedError'));
          }, $BranchByDay_branch_result$6.$$arity = 2), nil) && 'branch_result';
        })($nesting[0], null, $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'BranchByElapsedDays');
          var $nesting = [self].concat($parent_nesting),
              $BranchByElapsedDays_choise$7,
              $BranchByElapsedDays_branch_result$8;
          self.$$prototype.greater = self.$$prototype.less_than_equal = nil;
          Opal.def(self, '$choise', $BranchByElapsedDays_choise$7 = function $$choise(value, day) {
            var self = this;

            if ($truthy($rb_gt(value, day))) {
              return self.greater;
            } else {
              return self.less_than_equal;
            }
          }, $BranchByElapsedDays_choise$7.$$arity = 2);
          return (Opal.def(self, '$branch_result', $BranchByElapsedDays_branch_result$8 = function $$branch_result(value, day) {
            var self = this;

            if ($truthy($rb_gt(value, day))) {
              return "" + "日数[" + day + "]を超えている";
            } else {
              return "" + "日数[" + day + "]以下";
            }
          }, $BranchByElapsedDays_branch_result$8.$$arity = 2), nil) && 'branch_result';
        })($nesting[0], $$($nesting, 'BranchByDay'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'BranchByDayParity');
          var $nesting = [self].concat($parent_nesting),
              $BranchByDayParity_choise$9,
              $BranchByDayParity_branch_result$10;
          self.$$prototype.greater = self.$$prototype.less_than_equal = nil;
          Opal.def(self, '$choise', $BranchByDayParity_choise$9 = function $$choise(value, _) {
            var self = this;

            if ($truthy(value['$odd?']())) {
              return self.greater;
            } else {
              return self.less_than_equal;
            }
          }, $BranchByDayParity_choise$9.$$arity = 2);
          return (Opal.def(self, '$branch_result', $BranchByDayParity_branch_result$10 = function $$branch_result(value, _) {
            var self = this;

            if ($truthy(value['$odd?']())) {
              return "奇数";
            } else {
              return "偶数";
            }
          }, $BranchByDayParity_branch_result$10.$$arity = 2), nil) && 'branch_result';
        })($nesting[0], $$($nesting, 'BranchByDay'), $nesting);

        (function ($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'MoveToTableWithDay');
          var $nesting = [self].concat($parent_nesting),
              $MoveToTableWithDay_initialize$11,
              $MoveToTableWithDay_roll_with_day$12;
          self.$$prototype.text = self.$$prototype.table = nil;
          Opal.def(self, '$initialize', $MoveToTableWithDay_initialize$11 = function $$initialize(text, table) {
            var self = this;
            self.text = text;
            return self.table = table;
          }, $MoveToTableWithDay_initialize$11.$$arity = 2);
          return (Opal.def(self, '$roll_with_day', $MoveToTableWithDay_roll_with_day$12 = function $$roll_with_day(day, randomizer) {
            var self = this;
            return ("" + self.text + " ＞\n" + " " + self.table.$key() + day + " ＞ " + self.table.$roll_with_day(day, randomizer) + "\n").$chomp();
          }, $MoveToTableWithDay_roll_with_day$12.$$arity = 2), nil) && 'roll_with_day';
        })($nesting[0], null, $nesting);

        Opal.const_set($nesting[0], 'RANDOM_EVENT_TABLE', $$($nesting, 'RandomEventTable').$new("ランダムイベント表", "1D6", [$$($nesting, 'BranchByElapsedDays').$new("さらに１Ｄ６を振る。現在ＰＣがいるエリアの【日数】以下なら「施設表」へ移動。【日数】を超えていれば「ダンジョン表」（１５３ページ）へ移動。", "FCLT", $$($nesting, 'DUNGEON_TABLE')), $$($nesting, 'BranchByElapsedDays').$new("さらに１Ｄ６を振る。現在ＰＣがいるエリアの【日数】以下なら「世界の旅表」（１５７ページ）へ移動。【日数】を超えていれば「野外遭遇表(OUTENC)」（１５５ページ）へ移動。", "「世界の旅表」（１５７ページ）へ。", "OUTENC"), $$($nesting, 'MoveToTable').$new("「施設表」へ移動。", "FCLT"), "「世界の旅表」（１５７ページ）へ移動。", $$($nesting, 'MoveToTable').$new("「野外遭遇表」（１５５ページ）へ移動。", "OUTENC"), $$($nesting, 'MoveToTableWithDay').$new("「ダンジョン表」（１５２ページ）へ移動。", $$($nesting, 'DUNGEON_TABLE'))]));
        return Opal.const_set($nesting[0], 'RANDOM_EVENT_TABLE_PLUS', $$($nesting, 'RandomEventTable').$new("ランダムイベント表プラス", "1D6", [$$($nesting, 'BranchByElapsedDays').$new("さらに1D6を振る。現在PCがいるエリアの【日数】以下なら施設表プラス（０２２ページ）へ移動。【経過日数】を超えていればダンジョン表プラス（０２５ページ）へ移動", "FCLTP", $$($nesting, 'DUNGEON_TABLE_PLUS')), $$($nesting, 'BranchByElapsedDays').$new("さらに1D6を振る。現在PCがいるエリアの【日数】以下なら世界の旅表（基本１５７ページ）へ移動。【経過日数】を超えていれば野外遭遇表（基本１５５ページ）へ移動", "「世界の旅表」（１５７ページ）へ。", "OUTENC"), $$($nesting, 'BranchByElapsedDays').$new("さらに1D6を振る。現在PCがいるエリアの【日数】以下なら世界の旅表２（０２８ページ）へ移動。【経過日数】を超えていれば野外遭遇表プラス（０２５ページ）へ移動", "世界の旅表２（０２８ページ）へ。", "OUTENCP"), $$($nesting, 'BranchByDayParity').$new("さらに1D6を振る。奇数なら世界の旅表（基本１５７ページ）へ移動。偶数なら世界の旅表２（０２８ページ）へ移動", "世界の旅表（基本１５７ページ）へ。", "世界の旅表２（０２８ページ）へ。"), $$($nesting, 'MoveToTable').$new("施設表プラスへ移動（０２２ページ）", "FCLTP"), $$($nesting, 'MoveToTableWithDay').$new("ダンジョン表プラスへ移動（０２５ページ）", $$($nesting, 'DUNGEON_TABLE_PLUS'))]));
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  self.$require("bcdice/game_system/one_way_heroics/tables");
  self.$require("bcdice/game_system/one_way_heroics/dungeon_table");
  self.$require("bcdice/game_system/one_way_heroics/random_event_table");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OneWayHeroics');
        var $nesting = [self].concat($parent_nesting),
            $OneWayHeroics_initialize$1,
            $OneWayHeroics_eval_game_system_specific_command$2,
            $OneWayHeroics_getRollDiceCommandResult$3,
            $OneWayHeroics_rollJudgeDice$4,
            $OneWayHeroics_getJudgeReusltText$5;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "OneWayHeroics");
        Opal.const_set($nesting[0], 'NAME', "片道勇者TRPG");
        Opal.const_set($nesting[0], 'SORT_KEY', "かたみちゆうしやTRPG");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定　aJDx+y,z\n" + "　a:ダイス数（省略時2個)、x:能力値、\n" + "　y:修正値（省略可。「＋」のみなら＋１）、z:目標値（省略可）\n" + "　例１）JD2+1,8 or JD2+,8　：能力値２、修正＋１、目標値８\n" + "　例２）JD3,10 能力値３、修正なし、目標値10\n" + "　例３）3JD4+ ダイス3個から2個選択、能力値４、修正なし、目標値なし\n" + "・ファンブル表 FT／魔王追撃表   DC／進行ルート表 PR／会話テーマ表 TT\n" + "逃走判定表   EC／ランダムNPC特徴表 RNPC／偵察表 SCT\n" + "施設表　FCLT／施設表プラス　FCLTP／希少動物表 RANI／王特徴表プラス KNGFTP\n" + "野外遭遇表 OUTENC／野外遭遇表プラス OUTENCP\n" + "モンスター特徴表 MONFT／モンスター特徴表プラス MONFTP\n" + "ドロップアイテム表 DROP／ドロップアイテム表プラス DROPP\n" + "武器ドロップ表 DROPWP／武器ドロップ表2 DROPWP2\n" + "防具ドロップ表 DROPAR／防具ドロップ表2 DROPAR2\n" + "聖武具ドロップ表 DROPHW／聖武具ドロップ表プラス DROPHWP\n" + "食品ドロップ表 DROPFD／食品ドロップ表2 DROPFD2\n" + "巻物ドロップ表 DROPSC／巻物ドロップ表2 DROPSC2\n" + "その他ドロップ表 DROPOT／その他 ドロップ表2 DROPOT2\n" + "薬品ドロップ表プラス DROPDRP／珍しい箱ドロップ表2 DROPRAREBOX2\n" + "・ランダムイベント表 RETx（x：現在の日数）、ランダムイベント表プラス RETPx\n" + "　例）RET3、RETP4\n" + "・ダンジョン表 DNGNx（x：現在の日数）、ダンジョン表プラス DNGNPx\n" + "　例）DNGN3、DNGNP4\n");
        Opal.def(self, '$initialize', $OneWayHeroics_initialize$1 = function $$initialize(command) {
          var $iter = $OneWayHeroics_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $OneWayHeroics_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $OneWayHeroics_initialize$1, false, true), 'initialize', [command], null);
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'ASC');
        }, $OneWayHeroics_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $OneWayHeroics_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $case = nil,
              day = nil;
          return function () {
            $case = command;

            if (/^RET(\d+)$/['$===']($case)) {
              day = $$($nesting, 'Regexp').$last_match(1).$to_i();
              return $$($nesting, 'RANDOM_EVENT_TABLE').$roll_with_day(day, self.randomizer);
            } else if (/^RETP(\d+)$/['$===']($case)) {
              day = $$($nesting, 'Regexp').$last_match(1).$to_i();
              return $$($nesting, 'RANDOM_EVENT_TABLE_PLUS').$roll_with_day(day, self.randomizer);
            } else if (/^DNGN(\d+)$/['$===']($case)) {
              day = $$($nesting, 'Regexp').$last_match(1).$to_i();
              return $$($nesting, 'DUNGEON_TABLE').$roll_with_day(day, self.randomizer);
            } else if (/^DNGNP(\d+)$/['$===']($case)) {
              day = $$($nesting, 'Regexp').$last_match(1).$to_i();
              return $$($nesting, 'DUNGEON_TABLE_PLUS').$roll_with_day(day, self.randomizer);
            } else if (/^\d*JD/['$===']($case)) {
              return self.$getRollDiceCommandResult(command);
            } else {
              return self.$roll_tables(command, $$($nesting, 'TABLES'));
            }
          }();
        }, $OneWayHeroics_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$getRollDiceCommandResult', $OneWayHeroics_getRollDiceCommandResult$3 = function $$getRollDiceCommandResult(command) {
          var $a,
              $b,
              self = this,
              diceCount = nil,
              ability = nil,
              target = nil,
              modifyText = nil,
              $ret_or_1 = nil,
              modifyValue = nil,
              dice = nil,
              diceText = nil,
              total = nil,
              text = nil,
              result = nil;

          if ($truthy(command['$=~'](/^(\d*)JD(\d*)(\+(\d*))?(,(\d+))?$/))) {} else {
            return nil;
          }

          ;
          diceCount = $$($nesting, 'Regexp').$last_match(1);

          if ($truthy(diceCount['$empty?']())) {
            diceCount = 2;
          }

          ;
          diceCount = diceCount.$to_i();

          if ($truthy($rb_lt(diceCount, 2))) {
            return nil;
          }

          ;
          ability = $$($nesting, 'Regexp').$last_match(2).$to_i();
          target = $$($nesting, 'Regexp').$last_match(6);

          if ($truthy(target['$nil?']())) {} else {
            target = target.$to_i();
          }

          ;

          modifyText = function () {
            if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(3))) {
              return $ret_or_1;
            } else {
              return "";
            }

            ;
            return nil;
          }();

          if (modifyText['$==']("+")) {
            modifyText = "+1";
          }

          ;
          modifyValue = modifyText.$to_i();
          $b = self.$rollJudgeDice(diceCount), $a = Opal.to_ary($b), dice = $a[0] == null ? nil : $a[0], diceText = $a[1] == null ? nil : $a[1], $b;
          total = $rb_plus($rb_plus(dice, ability), modifyValue);
          text = command.$to_s();
          text = $rb_plus(text, "" + " ＞ " + diceCount + "D6[" + diceText + "]+" + ability + modifyText);
          text = $rb_plus(text, "" + " ＞ " + total);
          result = self.$getJudgeReusltText(dice, total, target);

          if ($truthy(result['$empty?']())) {} else {
            text = $rb_plus(text, "" + " ＞ " + result);
          }

          ;
          return text;
        }, $OneWayHeroics_getRollDiceCommandResult$3.$$arity = 1);
        Opal.def(self, '$rollJudgeDice', $OneWayHeroics_rollJudgeDice$4 = function $$rollJudgeDice(diceCount) {
          var self = this,
              diceList = nil,
              dice = nil,
              diceText = nil,
              total = nil,
              text = nil;
          diceList = self.randomizer.$roll_barabara(diceCount, 6);
          dice = diceList.$sum();
          diceText = diceList.$join(",");

          if (diceCount['$=='](2)) {
            return [dice, diceText];
          }

          ;
          diceList['$sort!']();
          diceList['$reverse!']();
          total = $rb_plus(diceList['$[]'](0), diceList['$[]'](1));
          text = "" + diceText + "→" + diceList['$[]'](0) + "," + diceList['$[]'](1);
          return [total, text];
        }, $OneWayHeroics_rollJudgeDice$4.$$arity = 1);
        Opal.def(self, '$getJudgeReusltText', $OneWayHeroics_getJudgeReusltText$5 = function $$getJudgeReusltText(dice, total, target) {
          var self = this;

          if (dice['$=='](2)) {
            return "ファンブル";
          }

          ;

          if (dice['$=='](12)) {
            return "スペシャル";
          }

          ;

          if ($truthy(target['$nil?']())) {
            return "";
          }

          ;

          if ($truthy($rb_ge(total, target))) {
            return "成功";
          }

          ;
          return "失敗";
        }, $OneWayHeroics_getJudgeReusltText$5.$$arity = 3);
        return self.$register_prefix("\\d*JD", "RETP?", "DNGNP?", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~OneWayHeroics~index.js.map