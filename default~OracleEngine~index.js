(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~OracleEngine~index"],{

/***/ "0FY2":
/*!********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/OracleEngine.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/format"] = function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'Format');
      var $nesting = [self].concat($parent_nesting),
          $Format_comparison_operator$1,
          $Format_modifier$2;
      self.$module_function();
      Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {
        var self = this,
            $case = nil;
        return function () {
          $case = op;

          if ("=="['$===']($case)) {
            return "=";
          } else if ("!="['$===']($case)) {
            return "<>";
          } else if ($$($nesting, 'Symbol')['$===']($case)) {
            return op.$to_s();
          } else {
            return nil;
          }
        }();
      }, $Format_comparison_operator$1.$$arity = 1);
      Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {
        var self = this;

        if ($truthy(number['$nil?']())) {
          return nil;
        } else if (number['$=='](0)) {
          return "";
        } else if ($truthy($rb_gt(number, 0))) {
          return "" + "+" + number;
        } else {
          return number.$to_s();
        }
      }, $Format_modifier$2.$$arity = 1);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  self.$require("bcdice/format");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OracleEngine');
        var $nesting = [self].concat($parent_nesting),
            $OracleEngine_initialize$1,
            $OracleEngine_eval_game_system_specific_command$2,
            $OracleEngine_clutch_roll$3,
            $OracleEngine_expr_clutch$5,
            $OracleEngine_result_clutch$6,
            $OracleEngine_clamp$7,
            $OracleEngine_r_roll$8,
            $OracleEngine_expr_r$9,
            $OracleEngine_dice_result_r$10,
            $OracleEngine_result_r$11,
            $OracleEngine_normalize_critical$12,
            $OracleEngine_normalize_fumble$13,
            $OracleEngine_damage_roll$14,
            $OracleEngine_expr_damage$15,
            $OracleEngine_result_damage$16;
        self.$$prototype.cmd = self.$$prototype.max_shift = self.$$prototype.times = self.$$prototype.randomizer = self.$$prototype["break"] = self.$$prototype.critical = self.$$prototype.fumble = nil;
        Opal.const_set($nesting[0], 'ID', "OracleEngine");
        Opal.const_set($nesting[0], 'NAME', "オラクルエンジン");
        Opal.const_set($nesting[0], 'SORT_KEY', "おらくるえんしん");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "  ・クラッチロール （xCL+y>=z)\n" + "  ダイスをx個振り、1個以上目標シフトzに到達したか判定します。修正yは全てのダイスにかかります。\n" + "  成功した時は目標シフトを、失敗した時はダイスの最大値-1シフトを返します\n" + "  zが指定されないときは、ダイスをx個を振り、それに修正yしたものを返します。\n" + "  通常、最低シフトは1、最大シフトは6です。目標シフトもそろえられます。\n" + "  また、CLの後に7を入れ、(xCL7+y>=z)と入力すると最大シフトが7になります。\n" + " ・判定 (xR6+y@c#f$b>=z)\n" + "  ダイスをx個振り、大きいもの2つだけを見て達成値を算出し、成否を判定します。修正yは達成値にかかります。\n" + "  ダイスブレイクとしてbを、クリティカル値としてcを、ファンブル値としてfを指定できます。\n" + "  それぞれ指定されない時、0,12,2になります。\n" + "  クリティカル値の上限はなし、下限は2。ファンブル値の上限は12、下限は0。\n" + "  zが指定されないとき、達成値の算出のみ行います。\n" + " ・ダメージロールのダイスブレイク (xD6+y$b)\n" + "  ダイスをx個振り、合計値を出します。修正yは合計値にかかります。\n" + "  ダイスブレイクとしてbを指定します。合計値は0未満になりません。\n");
        self.$register_prefix("\\d+CL", "\\d+R6", "\\d+D6.*\\$[\\+\\-]?\\d+");
        Opal.def(self, '$initialize', $OracleEngine_initialize$1 = function $$initialize(command) {
          var $iter = $OracleEngine_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $OracleEngine_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $OracleEngine_initialize$1, false, true), 'initialize', [command], null);
          self.sort_add_dice = true;
          return self.sort_barabara_dice = true;
        }, $OracleEngine_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $OracleEngine_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $case = nil;
          return function () {
            $case = command;

            if (/\d+CL.*/i['$===']($case)) {
              return self.$clutch_roll(command);
            } else if (/\d+D6.*\$[+\-]?\d.*/['$===']($case)) {
              return self.$damage_roll(command);
            } else if (/\d+R6/['$===']($case)) {
              return self.$r_roll(command);
            } else {
              return nil;
            }
          }();
        }, $OracleEngine_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$clutch_roll', $OracleEngine_clutch_roll$3 = function $$clutch_roll(string) {
          var $a,
              $b,
              _$$,
              self = this,
              parser = nil,
              $ret_or_1 = nil,
              $writer = nil,
              dice_list = nil,
              sequence = nil;

          self.$debug("clutch_roll begin", string);
          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\d+CL[67]?/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$restrict_cmp_op_to(nil, ">=");
          self.cmd = parser.$parse(string);

          if ($truthy(self.cmd)) {} else {
            return nil;
          }

          ;
          $b = $send(self.cmd.$command().$split("CL"), 'map', [], "to_i".$to_proc()), $a = Opal.to_ary($b), self.times = $a[0] == null ? nil : $a[0], self.max_shift = $a[1] == null ? nil : $a[1], $b;

          self.max_shift = function () {
            if ($truthy($ret_or_1 = self.max_shift)) {
              return $ret_or_1;
            } else {
              return 6;
            }

            ;
            return nil;
          }();

          if ($truthy(self.cmd.$cmp_op())) {
            $writer = [self.$clamp(self.cmd.$target_number(), 1, self.max_shift)];
            $send(self.cmd, 'target_number=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }

          ;

          if (self.times['$=='](0)) {
            return nil;
          }

          ;
          dice_list = $send(self.randomizer.$roll_barabara(self.times, 6), 'map', [], (_$$ = function $$4(x) {
            var self = _$$.$$s == null ? this : _$$.$$s;
            if (self.cmd == null) self.cmd = nil;
            if (self.max_shift == null) self.max_shift = nil;

            if (x == null) {
              x = nil;
            }

            ;
            return self.$clamp($rb_plus(x, self.cmd.$modify_number()), 1, self.max_shift);
          }, _$$.$$s = self, _$$.$$arity = 1, _$$)).$sort();
          sequence = [self.$expr_clutch(), "" + "[" + dice_list.$join(", ") + "]", self.$result_clutch(dice_list.$last())];
          return sequence.$join(" ＞ ");
        }, $OracleEngine_clutch_roll$3.$$arity = 1);
        Opal.def(self, '$expr_clutch', $OracleEngine_expr_clutch$5 = function $$expr_clutch() {
          var self = this,
              max_shift = nil,
              cmp_op = nil,
              modify_number = nil;

          max_shift = function () {
            if (self.max_shift['$=='](7)) {
              return 7;
            } else {
              return nil;
            }

            ;
            return nil;
          }();

          cmp_op = $$($nesting, 'Format').$comparison_operator(self.cmd.$cmp_op());
          modify_number = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());
          return "" + "(" + self.times + "CL" + max_shift + modify_number + cmp_op + self.cmd.$target_number() + ")";
        }, $OracleEngine_expr_clutch$5.$$arity = 0);
        Opal.def(self, '$result_clutch', $OracleEngine_result_clutch$6 = function $$result_clutch(after_shift) {
          var self = this;

          if ($truthy(self.cmd.$cmp_op()['$!='](">="))) {
            return "" + "シフト" + after_shift;
          } else if ($truthy($rb_ge(after_shift, self.cmd.$target_number()))) {
            return "" + "成功 シフト" + self.cmd.$target_number();
          } else {
            after_shift = $rb_minus(after_shift, 1);

            if ($truthy($rb_lt(after_shift, 1))) {
              after_shift = 1;
            }

            ;
            return "" + "失敗 シフト" + after_shift;
          }
        }, $OracleEngine_result_clutch$6.$$arity = 1);
        Opal.def(self, '$clamp', $OracleEngine_clamp$7 = function $$clamp(i, min, max) {
          var self = this;

          if ($truthy($rb_lt(i, min))) {
            return min;
          } else if ($truthy($rb_gt(i, max))) {
            return max;
          } else {
            return i;
          }
        }, $OracleEngine_clamp$7.$$arity = 3);
        Opal.def(self, '$r_roll', $OracleEngine_r_roll$8 = function $$r_roll(string) {
          var self = this,
              parser = nil,
              $ret_or_2 = nil,
              $ret_or_3 = nil,
              $ret_or_4 = nil,
              dice_list = nil,
              dice_broken = nil,
              dice_total = nil,
              total = nil,
              sequence = nil;
          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\d+R6/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$restrict_cmp_op_to(nil, ">=").$enable_critical().$enable_fumble().$enable_dollar();
          self.cmd = parser.$parse(string);

          if ($truthy(self.cmd)) {} else {
            return nil;
          }

          ;
          self.times = self.cmd.$command().$to_i();

          if (self.times['$=='](0)) {
            return nil;
          }

          ;
          self.critical = self.$normalize_critical(function () {
            if ($truthy($ret_or_2 = self.cmd.$critical())) {
              return $ret_or_2;
            } else {
              return 12;
            }

            ;
            return nil;
          }(), string);
          self.fumble = self.$normalize_fumble(function () {
            if ($truthy($ret_or_3 = self.cmd.$fumble())) {
              return $ret_or_3;
            } else {
              return 2;
            }

            ;
            return nil;
          }(), string);

          self["break"] = function () {
            if ($truthy($ret_or_4 = self.cmd.$dollar())) {
              return $ret_or_4;
            } else {
              return 0;
            }

            ;
            return nil;
          }().$abs();

          dice_list = self.randomizer.$roll_barabara(self.times, 6).$sort();
          dice_broken = dice_list.$pop(self["break"]);
          dice_total = dice_list.$dup().$pop(2).$inject(0, "+");
          total = $rb_plus(dice_total, self.cmd.$modify_number());
          sequence = [self.$expr_r(), self.$dice_result_r(dice_total, dice_list, dice_broken), self.$result_r(dice_total, total)];
          return sequence.$join(" ＞ ");
        }, $OracleEngine_r_roll$8.$$arity = 1);
        Opal.def(self, '$expr_r', $OracleEngine_expr_r$9 = function $$expr_r() {
          var self = this,
              modify_number = nil,
              critical = nil,
              fumble = nil,
              brak = nil,
              cmp_op = nil;
          modify_number = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());

          critical = function () {
            if (self.critical['$=='](12)) {
              return "";
            } else {
              return "" + "c[" + self.critical + "]";
            }

            ;
            return nil;
          }();

          fumble = function () {
            if (self.fumble['$=='](2)) {
              return "";
            } else {
              return "" + "f[" + self.fumble + "]";
            }

            ;
            return nil;
          }();

          brak = function () {
            if (self["break"]['$=='](0)) {
              return "";
            } else {
              return "" + "b[" + self["break"] + "]";
            }

            ;
            return nil;
          }();

          cmp_op = $$($nesting, 'Format').$comparison_operator(self.cmd.$cmp_op());
          return "" + "(" + self.times + "R6" + modify_number + critical + fumble + brak + cmp_op + self.cmd.$target_number() + ")";
        }, $OracleEngine_expr_r$9.$$arity = 0);
        Opal.def(self, '$dice_result_r', $OracleEngine_dice_result_r$10 = function $$dice_result_r(dice_total, dice_list, break_list) {
          var self = this,
              modify_number_text = nil;
          modify_number_text = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());

          if ($truthy(break_list['$empty?']())) {
            return "" + dice_total + "[" + dice_list.$join(", ") + "]" + modify_number_text;
          } else {
            return "" + dice_total + "[" + dice_list.$join(", ") + "]×[" + break_list.$join(", ") + "]" + modify_number_text;
          }

          ;
        }, $OracleEngine_dice_result_r$10.$$arity = 3);
        Opal.def(self, '$result_r', $OracleEngine_result_r$11 = function $$result_r(dice_total, total) {
          var self = this;

          if ($truthy($rb_le(dice_total, self.fumble))) {
            return "ファンブル!";
          } else if ($truthy($rb_ge(dice_total, self.critical))) {
            return "クリティカル!";
          } else if (self.cmd.$cmp_op()['$=='](">=")) {
            if ($truthy($rb_ge(total, self.cmd.$target_number()))) {
              return "" + total + " 成功";
            } else {
              return "" + total + " 失敗";
            }
          } else {
            return total.$to_s();
          }
        }, $OracleEngine_result_r$11.$$arity = 2);
        Opal.def(self, '$normalize_critical', $OracleEngine_normalize_critical$12 = function $$normalize_critical(critical, string) {
          var self = this;

          if ($truthy(/@[+-]/.$match(string))) {
            critical = $rb_plus(12, critical);
          }

          ;

          if ($truthy($rb_lt(critical, 2))) {
            critical = 2;
          }

          ;
          return critical;
        }, $OracleEngine_normalize_critical$12.$$arity = 2);
        Opal.def(self, '$normalize_fumble', $OracleEngine_normalize_fumble$13 = function $$normalize_fumble(fumble, string) {
          var self = this;

          if ($truthy(/#[+-]/.$match(string))) {
            fumble = $rb_plus(2, fumble);
          }

          ;
          return self.$clamp(fumble, 0, 12);
        }, $OracleEngine_normalize_fumble$13.$$arity = 2);
        Opal.def(self, '$damage_roll', $OracleEngine_damage_roll$14 = function $$damage_roll(string) {
          var self = this,
              parser = nil,
              $ret_or_5 = nil,
              dice_list = nil,
              dice_broken = nil,
              total_n = nil,
              sequence = nil;
          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\d+D6/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$restrict_cmp_op_to(nil).$enable_dollar();
          self.cmd = parser.$parse(string);

          if ($truthy(self.cmd)) {} else {
            return nil;
          }

          ;
          self.times = self.cmd.$command().$to_i();

          self["break"] = function () {
            if ($truthy($ret_or_5 = self.cmd.$dollar())) {
              return $ret_or_5;
            } else {
              return 0;
            }

            ;
            return nil;
          }().$abs();

          if (self.times['$=='](0)) {
            return nil;
          }

          ;
          dice_list = self.randomizer.$roll_barabara(self.times, 6).$sort();
          dice_broken = dice_list.$pop(self["break"]);
          total_n = $rb_plus(dice_list.$inject(0, "+"), self.cmd.$modify_number());

          if ($truthy($rb_lt(total_n, 0))) {
            total_n = 0;
          }

          ;
          sequence = [self.$expr_damage(), self.$result_damage(dice_list, dice_broken), total_n];
          return sequence.$join(" ＞ ");
        }, $OracleEngine_damage_roll$14.$$arity = 1);
        Opal.def(self, '$expr_damage', $OracleEngine_expr_damage$15 = function $$expr_damage() {
          var self = this,
              modify_number = nil,
              brak = nil;
          modify_number = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());

          brak = function () {
            if (self["break"]['$=='](0)) {
              return "";
            } else {
              return "" + "b[" + self["break"] + "]";
            }

            ;
            return nil;
          }();

          return "" + "(" + self.times + "D6" + modify_number + brak + ")";
        }, $OracleEngine_expr_damage$15.$$arity = 0);
        return (Opal.def(self, '$result_damage', $OracleEngine_result_damage$16 = function $$result_damage(dice_list, break_list) {
          var self = this,
              dice_total = nil,
              modify_number_text = nil;
          dice_total = dice_list.$inject(0, "+");
          modify_number_text = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());

          if ($truthy(break_list['$empty?']())) {
            return "" + dice_total + "[" + dice_list.$join(", ") + "]" + modify_number_text;
          } else {
            return "" + dice_total + "[" + dice_list.$join(", ") + "]×[" + break_list.$join(", ") + "]" + modify_number_text;
          }

          ;
        }, $OracleEngine_result_damage$16.$$arity = 2), nil) && 'result_damage';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~OracleEngine~index.js.map