{"version":3,"sources":["./node_modules/bcdice/lib/bcdice/game_system/OracleEngine.js"],"names":["require","Opal","modules","$rb_gt","lhs","rhs","self","top","$nesting","nil","$$$","$$","$module","module","$truthy","truthy","$base","$parent_nesting","concat","$Format_comparison_operator$1","$Format_modifier$2","$module_function","def","$$comparison_operator","op","$case","$to_s","$$arity","$$modifier","number","$rb_minus","$rb_plus","$rb_ge","$rb_lt","$rb_le","$klass","klass","$send2","send2","$hash2","hash2","$send","send","$require","$super","$OracleEngine_initialize$1","$OracleEngine_eval_game_system_specific_command$2","$OracleEngine_clutch_roll$3","$OracleEngine_expr_clutch$5","$OracleEngine_result_clutch$6","$OracleEngine_clamp$7","$OracleEngine_r_roll$8","$OracleEngine_expr_r$9","$OracleEngine_dice_result_r$10","$OracleEngine_result_r$11","$OracleEngine_normalize_critical$12","$OracleEngine_normalize_fumble$13","$OracleEngine_damage_roll$14","$OracleEngine_expr_damage$15","$OracleEngine_result_damage$16","$$prototype","cmd","max_shift","times","randomizer","critical","fumble","const_set","$register_prefix","$$initialize","command","$iter","$$p","$yield","find_super_dispatcher","sort_add_dice","sort_barabara_dice","$$eval_game_system_specific_command","$clutch_roll","$damage_roll","$r_roll","$$clutch_roll","string","$a","$b","$$4","parser","$ret_or_1","$writer","dice_list","sequence","$debug","$new","$round_type","$restrict_cmp_op_to","$parse","$command","$split","$to_proc","to_ary","$cmp_op","$clamp","$target_number","to_a","$roll_barabara","x","$$s","$modify_number","$sort","$expr_clutch","$join","$result_clutch","$last","$$expr_clutch","cmp_op","modify_number","$comparison_operator","$modifier","$$result_clutch","after_shift","$$clamp","i","min","max","$$r_roll","$ret_or_2","$ret_or_3","$ret_or_4","dice_broken","dice_total","total","$enable_critical","$enable_fumble","$enable_dollar","$to_i","$normalize_critical","$critical","$normalize_fumble","$fumble","$dollar","$abs","$pop","$dup","$inject","$expr_r","$dice_result_r","$result_r","$$expr_r","brak","$$dice_result_r","break_list","modify_number_text","$$result_r","$$normalize_critical","$match","$$normalize_fumble","$$damage_roll","$ret_or_5","total_n","$expr_damage","$result_damage","$$expr_damage","$$result_damage"],"mappings":";;;;;;;;;AAAAA,mBAAO,CAAC,uBAAD,CAAP;AAEA;;;AACAC,IAAI,CAACC,OAAL,CAAa,eAAb,IAAgC,UAASD,IAAT,EAAe;AAC7C,WAASE,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACxB,WAAQ,OAAOD,GAAP,KAAgB,QAAhB,IAA4B,OAAOC,GAAP,KAAgB,QAA7C,GAAyDD,GAAG,GAAGC,GAA/D,GAAqED,GAAG,CAAC,IAAD,CAAH,CAAUC,GAAV,CAA5E;AACD;;AACD,MAAIC,IAAI,GAAGL,IAAI,CAACM,GAAhB;AAAA,MAAqBC,QAAQ,GAAG,EAAhC;AAAA,MAAoCC,GAAG,GAAGR,IAAI,CAACQ,GAA/C;AAAA,MAAoDC,GAAG,GAAGT,IAAI,CAACS,GAA/D;AAAA,MAAoEC,EAAE,GAAGV,IAAI,CAACU,EAA9E;AAAA,MAAkFC,OAAO,GAAGX,IAAI,CAACY,MAAjG;AAAA,MAAyGC,OAAO,GAAGb,IAAI,CAACc,MAAxH;AAEA,SAAQ,UAASC,KAAT,EAAgBC,eAAhB,EAAiC;AACvC,QAAIX,IAAI,GAAGM,OAAO,CAACI,KAAD,EAAQ,QAAR,CAAlB;AAEA,QAAIR,QAAQ,GAAG,CAACF,IAAD,EAAOY,MAAP,CAAcD,eAAd,CAAf;;AAEA,KAAC,UAASD,KAAT,EAAgBC,eAAhB,EAAiC;AAChC,UAAIX,IAAI,GAAGM,OAAO,CAACI,KAAD,EAAQ,QAAR,CAAlB;AAEA,UAAIR,QAAQ,GAAG,CAACF,IAAD,EAAOY,MAAP,CAAcD,eAAd,CAAf;AAAA,UAA+CE,6BAA/C;AAAA,UAA8EC,kBAA9E;AAGAd,UAAI,CAACe,gBAAL;AAEApB,UAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,sBAAf,EAAuCa,6BAA6B,GAAG,SAASI,qBAAT,CAA+BC,EAA/B,EAAmC;AACxG,YAAIlB,IAAI,GAAG,IAAX;AAAA,YAAiBmB,KAAK,GAAGhB,GAAzB;AAEA,eAAQ,YAAW;AAACgB,eAAK,GAAGD,EAAR;;AACpB,cAAI,KAAK,MAAL,EAAaC,KAAb,CAAJ,EAAyB;AAAC,mBAAO,GAAP;AAAW,WAArC,MACK,IAAI,KAAK,MAAL,EAAaA,KAAb,CAAJ,EAAyB;AAAC,mBAAO,IAAP;AAAY,WAAtC,MACA,IAAId,EAAE,CAACH,QAAD,EAAW,QAAX,CAAF,CAAuB,MAAvB,EAA+BiB,KAA/B,CAAJ,EAA2C;AAAC,mBAAOD,EAAE,CAACE,KAAH,EAAP;AAAkB,WAA9D,MACA;AAAE,mBAAOjB,GAAP;AAAY;AAAC,SAJb,EAAP;AAKD,OARD,EAQGU,6BAA6B,CAACQ,OAA9B,GAAwC,CAR3C;AAUA1B,UAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,WAAf,EAA4Bc,kBAAkB,GAAG,SAASQ,UAAT,CAAoBC,MAApB,EAA4B;AAC3E,YAAIvB,IAAI,GAAG,IAAX;;AAEA,YAAIQ,OAAO,CAACe,MAAM,CAAC,OAAD,CAAN,EAAD,CAAX,EAAgC;AAC9B,iBAAOpB,GAAP;AACD,SAFD,MAEO,IAAIoB,MAAM,CAAC,KAAD,CAAN,CAAc,CAAd,CAAJ,EAAsB;AAC3B,iBAAO,EAAP;AACD,SAFM,MAEA,IAAIf,OAAO,CAACX,MAAM,CAAC0B,MAAD,EAAS,CAAT,CAAP,CAAX,EAAgC;AACrC,iBAAO,KAAK,GAAL,GAAYA,MAAnB;AACD,SAFM,MAEA;AACL,iBAAOA,MAAM,CAACH,KAAP,EAAP;AACD;AACF,OAZD,EAYGN,kBAAkB,CAACO,OAAnB,GAA6B,CAZhC;AAaD,KA/BD,EA+BGnB,QAAQ,CAAC,CAAD,CA/BX,EA+BgBA,QA/BhB;AAgCD,GArCM,CAqCJA,QAAQ,CAAC,CAAD,CArCJ,EAqCSA,QArCT,CAAP;AAsCD,CA5CD;AA8CA;;;AACA,CAAC,UAASP,IAAT,EAAe;AACd,WAAS6B,SAAT,CAAmB1B,GAAnB,EAAwBC,GAAxB,EAA6B;AAC3B,WAAQ,OAAOD,GAAP,KAAgB,QAAhB,IAA4B,OAAOC,GAAP,KAAgB,QAA7C,GAAyDD,GAAG,GAAGC,GAA/D,GAAqED,GAAG,CAAC,IAAD,CAAH,CAAUC,GAAV,CAA5E;AACD;;AACD,WAAS0B,QAAT,CAAkB3B,GAAlB,EAAuBC,GAAvB,EAA4B;AAC1B,WAAQ,OAAOD,GAAP,KAAgB,QAAhB,IAA4B,OAAOC,GAAP,KAAgB,QAA7C,GAAyDD,GAAG,GAAGC,GAA/D,GAAqED,GAAG,CAAC,IAAD,CAAH,CAAUC,GAAV,CAA5E;AACD;;AACD,WAAS2B,MAAT,CAAgB5B,GAAhB,EAAqBC,GAArB,EAA0B;AACxB,WAAQ,OAAOD,GAAP,KAAgB,QAAhB,IAA4B,OAAOC,GAAP,KAAgB,QAA7C,GAAyDD,GAAG,IAAIC,GAAhE,GAAsED,GAAG,CAAC,KAAD,CAAH,CAAWC,GAAX,CAA7E;AACD;;AACD,WAAS4B,MAAT,CAAgB7B,GAAhB,EAAqBC,GAArB,EAA0B;AACxB,WAAQ,OAAOD,GAAP,KAAgB,QAAhB,IAA4B,OAAOC,GAAP,KAAgB,QAA7C,GAAyDD,GAAG,GAAGC,GAA/D,GAAqED,GAAG,CAAC,IAAD,CAAH,CAAUC,GAAV,CAA5E;AACD;;AACD,WAASF,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACxB,WAAQ,OAAOD,GAAP,KAAgB,QAAhB,IAA4B,OAAOC,GAAP,KAAgB,QAA7C,GAAyDD,GAAG,GAAGC,GAA/D,GAAqED,GAAG,CAAC,IAAD,CAAH,CAAUC,GAAV,CAA5E;AACD;;AACD,WAAS6B,MAAT,CAAgB9B,GAAhB,EAAqBC,GAArB,EAA0B;AACxB,WAAQ,OAAOD,GAAP,KAAgB,QAAhB,IAA4B,OAAOC,GAAP,KAAgB,QAA7C,GAAyDD,GAAG,IAAIC,GAAhE,GAAsED,GAAG,CAAC,KAAD,CAAH,CAAWC,GAAX,CAA7E;AACD;;AACD,MAAIC,IAAI,GAAGL,IAAI,CAACM,GAAhB;AAAA,MAAqBC,QAAQ,GAAG,EAAhC;AAAA,MAAoCC,GAAG,GAAGR,IAAI,CAACQ,GAA/C;AAAA,MAAoDC,GAAG,GAAGT,IAAI,CAACS,GAA/D;AAAA,MAAoEC,EAAE,GAAGV,IAAI,CAACU,EAA9E;AAAA,MAAkFC,OAAO,GAAGX,IAAI,CAACY,MAAjG;AAAA,MAAyGsB,MAAM,GAAGlC,IAAI,CAACmC,KAAvH;AAAA,MAA8HC,MAAM,GAAGpC,IAAI,CAACqC,KAA5I;AAAA,MAAmJC,MAAM,GAAGtC,IAAI,CAACuC,KAAjK;AAAA,MAAwK1B,OAAO,GAAGb,IAAI,CAACc,MAAvL;AAAA,MAA+L0B,KAAK,GAAGxC,IAAI,CAACyC,IAA5M;AAGApC,MAAI,CAACqC,QAAL,CAAc,eAAd;AACA,SAAQ,UAAS3B,KAAT,EAAgBC,eAAhB,EAAiC;AACvC,QAAIX,IAAI,GAAGM,OAAO,CAACI,KAAD,EAAQ,QAAR,CAAlB;AAEA,QAAIR,QAAQ,GAAG,CAACF,IAAD,EAAOY,MAAP,CAAcD,eAAd,CAAf;;AAEA,KAAC,UAASD,KAAT,EAAgBC,eAAhB,EAAiC;AAChC,UAAIX,IAAI,GAAGM,OAAO,CAACI,KAAD,EAAQ,YAAR,CAAlB;AAEA,UAAIR,QAAQ,GAAG,CAACF,IAAD,EAAOY,MAAP,CAAcD,eAAd,CAAf;;AAEA,OAAC,UAASD,KAAT,EAAgB4B,MAAhB,EAAwB3B,eAAxB,EAAyC;AACxC,YAAIX,IAAI,GAAG6B,MAAM,CAACnB,KAAD,EAAQ4B,MAAR,EAAgB,cAAhB,CAAjB;AAEA,YAAIpC,QAAQ,GAAG,CAACF,IAAD,EAAOY,MAAP,CAAcD,eAAd,CAAf;AAAA,YAA+C4B,0BAA/C;AAAA,YAA2EC,iDAA3E;AAAA,YAA8HC,2BAA9H;AAAA,YAA2JC,2BAA3J;AAAA,YAAwLC,6BAAxL;AAAA,YAAuNC,qBAAvN;AAAA,YAA8OC,sBAA9O;AAAA,YAAsQC,sBAAtQ;AAAA,YAA8RC,8BAA9R;AAAA,YAA8TC,yBAA9T;AAAA,YAAyVC,mCAAzV;AAAA,YAA8XC,iCAA9X;AAAA,YAAiaC,4BAAja;AAAA,YAA+bC,4BAA/b;AAAA,YAA6dC,8BAA7d;AAEArD,YAAI,CAACsD,WAAL,CAAiBC,GAAjB,GAAuBvD,IAAI,CAACsD,WAAL,CAAiBE,SAAjB,GAA6BxD,IAAI,CAACsD,WAAL,CAAiBG,KAAjB,GAAyBzD,IAAI,CAACsD,WAAL,CAAiBI,UAAjB,GAA8B1D,IAAI,CAACsD,WAAL,CAAiB,OAAjB,IAA4BtD,IAAI,CAACsD,WAAL,CAAiBK,QAAjB,GAA4B3D,IAAI,CAACsD,WAAL,CAAiBM,MAAjB,GAA0BzD,GAA7L;AAEAR,YAAI,CAACkE,SAAL,CAAe3D,QAAQ,CAAC,CAAD,CAAvB,EAA4B,IAA5B,EAAkC,cAAlC;AACAP,YAAI,CAACkE,SAAL,CAAe3D,QAAQ,CAAC,CAAD,CAAvB,EAA4B,MAA5B,EAAoC,UAApC;AACAP,YAAI,CAACkE,SAAL,CAAe3D,QAAQ,CAAC,CAAD,CAAvB,EAA4B,UAA5B,EAAwC,UAAxC;AACAP,YAAI,CAACkE,SAAL,CAAe3D,QAAQ,CAAC,CAAD,CAAvB,EAA4B,cAA5B,EAA4C,KAAK,yBAAL,GAAiC,sDAAjC,GAA0F,0CAA1F,GAAuI,4CAAvI,GAAsL,yCAAtL,GAAkO,iDAAlO,GAAsR,yBAAtR,GAAkT,0DAAlT,GAA+W,kDAA/W,GAAoa,8BAApa,GAAqc,2CAArc,GAAmf,8BAAnf,GAAohB,+BAAphB,GAAsjB,sCAAtjB,GAA+lB,sCAA3oB;AACAF,YAAI,CAAC8D,gBAAL,CAAsB,QAAtB,EAAgC,QAAhC,EAA0C,0BAA1C;AAEAnE,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,aAAf,EAA8BuC,0BAA0B,GAAG,SAASwB,YAAT,CAAsBC,OAAtB,EAA+B;AACxF,cAAIC,KAAK,GAAG1B,0BAA0B,CAAC2B,GAAvC;AAAA,cAA4CC,MAAM,GAAGF,KAAK,IAAI9D,GAA9D;AAAA,cAAmEH,IAAI,GAAG,IAA1E;AAEA,cAAIiE,KAAJ,EAAW1B,0BAA0B,CAAC2B,GAA3B,GAAiC,IAAjC;AAEXnC,gBAAM,CAAC/B,IAAD,EAAOL,IAAI,CAACyE,qBAAL,CAA2BpE,IAA3B,EAAiC,YAAjC,EAA+CuC,0BAA/C,EAA2E,KAA3E,EAAkF,IAAlF,CAAP,EAAgG,YAAhG,EAA8G,CAACyB,OAAD,CAA9G,EAAyH,IAAzH,CAAN;AACAhE,cAAI,CAACqE,aAAL,GAAqB,IAArB;AACA,iBAAQrE,IAAI,CAACsE,kBAAL,GAA0B,IAAlC;AACD,SARD,EAQG/B,0BAA0B,CAAClB,OAA3B,GAAqC,CARxC;AAUA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,oCAAf,EAAqDwC,iDAAiD,GAAG,SAAS+B,mCAAT,CAA6CP,OAA7C,EAAsD;AAC7J,cAAIhE,IAAI,GAAG,IAAX;AAAA,cAAiBmB,KAAK,GAAGhB,GAAzB;AAEA,iBAAQ,YAAW;AAACgB,iBAAK,GAAG6C,OAAR;;AACpB,gBAAI,WAAW,MAAX,EAAmB7C,KAAnB,CAAJ,EAA+B;AAAC,qBAAOnB,IAAI,CAACwE,YAAL,CAAkBR,OAAlB,CAAP;AAAkC,aAAlE,MACK,IAAI,sBAAsB,MAAtB,EAA8B7C,KAA9B,CAAJ,EAA0C;AAAC,qBAAOnB,IAAI,CAACyE,YAAL,CAAkBT,OAAlB,CAAP;AAAkC,aAA7E,MACA,IAAI,QAAQ,MAAR,EAAgB7C,KAAhB,CAAJ,EAA4B;AAAC,qBAAOnB,IAAI,CAAC0E,OAAL,CAAaV,OAAb,CAAP;AAA6B,aAA1D,MACA;AAAE,qBAAO7D,GAAP;AAAY;AAAC,WAJb,EAAP;AAKD,SARD,EAQGqC,iDAAiD,CAACnB,OAAlD,GAA4D,CAR/D;AAUA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,cAAf,EAA+ByC,2BAA2B,GAAG,SAASkC,aAAT,CAAuBC,MAAvB,EAA+B;AAC1F,cAAIC,EAAJ;AAAA,cAAQC,EAAR;AAAA,cAAYC,GAAZ;AAAA,cAAiB/E,IAAI,GAAG,IAAxB;AAAA,cAA8BgF,MAAM,GAAG7E,GAAvC;AAAA,cAA4C8E,SAAS,GAAG9E,GAAxD;AAAA,cAA6D+E,OAAO,GAAG/E,GAAvE;AAAA,cAA4EgF,SAAS,GAAGhF,GAAxF;AAAA,cAA6FiF,QAAQ,GAAGjF,GAAxG;;AAGAH,cAAI,CAACqF,MAAL,CAAY,mBAAZ,EAAiCT,MAAjC;AACAI,gBAAM,GAAG5E,GAAG,CAACC,EAAE,CAACH,QAAD,EAAW,SAAX,CAAH,EAA0B,QAA1B,CAAH,CAAuCoF,IAAvC,CAA4C,YAA5C,EAA0DrD,MAAM,CAAC,CAAC,YAAD,CAAD,EAAiB;AAAC,0BAAcjC,IAAI,CAACuF,WAAL;AAAf,WAAjB,CAAhE,EAAsHC,mBAAtH,CAA0IrF,GAA1I,EAA+I,IAA/I,CAAT;AACAH,cAAI,CAACuD,GAAL,GAAWyB,MAAM,CAACS,MAAP,CAAcb,MAAd,CAAX;;AACA,cAAIpE,OAAO,CAACR,IAAI,CAACuD,GAAN,CAAX,EAAuB,CACtB,CADD,MACO;AACL,mBAAOpD,GAAP;AACD;;AAAA;AACD2E,YAAE,GAAG3C,KAAK,CAACnC,IAAI,CAACuD,GAAL,CAASmC,QAAT,GAAoBC,MAApB,CAA2B,IAA3B,CAAD,EAAmC,KAAnC,EAA0C,EAA1C,EAA8C,OAAOC,QAAP,EAA9C,CAAV,EAA4Ef,EAAE,GAAGlF,IAAI,CAACkG,MAAL,CAAYf,EAAZ,CAAjF,EAAmG9E,IAAI,CAACyD,KAAL,GAAcoB,EAAE,CAAC,CAAD,CAAF,IAAS,IAAT,GAAgB1E,GAAhB,GAAsB0E,EAAE,CAAC,CAAD,CAAzI,EAAiJ7E,IAAI,CAACwD,SAAL,GAAkBqB,EAAE,CAAC,CAAD,CAAF,IAAS,IAAT,GAAgB1E,GAAhB,GAAsB0E,EAAE,CAAC,CAAD,CAA3L,EAAkMC,EAAlM;;AACA9E,cAAI,CAACwD,SAAL,GAAkB,YAAW;AAAC,gBAAIhD,OAAO,CAAEyE,SAAS,GAAGjF,IAAI,CAACwD,SAAnB,CAAX,EAA2C;AACvE,qBAAOyB,SAAP;AACD,aAF6B,MAEvB;AACL,qBAAO,CAAP;AACD;;AAAA;AAAE,mBAAO9E,GAAP;AAAa,WAJC,EAAjB;;AAKA,cAAIK,OAAO,CAACR,IAAI,CAACuD,GAAL,CAASuC,OAAT,EAAD,CAAX,EAAiC;AAE/BZ,mBAAO,GAAG,CAAClF,IAAI,CAAC+F,MAAL,CAAY/F,IAAI,CAACuD,GAAL,CAASyC,cAAT,EAAZ,EAAuC,CAAvC,EAA0ChG,IAAI,CAACwD,SAA/C,CAAD,CAAV;AACArB,iBAAK,CAACnC,IAAI,CAACuD,GAAN,EAAW,gBAAX,EAA6B5D,IAAI,CAACsG,IAAL,CAAUf,OAAV,CAA7B,CAAL;AACAA,mBAAO,CAAC1D,SAAS,CAAC0D,OAAO,CAAC,QAAD,CAAR,EAAoB,CAApB,CAAV,CAAP;AAA0C;;AAAA;;AAC5C,cAAIlF,IAAI,CAACyD,KAAL,CAAW,KAAX,EAAkB,CAAlB,CAAJ,EAA0B;AACxB,mBAAOtD,GAAP;AAAW;;AAAA;AACbgF,mBAAS,GAAGhD,KAAK,CAACnC,IAAI,CAAC0D,UAAL,CAAgBwC,cAAhB,CAA+BlG,IAAI,CAACyD,KAApC,EAA2C,CAA3C,CAAD,EAAgD,KAAhD,EAAuD,EAAvD,GAA4DsB,GAAG,GAAG,aAASoB,CAAT,EAAW;AAAC,gBAAInG,IAAI,GAAG+E,GAAG,CAACqB,GAAJ,IAAW,IAAX,GAAkB,IAAlB,GAAyBrB,GAAG,CAACqB,GAAxC;AAC7F,gBAAIpG,IAAI,CAACuD,GAAL,IAAY,IAAhB,EAAsBvD,IAAI,CAACuD,GAAL,GAAWpD,GAAX;AACtB,gBAAIH,IAAI,CAACwD,SAAL,IAAkB,IAAtB,EAA4BxD,IAAI,CAACwD,SAAL,GAAiBrD,GAAjB;;AAI5B,gBAAIgG,CAAC,IAAI,IAAT,EAAe;AACbA,eAAC,GAAGhG,GAAJ;AACD;;AAAA;AACD,mBAAOH,IAAI,CAAC+F,MAAL,CAAYtE,QAAQ,CAAC0E,CAAD,EAAInG,IAAI,CAACuD,GAAL,CAAS8C,cAAT,EAAJ,CAApB,EAAoD,CAApD,EAAuDrG,IAAI,CAACwD,SAA5D,CAAP;AAA+E,WATJ,EASMuB,GAAG,CAACqB,GAAJ,GAAUpG,IAThB,EASsB+E,GAAG,CAAC1D,OAAJ,GAAc,CATpC,EASuC0D,GATnG,EAAL,CAS8GuB,KAT9G,EAAZ;AAUAlB,kBAAQ,GAAG,CAACpF,IAAI,CAACuG,YAAL,EAAD,EAAsB,KAAK,GAAL,GAAYpB,SAAS,CAACqB,KAAV,CAAgB,IAAhB,CAAZ,GAAqC,GAA3D,EAAgExG,IAAI,CAACyG,cAAL,CAAoBtB,SAAS,CAACuB,KAAV,EAApB,CAAhE,CAAX;AACA,iBAAOtB,QAAQ,CAACoB,KAAT,CAAe,KAAf,CAAP;AACD,SApCD,EAoCG/D,2BAA2B,CAACpB,OAA5B,GAAsC,CApCzC;AAsCA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,cAAf,EAA+B0C,2BAA2B,GAAG,SAASiE,aAAT,GAAyB;AACpF,cAAI3G,IAAI,GAAG,IAAX;AAAA,cAAiBwD,SAAS,GAAGrD,GAA7B;AAAA,cAAkCyG,MAAM,GAAGzG,GAA3C;AAAA,cAAgD0G,aAAa,GAAG1G,GAAhE;;AAGAqD,mBAAS,GAAI,YAAW;AAAC,gBAAIxD,IAAI,CAACwD,SAAL,CAAe,KAAf,EAAsB,CAAtB,CAAJ,EAA8B;AACrD,qBAAO,CAAP;AACD,aAFwB,MAElB;AACL,qBAAOrD,GAAP;AACD;;AAAA;AAAE,mBAAOA,GAAP;AAAa,WAJJ,EAAZ;;AAKAyG,gBAAM,GAAGvG,EAAE,CAACH,QAAD,EAAW,QAAX,CAAF,CAAuB4G,oBAAvB,CAA4C9G,IAAI,CAACuD,GAAL,CAASuC,OAAT,EAA5C,CAAT;AACAe,uBAAa,GAAGxG,EAAE,CAACH,QAAD,EAAW,QAAX,CAAF,CAAuB6G,SAAvB,CAAiC/G,IAAI,CAACuD,GAAL,CAAS8C,cAAT,EAAjC,CAAhB;AACA,iBAAO,KAAK,GAAL,GAAYrG,IAAI,CAACyD,KAAjB,GAA0B,IAA1B,GAAkCD,SAAlC,GAAgDqD,aAAhD,GAAkED,MAAlE,GAA6E5G,IAAI,CAACuD,GAAL,CAASyC,cAAT,EAA7E,GAA0G,GAAjH;AACD,SAZD,EAYGtD,2BAA2B,CAACrB,OAA5B,GAAsC,CAZzC;AAcA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,gBAAf,EAAiC2C,6BAA6B,GAAG,SAASqE,eAAT,CAAyBC,WAAzB,EAAsC;AACrG,cAAIjH,IAAI,GAAG,IAAX;;AAEA,cAAIQ,OAAO,CAACR,IAAI,CAACuD,GAAL,CAASuC,OAAT,GAAmB,KAAnB,EAA0B,IAA1B,CAAD,CAAX,EAA8C;AAC5C,mBAAO,KAAK,KAAL,GAAcmB,WAArB;AACD,WAFD,MAEO,IAAIzG,OAAO,CAACkB,MAAM,CAACuF,WAAD,EAAcjH,IAAI,CAACuD,GAAL,CAASyC,cAAT,EAAd,CAAP,CAAX,EAA6D;AAClE,mBAAO,KAAK,QAAL,GAAiBhG,IAAI,CAACuD,GAAL,CAASyC,cAAT,EAAxB;AACD,WAFM,MAEA;AAELiB,uBAAW,GAAGzF,SAAS,CAACyF,WAAD,EAAc,CAAd,CAAvB;;AACA,gBAAIzG,OAAO,CAACmB,MAAM,CAACsF,WAAD,EAAc,CAAd,CAAP,CAAX,EAAqC;AACnCA,yBAAW,GAAG,CAAd;AAAgB;;AAAA;AAClB,mBAAO,KAAK,QAAL,GAAiBA,WAAxB;AACD;AACF,SAdD,EAcGtE,6BAA6B,CAACtB,OAA9B,GAAwC,CAd3C;AAgBA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,QAAf,EAAyB4C,qBAAqB,GAAG,SAASsE,OAAT,CAAiBC,CAAjB,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC7E,cAAIrH,IAAI,GAAG,IAAX;;AAEA,cAAIQ,OAAO,CAACmB,MAAM,CAACwF,CAAD,EAAIC,GAAJ,CAAP,CAAX,EAA6B;AAC3B,mBAAOA,GAAP;AACD,WAFD,MAEO,IAAI5G,OAAO,CAACX,MAAM,CAACsH,CAAD,EAAIE,GAAJ,CAAP,CAAX,EAA6B;AAClC,mBAAOA,GAAP;AACD,WAFM,MAEA;AACL,mBAAOF,CAAP;AACD;AACF,SAVD,EAUGvE,qBAAqB,CAACvB,OAAtB,GAAgC,CAVnC;AAYA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,SAAf,EAA0B6C,sBAAsB,GAAG,SAASyE,QAAT,CAAkB1C,MAAlB,EAA0B;AAC3E,cAAI5E,IAAI,GAAG,IAAX;AAAA,cAAiBgF,MAAM,GAAG7E,GAA1B;AAAA,cAA+BoH,SAAS,GAAGpH,GAA3C;AAAA,cAAgDqH,SAAS,GAAGrH,GAA5D;AAAA,cAAiEsH,SAAS,GAAGtH,GAA7E;AAAA,cAAkFgF,SAAS,GAAGhF,GAA9F;AAAA,cAAmGuH,WAAW,GAAGvH,GAAjH;AAAA,cAAsHwH,UAAU,GAAGxH,GAAnI;AAAA,cAAwIyH,KAAK,GAAGzH,GAAhJ;AAAA,cAAqJiF,QAAQ,GAAGjF,GAAhK;AAGA6E,gBAAM,GAAG5E,GAAG,CAACC,EAAE,CAACH,QAAD,EAAW,SAAX,CAAH,EAA0B,QAA1B,CAAH,CAAuCoF,IAAvC,CAA4C,OAA5C,EAAqDrD,MAAM,CAAC,CAAC,YAAD,CAAD,EAAiB;AAAC,0BAAcjC,IAAI,CAACuF,WAAL;AAAf,WAAjB,CAA3D,EAAiHC,mBAAjH,CAAqIrF,GAArI,EAA0I,IAA1I,EAAgJ0H,gBAAhJ,GAAmKC,cAAnK,GAAoLC,cAApL,EAAT;AACA/H,cAAI,CAACuD,GAAL,GAAWyB,MAAM,CAACS,MAAP,CAAcb,MAAd,CAAX;;AACA,cAAIpE,OAAO,CAACR,IAAI,CAACuD,GAAN,CAAX,EAAuB,CACtB,CADD,MACO;AACL,mBAAOpD,GAAP;AACD;;AAAA;AACDH,cAAI,CAACyD,KAAL,GAAazD,IAAI,CAACuD,GAAL,CAASmC,QAAT,GAAoBsC,KAApB,EAAb;;AACA,cAAIhI,IAAI,CAACyD,KAAL,CAAW,KAAX,EAAkB,CAAlB,CAAJ,EAA0B;AACxB,mBAAOtD,GAAP;AAAW;;AAAA;AACbH,cAAI,CAAC2D,QAAL,GAAgB3D,IAAI,CAACiI,mBAAL,CAA0B,YAAW;AAAC,gBAAIzH,OAAO,CAAE+G,SAAS,GAAGvH,IAAI,CAACuD,GAAL,CAAS2E,SAAT,EAAd,CAAX,EAAiD;AACrG,qBAAOX,SAAP;AACD,aAFqD,MAE/C;AACL,qBAAO,EAAP;AACD;;AAAA;AAAE,mBAAOpH,GAAP;AAAa,WAJyB,EAAzB,EAIKyE,MAJL,CAAhB;AAKA5E,cAAI,CAAC4D,MAAL,GAAc5D,IAAI,CAACmI,iBAAL,CAAwB,YAAW;AAAC,gBAAI3H,OAAO,CAAEgH,SAAS,GAAGxH,IAAI,CAACuD,GAAL,CAAS6E,OAAT,EAAd,CAAX,EAA+C;AAC/F,qBAAOZ,SAAP;AACD,aAFiD,MAE3C;AACL,qBAAO,CAAP;AACD;;AAAA;AAAE,mBAAOrH,GAAP;AAAa,WAJqB,EAAvB,EAIOyE,MAJP,CAAd;;AAKA5E,cAAI,CAAC,OAAD,CAAJ,GAAiB,YAAW;AAAC,gBAAIQ,OAAO,CAAEiH,SAAS,GAAGzH,IAAI,CAACuD,GAAL,CAAS8E,OAAT,EAAd,CAAX,EAA+C;AAC1E,qBAAOZ,SAAP;AACD,aAF4B,MAEtB;AACL,qBAAO,CAAP;AACD;;AAAA;AAAE,mBAAOtH,GAAP;AAAa,WAJA,GAIImI,IAJJ,EAAhB;;AAKAnD,mBAAS,GAAGnF,IAAI,CAAC0D,UAAL,CAAgBwC,cAAhB,CAA+BlG,IAAI,CAACyD,KAApC,EAA2C,CAA3C,EAA8C6C,KAA9C,EAAZ;AACAoB,qBAAW,GAAGvC,SAAS,CAACoD,IAAV,CAAevI,IAAI,CAAC,OAAD,CAAnB,CAAd;AACA2H,oBAAU,GAAGxC,SAAS,CAACqD,IAAV,GAAiBD,IAAjB,CAAsB,CAAtB,EAAyBE,OAAzB,CAAiC,CAAjC,EAAoC,GAApC,CAAb;AACAb,eAAK,GAAGnG,QAAQ,CAACkG,UAAD,EAAa3H,IAAI,CAACuD,GAAL,CAAS8C,cAAT,EAAb,CAAhB;AACAjB,kBAAQ,GAAG,CAACpF,IAAI,CAAC0I,OAAL,EAAD,EAAiB1I,IAAI,CAAC2I,cAAL,CAAoBhB,UAApB,EAAgCxC,SAAhC,EAA2CuC,WAA3C,CAAjB,EAA0E1H,IAAI,CAAC4I,SAAL,CAAejB,UAAf,EAA2BC,KAA3B,CAA1E,CAAX;AACA,iBAAOxC,QAAQ,CAACoB,KAAT,CAAe,KAAf,CAAP;AACD,SAlCD,EAkCG3D,sBAAsB,CAACxB,OAAvB,GAAiC,CAlCpC;AAoCA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,SAAf,EAA0B8C,sBAAsB,GAAG,SAAS+F,QAAT,GAAoB;AACrE,cAAI7I,IAAI,GAAG,IAAX;AAAA,cAAiB6G,aAAa,GAAG1G,GAAjC;AAAA,cAAsCwD,QAAQ,GAAGxD,GAAjD;AAAA,cAAsDyD,MAAM,GAAGzD,GAA/D;AAAA,cAAoE2I,IAAI,GAAG3I,GAA3E;AAAA,cAAgFyG,MAAM,GAAGzG,GAAzF;AAGA0G,uBAAa,GAAGxG,EAAE,CAACH,QAAD,EAAW,QAAX,CAAF,CAAuB6G,SAAvB,CAAiC/G,IAAI,CAACuD,GAAL,CAAS8C,cAAT,EAAjC,CAAhB;;AACA1C,kBAAQ,GAAI,YAAW;AAAC,gBAAI3D,IAAI,CAAC2D,QAAL,CAAc,KAAd,EAAqB,EAArB,CAAJ,EAA8B;AACpD,qBAAO,EAAP;AACD,aAFuB,MAEjB;AACL,qBAAO,KAAK,IAAL,GAAa3D,IAAI,CAAC2D,QAAlB,GAA8B,GAArC;AACD;;AAAA;AAAE,mBAAOxD,GAAP;AAAa,WAJL,EAAX;;AAKAyD,gBAAM,GAAI,YAAW;AAAC,gBAAI5D,IAAI,CAAC4D,MAAL,CAAY,KAAZ,EAAmB,CAAnB,CAAJ,EAA2B;AAC/C,qBAAO,EAAP;AACD,aAFqB,MAEf;AACL,qBAAO,KAAK,IAAL,GAAa5D,IAAI,CAAC4D,MAAlB,GAA4B,GAAnC;AACD;;AAAA;AAAE,mBAAOzD,GAAP;AAAa,WAJP,EAAT;;AAKA2I,cAAI,GAAI,YAAW;AAAC,gBAAI9I,IAAI,CAAC,OAAD,CAAJ,CAAc,KAAd,EAAqB,CAArB,CAAJ,EAA6B;AAC/C,qBAAO,EAAP;AACD,aAFmB,MAEb;AACL,qBAAO,KAAK,IAAL,GAAaA,IAAI,CAAC,OAAD,CAAjB,GAA8B,GAArC;AACD;;AAAA;AAAE,mBAAOG,GAAP;AAAa,WAJT,EAAP;;AAKAyG,gBAAM,GAAGvG,EAAE,CAACH,QAAD,EAAW,QAAX,CAAF,CAAuB4G,oBAAvB,CAA4C9G,IAAI,CAACuD,GAAL,CAASuC,OAAT,EAA5C,CAAT;AACA,iBAAO,KAAK,GAAL,GAAY9F,IAAI,CAACyD,KAAjB,GAA0B,IAA1B,GAAkCoD,aAAlC,GAAoDlD,QAApD,GAAiEC,MAAjE,GAA4EkF,IAA5E,GAAqFlC,MAArF,GAAgG5G,IAAI,CAACuD,GAAL,CAASyC,cAAT,EAAhG,GAA6H,GAApI;AACD,SAtBD,EAsBGlD,sBAAsB,CAACzB,OAAvB,GAAiC,CAtBpC;AAwBA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,gBAAf,EAAiC+C,8BAA8B,GAAG,SAASgG,eAAT,CAAyBpB,UAAzB,EAAqCxC,SAArC,EAAgD6D,UAAhD,EAA4D;AAC5H,cAAIhJ,IAAI,GAAG,IAAX;AAAA,cAAiBiJ,kBAAkB,GAAG9I,GAAtC;AAGA8I,4BAAkB,GAAG5I,EAAE,CAACH,QAAD,EAAW,QAAX,CAAF,CAAuB6G,SAAvB,CAAiC/G,IAAI,CAACuD,GAAL,CAAS8C,cAAT,EAAjC,CAArB;;AACA,cAAI7F,OAAO,CAACwI,UAAU,CAAC,SAAD,CAAV,EAAD,CAAX,EAAsC;AACpC,mBAAO,KAAMrB,UAAN,GAAoB,GAApB,GAA2BxC,SAAS,CAACqB,KAAV,CAAgB,IAAhB,CAA3B,GAAoD,GAApD,GAA2DyC,kBAAlE;AACD,WAFD,MAEO;AACL,mBAAO,KAAMtB,UAAN,GAAoB,GAApB,GAA2BxC,SAAS,CAACqB,KAAV,CAAgB,IAAhB,CAA3B,GAAoD,KAApD,GAA6DwC,UAAU,CAACxC,KAAX,CAAiB,IAAjB,CAA7D,GAAuF,GAAvF,GAA8FyC,kBAArG;AACD;;AAAA;AACF,SAVD,EAUGlG,8BAA8B,CAAC1B,OAA/B,GAAyC,CAV5C;AAYA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,WAAf,EAA4BgD,yBAAyB,GAAG,SAASkG,UAAT,CAAoBvB,UAApB,EAAgCC,KAAhC,EAAuC;AAC7F,cAAI5H,IAAI,GAAG,IAAX;;AAEA,cAAIQ,OAAO,CAACoB,MAAM,CAAC+F,UAAD,EAAa3H,IAAI,CAAC4D,MAAlB,CAAP,CAAX,EAA8C;AAC5C,mBAAO,QAAP;AACD,WAFD,MAEO,IAAIpD,OAAO,CAACkB,MAAM,CAACiG,UAAD,EAAa3H,IAAI,CAAC2D,QAAlB,CAAP,CAAX,EAAgD;AACrD,mBAAO,SAAP;AACD,WAFM,MAEA,IAAI3D,IAAI,CAACuD,GAAL,CAASuC,OAAT,GAAmB,KAAnB,EAA0B,IAA1B,CAAJ,EAAqC;AAC1C,gBAAItF,OAAO,CAACkB,MAAM,CAACkG,KAAD,EAAQ5H,IAAI,CAACuD,GAAL,CAASyC,cAAT,EAAR,CAAP,CAAX,EAAuD;AACrD,qBAAO,KAAM4B,KAAN,GAAe,KAAtB;AACD,aAFD,MAEO;AACL,qBAAO,KAAMA,KAAN,GAAe,KAAtB;AACD;AACF,WANM,MAMA;AACL,mBAAOA,KAAK,CAACxG,KAAN,EAAP;AACD;AACF,SAhBD,EAgBG4B,yBAAyB,CAAC3B,OAA1B,GAAoC,CAhBvC;AAkBA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,qBAAf,EAAsCiD,mCAAmC,GAAG,SAASkG,oBAAT,CAA8BxF,QAA9B,EAAwCiB,MAAxC,EAAgD;AAC1H,cAAI5E,IAAI,GAAG,IAAX;;AAGA,cAAIQ,OAAO,CAAC,QAAQ4I,MAAR,CAAexE,MAAf,CAAD,CAAX,EAAqC;AACnCjB,oBAAQ,GAAGlC,QAAQ,CAAC,EAAD,EAAKkC,QAAL,CAAnB;AAAkC;;AAAA;;AACpC,cAAInD,OAAO,CAACmB,MAAM,CAACgC,QAAD,EAAW,CAAX,CAAP,CAAX,EAAkC;AAChCA,oBAAQ,GAAG,CAAX;AAAa;;AAAA;AACf,iBAAOA,QAAP;AACD,SATD,EASGV,mCAAmC,CAAC5B,OAApC,GAA8C,CATjD;AAWA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,mBAAf,EAAoCkD,iCAAiC,GAAG,SAASmG,kBAAT,CAA4BzF,MAA5B,EAAoCgB,MAApC,EAA4C;AAClH,cAAI5E,IAAI,GAAG,IAAX;;AAGA,cAAIQ,OAAO,CAAC,QAAQ4I,MAAR,CAAexE,MAAf,CAAD,CAAX,EAAqC;AACnChB,kBAAM,GAAGnC,QAAQ,CAAC,CAAD,EAAImC,MAAJ,CAAjB;AAA6B;;AAAA;AAC/B,iBAAO5D,IAAI,CAAC+F,MAAL,CAAYnC,MAAZ,EAAoB,CAApB,EAAuB,EAAvB,CAAP;AACD,SAPD,EAOGV,iCAAiC,CAAC7B,OAAlC,GAA4C,CAP/C;AASA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,cAAf,EAA+BmD,4BAA4B,GAAG,SAASmG,aAAT,CAAuB1E,MAAvB,EAA+B;AAC3F,cAAI5E,IAAI,GAAG,IAAX;AAAA,cAAiBgF,MAAM,GAAG7E,GAA1B;AAAA,cAA+BoJ,SAAS,GAAGpJ,GAA3C;AAAA,cAAgDgF,SAAS,GAAGhF,GAA5D;AAAA,cAAiEuH,WAAW,GAAGvH,GAA/E;AAAA,cAAoFqJ,OAAO,GAAGrJ,GAA9F;AAAA,cAAmGiF,QAAQ,GAAGjF,GAA9G;AAGA6E,gBAAM,GAAG5E,GAAG,CAACC,EAAE,CAACH,QAAD,EAAW,SAAX,CAAH,EAA0B,QAA1B,CAAH,CAAuCoF,IAAvC,CAA4C,OAA5C,EAAqDrD,MAAM,CAAC,CAAC,YAAD,CAAD,EAAiB;AAAC,0BAAcjC,IAAI,CAACuF,WAAL;AAAf,WAAjB,CAA3D,EAAiHC,mBAAjH,CAAqIrF,GAArI,EAA0I4H,cAA1I,EAAT;AACA/H,cAAI,CAACuD,GAAL,GAAWyB,MAAM,CAACS,MAAP,CAAcb,MAAd,CAAX;;AACA,cAAIpE,OAAO,CAACR,IAAI,CAACuD,GAAN,CAAX,EAAuB,CACtB,CADD,MACO;AACL,mBAAOpD,GAAP;AACD;;AAAA;AACDH,cAAI,CAACyD,KAAL,GAAazD,IAAI,CAACuD,GAAL,CAASmC,QAAT,GAAoBsC,KAApB,EAAb;;AACAhI,cAAI,CAAC,OAAD,CAAJ,GAAiB,YAAW;AAAC,gBAAIQ,OAAO,CAAE+I,SAAS,GAAGvJ,IAAI,CAACuD,GAAL,CAAS8E,OAAT,EAAd,CAAX,EAA+C;AAC1E,qBAAOkB,SAAP;AACD,aAF4B,MAEtB;AACL,qBAAO,CAAP;AACD;;AAAA;AAAE,mBAAOpJ,GAAP;AAAa,WAJA,GAIImI,IAJJ,EAAhB;;AAKA,cAAItI,IAAI,CAACyD,KAAL,CAAW,KAAX,EAAkB,CAAlB,CAAJ,EAA0B;AACxB,mBAAOtD,GAAP;AAAW;;AAAA;AACbgF,mBAAS,GAAGnF,IAAI,CAAC0D,UAAL,CAAgBwC,cAAhB,CAA+BlG,IAAI,CAACyD,KAApC,EAA2C,CAA3C,EAA8C6C,KAA9C,EAAZ;AACAoB,qBAAW,GAAGvC,SAAS,CAACoD,IAAV,CAAevI,IAAI,CAAC,OAAD,CAAnB,CAAd;AACAwJ,iBAAO,GAAG/H,QAAQ,CAAC0D,SAAS,CAACsD,OAAV,CAAkB,CAAlB,EAAqB,GAArB,CAAD,EAA4BzI,IAAI,CAACuD,GAAL,CAAS8C,cAAT,EAA5B,CAAlB;;AACA,cAAI7F,OAAO,CAACmB,MAAM,CAAC6H,OAAD,EAAU,CAAV,CAAP,CAAX,EAAiC;AAC/BA,mBAAO,GAAG,CAAV;AAAY;;AAAA;AACdpE,kBAAQ,GAAG,CAACpF,IAAI,CAACyJ,YAAL,EAAD,EAAsBzJ,IAAI,CAAC0J,cAAL,CAAoBvE,SAApB,EAA+BuC,WAA/B,CAAtB,EAAmE8B,OAAnE,CAAX;AACA,iBAAOpE,QAAQ,CAACoB,KAAT,CAAe,KAAf,CAAP;AACD,SAzBD,EAyBGrD,4BAA4B,CAAC9B,OAA7B,GAAuC,CAzB1C;AA2BA1B,YAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,cAAf,EAA+BoD,4BAA4B,GAAG,SAASuG,aAAT,GAAyB;AACrF,cAAI3J,IAAI,GAAG,IAAX;AAAA,cAAiB6G,aAAa,GAAG1G,GAAjC;AAAA,cAAsC2I,IAAI,GAAG3I,GAA7C;AAGA0G,uBAAa,GAAGxG,EAAE,CAACH,QAAD,EAAW,QAAX,CAAF,CAAuB6G,SAAvB,CAAiC/G,IAAI,CAACuD,GAAL,CAAS8C,cAAT,EAAjC,CAAhB;;AACAyC,cAAI,GAAI,YAAW;AAAC,gBAAI9I,IAAI,CAAC,OAAD,CAAJ,CAAc,KAAd,EAAqB,CAArB,CAAJ,EAA6B;AAC/C,qBAAO,EAAP;AACD,aAFmB,MAEb;AACL,qBAAO,KAAK,IAAL,GAAaA,IAAI,CAAC,OAAD,CAAjB,GAA8B,GAArC;AACD;;AAAA;AAAE,mBAAOG,GAAP;AAAa,WAJT,EAAP;;AAKA,iBAAO,KAAK,GAAL,GAAYH,IAAI,CAACyD,KAAjB,GAA0B,IAA1B,GAAkCoD,aAAlC,GAAoDiC,IAApD,GAA4D,GAAnE;AACD,SAXD,EAWG1F,4BAA4B,CAAC/B,OAA7B,GAAuC,CAX1C;AAYA,eAAO,CAAC1B,IAAI,CAACqB,GAAL,CAAShB,IAAT,EAAe,gBAAf,EAAiCqD,8BAA8B,GAAG,SAASuG,eAAT,CAAyBzE,SAAzB,EAAoC6D,UAApC,EAAgD;AACxH,cAAIhJ,IAAI,GAAG,IAAX;AAAA,cAAiB2H,UAAU,GAAGxH,GAA9B;AAAA,cAAmC8I,kBAAkB,GAAG9I,GAAxD;AAGAwH,oBAAU,GAAGxC,SAAS,CAACsD,OAAV,CAAkB,CAAlB,EAAqB,GAArB,CAAb;AACAQ,4BAAkB,GAAG5I,EAAE,CAACH,QAAD,EAAW,QAAX,CAAF,CAAuB6G,SAAvB,CAAiC/G,IAAI,CAACuD,GAAL,CAAS8C,cAAT,EAAjC,CAArB;;AACA,cAAI7F,OAAO,CAACwI,UAAU,CAAC,SAAD,CAAV,EAAD,CAAX,EAAsC;AACpC,mBAAO,KAAMrB,UAAN,GAAoB,GAApB,GAA2BxC,SAAS,CAACqB,KAAV,CAAgB,IAAhB,CAA3B,GAAoD,GAApD,GAA2DyC,kBAAlE;AACD,WAFD,MAEO;AACL,mBAAO,KAAMtB,UAAN,GAAoB,GAApB,GAA2BxC,SAAS,CAACqB,KAAV,CAAgB,IAAhB,CAA3B,GAAoD,KAApD,GAA6DwC,UAAU,CAACxC,KAAX,CAAiB,IAAjB,CAA7D,GAAuF,GAAvF,GAA8FyC,kBAArG;AACD;;AAAA;AACF,SAXO,EAWL5F,8BAA8B,CAAChC,OAA/B,GAAyC,CAXpC,GAWwClB,GAXzC,KAWiD,eAXxD;AAYD,OAlRD,EAkRGD,QAAQ,CAAC,CAAD,CAlRX,EAkRgBG,EAAE,CAACH,QAAD,EAAW,MAAX,CAlRlB,EAkRsCA,QAlRtC;AAmRD,KAxRD,EAwRGA,QAAQ,CAAC,CAAD,CAxRX,EAwRgBA,QAxRhB;AAyRD,GA9RM,CA8RJA,QAAQ,CAAC,CAAD,CA9RJ,EA8RSA,QA9RT,CAAP;AA+RD,CAtTD,EAsTGP,IAtTH,E","file":"default~OracleEngine~index.js","sourcesContent":["require('./../opal');\n\n/* Generated by Opal 1.1.1 */\nOpal.modules[\"bcdice/format\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'BCDice');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Format');\n\n      var $nesting = [self].concat($parent_nesting), $Format_comparison_operator$1, $Format_modifier$2;\n\n      \n      self.$module_function();\n      \n      Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {\n        var self = this, $case = nil;\n\n        return (function() {$case = op;\n        if (\"==\"['$===']($case)) {return \"=\"}\n        else if (\"!=\"['$===']($case)) {return \"<>\"}\n        else if ($$($nesting, 'Symbol')['$===']($case)) {return op.$to_s()}\n        else { return nil }})()\n      }, $Format_comparison_operator$1.$$arity = 1);\n      \n      Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {\n        var self = this;\n\n        if ($truthy(number['$nil?']())) {\n          return nil\n        } else if (number['$=='](0)) {\n          return \"\"\n        } else if ($truthy($rb_gt(number, 0))) {\n          return \"\" + \"+\" + (number)\n        } else {\n          return number.$to_s()\n        }\n      }, $Format_modifier$2.$$arity = 1);\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 1.1.1 */\n(function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  \n  self.$require(\"bcdice/format\");\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'BCDice');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'GameSystem');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'OracleEngine');\n\n        var $nesting = [self].concat($parent_nesting), $OracleEngine_initialize$1, $OracleEngine_eval_game_system_specific_command$2, $OracleEngine_clutch_roll$3, $OracleEngine_expr_clutch$5, $OracleEngine_result_clutch$6, $OracleEngine_clamp$7, $OracleEngine_r_roll$8, $OracleEngine_expr_r$9, $OracleEngine_dice_result_r$10, $OracleEngine_result_r$11, $OracleEngine_normalize_critical$12, $OracleEngine_normalize_fumble$13, $OracleEngine_damage_roll$14, $OracleEngine_expr_damage$15, $OracleEngine_result_damage$16;\n\n        self.$$prototype.cmd = self.$$prototype.max_shift = self.$$prototype.times = self.$$prototype.randomizer = self.$$prototype[\"break\"] = self.$$prototype.critical = self.$$prototype.fumble = nil;\n        \n        Opal.const_set($nesting[0], 'ID', \"OracleEngine\");\n        Opal.const_set($nesting[0], 'NAME', \"オラクルエンジン\");\n        Opal.const_set($nesting[0], 'SORT_KEY', \"おらくるえんしん\");\n        Opal.const_set($nesting[0], 'HELP_MESSAGE', \"\" + \"  ・クラッチロール （xCL+y>=z)\\n\" + \"  ダイスをx個振り、1個以上目標シフトzに到達したか判定します。修正yは全てのダイスにかかります。\\n\" + \"  成功した時は目標シフトを、失敗した時はダイスの最大値-1シフトを返します\\n\" + \"  zが指定されないときは、ダイスをx個を振り、それに修正yしたものを返します。\\n\" + \"  通常、最低シフトは1、最大シフトは6です。目標シフトもそろえられます。\\n\" + \"  また、CLの後に7を入れ、(xCL7+y>=z)と入力すると最大シフトが7になります。\\n\" + \" ・判定 (xR6+y@c#f$b>=z)\\n\" + \"  ダイスをx個振り、大きいもの2つだけを見て達成値を算出し、成否を判定します。修正yは達成値にかかります。\\n\" + \"  ダイスブレイクとしてbを、クリティカル値としてcを、ファンブル値としてfを指定できます。\\n\" + \"  それぞれ指定されない時、0,12,2になります。\\n\" + \"  クリティカル値の上限はなし、下限は2。ファンブル値の上限は12、下限は0。\\n\" + \"  zが指定されないとき、達成値の算出のみ行います。\\n\" + \" ・ダメージロールのダイスブレイク (xD6+y$b)\\n\" + \"  ダイスをx個振り、合計値を出します。修正yは合計値にかかります。\\n\" + \"  ダイスブレイクとしてbを指定します。合計値は0未満になりません。\\n\");\n        self.$register_prefix(\"\\\\d+CL\", \"\\\\d+R6\", \"\\\\d+D6.*\\\\$[\\\\+\\\\-]?\\\\d+\");\n        \n        Opal.def(self, '$initialize', $OracleEngine_initialize$1 = function $$initialize(command) {\n          var $iter = $OracleEngine_initialize$1.$$p, $yield = $iter || nil, self = this;\n\n          if ($iter) $OracleEngine_initialize$1.$$p = null;\n          \n          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $OracleEngine_initialize$1, false, true), 'initialize', [command], null);\n          self.sort_add_dice = true;\n          return (self.sort_barabara_dice = true);\n        }, $OracleEngine_initialize$1.$$arity = 1);\n        \n        Opal.def(self, '$eval_game_system_specific_command', $OracleEngine_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {\n          var self = this, $case = nil;\n\n          return (function() {$case = command;\n          if (/\\d+CL.*/i['$===']($case)) {return self.$clutch_roll(command)}\n          else if (/\\d+D6.*\\$[+\\-]?\\d.*/['$===']($case)) {return self.$damage_roll(command)}\n          else if (/\\d+R6/['$===']($case)) {return self.$r_roll(command)}\n          else { return nil }})()\n        }, $OracleEngine_eval_game_system_specific_command$2.$$arity = 1);\n        \n        Opal.def(self, '$clutch_roll', $OracleEngine_clutch_roll$3 = function $$clutch_roll(string) {\n          var $a, $b, $$4, self = this, parser = nil, $ret_or_1 = nil, $writer = nil, dice_list = nil, sequence = nil;\n\n          \n          self.$debug(\"clutch_roll begin\", string);\n          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\\d+CL[67]?/, $hash2([\"round_type\"], {\"round_type\": self.$round_type()})).$restrict_cmp_op_to(nil, \">=\");\n          self.cmd = parser.$parse(string);\n          if ($truthy(self.cmd)) {\n          } else {\n            return nil\n          };\n          $b = $send(self.cmd.$command().$split(\"CL\"), 'map', [], \"to_i\".$to_proc()), $a = Opal.to_ary($b), (self.times = ($a[0] == null ? nil : $a[0])), (self.max_shift = ($a[1] == null ? nil : $a[1])), $b;\n          self.max_shift = (function() {if ($truthy(($ret_or_1 = self.max_shift))) {\n            return $ret_or_1\n          } else {\n            return 6\n          }; return nil; })();\n          if ($truthy(self.cmd.$cmp_op())) {\n            \n            $writer = [self.$clamp(self.cmd.$target_number(), 1, self.max_shift)];\n            $send(self.cmd, 'target_number=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if (self.times['$=='](0)) {\n            return nil};\n          dice_list = $send(self.randomizer.$roll_barabara(self.times, 6), 'map', [], ($$4 = function(x){var self = $$4.$$s == null ? this : $$4.$$s;\n            if (self.cmd == null) self.cmd = nil;\n            if (self.max_shift == null) self.max_shift = nil;\n\n          \n            \n            if (x == null) {\n              x = nil;\n            };\n            return self.$clamp($rb_plus(x, self.cmd.$modify_number()), 1, self.max_shift);}, $$4.$$s = self, $$4.$$arity = 1, $$4)).$sort();\n          sequence = [self.$expr_clutch(), \"\" + \"[\" + (dice_list.$join(\", \")) + \"]\", self.$result_clutch(dice_list.$last())];\n          return sequence.$join(\" ＞ \");\n        }, $OracleEngine_clutch_roll$3.$$arity = 1);\n        \n        Opal.def(self, '$expr_clutch', $OracleEngine_expr_clutch$5 = function $$expr_clutch() {\n          var self = this, max_shift = nil, cmp_op = nil, modify_number = nil;\n\n          \n          max_shift = (function() {if (self.max_shift['$=='](7)) {\n            return 7\n          } else {\n            return nil\n          }; return nil; })();\n          cmp_op = $$($nesting, 'Format').$comparison_operator(self.cmd.$cmp_op());\n          modify_number = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());\n          return \"\" + \"(\" + (self.times) + \"CL\" + (max_shift) + (modify_number) + (cmp_op) + (self.cmd.$target_number()) + \")\";\n        }, $OracleEngine_expr_clutch$5.$$arity = 0);\n        \n        Opal.def(self, '$result_clutch', $OracleEngine_result_clutch$6 = function $$result_clutch(after_shift) {\n          var self = this;\n\n          if ($truthy(self.cmd.$cmp_op()['$!='](\">=\"))) {\n            return \"\" + \"シフト\" + (after_shift)\n          } else if ($truthy($rb_ge(after_shift, self.cmd.$target_number()))) {\n            return \"\" + \"成功 シフト\" + (self.cmd.$target_number())\n          } else {\n            \n            after_shift = $rb_minus(after_shift, 1);\n            if ($truthy($rb_lt(after_shift, 1))) {\n              after_shift = 1};\n            return \"\" + \"失敗 シフト\" + (after_shift);\n          }\n        }, $OracleEngine_result_clutch$6.$$arity = 1);\n        \n        Opal.def(self, '$clamp', $OracleEngine_clamp$7 = function $$clamp(i, min, max) {\n          var self = this;\n\n          if ($truthy($rb_lt(i, min))) {\n            return min\n          } else if ($truthy($rb_gt(i, max))) {\n            return max\n          } else {\n            return i\n          }\n        }, $OracleEngine_clamp$7.$$arity = 3);\n        \n        Opal.def(self, '$r_roll', $OracleEngine_r_roll$8 = function $$r_roll(string) {\n          var self = this, parser = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, dice_list = nil, dice_broken = nil, dice_total = nil, total = nil, sequence = nil;\n\n          \n          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\\d+R6/, $hash2([\"round_type\"], {\"round_type\": self.$round_type()})).$restrict_cmp_op_to(nil, \">=\").$enable_critical().$enable_fumble().$enable_dollar();\n          self.cmd = parser.$parse(string);\n          if ($truthy(self.cmd)) {\n          } else {\n            return nil\n          };\n          self.times = self.cmd.$command().$to_i();\n          if (self.times['$=='](0)) {\n            return nil};\n          self.critical = self.$normalize_critical((function() {if ($truthy(($ret_or_2 = self.cmd.$critical()))) {\n            return $ret_or_2\n          } else {\n            return 12\n          }; return nil; })(), string);\n          self.fumble = self.$normalize_fumble((function() {if ($truthy(($ret_or_3 = self.cmd.$fumble()))) {\n            return $ret_or_3\n          } else {\n            return 2\n          }; return nil; })(), string);\n          self[\"break\"] = (function() {if ($truthy(($ret_or_4 = self.cmd.$dollar()))) {\n            return $ret_or_4\n          } else {\n            return 0\n          }; return nil; })().$abs();\n          dice_list = self.randomizer.$roll_barabara(self.times, 6).$sort();\n          dice_broken = dice_list.$pop(self[\"break\"]);\n          dice_total = dice_list.$dup().$pop(2).$inject(0, \"+\");\n          total = $rb_plus(dice_total, self.cmd.$modify_number());\n          sequence = [self.$expr_r(), self.$dice_result_r(dice_total, dice_list, dice_broken), self.$result_r(dice_total, total)];\n          return sequence.$join(\" ＞ \");\n        }, $OracleEngine_r_roll$8.$$arity = 1);\n        \n        Opal.def(self, '$expr_r', $OracleEngine_expr_r$9 = function $$expr_r() {\n          var self = this, modify_number = nil, critical = nil, fumble = nil, brak = nil, cmp_op = nil;\n\n          \n          modify_number = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());\n          critical = (function() {if (self.critical['$=='](12)) {\n            return \"\"\n          } else {\n            return \"\" + \"c[\" + (self.critical) + \"]\"\n          }; return nil; })();\n          fumble = (function() {if (self.fumble['$=='](2)) {\n            return \"\"\n          } else {\n            return \"\" + \"f[\" + (self.fumble) + \"]\"\n          }; return nil; })();\n          brak = (function() {if (self[\"break\"]['$=='](0)) {\n            return \"\"\n          } else {\n            return \"\" + \"b[\" + (self[\"break\"]) + \"]\"\n          }; return nil; })();\n          cmp_op = $$($nesting, 'Format').$comparison_operator(self.cmd.$cmp_op());\n          return \"\" + \"(\" + (self.times) + \"R6\" + (modify_number) + (critical) + (fumble) + (brak) + (cmp_op) + (self.cmd.$target_number()) + \")\";\n        }, $OracleEngine_expr_r$9.$$arity = 0);\n        \n        Opal.def(self, '$dice_result_r', $OracleEngine_dice_result_r$10 = function $$dice_result_r(dice_total, dice_list, break_list) {\n          var self = this, modify_number_text = nil;\n\n          \n          modify_number_text = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());\n          if ($truthy(break_list['$empty?']())) {\n            return \"\" + (dice_total) + \"[\" + (dice_list.$join(\", \")) + \"]\" + (modify_number_text)\n          } else {\n            return \"\" + (dice_total) + \"[\" + (dice_list.$join(\", \")) + \"]×[\" + (break_list.$join(\", \")) + \"]\" + (modify_number_text)\n          };\n        }, $OracleEngine_dice_result_r$10.$$arity = 3);\n        \n        Opal.def(self, '$result_r', $OracleEngine_result_r$11 = function $$result_r(dice_total, total) {\n          var self = this;\n\n          if ($truthy($rb_le(dice_total, self.fumble))) {\n            return \"ファンブル!\"\n          } else if ($truthy($rb_ge(dice_total, self.critical))) {\n            return \"クリティカル!\"\n          } else if (self.cmd.$cmp_op()['$=='](\">=\")) {\n            if ($truthy($rb_ge(total, self.cmd.$target_number()))) {\n              return \"\" + (total) + \" 成功\"\n            } else {\n              return \"\" + (total) + \" 失敗\"\n            }\n          } else {\n            return total.$to_s()\n          }\n        }, $OracleEngine_result_r$11.$$arity = 2);\n        \n        Opal.def(self, '$normalize_critical', $OracleEngine_normalize_critical$12 = function $$normalize_critical(critical, string) {\n          var self = this;\n\n          \n          if ($truthy(/@[+-]/.$match(string))) {\n            critical = $rb_plus(12, critical)};\n          if ($truthy($rb_lt(critical, 2))) {\n            critical = 2};\n          return critical;\n        }, $OracleEngine_normalize_critical$12.$$arity = 2);\n        \n        Opal.def(self, '$normalize_fumble', $OracleEngine_normalize_fumble$13 = function $$normalize_fumble(fumble, string) {\n          var self = this;\n\n          \n          if ($truthy(/#[+-]/.$match(string))) {\n            fumble = $rb_plus(2, fumble)};\n          return self.$clamp(fumble, 0, 12);\n        }, $OracleEngine_normalize_fumble$13.$$arity = 2);\n        \n        Opal.def(self, '$damage_roll', $OracleEngine_damage_roll$14 = function $$damage_roll(string) {\n          var self = this, parser = nil, $ret_or_5 = nil, dice_list = nil, dice_broken = nil, total_n = nil, sequence = nil;\n\n          \n          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\\d+D6/, $hash2([\"round_type\"], {\"round_type\": self.$round_type()})).$restrict_cmp_op_to(nil).$enable_dollar();\n          self.cmd = parser.$parse(string);\n          if ($truthy(self.cmd)) {\n          } else {\n            return nil\n          };\n          self.times = self.cmd.$command().$to_i();\n          self[\"break\"] = (function() {if ($truthy(($ret_or_5 = self.cmd.$dollar()))) {\n            return $ret_or_5\n          } else {\n            return 0\n          }; return nil; })().$abs();\n          if (self.times['$=='](0)) {\n            return nil};\n          dice_list = self.randomizer.$roll_barabara(self.times, 6).$sort();\n          dice_broken = dice_list.$pop(self[\"break\"]);\n          total_n = $rb_plus(dice_list.$inject(0, \"+\"), self.cmd.$modify_number());\n          if ($truthy($rb_lt(total_n, 0))) {\n            total_n = 0};\n          sequence = [self.$expr_damage(), self.$result_damage(dice_list, dice_broken), total_n];\n          return sequence.$join(\" ＞ \");\n        }, $OracleEngine_damage_roll$14.$$arity = 1);\n        \n        Opal.def(self, '$expr_damage', $OracleEngine_expr_damage$15 = function $$expr_damage() {\n          var self = this, modify_number = nil, brak = nil;\n\n          \n          modify_number = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());\n          brak = (function() {if (self[\"break\"]['$=='](0)) {\n            return \"\"\n          } else {\n            return \"\" + \"b[\" + (self[\"break\"]) + \"]\"\n          }; return nil; })();\n          return \"\" + \"(\" + (self.times) + \"D6\" + (modify_number) + (brak) + \")\";\n        }, $OracleEngine_expr_damage$15.$$arity = 0);\n        return (Opal.def(self, '$result_damage', $OracleEngine_result_damage$16 = function $$result_damage(dice_list, break_list) {\n          var self = this, dice_total = nil, modify_number_text = nil;\n\n          \n          dice_total = dice_list.$inject(0, \"+\");\n          modify_number_text = $$($nesting, 'Format').$modifier(self.cmd.$modify_number());\n          if ($truthy(break_list['$empty?']())) {\n            return \"\" + (dice_total) + \"[\" + (dice_list.$join(\", \")) + \"]\" + (modify_number_text)\n          } else {\n            return \"\" + (dice_total) + \"[\" + (dice_list.$join(\", \")) + \"]×[\" + (break_list.$join(\", \")) + \"]\" + (modify_number_text)\n          };\n        }, $OracleEngine_result_damage$16.$$arity = 2), nil) && 'result_damage';\n      })($nesting[0], $$($nesting, 'Base'), $nesting)\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting);\n})(Opal);\n"],"sourceRoot":"webpack:///"}