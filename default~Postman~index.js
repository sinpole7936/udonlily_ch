(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~Postman~index"],{

/***/ "Pw2m":
/*!***************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Postman.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Postman');
        var $nesting = [self].concat($parent_nesting),
            $Postman_initialize$1,
            $Postman_eval_game_system_specific_command$2,
            $Postman_checkRoll$5,
            $Postman_get_weather_table$6,
            $Postman_get_free_situation_table$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Postman");
        Opal.const_set($nesting[0], 'NAME', "壊れた世界のポストマン");
        Opal.const_set($nesting[0], 'SORT_KEY', "こわれたせかいのほすとまん");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "◆判定：[n]PO[+-a][> or >= or @X]　　[]内省略可。\n" + "\n" + "達成値と判定の成否、クリティカル、ファンブルを結果表示します。\n" + "「n」でダイス数を指定。省略時は2D。\n" + "「+-a」で達成値への修正を指定。「+2+1-4」のような複数回指定可。\n" + "「>X」「>=X」「@X」で難易度を指定可。\n" + "「>X」は達成値>難易度、「>=X」「@X」は達成値>=難易度で判定します。\n" + "\n" + "【書式例】\n" + "3PO+2-1 → 3Dで達成値修正+1の判定。達成値のみ表示。\n" + "PO@5+2 → 2Dで目標値7の判定。判定の成否と達成値を表示。\n" + "4PO-2+1>7+2 → 4Dで達成値修正-1、目標値9（同値は失敗）の判定。\n" + "\n" + "\n" + "◆天候チェック：WEA[n]　　[]内省略可。\n" + "\n" + "天候チェック表を参照します。\n" + "「n」を指定すると、指定した結果を表示します。（【幸運点】使用時用）\n" + "\n" + "\n" + "◆自由行動シチュエーション表：FRE\n");
        self.$register_prefix("WEA", "(\\d+)?PO", "FRE");
        Opal.def(self, '$initialize', $Postman_initialize$1 = function $$initialize(command) {
          var $iter = $Postman_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Postman_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Postman_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $Postman_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Postman_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var _$$,
              _$$2,
              self = this,
              text = nil,
              $case = nil,
              diceCount = nil,
              $ret_or_1 = nil,
              modify = nil,
              $ret_or_2 = nil,
              modifyAddString = nil,
              $ret_or_3 = nil,
              type = nil,
              $ret_or_4 = nil,
              target = nil,
              $ret_or_5 = nil,
              targetAddString = nil,
              $ret_or_6 = nil,
              modify_list = nil,
              target_list = nil,
              roc = nil,
              $ret_or_7 = nil;

          text = function () {
            $case = command.$upcase();

            if (/(\d+)?PO(\d+)?(([+-]\d+)*)?((>|>=|@)(\d+)(([+-]\d+)*)?)?/i['$===']($case)) {
              diceCount = function () {
                if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(1))) {
                  return $ret_or_1;
                } else {
                  return 2;
                }

                ;
                return nil;
              }().$to_i();

              if ($truthy($rb_lt(diceCount, 2))) {
                diceCount = 2;
              }

              ;

              modify = function () {
                if ($truthy($ret_or_2 = $$($nesting, 'Regexp').$last_match(2))) {
                  return $ret_or_2;
                } else {
                  return 0;
                }

                ;
                return nil;
              }().$to_i();

              modifyAddString = function () {
                if ($truthy($ret_or_3 = $$($nesting, 'Regexp').$last_match(3))) {
                  return $ret_or_3;
                } else {
                  return "";
                }

                ;
                return nil;
              }();

              type = function () {
                if ($truthy($ret_or_4 = $$($nesting, 'Regexp').$last_match(6))) {
                  return $ret_or_4;
                } else {
                  return "";
                }

                ;
                return nil;
              }();

              target = function () {
                if ($truthy($ret_or_5 = $$($nesting, 'Regexp').$last_match(7))) {
                  return $ret_or_5;
                } else {
                  return 0;
                }

                ;
                return nil;
              }().$to_i();

              targetAddString = function () {
                if ($truthy($ret_or_6 = $$($nesting, 'Regexp').$last_match(8))) {
                  return $ret_or_6;
                } else {
                  return "";
                }

                ;
                return nil;
              }();

              modify_list = modifyAddString.$scan(/[+-]\d+/);
              $send(modify_list, 'each', [], (_$$ = function $$3(i) {
                var self = _$$.$$s == null ? this : _$$.$$s;

                if (i == null) {
                  i = nil;
                }

                ;
                return modify = $rb_plus(modify, i.$to_i());
              }, _$$.$$s = self, _$$.$$arity = 1, _$$));

              if ($truthy(target['$!='](0))) {
                target_list = targetAddString.$scan(/[+-]\d+/);
                $send(target_list, 'each', [], (_$$2 = function $$4(j) {
                  var self = _$$2.$$s == null ? this : _$$2.$$s;

                  if (j == null) {
                    j = nil;
                  }

                  ;
                  return target = $rb_plus(target, j.$to_i());
                }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
              }

              ;
              return self.$checkRoll(diceCount, modify, type, target);
            } else if (/WEA(\d+)?/i['$===']($case)) {
              roc = function () {
                if ($truthy($ret_or_7 = $$($nesting, 'Regexp').$last_match(1))) {
                  return $ret_or_7;
                } else {
                  return 0;
                }

                ;
                return nil;
              }().$to_i();

              return self.$get_weather_table(roc);
            } else if ("FRE"['$===']($case)) {
              return self.$get_free_situation_table();
            } else {
              return nil;
            }
          }();

          return text;
        }, $Postman_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$checkRoll', $Postman_checkRoll$5 = function $$checkRoll(diceCount, modify, type, target) {
          var self = this,
              diceArray = nil,
              dice = nil,
              diceText = nil,
              dice2 = nil,
              diceText2 = nil,
              criticalCount = nil,
              modifyText = nil,
              result = nil,
              resultText = nil,
              operatorText = nil,
              text = nil;
          diceArray = self.randomizer.$roll_barabara(diceCount, 6).$sort();
          dice = diceArray.$sum();
          diceText = diceArray.$join(",");
          dice2 = $rb_plus(diceArray['$[]'](-2), diceArray['$[]'](-1));
          diceText2 = "" + diceArray['$[]'](-2) + "," + diceArray['$[]'](-1);
          criticalCount = diceArray.$count(6);

          if ($truthy(modify['$!='](0))) {
            modifyText = "";

            if ($truthy($rb_gt(modify, 0))) {
              modifyText = "+";
            }

            ;
            modifyText = $rb_plus(modifyText, modify.$to_s());
          }

          ;
          result = $rb_plus(dice2, modify);

          if ($truthy(type['$!='](""))) {
            resultText = " 【失敗】";
            operatorText = ">";

            if (type['$=='](">")) {
              if ($truthy($rb_gt(result, target))) {
                resultText = " 【成功】";
              }
            } else {
              operatorText = $rb_plus(operatorText, "=");

              if ($truthy($rb_ge(result, target))) {
                resultText = " 【成功】";
              }

              ;
            }

            ;
          }

          ;

          if ($truthy($rb_ge(criticalCount, 2))) {
            resultText = " 【成功】（クリティカル）";
          } else if (dice['$=='](diceCount)) {
            resultText = " 【失敗】（ファンブル）";
          }

          ;
          text = "" + diceCount + "D6(" + diceText + ")" + modifyText + " ＞ " + dice2 + "(" + diceText2 + ")" + modifyText + " = 達成値：" + result;

          if ($truthy($rb_gt(target, 0))) {
            text = $rb_plus(text, "" + operatorText + target + " ");
          }

          ;
          text = $rb_plus(text, resultText.$to_s());
          return text;
        }, $Postman_checkRoll$5.$$arity = 4);
        Opal.def(self, '$get_weather_table', $Postman_get_weather_table$6 = function $$get_weather_table(roc) {
          var self = this,
              name = nil,
              table = nil,
              dice_list = nil,
              dice = nil,
              diceText = nil,
              tableText = nil,
              text = nil;
          name = "天候チェック";
          table = [[2, "大雨と強風。探索判定の難易度に+4。"], [3, "風が強い1日になりそう。探索判定の難易度に+2。"], [4, "晴れ。特になし。"], [5, "夜の間の雨でぬかるむ。探索判定の難易度に+2。"], [6, "それなりの雨足。探索判定の難易度に+2。"], [7, "晴れ。特になし。"], [8, "天気は大荒れ。探索判定の難易度に+4。"], [9, "小雨が降る。探索判定の難易度に+1。"], [10, "それなりの雨足。探索判定の難易度に+2。"], [11, "晴れ。特になし。"], [12, "風が強い1日になりそう。探索判定の難易度に+2。"]];

          if (roc['$=='](0)) {
            dice_list = self.randomizer.$roll_barabara(2, 6);
            dice = dice_list.$sum();
            diceText = dice_list.$join(",");
          } else {
            if ($truthy($rb_lt(roc, 2))) {
              roc = 2;
            }

            ;

            if ($truthy($rb_gt(roc, 12))) {
              roc = 12;
            }

            ;
            dice = roc;
            diceText = "" + "Choice:" + roc;
          }

          ;
          tableText = self.$get_table_by_number(dice, table);
          text = "" + name + "(" + diceText + ") ＞ " + dice + "：" + tableText;
          return text;
        }, $Postman_get_weather_table$6.$$arity = 1);
        return (Opal.def(self, '$get_free_situation_table', $Postman_get_free_situation_table$7 = function $$get_free_situation_table() {
          var self = this,
              name = nil,
              table = nil,
              dice_list = nil,
              dice = nil,
              diceText = nil,
              tableText = nil,
              text = nil;
          name = "自由行動シチュエーション表";
          table = [[2, "何をするでもなく、霞がかったような夜空を見上げる。ふと隣に目を向ければ、彼/彼女が居た。彼/彼女は、こうなる前の夜空を知っているのだろうか。"], [3, "夢を見た。大戦の最中、街が、人が、世界が焼けていく悪夢を。追い立てられるようにして目を覚ますと、彼/彼女が君を見ていた。　……もしかして、自分はよほどうなされていたのだろうか。"], [4, "周囲で見つけたガラクタを使って、ちょっとしたビックリ玩具を作ってみた。「彼/ 彼女」にコイツをけしかけたら、どんな反応をするだろうか？"], [5, "使えそうなものがないか探していると、カタンと物音がして何かが落ちた。拾い上げてみたそれは、かつてここで生活していた誰かの名残（写真、家具、玩具等）だった。"], [6, "テントの中で夜を過ごしていると、ふと彼/彼女と話したくてたまらない気持ちになった。言ってしまえば、夜の静けさに寂しさを覚えてしまったのだ。"], [7, "ここまでの配達の記録をつけていたら、背後から視線を感じる……！　もしや、彼/彼女に覗かれている……！？"], [8, "周囲を探索していると、君一人では手の届かないところに金属製の箱か何かがあることに気づいた。彼/彼女に手伝ってもらえば、取れるだろうか……？"], [9, "朝まではまだしばらくあるというのに、目が覚めてしまった。二度寝しようにも寝付けずに居ると、隣でもぞもぞと動く気配がする。彼/彼女も、どうやら同じらしい。"], [10, "他愛のない話をするうちに、君は彼/彼女に問いかけていた。「何故、ポストマンになろうと思ったのか」　……そういえば、君自身はどうだったろうか。"], [11, "保存食にありつこうとしたその時、君は気づいた。一匹のネズミが、彼/彼女の荷物の中に潜り込もうとしている。彼/彼女は気づいていないが、このままでは食料が危ない！"], [12, "テントを設営し、落ち着いた頃にふと気づく。　……身体が熱い。少し、だるさもあるような気もする。大したことはないと思うが、彼/彼女に相談しておいた方がいいだろうか。"]];
          dice_list = self.randomizer.$roll_barabara(2, 6);
          dice = dice_list.$sum();
          diceText = dice_list.$join(",");
          tableText = self.$get_table_by_number(dice, table);
          text = "" + name + "(" + diceText + ") ＞ " + dice + "：" + tableText;
          return text;
        }, $Postman_get_free_situation_table$7.$$arity = 0), nil) && 'get_free_situation_table';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~Postman~index.js.map