(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~Raisondetre~index"],{

/***/ "6/cF":
/*!*******************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Raisondetre.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Raisondetre');
        var $nesting = [self].concat($parent_nesting),
            $Raisondetre_initialize$1,
            $Raisondetre_eval_game_system_specific_command$2,
            $Raisondetre_checkRoll$3,
            $Raisondetre_checkDamage$7;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Raisondetre");
        Opal.const_set($nesting[0], 'NAME', "叛逆レゾンデートル");
        Opal.const_set($nesting[0], 'SORT_KEY', "はんきやくれそんてとおる");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "判定：[判定値]RD[技能][@目標値]\n" + "ダメージロール：[ダイス数]DD[装甲]\n" + "\n" + "[]内のコマンドは省略可能。\n" + "「判定値」で判定に使用するダイス数を指定。省略時は「1」。0以下も指定可。\n" + "「技能」で有効なダイス数を指定。省略時は「1」。\n" + "達成値はクリティカルを含めて、「最も高くなる」ように計算します。\n" + "「@目標値」指定で、判定の成否を追加表示します。\n" + "\n" + "ダメージロールは[装甲]指定で、有効なダイス数と0の出目の数を表示します。\n" + "[装甲]省略時は、ダイス結果のみ表示します。（複数の対象への攻撃時用）\n" + "\n" + "【書式例】\n" + "・RD → 1Dで達成値を表示。\n" + "・2RD1@8 → 2D（1個選択）で目標値8の判定。\n" + "・-3RD → 1Dでダイスペナルティ-4の判定。\n" + "・4DD2 → 4Dで装甲2のダメージロール。\n");
        Opal.def(self, '$initialize', $Raisondetre_initialize$1 = function $$initialize(command) {
          var $iter = $Raisondetre_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Raisondetre_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Raisondetre_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $Raisondetre_initialize$1.$$arity = 1);
        self.$register_prefix("(-)?(\\d+)?RD", "(-)?(\\d+)?DD");
        Opal.def(self, '$eval_game_system_specific_command', $Raisondetre_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              diceCount = nil,
              $ret_or_1 = nil,
              choiceCount = nil,
              $ret_or_2 = nil,
              target = nil,
              $ret_or_3 = nil,
              $ret_or_4 = nil,
              armor = nil,
              $ret_or_5 = nil,
              $ret_or_6 = nil;

          if ($truthy(command['$=~'](/(-)?(\d+)?RD(\d+)?(@(\d+))?$/i))) {
            diceCount = function () {
              if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(2))) {
                return $ret_or_1;
              } else {
                return 1;
              }

              ;
              return nil;
            }().$to_i();

            if ($truthy($$($nesting, 'Regexp').$last_match(1)['$nil?']())) {} else {
              diceCount = $rb_times(diceCount, -1);
            }

            ;

            choiceCount = function () {
              if ($truthy($ret_or_2 = $$($nesting, 'Regexp').$last_match(3))) {
                return $ret_or_2;
              } else {
                return 1;
              }

              ;
              return nil;
            }().$to_i();

            target = function () {
              if ($truthy($ret_or_3 = $$($nesting, 'Regexp').$last_match(5))) {
                return $ret_or_3;
              } else {
                return 0;
              }

              ;
              return nil;
            }().$to_i();

            return self.$checkRoll(diceCount, choiceCount, target);
          } else if ($truthy(command['$=~'](/(-)?(\d+)?DD([1-9])?([+\-]\d+)?$/i))) {
            diceCount = function () {
              if ($truthy($ret_or_4 = $$($nesting, 'Regexp').$last_match(2))) {
                return $ret_or_4;
              } else {
                return 1;
              }

              ;
              return nil;
            }().$to_i();

            if ($truthy($$($nesting, 'Regexp').$last_match(1)['$nil?']())) {} else {
              diceCount = $rb_times(diceCount, -1);
            }

            ;

            armor = function () {
              if ($truthy($ret_or_5 = $$($nesting, 'Regexp').$last_match(3))) {
                return $ret_or_5;
              } else {
                return 0;
              }

              ;
              return nil;
            }().$to_i();

            if ($truthy($rb_gt(armor, 0))) {
              armor = $rb_plus(armor, function () {
                if ($truthy($ret_or_6 = $$($nesting, 'Regexp').$last_match(4))) {
                  return $ret_or_6;
                } else {
                  return 0;
                }

                ;
                return nil;
              }().$to_i());

              if ($truthy($rb_lt(armor, 1))) {
                armor = 1;
              }

              ;

              if ($truthy($rb_gt(armor, 9))) {
                armor = 9;
              }

              ;
            }

            ;
            return self.$checkDamage(diceCount, armor);
          }

          ;
          return nil;
        }, $Raisondetre_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$checkRoll', $Raisondetre_checkRoll$3 = function $$checkRoll(diceCount, choiceCount, target) {
          var _$$,
              _$$2,
              _$$3,
              self = this,
              correction = nil,
              rollCount = nil,
              diceArray = nil,
              diceText = nil,
              diceText2 = nil,
              funbleArray = nil,
              isFunble = nil,
              dice = nil,
              success = nil,
              criticalCount = nil,
              critical = nil,
              choiceArray = nil,
              choiceText = nil,
              result = nil;

          if ($truthy($rb_le(diceCount, 0))) {
            correction = $rb_plus(1, $rb_times(diceCount, -1));
            rollCount = 1;
          } else {
            correction = 0;
            rollCount = diceCount;
          }

          ;
          diceArray = self.randomizer.$roll_barabara(rollCount, 10).$sort();
          diceText = diceArray.$join(",");
          $send(diceArray, 'map!', [], (_$$ = function $$4(x) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (x == null) {
              x = nil;
            }

            ;

            if (x['$=='](10)) {
              return 0;
            } else {
              return x;
            }

            ;
          }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          $send(diceArray, 'map!', [], (_$$2 = function $$5(i) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return $rb_minus(i, correction);
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          diceText2 = diceArray.$sort().$join(",");
          funbleArray = $send(diceArray, 'select', [], (_$$3 = function $$6(i) {
            var self = _$$3.$$s == null ? this : _$$3.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return $rb_le(i, 1);
          }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3));
          isFunble = $rb_ge(funbleArray.$size(), rollCount);
          dice = 0;
          success = 0;

          if ($truthy(isFunble)) {} else {
            criticalCount = diceArray.$count(0);
            critical = $rb_times(criticalCount, 10);
            choiceArray = diceArray.$reverse();
            choiceArray.$delete(0);
            choiceArray = choiceArray.$slice(Opal.Range.$new(0, $rb_minus(choiceCount, 1), false));
            choiceText = choiceArray.$join(",");
            dice = choiceArray.$inject("+");
            success = $rb_plus(dice, critical);
          }

          ;
          result = "" + rollCount + "D10";

          if ($truthy($rb_gt(correction, 0))) {
            result = $rb_plus(result, "" + "-" + correction);
          }

          ;
          result = $rb_plus(result, "" + " ＞ [" + diceText + "] ＞ [" + diceText2 + "] ＞ ");

          if ($truthy(isFunble)) {
            result = $rb_plus(result, "達成値：0 (Funble)");
          } else {
            result = $rb_plus(result, "" + dice + "[" + choiceText + "]");

            if ($truthy($rb_gt(critical, 0))) {
              result = $rb_plus(result, "" + "+" + critical);
            }

            ;
            result = $rb_plus(result, "" + "=達成値：" + success);

            if ($truthy($rb_gt(critical, 0))) {
              result = $rb_plus(result, "" + " (" + criticalCount + "Critical)");
            }

            ;
          }

          ;

          if ($truthy($rb_gt(target, 0))) {
            result = $rb_plus(result, "" + ">=" + target + " ");

            if ($truthy($rb_ge(success, target))) {
              result = $rb_plus(result, "【成功】");
            }

            ;

            if ($truthy($rb_lt(success, target))) {
              result = $rb_plus(result, "【失敗】");
            }

            ;
          }

          ;
          return result;
        }, $Raisondetre_checkRoll$3.$$arity = 3);
        return (Opal.def(self, '$checkDamage', $Raisondetre_checkDamage$7 = function $$checkDamage(diceCount, armor) {
          var _$$4,
              _$$5,
              _$$6,
              self = this,
              correction = nil,
              rollCount = nil,
              dice_list = nil,
              diceText = nil,
              diceArray = nil,
              criticalCount = nil,
              diceText2 = nil,
              result = nil,
              resultArray = nil,
              success = nil,
              resultText = nil;

          if ($truthy($rb_le(diceCount, 0))) {
            correction = $rb_plus(1, $rb_times(diceCount, -1));
            rollCount = 1;
          } else {
            correction = 0;
            rollCount = diceCount;
          }

          ;
          dice_list = self.randomizer.$roll_barabara(rollCount, 10).$sort();
          diceText = dice_list.$join(",");
          diceArray = $send(dice_list, 'map', [], (_$$4 = function $$8(x) {
            var self = _$$4.$$s == null ? this : _$$4.$$s;

            if (x == null) {
              x = nil;
            }

            ;

            if (x['$=='](10)) {
              return 0;
            } else {
              return x;
            }

            ;
          }, _$$4.$$s = self, _$$4.$$arity = 1, _$$4)).$sort();
          criticalCount = diceArray.$count(0);
          $send(diceArray, 'map!', [], (_$$5 = function $$9(i) {
            var self = _$$5.$$s == null ? this : _$$5.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return $rb_minus(i, correction);
          }, _$$5.$$s = self, _$$5.$$arity = 1, _$$5));
          diceText2 = diceArray.$join(",");
          result = "" + rollCount + "D10";

          if ($truthy($rb_gt(correction, 0))) {
            result = $rb_plus(result, "" + "-" + correction);
          }

          ;
          result = $rb_plus(result, "" + " ＞ [" + diceText + "] ＞ [" + diceText2 + "]");

          if ($truthy($rb_gt(armor, 0))) {
            resultArray = [];
            success = 0;
            $send(diceArray, 'each', [], (_$$6 = function $$10(i) {
              var self = _$$6.$$s == null ? this : _$$6.$$s;

              if (i == null) {
                i = nil;
              }

              ;

              if ($truthy($rb_ge(i, armor))) {
                resultArray.$push(i);
                return success = $rb_plus(success, 1);
              } else {
                return resultArray.$push("×");
              }

              ;
            }, _$$6.$$s = self, _$$6.$$arity = 1, _$$6));
            resultText = resultArray.$join(",");
            result = $rb_plus(result, "" + " ＞ [" + resultText + "]>=" + armor + " 有効数：" + success);
          }

          ;
          result = $rb_plus(result, "" + "　0=" + criticalCount + "個");
          return result;
        }, $Raisondetre_checkDamage$7.$$arity = 2), nil) && 'checkDamage';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~Raisondetre~index.js.map