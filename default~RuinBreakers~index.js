(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~RuinBreakers~index"],{

/***/ "dWjJ":
/*!********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/RuinBreakers.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/arithmetic_evaluator"] = function (Opal) {
  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'ArithmeticEvaluator');
      var $nesting = [self].concat($parent_nesting);

      (function (self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting),
            $eval$1;
        return (Opal.def(self, '$eval', $eval$1 = function $eval$1(expr, $kwargs) {
          var round_type,
              self = this,
              $ret_or_1 = nil;

          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          }

          ;
          round_type = $kwargs.$$smap["round_type"];

          if (round_type == null) {
            round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
          }

          ;

          if ($truthy(expr)) {} else {
            return 0;
          }

          ;

          if ($truthy($ret_or_1 = $$($nesting, 'Arithmetic').$eval(expr, round_type))) {
            return $ret_or_1;
          } else {
            return 0;
          }

          ;
        }, $eval$1.$$arity = -2), nil) && 'eval';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Table');
        var $nesting = [self].concat($parent_nesting),
            $Table_from_i18n$1,
            $Table_initialize$2,
            $Table_roll$3,
            $Table_choice$4;
        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $Table_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale"], {
            "locale": locale
          }));
          return self.$new(table['$[]']("name"), table['$[]']("type"), table['$[]']("items"));
        }, $Table_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $Table_initialize$2 = function $$initialize(name, type, items) {
          var self = this,
              m = nil;
          self.name = name;
          self.items = items.$freeze();
          m = /(\d+)D(\d+)/i.$match(type);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
          }

          ;
          self.times = m['$[]'](1).$to_i();
          return self.sides = m['$[]'](2).$to_i();
        }, $Table_initialize$2.$$arity = 3);
        Opal.def(self, '$roll', $Table_roll$3 = function $$roll(bcdice) {
          var self = this,
              value = nil;
          value = bcdice.$roll_sum(self.times, self.sides);
          return self.$choice(value);
        }, $Table_roll$3.$$arity = 1);
        return (Opal.def(self, '$choice', $Table_choice$4 = function $$choice(value) {
          var self = this,
              index = nil;
          index = $rb_minus(value, self.times);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index));
        }, $Table_choice$4.$$arity = 1), nil) && 'choice';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/range_table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send = Opal.send,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeTable');

        var $nesting = [self].concat($parent_nesting),
            _$RangeTable$,
            $RangeTable_initialize$3,
            $RangeTable_fetch$4,
            $RangeTable_roll$6,
            $RangeTable_store$7,
            $RangeTable_coerce_to_int_range$11,
            $RangeTable_assert_min_sum_is_covered$12,
            $RangeTable_assert_max_sum_is_covered$13,
            $RangeTable_assert_no_gap_or_overlap_in_ranges$14;

        self.$$prototype.name = self.$$prototype.items = self.$$prototype.num_of_dice = self.$$prototype.num_of_sides = self.$$prototype.formatter = nil;
        Opal.const_set($nesting[0], 'RollResult', $send($$($nesting, 'Struct'), 'new', ["sum", "values", "content", "formatted"], (_$RangeTable$ = function $RangeTable$1() {
          var self = _$RangeTable$.$$s == null ? this : _$RangeTable$.$$s;
          return self.$alias_method("to_s", "formatted");
        }, _$RangeTable$.$$s = self, _$RangeTable$.$$arity = 0, _$RangeTable$)));
        Opal.const_set($nesting[0], 'Item', $$($nesting, 'Struct').$new("range", "content"));
        Opal.const_set($nesting[0], 'DICE_ROLL_METHOD_RE', /^(\d+)D(\d+)$/i.$freeze());
        Opal.const_set($nesting[0], 'DEFAULT_FORMATTER', $send(self, 'lambda', [], ($$2 = function (_$$) {
          function $$2(_x, _x2) {
            return _$$.apply(this, arguments);
          }

          $$2.toString = function () {
            return _$$.toString();
          };

          return $$2;
        }(function (table, result) {
          var self = $$2.$$s == null ? this : $$2.$$s;

          if (table == null) {
            table = nil;
          }

          ;

          if (result == null) {
            result = nil;
          }

          ;
          return "" + table.$name() + "(" + result.$sum() + ") ＞ " + result.$content();
        }), $$2.$$s = self, $$2.$$arity = 2, $$2)));
        self.$attr_reader("name");
        self.$attr_reader("num_of_dice");
        self.$attr_reader("num_of_sides");
        Opal.def(self, '$initialize', $RangeTable_initialize$3 = function $$initialize(name, dice_roll_method, items) {
          var $iter = $RangeTable_initialize$3.$$p,
              formatter = $iter || nil,
              self = this,
              $ret_or_1 = nil,
              m = nil;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          if ($iter) $RangeTable_initialize$3.$$p = null;
          ;
          self.name = name.$freeze();

          self.formatter = function () {
            if ($truthy($ret_or_1 = formatter)) {
              return $ret_or_1;
            } else {
              return $$($nesting, 'DEFAULT_FORMATTER');
            }

            ;
            return nil;
          }();

          m = $$($nesting, 'DICE_ROLL_METHOD_RE').$match(dice_roll_method);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + self.name + ": invalid dice roll method: " + dice_roll_method);
          }

          ;
          self.num_of_dice = m['$[]'](1).$to_i();
          self.num_of_sides = m['$[]'](2).$to_i();
          return self.$store(items);
        }, $RangeTable_initialize$3.$$arity = 3);
        Opal.def(self, '$fetch', $RangeTable_fetch$4 = function $$fetch(value) {
          var _$$2,
              self = this,
              item = nil;

          item = $send(self.items, 'find', [], (_$$2 = function $$5(i) {
            var self = _$$2.$$s == null ? this : _$$2.$$s;

            if (i == null) {
              i = nil;
            }

            ;
            return i.$range()['$include?'](value);
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));

          if ($truthy(item)) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": value is out of range: " + value);
          }

          ;
          return item;
        }, $RangeTable_fetch$4.$$arity = 1);
        Opal.def(self, '$roll', $RangeTable_roll$6 = function $$roll(randomizer) {
          var self = this,
              values = nil,
              sum = nil,
              result = nil,
              $writer = nil;
          values = randomizer.$roll_barabara(self.num_of_dice, self.num_of_sides);
          sum = values.$sum();
          result = $$($nesting, 'RollResult').$new(sum, values, self.$fetch(sum).$content());
          $writer = [self.formatter['$[]'](self, result)];
          $send(result, 'formatted=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $RangeTable_roll$6.$$arity = 1);
        self.$private();
        Opal.def(self, '$store', $RangeTable_store$7 = function $$store(items) {
          var _$$3,
              _$$4,
              _$$5,
              self = this,
              items_with_range = nil,
              sorted_items = nil;

          items_with_range = $send(items, 'map', [], (_$$3 = function $$8(r, c) {
            var self = _$$3.$$s == null ? this : _$$3.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (c == null) {
              c = nil;
            }

            ;
            return [self.$coerce_to_int_range(r), c];
          }, _$$3.$$s = self, _$$3.$$arity = 2, _$$3));
          sorted_items = $send(items_with_range, 'sort_by', [], (_$$4 = function $$9(r, _) {
            var self = _$$4.$$s == null ? this : _$$4.$$s;

            if (r == null) {
              r = nil;
            }

            ;

            if (_ == null) {
              _ = nil;
            }

            ;
            return r.$min();
          }, _$$4.$$s = self, _$$4.$$arity = 2, _$$4));
          self.$assert_min_sum_is_covered(sorted_items);
          self.$assert_max_sum_is_covered(sorted_items);
          self.$assert_no_gap_or_overlap_in_ranges(sorted_items);
          self.items = $send(sorted_items, 'map', [], (_$$5 = function $$10(range, content) {
            var self = _$$5.$$s == null ? this : _$$5.$$s;

            if (range == null) {
              range = nil;
            }

            ;

            if (content == null) {
              content = nil;
            }

            ;
            return $$($nesting, 'Item').$new(range, content.$freeze()).$freeze();
          }, _$$5.$$s = self, _$$5.$$arity = 2, _$$5)).$freeze();
          return self;
        }, $RangeTable_store$7.$$arity = 1);
        Opal.def(self, '$coerce_to_int_range', $RangeTable_coerce_to_int_range$11 = function $$coerce_to_int_range(x) {
          var self = this,
              $case = nil,
              $ret_or_2 = nil;
          $case = x;

          if ($$($nesting, 'Integer')['$===']($case)) {
            return $$($nesting, 'Range').$new(x, x);
          } else if ($$($nesting, 'Range')['$===']($case)) {
            if ($truthy(function () {
              if ($truthy($ret_or_2 = x.$begin()['$is_a?']($$($nesting, 'Integer')))) {
                return x.$end()['$is_a?']($$($nesting, 'Integer'));
              } else {
                return $ret_or_2;
              }

              ;
              return nil;
            }())) {
              return x;
            }
          }

          ;
          return self.$raise($$($nesting, 'TypeError'), "" + self.name + ": " + x + " (" + x.$class() + ") must be an Integer or a Range with Integers ");
        }, $RangeTable_coerce_to_int_range$11.$$arity = 1);
        Opal.def(self, '$assert_min_sum_is_covered', $RangeTable_assert_min_sum_is_covered$12 = function $$assert_min_sum_is_covered(sorted_items) {
          var self = this,
              min_sum = nil,
              range = nil;
          min_sum = self.num_of_dice;
          range = sorted_items.$first()['$[]'](0);

          if ($truthy(range['$include?'](min_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": min value (" + min_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_min_sum_is_covered$12.$$arity = 1);
        Opal.def(self, '$assert_max_sum_is_covered', $RangeTable_assert_max_sum_is_covered$13 = function $$assert_max_sum_is_covered(sorted_items) {
          var self = this,
              max_sum = nil,
              range = nil;
          max_sum = $rb_times(self.num_of_dice, self.num_of_sides);
          range = sorted_items.$last()['$[]'](0);

          if ($truthy(range['$include?'](max_sum))) {} else {
            self.$raise($$($nesting, 'RangeError'), "" + self.name + ": max value (" + max_sum + ") is not covered: " + range);
          }

          ;
          return self;
        }, $RangeTable_assert_max_sum_is_covered$13.$$arity = 1);
        return (Opal.def(self, '$assert_no_gap_or_overlap_in_ranges', $RangeTable_assert_no_gap_or_overlap_in_ranges$14 = function $$assert_no_gap_or_overlap_in_ranges(sorted_items) {
          var _$$6,
              self = this;

          $send(sorted_items, 'each_cons', [2], (_$$6 = function $$15(i1, i2) {
            var self = _$$6.$$s == null ? this : _$$6.$$s,
                r1 = nil,
                r2 = nil,
                max1 = nil,
                next_of_max1 = nil;
            if (self.name == null) self.name = nil;

            if (i1 == null) {
              i1 = nil;
            }

            ;

            if (i2 == null) {
              i2 = nil;
            }

            ;
            r1 = i1['$[]'](0);
            r2 = i2['$[]'](0);
            max1 = r1.$max();
            next_of_max1 = $rb_plus(max1, 1);

            if ($truthy(r2['$include?'](max1))) {
              self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range overlap: " + r1 + " and " + r2);
            }

            ;

            if ($truthy(r2['$include?'](next_of_max1))) {
              return nil;
            } else {
              return self.$raise($$($nesting, 'RangeError'), "" + self.name + ": Range gap: " + r1 + " and " + r2);
            }

            ;
          }, _$$6.$$s = self, _$$6.$$arity = 2, _$$6));
          return self;
        }, $RangeTable_assert_no_gap_or_overlap_in_ranges$14.$$arity = 1), nil) && 'assert_no_gap_or_overlap_in_ranges';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2,
      $range = Opal.range;
  self.$require("bcdice/arithmetic_evaluator");
  self.$require("bcdice/dice_table/table");
  self.$require("bcdice/dice_table/range_table");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RuinBreakers');
        var $nesting = [self].concat($parent_nesting),
            $RuinBreakers_eval_game_system_specific_command$1,
            $RuinBreakers_check_roll$2,
            $RuinBreakers_roll_fp_damage$3,
            $RuinBreakers_roll_fp_recovery$4;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "RuinBreakers");
        Opal.const_set($nesting[0], 'NAME', "ルーインブレイカーズ");
        Opal.const_set($nesting[0], 'SORT_KEY', "るういんふれいかあす");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "■ 基本判定 (RBx@y#z)\n" + "  x：成功率、y：クリティカル値（省略可）、z：ファンブル値（省略可）\n" + "  1D100を振って、成功率に応じて成功／失敗／クリティカル／ファンブルの判定を行います。(P.60)\n" + "  クリティカル値を省略した場合は成功率の5分の1（切り捨て、最低1）\n" + "  ファンブル値を省略した場合は、成功率が99以下の場合は96、100以上の場合は99\n" + "  例） RB32, RB(45+20)/2, RB30@10, RB35+20#90, RB40-20+10@10#90\n" + "\n" + "■ FPへのダメージ (FPDx)\n" + "  x：破滅ポイント\n" + "  ルーインブレイクロール失敗時やラウンド終了時に、残っている\n" + "  破滅ポイントに応じて発生するダメージのダイスロールを行います。(P.91,92)\n" + "  例） FPD23\n" + "\n" + "■ FPの回復 (FPRx)\n" + "  x：破滅ポイント\n" + "  ルーインブレイク成功時に発生する、FPの回復量を決定するダイスロールを行います。(P.93)\n" + "  例） FPR29\n" + "\n" + "■ 各種表\n" + "  ・ポジティブ感情表 (PE)\n" + "  ・ネガティブ感情表 (NE)\n" + "  ・デウス・エクス・マキナ表 (DXM)\n" + "  ・断罪チャート (JC)\n" + "  ・破滅のイヤな感じ表 (RDF)\n" + "  ・トラブルチャート／トラブル解決チャート (TC)\n" + "  ・ドタバタアクション表 (DA)\n");
        Opal.def(self, '$eval_game_system_specific_command', $RuinBreakers_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $case = nil;
          return function () {
            $case = command;

            if (/^RB/['$===']($case)) {
              return self.$check_roll(command);
            } else if (/^FPD/['$===']($case)) {
              return self.$roll_fp_damage(command);
            } else if (/^FPR/['$===']($case)) {
              return self.$roll_fp_recovery(command);
            } else {
              return self.$roll_tables(command, $$($nesting, 'TABLES'));
            }
          }();
        }, $RuinBreakers_eval_game_system_specific_command$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$check_roll', $RuinBreakers_check_roll$2 = function $$check_roll(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              success_rate = nil,
              critical_border = nil,
              $ret_or_1 = nil,
              fumble_border = nil,
              $ret_or_2 = nil,
              total = nil,
              result = nil,
              compare_result = nil,
              $writer = nil,
              $ret_or_3 = nil,
              sequence = nil;
          m = /^RB(-?\d+([+\-*\/]\d+)*)(@(\d+))?(#(\d+))?$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          success_rate = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](1)).$to_i();

          critical_border = function () {
            if ($truthy($ret_or_1 = ($a = m['$[]'](4), $a === nil || $a == null ? nil : $send($a, 'to_i', [])))) {
              return $ret_or_1;
            } else {
              return [$rb_divide(success_rate, 5).$to_i(), 1].$max();
            }

            ;
            return nil;
          }();

          fumble_border = function () {
            if ($truthy($ret_or_2 = ($b = m['$[]'](6), $b === nil || $b == null ? nil : $send($b, 'to_i', [])))) {
              return $ret_or_2;
            } else {
              if ($truthy($rb_lt(success_rate, 100))) {
                return 96;
              } else {
                return 99;
              }

              ;
            }

            ;
            return nil;
          }();

          total = self.randomizer.$roll_once(100);
          result = $$($nesting, 'Result').$new();

          compare_result = function () {
            if ($truthy($rb_ge(total, fumble_border))) {
              $writer = [true];
              $send(result, 'fumble=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = [true];
              $send(result, 'failure=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              return "ファンブル";
            } else if ($truthy(function () {
              if ($truthy($ret_or_3 = total['$=='](1))) {
                return $ret_or_3;
              } else {
                return $rb_le(total, critical_border);
              }

              ;
              return nil;
            }())) {
              $writer = [true];
              $send(result, 'critical=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              $writer = [true];
              $send(result, 'success=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              return "クリティカル";
            } else if ($truthy($rb_le(total, success_rate))) {
              $writer = [true];
              $send(result, 'success=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              return "成功";
            } else {
              $writer = [true];
              $send(result, 'failure=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              return "失敗";
            }

            ;
            return nil;
          }();

          sequence = ["" + "(1D100<=" + success_rate + "@" + critical_border + "#" + fumble_border + ")", total, compare_result];
          $writer = [sequence.$join(" ＞ ")];
          $send(result, 'text=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          ;
          return result;
        }, $RuinBreakers_check_roll$2.$$arity = 1);
        Opal.def(self, '$roll_fp_damage', $RuinBreakers_roll_fp_damage$3 = function $$roll_fp_damage(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              ruin_point = nil,
              ruin_point_tens = nil,
              ruin_point_ones = nil,
              dice_list = nil,
              total = nil,
              dice_str = nil,
              sequence = nil;
          m = /^FPD(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          ruin_point = m['$[]'](1).$to_i();
          $b = ruin_point.$divmod(10), $a = Opal.to_ary($b), ruin_point_tens = $a[0] == null ? nil : $a[0], ruin_point_ones = $a[1] == null ? nil : $a[1], $b;
          dice_list = self.randomizer.$roll_barabara($rb_plus(1, ruin_point_tens), 10);
          total = dice_list.$sum();
          dice_str = dice_list.$join(",");
          sequence = ["" + "((1+" + ruin_point_tens + ")D10+" + ruin_point_ones + ")", "" + total + "[" + dice_str + "]+" + ruin_point_ones, "" + $rb_plus(total, ruin_point_ones) + "ダメージ"];
          return sequence.$join(" ＞ ");
        }, $RuinBreakers_roll_fp_damage$3.$$arity = 1);
        Opal.def(self, '$roll_fp_recovery', $RuinBreakers_roll_fp_recovery$4 = function $$roll_fp_recovery(command) {
          var self = this,
              m = nil,
              ruin_point = nil,
              dice_count = nil,
              dice_list = nil,
              total = nil,
              dice_str = nil,
              sequence = nil;
          m = /^FPR(\d+)$/.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          ruin_point = m['$[]'](1).$to_i();
          dice_count = ruin_point.$fdiv(10).$ceil();
          dice_list = self.randomizer.$roll_barabara(dice_count, 10);
          total = dice_list.$sum();
          dice_str = dice_list.$join(",");
          sequence = ["" + "(" + dice_count + "D10)", "" + total + "[" + dice_str + "]", "" + total + "回復"];
          return sequence.$join(" ＞ ");
        }, $RuinBreakers_roll_fp_recovery$4.$$arity = 1);
        Opal.const_set($nesting[0], 'TABLES', $hash2(["PE", "NE", "DXM", "JC", "RDF", "TC", "DA"], {
          "PE": $$$($$($nesting, 'DiceTable'), 'RangeTable').$new("ポジティブ感情表", "1D100", [[$range(1, 5, false), "【希望】相手はまるで自分の過去、あるいは未来を見ているように感じる。"], [$range(6, 10, false), "【礼儀】相手に礼を尽くすべきだとあなたは考えている。"], [$range(11, 15, false), "【家族】相手とは家族のような関係となる。"], [$range(16, 20, false), "【恩人】相手から助けを受けたことがある。それは大事な思い出だ。"], [$range(21, 25, false), "【友人】相手とはなんとなくウマが合う。一緒にいると楽しい。"], [$range(26, 30, false), "【信用】相手は信用できる人物だと思う。"], [$range(31, 35, false), "【仲間】相手は同じ目的を持つ仲間だ。"], [$range(36, 40, false), "【庇護】相手のことを助けてあげたいと思っている。"], [$range(41, 45, false), "【尊敬】相手の行動、思考、思想などを尊敬している。"], [$range(46, 50, false), "【憧れ】相手の生き方、外見、能力などになんとなく憧れている。"], [$range(51, 55, false), "【好意】相手の主張、外見、生き方などに好意を抱いている。"], [$range(56, 60, false), "【忠義】相手に対して真摯に忠実でありたいと思っている。"], [$range(61, 65, false), "【目標】相手はあなたにとっての目標であり、理想の存在だ。"], [$range(66, 70, false), "【借り】相手から助けを受けた。それはいつか返すべき、借りだ。"], [$range(71, 75, false), "【貸し】相手には貸しがある。別に返してもらおうとは思っていない。"], [$range(76, 80, false), "【腐れ縁】相手は昔から何かというと縁がある。この縁は今も続いている。"], [$range(81, 85, false), "【相性】相手とはなんとなくうまくいく。相性がいいようだ。"], [$range(86, 90, false), "【有為】相手はあなたにとって益をもたらす人物だ、そう考えている。"], [$range(91, 95, false), "【秘密】相手の秘密を知っている。あるいはお互い秘密を共有している。"], [$range(96, 100, false), "【好敵手】相手のことを好敵手、ライバルだと思っている。"]]),
          "NE": $$$($$($nesting, 'DiceTable'), 'RangeTable').$new("ネガティブ感情表", "1D100", [[$range(1, 5, false), "【同族嫌悪】1日に自分の忌むべき過去、あるいは自分自身を見ているように感じる。"], [$range(6, 10, false), "【侮蔑】相手を蔑む気持ちがある。どうにも、気に入らない。"], [$range(11, 15, false), "【反発】相手の主張や行動などに反発を感じる。相手を受け入れることに抵抗がある。"], [$range(16, 20, false), "【わだかまり】相手には言葉にしにくいもやもやとした感情を持っている。"], [$range(21, 25, false), "【隔たり】相手とはなんとなくウマが合わない。一緒にいても面白くない。"], [$range(26, 30, false), "【疑惑】相手は信用できない人物だと思っている。"], [$range(31, 35, false), "【裏切り】相手に裏切られたという気持ちがある。"], [$range(36, 40, false), "【妨害】相手のことを気に入らず、何かあれば、邪魔したいと思っている。"], [$range(41, 45, false), "【侮辱】相手の行動、思考、思想などを嫌悪している。"], [$range(46, 50, false), "【うらやみ】相手の生き方、外見、能力などをうらやんでいる。"], [$range(51, 55, false), "【害意】相手の主張、外見、生き方などを嫌い、害を与えたいと思っている。"], [$range(56, 60, false), "【不快】相手を不快な人間だと思っている。生理的に受け付けない。"], [$range(61, 65, false), "【反面】相手を反面教師としている。ああはなるまい、と。"], [$range(66, 70, false), "【詐欺】相手に騙されているように思う。何か嘘を吐かれているように思うのだ。"], [$range(71, 75, false), "【搾取】相手に自分の何かを奪われているような怒りを感じる。"], [$range(76, 80, false), "【悪縁】相手は昔から縁がある。この縁を絶ちきりたいと思っている。"], [$range(81, 85, false), "【相性】相手とはなんとなくうまくいかない。残念だが相性が悪い。"], [$range(86, 90, false), "【害悪】相手はあなたにとって害をもたらす、そう思っている。"], [$range(91, 95, false), "【怨恨】相手に恨みを持っている。この恨みを晴らす日は来るだろうか。"], [$range(96, 100, false), "【仇敵】相手のことを倒すべき相手と思っている。"]]),
          "DXM": $$$($$($nesting, 'DiceTable'), 'RangeTable').$new("デウス・エクス・マキナ表", "1D10", [[$range(1, 2, false), "神降臨。エンディングフェイズに効果を発揮する。あなたの願いはかなう。願いの内容はGMと相談して決定すること。"], [$range(3, 4, false), "逃走。状況を無視してあなた以外のキャストはシーンから退場できる。"], [$range(5, 6, false), "命の雫。あなた以外のキャストのFPが3D10点だけ回復する。"], [$range(7, 8, false), "天変地異。巨大な嵐や地震、雷雨などが発生し、周囲は大混乱に陥る。トループやエキストラはシーン終了まで何も行なえない(戦闘不能として扱う)。"], [$range(9, 10, false), "不思議なことが起こった。あなたのFPが完全に回復する。"]]),
          "JC": $$$($$($nesting, 'DiceTable'), 'Table').$new("断罪チャート", "1D10", ["【国王／女王】国レベルの代表者が現われて、あなたの主張を支持してくれる。", "【王子／王女】王子や王女といった国で知らぬ者がないような存在が、あなたの主張を支持してくれる。", "【高位聖職者】高位の聖職者が、あなたの主張を支持してくれる。", "【有力貴族】有力貴族が、あなたの主張を支持してくれる。", "【有力市民】有力市民が、あなたの主張を支持してくれる。", "【豪商】豪商が、あなたの主張を支持してくれる。", "【現役学生たち】アカデミーの学生たちが、あなたの主張を支持してくれる。", "【OB、OGたち】アカデミーのOBやOGが、あなたの主張を支持してくれる。", "【多くの人々】名も知れぬ多くの人々が、あなたの主張を支持してくれる。", "【外国の王侯貴族】外国の代表者が現われて、あなたの主張を支持してくれる。"]),
          "RDF": $$$($$($nesting, 'DiceTable'), 'RangeTable').$new("破滅のイヤな感じ表", "1D100", [[$range(1, 5, false), "【水中で拘束】\n演出：水中で長い髪の毛が全身に絡みついて動きが重くなるような感覚。\nルーインブレイク成功：重い拘束から解き放たれたような快感。"], [$range(6, 10, false), "【鈍痛】\n演出：こめかみから長い釘を差し込まれているような感覚。\nルーインブレイク成功：痛みが消えてなくなる安堵感。"], [$range(11, 15, false), "【酸欠】\n演出：空気が薄くなり呼吸をしても息苦しさが消えない感覚。\nルーインブレイク成功：清浄な空気を吸った時の快感。"], [$range(16, 20, false), "【ヘッドロック】\n演出：頭を締め上げられているような感覚。\nルーインブレイク成功：痛みから逃れられた安心感。"], [$range(21, 25, false), "【悪寒】\n演出：背中が冷やりとして悪寒が全身を突き抜けるような感覚。\nルーインブレイク成功：悪寒が鎮まった平穏感。"], [$range(26, 30, false), "【熱病】\n演出：熱病で浮かされたように頭がぼうっとする感覚。\nルーインブレイク成功：落ち着きを取り戻した安息感。"], [$range(31, 35, false), "【高所恐怖】\n演出：目もくらむような断崖の際に立たされたような感覚。\nルーインブレイク成功：落下の恐怖から逃れた安堵感。"], [$range(36, 40, false), "【ガラスの破片】\n演出：砕けた散ったガラスの破片を踏み続けるような感覚。\nルーインブレイク成功：幻の痛みが消えていく安心感。"], [$range(41, 45, false), "【ジャリ感】\n演出：口の中に砂を詰め込まれたような感覚。\nルーインブレイク成功：口の中がすっきりしたような清浄感。"], [$range(46, 50, false), "【耳鳴り】\n演出：耳をふさいでも聞こえる耳鳴りが響き続けているような感覚。\nルーインブレイク成功：異音が消えた平安感。"], [$range(51, 55, false), "【孤独】\n演出：虚空にただひとり浮かんでいるような孤独な感覚。\nルーインブレイク成功：孤立から脱した安心感。"], [$range(56, 60, false), "【落下感】\n演出：高所から落ち続けているような感覚。\nルーインブレイク成功：地に足のついた安定感。"], [$range(61, 65, false), "【暗所恐怖】\n演出：明るいはずなのに周囲が真っ暗で何も見えない不安な感覚。\nルーインブレイク成功：周囲がハッキリ見える安息感。"], [$range(66, 70, false), "【擦過】\n演出：心の表面をザラザラとしたもので削られているような感覚。\nルーインブレイク成功：痛みから逃れられた安楽感。"], [$range(71, 75, false), "【幻聴】\n演出：周囲に人がいて、絶えず自分の悪口を囁きあっているような感覚。\nルーインブレイク成功：周囲への恐怖が消えた平穏感。"], [$range(76, 80, false), "【異臭】\n演出：不快な香りが漂ってくるような感覚。\nルーインブレイク成功：異臭を感じなくなった清浄感。"], [$range(81, 85, false), "【健忘感】\n演出：何かを忘れていて、それが何かは思い出せないような感覚。\nルーインブレイク成功：忘れごとを思い出せたときの開放感。"], [$range(86, 90, false), "【杞憂】\n演出：天が崩れていつ落ちてくるかわからない感覚。\nルーインブレイク成功：頭上がすっきりした痛快感。"], [$range(91, 95, false), "【背後恐怖】\n演出：背後に人が立っているような感覚。\nルーインブレイク成功：後方に憂いのない安心感。"], [$range(96, 100, false), "【夢中感】\n演出：夢の中にいるような不安な感覚。\nルーインブレイク成功：しっかりとした現実感。"]]),
          "TC": $$$($$($nesting, 'DiceTable'), 'Table').$new("トラブルチャート／トラブル解決チャート", "1D10", ["【暴れ馬／交通事故】\nトラブル：いきなり、暴れ馬がやってきて、キミは刎ねられた。\n解決：時間はかかったが、事故は処理された。", "【突然の崩落／地下遺跡へ移動】\nトラブル：周辺ごと地面が陥没し、地下へと導かれる。\n解決：崩落した先は謎の古代文明の遺跡であった。", "【暗殺者の襲撃】\nトラブル：凶刃がキャストを襲う。\n解決：何とか暗殺者の手を逃れ、キミは生還した。", "【拉致・誘拐】\nトラブル：突然、キミは黒覆面の男たちに馬車に押し込まれ、誘拐される。\n解決：何とかして、キミは誘拐組織の手を逃れた。", "【爆発！！】\nトラブル：爆発した！\n解決：奇跡的にキミは無傷だ、周囲には破壊されたガレキが転がっている。", "【行きずりの強盗】\nトラブル：訪れていた店やレストラン、銀行などが強盗に襲われる。\n解決：通りすがりのヒーローが強盗を倒した。あれはいったい。", "【テロリストの襲撃／撃退】\nトラブル：テロリストに襲われる。\n解決：テロリストは撃退された。", "【交通マヒ／移動変更】\nトラブル：直接、事故に行きあったわけではない事故によって起こった交通マヒによって身動きが取れない。\n解決：交通機関を変更して移動することになった。", "【軍・警察の封鎖／大捕物】\nトラブル：突如して軍や警察などの治安組織によって建物が封鎖されてしまった。\n解決：建物内にいる犯人を巡り、大捕物が始った。", "【任意】\nGMと相談してトラブルの内容を決めよう。"]),
          "DA": $$$($$($nesting, 'DiceTable'), 'Table').$new("ドタバタアクション表", "1D10", ["【フードファイト（野菜）】大根ソードで切りつけ、カボチャハンマーで殴り抜け", "【ホコリの雲】ドカッ、バキ、ボカッ。キュウ。", "【リビングルームストーム】飛び交うソーサー、ポットの中には煎れたばかりの紅茶（抽出温度28度）が入っているぞ。", "【廊下でランナウェイ】廊下を走っては行けません。", "【図書館バトル】敏腕司書が、図書館の静寂を乱す者を残らず静かにさせていく。", "【パーティーファイト】優雅に踊り、紳士淑女の助けを借りて悪漢を退治しよう。", "【フードファイト（肉と骨）】ヒトに眠る野性を解き放て。羊の骨が最古の武器として再発見される。", "【イスと机】イスは盾であり、武器であり悪漢をけん制し、拘束する。", "【洗濯物ファイト】シーツで敵の動きを止めて、石鹸で転ばせよう。", "【任意】GMと相談して、イメージをふくらませよう。"])
        }).$freeze());
        return self.$register_prefix("RB", "FP[DR]", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~RuinBreakers~index.js.map