(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~Ryutama~index"],{

/***/ "41Dk":
/*!***************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Ryutama.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Ryutama');
        var $nesting = [self].concat($parent_nesting),
            $Ryutama_initialize$1,
            $Ryutama_eval_game_system_specific_command$2,
            $Ryutama_getDiceType$3,
            $Ryutama_isValidDice$4,
            $Ryutama_isValidDiceOne$5,
            $Ryutama_getDiffculty$6,
            $Ryutama_getRollValue$7,
            $Ryutama_getResultText$8,
            $Ryutama_isFamble$9,
            $Ryutama_isCritical$10,
            $Ryutama_getBaseText$11,
            $Ryutama_getModifyString$12;
        self.$$prototype.validDiceTypes = self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Ryutama");
        Opal.const_set($nesting[0], 'NAME', "りゅうたま");
        Opal.const_set($nesting[0], 'SORT_KEY', "りゆうたま");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定\n" + "　Rx,y>=t（x,y：使用する能力値、t：目標値）\n" + "　1ゾロ、クリティカルも含めて判定結果を表示します\n" + "　能力値１つでの判定は Rx>=t で行えます\n" + "例）R8,6>=13\n");
        self.$register_prefix("R");
        Opal.def(self, '$initialize', $Ryutama_initialize$1 = function $$initialize(command) {
          var $iter = $Ryutama_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Ryutama_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Ryutama_initialize$1, false, true), 'initialize', [command], null);
          return self.validDiceTypes = [20, 12, 10, 8, 6, 4, 2];
        }, $Ryutama_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Ryutama_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var $a,
              $b,
              self = this,
              dice1 = nil,
              dice2 = nil,
              modifyString = nil,
              difficulty = nil,
              $ret_or_1 = nil,
              modify = nil,
              value1 = nil,
              value2 = nil,
              total = nil,
              result = nil,
              value1Text = nil,
              value2Text = nil,
              modifyText = nil,
              baseText = nil,
              output = nil;
          self.$debug("eval_game_system_specific_command begin");

          if ($truthy(command['$=~'](/^R(\d+)(,(\d+))?([+\-\d]+)?(>=(\d+))?/))) {} else {
            self.$debug("unmatched!");
            return "";
          }

          ;
          self.$debug("matched");
          dice1 = $$($nesting, 'Regexp').$last_match(1).$to_i();
          dice2 = $$($nesting, 'Regexp').$last_match(3).$to_i();
          modifyString = $$($nesting, 'Regexp').$last_match(4);
          difficulty = $$($nesting, 'Regexp').$last_match(6);
          $b = self.$getDiceType(dice1, dice2), $a = Opal.to_ary($b), dice1 = $a[0] == null ? nil : $a[0], dice2 = $a[1] == null ? nil : $a[1], $b;

          if (dice1['$=='](0)) {
            return "";
          }

          ;

          modifyString = function () {
            if ($truthy($ret_or_1 = modifyString)) {
              return $ret_or_1;
            } else {
              return "";
            }

            ;
            return nil;
          }();

          modify = $$($nesting, 'ArithmeticEvaluator').$eval(modifyString);
          difficulty = self.$getDiffculty(difficulty);
          value1 = self.$getRollValue(dice1);
          value2 = self.$getRollValue(dice2);
          total = $rb_plus($rb_plus(value1, value2), modify);
          result = self.$getResultText(value1, value2, dice1, dice2, difficulty, total);

          if ($truthy(result['$empty?']())) {} else {
            result = "" + " ＞ " + result;
          }

          ;
          value1Text = "" + value1 + "(" + dice1 + ")";

          value2Text = function () {
            if (value2['$=='](0)) {
              return "";
            } else {
              return "" + "+" + value2 + "(" + dice2 + ")";
            }

            ;
            return nil;
          }();

          modifyText = self.$getModifyString(modify);
          baseText = self.$getBaseText(dice1, dice2, modify, difficulty);
          output = "" + "(" + baseText + ") ＞ " + value1Text + value2Text + modifyText + " ＞ " + total + result;
          return output;
        }, $Ryutama_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$getDiceType', $Ryutama_getDiceType$3 = function $$getDiceType(dice1, dice2) {
          var self = this,
              diceBase = nil;
          self.$debug("getDiceType begin");

          if ($truthy(dice2['$!='](0))) {
            if ($truthy(self.$isValidDiceOne(dice1))) {
              return [dice1, dice2];
            } else {
              return [0, 0];
            }
          }

          ;

          if ($truthy(self.$isValidDice(dice1, dice2))) {
            return [dice1, dice2];
          }

          ;
          diceBase = dice1;
          dice1 = $rb_divide(diceBase, 10).$to_i();
          dice2 = diceBase['$%'](10);

          if ($truthy(self.$isValidDice(dice1, dice2))) {
            return [dice1, dice2];
          }

          ;
          dice1 = $rb_divide(diceBase, 100).$to_i();
          dice2 = diceBase['$%'](100);

          if ($truthy(self.$isValidDice(dice1, dice2))) {
            return [dice1, dice2];
          }

          ;

          if ($truthy(self.$isValidDiceOne(diceBase))) {
            return [diceBase, 0];
          }

          ;
          return [0, 0];
        }, $Ryutama_getDiceType$3.$$arity = 2);
        Opal.def(self, '$isValidDice', $Ryutama_isValidDice$4 = function $$isValidDice(dice1, dice2) {
          var self = this,
              $ret_or_2 = nil;
          return function () {
            if ($truthy($ret_or_2 = self.$isValidDiceOne(dice1))) {
              return self.$isValidDiceOne(dice2);
            } else {
              return $ret_or_2;
            }

            ;
            return nil;
          }();
        }, $Ryutama_isValidDice$4.$$arity = 2);
        Opal.def(self, '$isValidDiceOne', $Ryutama_isValidDiceOne$5 = function $$isValidDiceOne(dice) {
          var self = this;
          return self.validDiceTypes['$include?'](dice);
        }, $Ryutama_isValidDiceOne$5.$$arity = 1);
        Opal.def(self, '$getDiffculty', $Ryutama_getDiffculty$6 = function $$getDiffculty(difficulty) {
          var self = this;

          if ($truthy(difficulty['$nil?']())) {} else {
            difficulty = difficulty.$to_i();
          }

          ;
          return difficulty;
        }, $Ryutama_getDiffculty$6.$$arity = 1);
        Opal.def(self, '$getRollValue', $Ryutama_getRollValue$7 = function $$getRollValue(dice) {
          var self = this,
              value = nil;

          if (dice['$=='](0)) {
            return 0;
          }

          ;
          value = self.randomizer.$roll_once(dice);
          return value;
        }, $Ryutama_getRollValue$7.$$arity = 1);
        Opal.def(self, '$getResultText', $Ryutama_getResultText$8 = function $$getResultText(value1, value2, dice1, dice2, difficulty, total) {
          var self = this;

          if ($truthy(self.$isFamble(value1, value2))) {
            return "１ゾロ【１ゾロポイント＋１】";
          }

          ;

          if ($truthy(self.$isCritical(value1, value2, dice1, dice2))) {
            return "クリティカル成功";
          }

          ;

          if ($truthy(difficulty['$nil?']())) {
            return "";
          }

          ;

          if ($truthy($rb_ge(total, difficulty))) {
            return "成功";
          }

          ;
          return "失敗";
        }, $Ryutama_getResultText$8.$$arity = 6);
        Opal.def(self, '$isFamble', $Ryutama_isFamble$9 = function $$isFamble(value1, value2) {
          var self = this,
              $ret_or_3 = nil;
          return function () {
            if ($truthy($ret_or_3 = value1['$=='](1))) {
              return value2['$=='](1);
            } else {
              return $ret_or_3;
            }

            ;
            return nil;
          }();
        }, $Ryutama_isFamble$9.$$arity = 2);
        Opal.def(self, '$isCritical', $Ryutama_isCritical$10 = function $$isCritical(value1, value2, dice1, dice2) {
          var self = this,
              $ret_or_4 = nil,
              $ret_or_5 = nil;

          if (value2['$=='](0)) {
            return false;
          }

          ;

          if ($truthy(function () {
            if ($truthy($ret_or_4 = value1['$=='](6))) {
              return value2['$=='](6);
            } else {
              return $ret_or_4;
            }

            ;
            return nil;
          }())) {
            return true;
          }

          ;

          if ($truthy(function () {
            if ($truthy($ret_or_5 = value1['$=='](dice1))) {
              return value2['$=='](dice2);
            } else {
              return $ret_or_5;
            }

            ;
            return nil;
          }())) {
            return true;
          }

          ;
          return false;
        }, $Ryutama_isCritical$10.$$arity = 4);
        Opal.def(self, '$getBaseText', $Ryutama_getBaseText$11 = function $$getBaseText(dice1, dice2, modify, difficulty) {
          var self = this,
              baseText = nil;
          baseText = "" + "R" + dice1;

          if ($truthy(dice2['$!='](0))) {
            baseText = $rb_plus(baseText, "" + "," + dice2);
          }

          ;
          baseText = $rb_plus(baseText, self.$getModifyString(modify));

          if ($truthy(difficulty['$nil?']())) {} else {
            baseText = $rb_plus(baseText, "" + ">=" + difficulty);
          }

          ;
          return baseText;
        }, $Ryutama_getBaseText$11.$$arity = 4);
        return (Opal.def(self, '$getModifyString', $Ryutama_getModifyString$12 = function $$getModifyString(modify) {
          var self = this;

          if ($truthy($rb_gt(modify, 0))) {
            return $rb_plus("+", modify.$to_s());
          } else if ($truthy($rb_lt(modify, 0))) {
            return modify.$to_s();
          }

          ;
          return "";
        }, $Ryutama_getModifyString$12.$$arity = 1), nil) && 'getModifyString';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~Ryutama~index.js.map