(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~SkynautsBouken~index"],{

/***/ "AXzp":
/*!**********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/SkynautsBouken.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $hash = Opal.hash,
      $send = Opal.send,
      $range = Opal.range;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SkynautsBouken');
        var $nesting = [self].concat($parent_nesting),
            $SkynautsBouken_initialize$1,
            $SkynautsBouken_eval_game_system_specific_command$2,
            $SkynautsBouken_command_sn$3,
            $SkynautsBouken_command_d$4,
            $SkynautsBouken_command_avo$5,
            $SkynautsBouken_command_snavo$7,
            $SkynautsBouken_command_snd$8,
            $SkynautsBouken_get_points_text$9,
            $SkynautsBouken_get_xy_text$12,
            $SkynautsBouken_get_fire_points$13;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "SkynautsBouken");
        Opal.const_set($nesting[0], 'NAME', "歯車の塔の探空士（冒険企画局）");
        Opal.const_set($nesting[0], 'SORT_KEY', "はくるまのとうのすかいのおつ2");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定（nSNt#f） n:ダイス数(省略時2)、t:目標値(省略時7)、f:ファンブル値(省略時1)\n" + "    例）SN6#2　3SN\n" + "・ダメージチェック (Dx/y@m) x:ダメージ範囲、y:攻撃回数\n" + "　　m:《弾道学》（省略可）上:8、下:2、左:4、右:6\n" + "　　例） D/4　D19/2　D/3@8　D[大揺れ]/2\n" + "・回避(AVO@mダメージ)\n" + "　　m:回避方向（上:8、下:2、左:4、右:6）、ダメージ：ダメージチェック結果\n" + "　　例）AVO@8[1,4],[2,6],[3,8]　AVO@2[6,4],[2,6]\n" + "・FT ファンブル表(p76)\n" + "・NV 航行表\n" + "\n" + "■ 判定セット\n" + "・《回避運動》判定+回避（nSNt#f/AVO@ダメージ）\n" + "　　nSNt#f → 成功なら AVO@m\n" + "　　例）SN/AVO@8[1,4],[2,6],[3,8]　3SN#2/AVO@2[6,4],[2,6]\n" + "・砲撃判定+ダメージチェック　(nSNt#f/Dx/y@m)\n" + "　　行為判定の出目変更タイミングを逃すので要GMの許可\n" + "　　nSNt#f → 成功なら Dx/y@m\n" + "　　例）SN/D/4　3SN#2/D[大揺れ]/2\n");
        Opal.const_set($nesting[0], 'TABLES', $hash2(["FT", "NV"], {
          "FT": $$$($$($nesting, 'DiceTable'), 'Table').$new("ファンブル表", "1D6", ["なんとか大事にはいたらなかった。通常の失敗と同様の処理を行うこと。", "転んでしまった。キミは[転倒](p107)する。", "失敗にイライラしてしまった。キミは獲得している【キズナ】1つの「支援チェック」にチェックを入れる。", "自身のいるマスを[破損](p104)させる。この[破損]によって、キミの【生命点】は減少しない。", "頭をぶつけてしまった。キミの【生命点】を「1d6点」減少する。", "奇跡的な結果。 この行為判定は成功となる。"]),
          "NV": $$$($$($nesting, 'DiceTable'), 'Table').$new("航海表", "1d6", ["スポット1つ分進む", "スポット1つ分進む", "スポット1つ分進む", "スポット2つ分進む", "スポット2つ分進む", "スポット3つ分進む"])
        }).$freeze());
        self.$register_prefix("D", "\\d?SN", "NV", "FT", "AVO");
        Opal.def(self, '$initialize', $SkynautsBouken_initialize$1 = function $$initialize(command) {
          var $iter = $SkynautsBouken_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $SkynautsBouken_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $SkynautsBouken_initialize$1, false, true), 'initialize', [command], null);
          return self.round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
        }, $SkynautsBouken_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $SkynautsBouken_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $ret_or_1 = nil,
              $ret_or_2 = nil,
              $ret_or_3 = nil,
              $ret_or_4 = nil,
              $ret_or_5 = nil;

          if ($truthy($ret_or_1 = function () {
            if ($truthy($ret_or_2 = function () {
              if ($truthy($ret_or_3 = function () {
                if ($truthy($ret_or_4 = function () {
                  if ($truthy($ret_or_5 = self.$command_sn(command))) {
                    return $ret_or_5;
                  } else {
                    return self.$command_d(command);
                  }

                  ;
                  return nil;
                }())) {
                  return $ret_or_4;
                } else {
                  return self.$command_avo(command);
                }

                ;
                return nil;
              }())) {
                return $ret_or_3;
              } else {
                return self.$command_snavo(command);
              }

              ;
              return nil;
            }())) {
              return $ret_or_2;
            } else {
              return self.$command_snd(command);
            }

            ;
            return nil;
          }())) {
            return $ret_or_1;
          } else {
            return self.$roll_tables(command, $$($nesting, 'TABLES'));
          }
        }, $SkynautsBouken_eval_game_system_specific_command$2.$$arity = 1);
        self.$private();
        Opal.const_set($nesting[0], 'DIRECTION_INFOS', $hash(0, $hash2(["name", "position_diff"], {
          "name": "",
          "position_diff": [0, 0]
        }), 1, $hash2(["name", "position_diff"], {
          "name": "左下",
          "position_diff": [-1, 1]
        }), 2, $hash2(["name", "position_diff"], {
          "name": "下",
          "position_diff": [0, 1]
        }), 3, $hash2(["name", "position_diff"], {
          "name": "右下",
          "position_diff": [1, 1]
        }), 4, $hash2(["name", "position_diff"], {
          "name": "左",
          "position_diff": [-1, 0]
        }), 5, $hash2(["name", "position_diff"], {
          "name": "",
          "position_diff": [0, 0]
        }), 6, $hash2(["name", "position_diff"], {
          "name": "右",
          "position_diff": [1, 0]
        }), 7, $hash2(["name", "position_diff"], {
          "name": "左上",
          "position_diff": [-1, -1]
        }), 8, $hash2(["name", "position_diff"], {
          "name": "上",
          "position_diff": [0, -1]
        }), 9, $hash2(["name", "position_diff"], {
          "name": "右上",
          "position_diff": [1, -1]
        })).$freeze());
        Opal.const_set($nesting[0], 'D_REGEXP', /^D([1-46-9]{0,8})(\[.+\]|S|F|SF|FS)?\/(\d{1,2})(@([2468]))?$/.$freeze());
        Opal.def(self, '$command_sn', $SkynautsBouken_command_sn$3 = function $$command_sn(command) {
          var $a,
              $b,
              self = this,
              cmd = nil,
              dice_count = nil,
              target = nil,
              fumble = nil,
              dice_list = nil,
              dice_top_two = nil,
              res = nil,
              $writer = nil;
          self.$debug("SN", command);
          cmd = $$$($$($nesting, 'Command'), 'Parser').$new(/[1-9]?SN(\d{0,2})/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$restrict_cmp_op_to(nil).$enable_fumble().$parse(command);

          if ($truthy(cmd)) {} else {
            return nil;
          }

          ;
          $b = $send(cmd.$command().$split("SN", 2), 'map', [], "to_i".$to_proc()), $a = Opal.to_ary($b), dice_count = $a[0] == null ? nil : $a[0], target = $a[1] == null ? nil : $a[1], $b;

          if (dice_count['$=='](0)) {
            dice_count = 2;
          }

          ;

          if (target['$=='](0)) {
            target = 7;
          }

          ;

          fumble = function () {
            if ($truthy(cmd.$fumble()['$nil?']())) {
              return 1;
            } else {
              return cmd.$fumble();
            }

            ;
            return nil;
          }();

          self.$debug("SN Parsed", dice_count, target, fumble);
          dice_list = self.randomizer.$roll_barabara(dice_count, 6);
          dice_top_two = dice_list.$sort()['$[]']($range(-2, -1, false));

          res = function () {
            if (dice_top_two['$==']([6, 6])) {
              return $$($nesting, 'Result').$critical("スペシャル（【生命点】1d6回復）");
            } else if ($truthy($rb_le(dice_list.$max(), fumble))) {
              return $$($nesting, 'Result').$fumble("ファンブル（ファンブル表FT）");
            } else if ($truthy($rb_ge(dice_top_two.$sum(), target))) {
              return $$($nesting, 'Result').$success("成功");
            } else {
              return $$($nesting, 'Result').$failure("失敗");
            }

            ;
            return nil;
          }();

          if (dice_count['$=='](2)) {
            $writer = [["" + "(" + dice_count + "SN" + target + "#" + fumble + ")", "" + dice_top_two.$sum() + "[" + dice_list.$join(",") + "]", res.$text()].$compact().$join(" ＞ ")];
            $send(res, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          } else {
            $writer = [["" + "(" + dice_count + "SN" + target + "#" + fumble + ")", $rb_plus($rb_plus("[", dice_list.$join(",")), "]"), "" + dice_top_two.$sum() + "[" + dice_top_two.$join(",") + "]", res.$text()].$compact().$join(" ＞ ")];
            $send(res, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }

          ;
          return res;
        }, $SkynautsBouken_command_sn$3.$$arity = 1);
        Opal.def(self, '$command_d', $SkynautsBouken_command_d$4 = function $$command_d(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              fire_count = nil,
              fire_range = nil,
              ballistics = nil,
              points = nil,
              result = nil,
              dir = nil,
              diff_x = nil,
              diff_y = nil,
              $writer = nil;
          m = $$($nesting, 'D_REGEXP').$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          fire_count = m['$[]'](3).$to_i();
          fire_range = m['$[]'](1).$to_s();
          ballistics = m['$[]'](5).$to_i();
          points = self.$get_fire_points(fire_count, fire_range);
          command = command.$sub("SF/", "[大揺れ,火災]/").$sub("FS/", "[火災,大揺れ]/").$sub("F/", "[火災]/").$sub("S/", "[大揺れ]/");
          result = ["" + "(" + command + ")", self.$get_points_text(points, 0, 0)];

          if ($truthy(ballistics['$!='](0))) {
            dir = $$($nesting, 'DIRECTION_INFOS')['$[]'](ballistics);
            $b = dir['$[]']("position_diff"), $a = Opal.to_ary($b), diff_x = $a[0] == null ? nil : $a[0], diff_y = $a[1] == null ? nil : $a[1], $b;
            $writer = [-1, $rb_plus(result['$[]'](-1), "\n")];
            $send(result, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            result['$<<']("" + "《弾道学》" + dir['$[]']("name"));
            result['$<<'](self.$get_points_text(points, diff_x, diff_y));
          }

          ;
          return result.$compact().$join(" ＞ ");
        }, $SkynautsBouken_command_d$4.$$arity = 1);
        Opal.def(self, '$command_avo', $SkynautsBouken_command_avo$5 = function $$command_avo(command) {
          var $a,
              $b,
              _$$,
              self = this,
              dmg = nil,
              dir = nil,
              diff_x = nil,
              diff_y = nil;

          self.$debug("AVO", command);
          dmg = command.$match(/^AVO@([2468])(.*?)$/);

          if ($truthy(dmg)) {} else {
            return nil;
          }

          ;
          dir = $$($nesting, 'DIRECTION_INFOS')['$[]'](dmg['$[]'](1).$to_i());
          $b = dir['$[]']("position_diff"), $a = Opal.to_ary($b), diff_x = $a[0] == null ? nil : $a[0], diff_y = $a[1] == null ? nil : $a[1], $b;
          return $rb_plus("" + "《回避運動》" + dir['$[]']("name") + " ＞ ", $send(dmg['$[]'](2), 'gsub', [/\(?\[(\d),(\d{1,2})\]\)?/], (_$$ = function $$6() {
            var self = _$$.$$s == null ? this : _$$.$$s,
                y = nil,
                x = nil;
            y = $rb_plus($$($nesting, 'Regexp').$last_match(1).$to_i(), diff_y);
            x = $rb_plus($$($nesting, 'Regexp').$last_match(2).$to_i(), diff_x);
            return self.$get_xy_text(x, y);
          }, _$$.$$s = self, _$$.$$arity = 0, _$$)));
        }, $SkynautsBouken_command_avo$5.$$arity = 1);
        Opal.def(self, '$command_snavo', $SkynautsBouken_command_snavo$7 = function $$command_snavo(command) {
          var $a,
              $b,
              self = this,
              sn = nil,
              avo = nil,
              am = nil,
              res = nil,
              $writer = nil;
          $b = command.$split(/\/?AVO/, 2), $a = Opal.to_ary($b), sn = $a[0] == null ? nil : $a[0], avo = $a[1] == null ? nil : $a[1], $b;
          self.$debug("SNAVO", sn, avo);
          am = /^@([2468])(.*?)$/.$match(avo);

          if ($truthy(am)) {} else {
            return nil;
          }

          ;
          res = self.$command_sn(sn);

          if ($truthy(res)) {} else {
            return nil;
          }

          ;

          if ($truthy(res['$success?']())) {
            $writer = [$rb_plus(res.$text(), $rb_plus("\n ＞ ", self.$command_avo($rb_plus("AVO", avo))))];
            $send(res, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }

          ;
          return res;
        }, $SkynautsBouken_command_snavo$7.$$arity = 1);
        Opal.def(self, '$command_snd', $SkynautsBouken_command_snd$8 = function $$command_snd(command) {
          var $a,
              $b,
              self = this,
              sn = nil,
              d = nil,
              m = nil,
              res = nil,
              $writer = nil;
          $b = command.$split(/\/?D/, 2), $a = Opal.to_ary($b), sn = $a[0] == null ? nil : $a[0], d = $a[1] == null ? nil : $a[1], $b;
          self.$debug("SND", sn, d);
          m = $$($nesting, 'D_REGEXP').$match("" + "D" + d);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          res = self.$command_sn(sn);

          if ($truthy(res)) {} else {
            return nil;
          }

          ;

          if ($truthy(res['$success?']())) {
            $writer = [$rb_plus(res.$text(), "" + "\n ＞ " + self.$command_d($rb_plus("D", d)))];
            $send(res, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }

          ;
          return res;
        }, $SkynautsBouken_command_snd$8.$$arity = 1);
        Opal.def(self, '$get_points_text', $SkynautsBouken_get_points_text$9 = function $$get_points_text(points, diff_x, diff_y) {
          var _$$3,
              self = this;

          return $rb_plus("[縦,横]=", $send(points, 'map', [], (_$$3 = function $$10(list) {
            var self = _$$3.$$s == null ? this : _$$3.$$s,
                _$$2;

            if (list == null) {
              list = nil;
            }

            ;
            return $send(list, 'map', [], (_$$2 = function $$11(x, y) {
              var self = _$$2.$$s == null ? this : _$$2.$$s;

              if (x == null) {
                x = nil;
              }

              ;

              if (y == null) {
                y = nil;
              }

              ;
              return self.$get_xy_text($rb_plus(x, diff_x), $rb_plus(y, diff_y));
            }, _$$2.$$s = self, _$$2.$$arity = 2, _$$2)).$join();
          }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3)).$join(","));
        }, $SkynautsBouken_get_points_text$9.$$arity = 3);
        Opal.def(self, '$get_xy_text', $SkynautsBouken_get_xy_text$12 = function $$get_xy_text(x, y) {
          var self = this,
              $ret_or_6 = nil;

          if ($truthy(function () {
            if ($truthy($ret_or_6 = $range(2, 12, false)['$include?'](x))) {
              return $range(1, 6, false)['$include?'](y);
            } else {
              return $ret_or_6;
            }

            ;
            return nil;
          }())) {
            return "" + "[" + y + "," + x + "]";
          } else {
            return "" + "([" + y + "," + x + "])";
          }
        }, $SkynautsBouken_get_xy_text$12.$$arity = 2);
        return (Opal.def(self, '$get_fire_points', $SkynautsBouken_get_fire_points$13 = function $$get_fire_points(fire_count, fire_range) {
          var _$$5,
              self = this,
              range = nil;

          range = $send(fire_range.$chars(), 'map', [], "to_i".$to_proc());
          return $send(fire_count.$times(), 'map', [], (_$$5 = function $$14() {
            var self = _$$5.$$s == null ? this : _$$5.$$s,
                _$$4,
                y = nil,
                x = nil;

            if (self.randomizer == null) self.randomizer = nil;
            y = self.randomizer.$roll_once(6);
            x = self.randomizer.$roll_sum(2, 6);
            return $rb_plus([[x, y]], $send(range, 'map', [], (_$$4 = function $$15(r) {
              var self = _$$4.$$s == null ? this : _$$4.$$s,
                  $a,
                  $b,
                  xdiff = nil,
                  ydiff = nil;

              if (r == null) {
                r = nil;
              }

              ;
              $b = $$($nesting, 'DIRECTION_INFOS')['$[]'](r)['$[]']("position_diff"), $a = Opal.to_ary($b), xdiff = $a[0] == null ? nil : $a[0], ydiff = $a[1] == null ? nil : $a[1], $b;
              return [$rb_plus(x, xdiff), $rb_plus(y, ydiff)];
            }, _$$4.$$s = self, _$$4.$$arity = 1, _$$4)));
          }, _$$5.$$s = self, _$$5.$$arity = 0, _$$5));
        }, $SkynautsBouken_get_fire_points$13.$$arity = 2), nil) && 'get_fire_points';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~SkynautsBouken~index.js.map