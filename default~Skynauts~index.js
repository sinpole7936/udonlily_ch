(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~Skynauts~index"],{

/***/ "KC31":
/*!****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Skynauts.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $hash = Opal.hash,
      $hash2 = Opal.hash2,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Skynauts');
        var $nesting = [self].concat($parent_nesting),
            $Skynauts_initialize$1,
            $Skynauts_eval_game_system_specific_command$2,
            $Skynauts_getJudgeResult$3,
            $Skynauts_navigationResult$4,
            $Skynauts_getDirectionInfo$5,
            $Skynauts_getFireResult$6,
            $Skynauts_getFirePoint$7,
            $Skynauts_getFirePointText$10,
            $Skynauts_isInMapPosition$13,
            $Skynauts_getMovePoint$14,
            $Skynauts_getBomberResult$15,
            $Skynauts_getAvoidResult$16,
            $Skynauts_scanFirePoints$17;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Skynauts");
        Opal.const_set($nesting[0], 'NAME', "歯車の塔の探空士（六畳間幻想空間）");
        Opal.const_set($nesting[0], 'SORT_KEY', "はくるまのとうのすかいのおつ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "◆判定　(SNn)、(2D6<=n)　n:目標値（省略時:7）\n" + "　例）SN5　SN5　SN(3+2)\n" + "◆航行チェック　(NV+n)　n:修正値（省略時:0）\n" + "　例）NV　NV+1\n" + "◆ダメージチェック　(Dx/y@m)　x:ダメージ左側の値、y:ダメージ右側の値\n" + "　m:《弾道学》（省略可）上:8、下:2、左:4、右:6\n" + "　飛空艇シート外の座標は()が付きます。\n" + "　例） D/4　D19/2　D/3@8　D[大揺れ]/2\n" + "◆砲撃判定+ダメージチェック　(BOMn/Dx/y@m)　n:目標値（省略時:7）\n" + "　x:ダメージ左側の値、y:ダメージ右側の値\n" + "　m:《弾道学》（省略可）上:8、下:2、左:4、右:6\n" + "　例） BOM/D/4　BOM9/D19/2@4\n" + "◆《回避運動》　(AVOn@mXX)　n:目標値（省略時:7）\n" + "　m:回避方向。上:8、下:2、左:4、右:6、XX：ダメージチェック結果\n" + "　例）\n" + "　AVO9@8[縦1,横4],[縦2,横6],[縦3,横8]　AVO@2[縦6,横4],[縦2,横6]\n");
        self.$register_prefix("D", "2D6<=", "SN", "NV", "AVO", "BOM");
        Opal.def(self, '$initialize', $Skynauts_initialize$1 = function $$initialize(command) {
          var $iter = $Skynauts_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Skynauts_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Skynauts_initialize$1, false, true), 'initialize', [command], null);
          return self.round_type = $$$($$($nesting, 'RoundType'), 'FLOOR');
        }, $Skynauts_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Skynauts_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil;
          self.$debug("\n=======================================\n");
          self.$debug("eval_game_system_specific_command command", command);
          result = self.$getJudgeResult(command);

          if ($truthy(result['$nil?']())) {} else {
            return result;
          }

          ;
          result = self.$navigationResult(command);

          if ($truthy(result['$nil?']())) {} else {
            return result;
          }

          ;
          result = self.$getFireResult(command);

          if ($truthy(result['$nil?']())) {} else {
            return result;
          }

          ;
          result = self.$getBomberResult(command);

          if ($truthy(result['$nil?']())) {} else {
            return result;
          }

          ;
          result = self.$getAvoidResult(command);

          if ($truthy(result['$nil?']())) {} else {
            return result;
          }

          ;
          self.$debug("rollCommand result");
          return nil;
        }, $Skynauts_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$getJudgeResult', $Skynauts_getJudgeResult$3 = function $$getJudgeResult(command) {
          var self = this,
              m = nil,
              $ret_or_1 = nil,
              target = nil,
              dice_list = nil,
              total = nil,
              diceText = nil,
              result = nil,
              text = nil;

          if ($truthy(m = function () {
            if ($truthy($ret_or_1 = /^2D6<=(\d)$/i.$match(command))) {
              return $ret_or_1;
            } else {
              return /^SN(\d*)$/i.$match(command);
            }

            ;
            return nil;
          }())) {} else {
            return nil;
          }

          ;
          self.$debug("====getJudgeResult====");

          target = function () {
            if ($truthy(m['$[]'](1)['$empty?']())) {
              return 7;
            } else {
              return m['$[]'](1).$to_i();
            }

            ;
            return nil;
          }();

          self.$debug("目標値", target);
          dice_list = self.randomizer.$roll_barabara(2, 6);
          total = dice_list.$sum();
          diceText = dice_list.$join(",");

          if ($truthy($rb_le(total, 2))) {
            result = "ファンブル";
          } else if ($truthy($rb_le(total, target))) {
            result = "成功";
          } else {
            result = "失敗";
          }

          ;
          text = "" + "(2D6<=" + target + ") ＞ " + total + "[" + diceText + "] ＞ " + total + " ＞ " + result;
          return text;
        }, $Skynauts_getJudgeResult$3.$$arity = 1);
        Opal.def(self, '$navigationResult', $Skynauts_navigationResult$4 = function $$navigationResult(command) {
          var self = this,
              m = nil,
              bonus = nil,
              total = nil,
              movePointBase = nil,
              movePoint = nil,
              text = nil;

          if ($truthy(m = /^NV(\+(\d+))?$/.$match(command))) {} else {
            return nil;
          }

          ;
          self.$debug("====navigationResult====");
          bonus = m['$[]'](2).$to_i();
          self.$debug("移動修正", bonus);
          total = self.randomizer.$roll_once(6);

          movePointBase = function () {
            if ($truthy($rb_le($rb_divide(total, 2).$to_i(), 0))) {
              return 1;
            } else {
              return $rb_divide(total, 2).$to_i();
            }

            ;
            return nil;
          }();

          movePoint = $rb_plus(movePointBase, bonus);
          self.$debug("移動エリア数", movePoint);
          text = "" + "航行チェック(最低1)　(1D6/2+" + bonus + ") ＞ " + total + " /2+" + bonus + " ＞ ";
          text = $rb_plus(text, "" + movePointBase + "+" + bonus + " ＞ " + movePoint + "エリア進む");
          return text;
        }, $Skynauts_navigationResult$4.$$arity = 1);
        Opal.const_set($nesting[0], 'DIRECTION_INFOS', $hash(1, $hash2(["name", "position_diff"], {
          "name": "左下",
          "position_diff": $hash2(["x", "y"], {
            "x": -1,
            "y": 1
          })
        }), 2, $hash2(["name", "position_diff"], {
          "name": "下",
          "position_diff": $hash2(["x", "y"], {
            "x": 0,
            "y": 1
          })
        }), 3, $hash2(["name", "position_diff"], {
          "name": "右下",
          "position_diff": $hash2(["x", "y"], {
            "x": 1,
            "y": 1
          })
        }), 4, $hash2(["name", "position_diff"], {
          "name": "左",
          "position_diff": $hash2(["x", "y"], {
            "x": -1,
            "y": 0
          })
        }), 6, $hash2(["name", "position_diff"], {
          "name": "右",
          "position_diff": $hash2(["x", "y"], {
            "x": 1,
            "y": 0
          })
        }), 7, $hash2(["name", "position_diff"], {
          "name": "左上",
          "position_diff": $hash2(["x", "y"], {
            "x": -1,
            "y": -1
          })
        }), 8, $hash2(["name", "position_diff"], {
          "name": "上",
          "position_diff": $hash2(["x", "y"], {
            "x": 0,
            "y": -1
          })
        }), 9, $hash2(["name", "position_diff"], {
          "name": "右上",
          "position_diff": $hash2(["x", "y"], {
            "x": 1,
            "y": -1
          })
        })).$freeze());
        Opal.def(self, '$getDirectionInfo', $Skynauts_getDirectionInfo$5 = function $$getDirectionInfo(direction, key, defaultValue) {
          var self = this,
              info = nil;

          if (defaultValue == null) {
            defaultValue = nil;
          }

          ;
          info = $$($nesting, 'DIRECTION_INFOS')['$[]'](direction.$to_i());

          if ($truthy(info['$nil?']())) {
            return defaultValue;
          }

          ;
          return info['$[]'](key);
        }, $Skynauts_getDirectionInfo$5.$$arity = -3);
        Opal.def(self, '$getFireResult', $Skynauts_getFireResult$6 = function $$getFireResult(command) {
          var self = this,
              m = nil,
              fireCount = nil,
              fireRange = nil,
              ballistics = nil,
              fireCountMax = nil,
              firePoint = nil,
              fireText = nil,
              text = nil;

          if ($truthy(m = /^D([12346789]*)(\[.+\])*\/(\d+)(@([2468]))?$/.$match(command))) {} else {
            return nil;
          }

          ;
          self.$debug("====getFireResult====");
          fireCount = m['$[]'](3).$to_i();
          fireRange = m['$[]'](1).$to_s();
          ballistics = m['$[]'](5).$to_i();
          self.$debug("fireCount", fireCount);
          self.$debug("fireRange", fireRange);
          self.$debug("ballistics", ballistics);
          fireCountMax = 25;
          fireCount = [fireCount, fireCountMax].$min();
          firePoint = self.$getFirePoint(fireRange, fireCount);
          fireText = self.$getFirePointText(firePoint, fireCount);

          if ($truthy(ballistics['$!='](0))) {
            fireText = $rb_plus(fireText, " ＞ 《弾道学》:");
            fireText = $rb_plus(fireText, self.$getDirectionInfo(ballistics, "name", ""));
            fireText = $rb_plus(fireText, "\n ＞ ");
            fireText = $rb_plus(fireText, self.$getFirePointText(firePoint, fireCount, ballistics));
          }

          ;
          text = "" + command + " ＞ " + fireText;
          return text;
        }, $Skynauts_getFireResult$6.$$arity = 1);
        Opal.def(self, '$getFirePoint', $Skynauts_getFirePoint$7 = function $$getFirePoint(fireRange, fireCount) {
          var _$$2,
              self = this,
              firePoint = nil;

          self.$debug("====getFirePoint====");
          firePoint = [];
          $send(fireCount, 'times', [], (_$$2 = function $$8(count) {
            var self = _$$2.$$s == null ? this : _$$2.$$s,
                _$$,
                yPos = nil,
                xPos = nil,
                position = nil;

            if (self.randomizer == null) self.randomizer = nil;

            if (count == null) {
              count = nil;
            }

            ;
            self.$debug("\n砲撃回数", $rb_plus(count, 1));
            firePoint['$<<']([]);
            yPos = self.randomizer.$roll_once(6);
            xPos = self.randomizer.$roll_sum(2, 6);
            position = [xPos, yPos];
            firePoint['$[]'](-1)['$<<'](position);
            self.$debug("着弾点", firePoint);
            return $send(fireRange.$split(/(?:)/), 'each', [], (_$$ = function $$9(rangeText) {
              var self = _$$.$$s == null ? this : _$$.$$s,
                  position_diff = nil;

              if (rangeText == null) {
                rangeText = nil;
              }

              ;
              self.$debug("範囲", rangeText);
              position_diff = self.$getDirectionInfo(rangeText, "position_diff", $hash2([], {}));
              position = [$rb_plus(xPos, position_diff['$[]']("x").$to_i()), $rb_plus(yPos, position_diff['$[]']("y").$to_i())];
              firePoint['$[]'](-1)['$<<'](position);
              return self.$debug("着弾点:範囲", firePoint);
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));
          self.$debug("\n最終着弾点", firePoint);
          return firePoint;
        }, $Skynauts_getFirePoint$7.$$arity = 2);
        Opal.def(self, '$getFirePointText', $Skynauts_getFirePointText$10 = function $$getFirePointText(firePoint, _fireCount, direction) {
          var _$$4,
              self = this,
              fireTextList = nil,
              fireText = nil;

          if (direction == null) {
            direction = 0;
          }

          ;
          self.$debug("====getFirePointText====");
          fireTextList = [];
          $send(firePoint, 'each', [], (_$$4 = function $$11(point) {
            var self = _$$4.$$s == null ? this : _$$4.$$s,
                _$$3,
                text = nil;

            if (point == null) {
              point = nil;
            }

            ;
            text = "";
            $send(point, 'each', [], (_$$3 = function $$12(x, y) {
              var self = _$$3.$$s == null ? this : _$$3.$$s,
                  $a,
                  $b;

              if (x == null) {
                x = nil;
              }

              ;

              if (y == null) {
                y = nil;
              }

              ;
              $b = self.$getMovePoint(x, y, direction), $a = Opal.to_ary($b), x = $a[0] == null ? nil : $a[0], y = $a[1] == null ? nil : $a[1], $b;
              text = $rb_plus(text, function () {
                if ($truthy(self.$isInMapPosition(x, y))) {
                  return "" + "[縦" + y + ",横" + x + "]";
                } else {
                  return "" + "([縦" + y + ",横" + x + "])";
                }

                ;
                return nil;
              }());
              return self.$debug("着弾点テキスト", text);
            }, _$$3.$$s = self, _$$3.$$arity = 2, _$$3));
            return fireTextList['$<<'](text);
          }, _$$4.$$s = self, _$$4.$$arity = 1, _$$4));
          fireText = fireTextList.$join(",");
          self.$debug("\n最終着弾点テキスト", fireText);
          return fireText;
        }, $Skynauts_getFirePointText$10.$$arity = -3);
        Opal.def(self, '$isInMapPosition', $Skynauts_isInMapPosition$13 = function $$isInMapPosition(x, y) {
          var self = this,
              $ret_or_2 = nil,
              $ret_or_3 = nil,
              $ret_or_4 = nil;

          if ($truthy($ret_or_2 = function () {
            if ($truthy($ret_or_3 = $rb_le(1, y))) {
              return $rb_le(y, 6);
            } else {
              return $ret_or_3;
            }

            ;
            return nil;
          }())) {
            if ($truthy($ret_or_4 = $rb_le(2, x))) {
              return $rb_le(x, 12);
            } else {
              return $ret_or_4;
            }

            ;
          } else {
            return $ret_or_2;
          }
        }, $Skynauts_isInMapPosition$13.$$arity = 2);
        Opal.def(self, '$getMovePoint', $Skynauts_getMovePoint$14 = function $$getMovePoint(x, y, direction) {
          var self = this,
              position_diff = nil;
          self.$debug("====getMovePoint====");
          self.$debug("方向", direction);
          self.$debug("座標移動前x", x);
          self.$debug("座標移動前y", y);
          position_diff = self.$getDirectionInfo(direction, "position_diff", $hash2([], {}));
          x = $rb_plus(x, position_diff['$[]']("x").$to_i());
          y = $rb_plus(y, position_diff['$[]']("y").$to_i());
          self.$debug("\n座標移動後x", x);
          self.$debug("座標移動後y", y);
          return [x, y];
        }, $Skynauts_getMovePoint$14.$$arity = 3);
        Opal.def(self, '$getBomberResult', $Skynauts_getBomberResult$15 = function $$getBomberResult(command) {
          var self = this,
              m = nil,
              target = nil,
              direction = nil,
              text = nil,
              fireCommand = nil;

          if ($truthy(m = /^BOM(\d*)?\/D([12346789]*)(\[.+\])*\/(\d+)(@([2468]))?$/i.$match(command))) {} else {
            return nil;
          }

          ;
          self.$debug("====getBomberResult====", command);
          target = m['$[]'](1).$to_s();
          direction = m['$[]'](6).$to_i();
          self.$debug("弾道学方向", direction);
          text = "" + command + " ＞ ";
          text = $rb_plus(text, self.$getJudgeResult($rb_plus("SN", target)));

          if ($truthy(text['$=~'](/成功/))) {} else {
            return text;
          }

          ;
          fireCommand = command.$slice(/D([12346789]*)(\[.+\])*\/(\d+)(@([2468]))?/);
          text = $rb_plus(text, "" + "\n ＞ " + self.$getFireResult(fireCommand));
          return text;
        }, $Skynauts_getBomberResult$15.$$arity = 1);
        Opal.def(self, '$getAvoidResult', $Skynauts_getAvoidResult$16 = function $$getAvoidResult(command) {
          var self = this,
              m = nil,
              direction = nil,
              judgeCommand = nil,
              text = nil,
              pointCommand = nil,
              firePoint = nil,
              fireCount = nil;

          if ($truthy(m = /^AVO(\d*)?(@([2468]))(\(?\[縦\d+,横\d+\]\)?,?)+$/.$match(command))) {} else {
            return nil;
          }

          ;
          self.$debug("====getAvoidResult====", command);
          direction = m['$[]'](3).$to_i();
          self.$debug("回避方向", direction);
          judgeCommand = command.$slice(/^AVO(\d*)?(@([2468]))/);
          text = "" + judgeCommand + " ＞ 《回避運動》";
          text = $rb_plus(text, self.$getJudgeResult($rb_plus("SN", $$($nesting, 'Regexp').$last_match(1).$to_s())));

          if ($truthy(text['$=~'](/成功/))) {} else {
            return text;
          }

          ;
          pointCommand = command.$slice(/(\(?\[縦\d+,横\d+\]\)?,?)+/);
          firePoint = self.$scanFirePoints(pointCommand);
          fireCount = firePoint.$size();
          text = $rb_plus(text, "" + "\n ＞ " + pointCommand);
          text = $rb_plus(text, " ＞ 《回避運動》:");
          text = $rb_plus(text, self.$getDirectionInfo(direction, "name", ""));
          text = $rb_plus(text, "\n ＞ ");
          text = $rb_plus(text, self.$getFirePointText(firePoint, fireCount, direction));
          return text;
        }, $Skynauts_getAvoidResult$16.$$arity = 1);
        return (Opal.def(self, '$scanFirePoints', $Skynauts_scanFirePoints$17 = function $$scanFirePoints(command) {
          var _$$6,
              self = this,
              firePoint = nil;

          self.$debug("====scanFirePoints====", command);
          command = command.$gsub(/\(|\)/, "");
          firePoint = [];
          $send(command.$split(/\],/), 'each', [], (_$$6 = function $$18(pointText) {
            var self = _$$6.$$s == null ? this : _$$6.$$s,
                _$$5;

            if (pointText == null) {
              pointText = nil;
            }

            ;
            self.$debug("pointText", pointText);
            firePoint['$<<']([]);
            return $send(pointText.$split(/\]/), 'each', [], (_$$5 = function $$19(point) {
              var self = _$$5.$$s == null ? this : _$$5.$$s,
                  y = nil,
                  x = nil,
                  $writer = nil;

              if (point == null) {
                point = nil;
              }

              ;
              self.$debug("point", point);
              firePoint['$[]'](-1)['$<<']([]);

              if ($truthy(point['$=~'](/[^\d]*(\d+),[^\d]*(\d+)/))) {} else {
                return nil;
              }

              ;
              y = $$($nesting, 'Regexp').$last_match(1).$to_i();
              x = $$($nesting, 'Regexp').$last_match(2).$to_i();
              $writer = [-1, [x, y]];
              $send(firePoint['$[]'](-1), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              ;
              return self.$debug("着弾点", firePoint);
            }, _$$5.$$s = self, _$$5.$$arity = 1, _$$5));
          }, _$$6.$$s = self, _$$6.$$arity = 1, _$$6));
          return firePoint;
        }, $Skynauts_scanFirePoints$17.$$arity = 1), nil) && 'scanFirePoints';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~Skynauts~index.js.map