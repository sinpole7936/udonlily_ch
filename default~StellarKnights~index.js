(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~StellarKnights~index"],{

/***/ "vikn":
/*!**********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/StellarKnights.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/table"] = function (Opal) {
  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2,
      $truthy = Opal.truthy;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Table');
        var $nesting = [self].concat($parent_nesting),
            $Table_from_i18n$1,
            $Table_initialize$2,
            $Table_roll$3,
            $Table_choice$4;
        self.$$prototype.times = self.$$prototype.sides = self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $Table_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale"], {
            "locale": locale
          }));
          return self.$new(table['$[]']("name"), table['$[]']("type"), table['$[]']("items"));
        }, $Table_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $Table_initialize$2 = function $$initialize(name, type, items) {
          var self = this,
              m = nil;
          self.name = name;
          self.items = items.$freeze();
          m = /(\d+)D(\d+)/i.$match(type);

          if ($truthy(m)) {} else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "Unexpected table type: " + type);
          }

          ;
          self.times = m['$[]'](1).$to_i();
          return self.sides = m['$[]'](2).$to_i();
        }, $Table_initialize$2.$$arity = 3);
        Opal.def(self, '$roll', $Table_roll$3 = function $$roll(bcdice) {
          var self = this,
              value = nil;
          value = bcdice.$roll_sum(self.times, self.sides);
          return self.$choice(value);
        }, $Table_roll$3.$$arity = 1);
        return (Opal.def(self, '$choice', $Table_choice$4 = function $$choice(value) {
          var self = this,
              index = nil;
          index = $rb_minus(value, self.times);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index));
        }, $Table_choice$4.$$arity = 1), nil) && 'choice';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


Opal.modules["bcdice/dice_table/d66_grid_table"] = function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'DiceTable');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'D66GridTable');
        var $nesting = [self].concat($parent_nesting),
            $D66GridTable_from_i18n$1,
            $D66GridTable_initialize$2,
            $D66GridTable_roll$3;
        self.$$prototype.name = self.$$prototype.items = nil;
        Opal.defs(self, '$from_i18n', $D66GridTable_from_i18n$1 = function $$from_i18n(key, locale) {
          var self = this,
              table = nil;
          table = $$($nesting, 'I18n').$t(key, $hash2(["locale", "raise"], {
            "locale": locale,
            "raise": true
          }));
          return self.$new(table['$[]']("name"), table['$[]']("items"));
        }, $D66GridTable_from_i18n$1.$$arity = 2);
        Opal.def(self, '$initialize', $D66GridTable_initialize$2 = function $$initialize(name, items) {
          var self = this;
          self.name = name;
          return self.items = items.$freeze();
        }, $D66GridTable_initialize$2.$$arity = 2);
        return (Opal.def(self, '$roll', $D66GridTable_roll$3 = function $$roll(randomizer) {
          var self = this,
              dice1 = nil,
              dice2 = nil,
              value = nil,
              index1 = nil,
              index2 = nil;
          dice1 = randomizer.$roll_once(6);
          dice2 = randomizer.$roll_once(6);
          value = $rb_plus($rb_times(dice1, 10), dice2);
          index1 = $rb_minus(dice1, 1);
          index2 = $rb_minus(dice2, 1);
          return $$($nesting, 'RollResult').$new(self.name, value, self.items['$[]'](index1)['$[]'](index2));
        }, $D66GridTable_roll$3.$$arity = 1), nil) && 'roll';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
};
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2,
      $range = Opal.range;
  self.$require("bcdice/dice_table/table");
  self.$require("bcdice/dice_table/d66_grid_table");
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StellarKnights');
        var $nesting = [self].concat($parent_nesting),
            $StellarKnights_initialize$1,
            $StellarKnights_eval_game_system_specific_command$2,
            $StellarKnights_resolute_action$3,
            $StellarKnights_parse_dice_change_rules$8,
            $StellarKnights_roll_all_situation_b2_tables$10,
            $StellarKnights_roll_all_situation_tables$12,
            $StellarKnights_roll_personality_table$14,
            $StellarKnights_roll_fragment_table$15;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "StellarKnights");
        Opal.const_set($nesting[0], 'NAME', "銀剣のステラナイツ");
        Opal.const_set($nesting[0], 'SORT_KEY', "きんけんのすてらないつ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定　nSK[d][,k>l,...]\n" + "[]内は省略可能。\n" + "n: ダイス数、d: アタック判定における対象の防御力、k, l: ダイスの出目がkならばlに変更（アマランサスのスキル「始まりの部屋」用）\n" + "d省略時はダイスを振った結果のみ表示。（nSKはnB6と同じ）\n" + "\n" + "4SK: ダイスを4個振って、その結果を表示\n" + "5SK3: 【アタック判定：5ダイス】、対象の防御力を3として成功数を表示\n" + "3SK,1>6: ダイスを3個振り、出目が1のダイスを全て6に変更し、その結果を表示\n" + "6SK4,1>6,2>6: 【アタック判定：6ダイス】、出目が1と2のダイスを全て6に変更、対象の防御力を4として成功数を表示\n" + "\n" + "・基本\n" + "TT：お題表\n" + "STA    ：シチュエーション表A：時間 (Situation Table A)\n" + "STB    ：シチュエーション表B：場所 (ST B)\n" + "STB2[n]：シチュエーション表B その2：学園編 (ST B 2)\n" + "　n: 1(アーセルトレイ), 2(イデアグロリア), 3(シトラ), 4(フィロソフィア), 5(聖アージェティア), 6(SoA)\n" + "STC    ：シチュエーション表C：話題 (ST C)\n" + "ALLS   ：シチュエーション表全てを一括で（学園編除く）\n" + "GAT：所属組織決定 (Gakuen Table)\n" + "HOT：希望表 (Hope Table)\n" + "DET：絶望表 (Despair Table)\n" + "WIT：願い事表 (Wish Table)\n" + "YST：あなたの物語表 (Your Story Table)\n" + "YSTA：あなたの物語表：異世界 (YST Another World)\n" + "PET：性格表 (Personality Table)\n" + "    性格表を2回振り、性格を決定する\n" + "\n" + "・霧と桜のマルジナリア\n" + "YSTM：あなたの物語表：マルジナリア世界 (YST Marginalia)\n" + "STM：シチュエーション表：マルジナリア世界 (ST Marginalia)\n" + "YSTL：あなたの物語表：手紙世界 (YST Letter)\n" + "YSTR：あなたの物語表：リコレクト・ドール (YST Recollect-doll)\n" + "STBR：シチュエーション表B：場所（リコレクト・ドール） (ST B Recollect-doll)\n" + "STCR：シチュエーション表C：リコレクト (ST C Recollect)\n" + "STBS：シチュエーション表B：シトラセッティング (ST B Sut Tu Real)\n" + "STE：シチュエーション表：エクリプス専用 (ST Eclipse)\n" + "\n" + "・紫弾のオルトリヴート\n" + "FT：フラグメント表 (Fragment Table)\n" + "    フラグメント表を５回振る\n" + "FTx：フラグメント表をx回振る\n" + "YSTB：あなたの物語表：ブリンガー (YST Bringer)\n" + "YSTF：あなたの物語表：フォージ (YST Forge)\n" + "STAL：シチュエーション表：オルトリヴート (ST Alt-Levoot)\n");
        Opal.def(self, '$initialize', $StellarKnights_initialize$1 = function $$initialize(command) {
          var $iter = $StellarKnights_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $StellarKnights_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $StellarKnights_initialize$1, false, true), 'initialize', [command], null);
          self.sort_barabara_dice = true;
          return self.d66_sort_type = $$$($$($nesting, 'D66SortType'), 'NO_SORT');
        }, $StellarKnights_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $StellarKnights_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              table = nil,
              m = nil,
              $ret_or_1 = nil,
              num = nil,
              $ret_or_2 = nil;
          command = command.$upcase();

          if ($truthy(table = $$($nesting, 'TABLES')['$[]'](command))) {
            return table.$roll(self.randomizer);
          } else if ($truthy(m = /(\d+)SK(\d)?((,\d>\d)+)?/.$match(command))) {
            return self.$resolute_action(m['$[]'](1).$to_i(), function () {
              if ($truthy($ret_or_1 = m['$[]'](2))) {
                return m['$[]'](2).$to_i();
              } else {
                return $ret_or_1;
              }

              ;
              return nil;
            }(), m['$[]'](3), command);
          } else if (command['$==']("STB2")) {
            return self.$roll_all_situation_b2_tables();
          } else if (command['$==']("ALLS")) {
            return self.$roll_all_situation_tables();
          } else if (command['$==']("PET")) {
            return self.$roll_personality_table();
          } else if ($truthy(m = /FT(\d+)?/.$match(command))) {
            num = function () {
              if ($truthy($ret_or_2 = m['$[]'](1))) {
                return $ret_or_2;
              } else {
                return 5;
              }

              ;
              return nil;
            }().$to_i();

            return self.$roll_fragment_table(num);
          } else {
            return nil;
          }

          ;
        }, $StellarKnights_eval_game_system_specific_command$2.$$arity = 1);
        self.$private();
        Opal.def(self, '$resolute_action', $StellarKnights_resolute_action$3 = function $$resolute_action(num_dices, defence, dice_change_text, command) {
          var _$$2,
              _$$3,
              _$$4,
              self = this,
              dices = nil,
              dice_text = nil,
              output = nil,
              dice_change_rules = nil,
              success = nil,
              failure = nil,
              success_num = nil;

          dices = self.randomizer.$roll_barabara(num_dices, 6).$sort();
          dice_text = dices.$join(",");
          output = "" + "(" + command + ") ＞ " + dice_text;
          dice_change_rules = self.$parse_dice_change_rules(dice_change_text);
          $send(dice_change_rules, 'each', [], (_$$2 = function $$4(rule) {
            var self = _$$2.$$s == null ? this : _$$2.$$s,
                _$$;

            if (rule == null) {
              rule = nil;
            }

            ;
            return $send(dices, 'map!', [], (_$$ = function $$5(val) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (val == null) {
                val = nil;
              }

              ;

              if (val['$=='](rule['$[]']("from"))) {
                return rule['$[]']("to");
              } else {
                return val;
              }

              ;
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2));

          if ($truthy(dice_change_rules['$empty?']())) {} else {
            dices['$sort!']();
            output = $rb_plus(output, "" + " ＞ [" + dices.$join(",") + "]");
          }

          ;

          if ($truthy(defence['$nil?']())) {
            success = false;
            failure = false;
          } else {
            success_num = $send(dices, 'count', [], (_$$3 = function $$6(val) {
              var self = _$$3.$$s == null ? this : _$$3.$$s;

              if (val == null) {
                val = nil;
              }

              ;
              return $rb_ge(val, defence);
            }, _$$3.$$s = self, _$$3.$$arity = 1, _$$3));
            output = $rb_plus(output, $rb_plus(" ＞ ", self.$translate("StellarKnights.SK.success_num", $hash2(["success_num"], {
              "success_num": success_num
            }))));
            success = $rb_gt(success_num, 0);
            failure = success['$!']();
          }

          ;
          return $send($$($nesting, 'Result').$new(output), 'tap', [], (_$$4 = function $$7(r) {
            var self = _$$4.$$s == null ? this : _$$4.$$s,
                $writer = nil;

            if (r == null) {
              r = nil;
            }

            ;
            $writer = [success];
            $send(r, 'success=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            ;
            $writer = [failure];
            $send(r, 'failure=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            ;
          }, _$$4.$$s = self, _$$4.$$arity = 1, _$$4));
        }, $StellarKnights_resolute_action$3.$$arity = 4);
        Opal.def(self, '$parse_dice_change_rules', $StellarKnights_parse_dice_change_rules$8 = function $$parse_dice_change_rules(text) {
          var _$$5,
              self = this;

          if ($truthy(text['$nil?']())) {
            return [];
          }

          ;
          text = text['$[]']($range(1, -1, false));
          return $send(text.$split(","), 'map', [], (_$$5 = function $$9(rule) {
            var self = _$$5.$$s == null ? this : _$$5.$$s,
                v = nil;

            if (rule == null) {
              rule = nil;
            }

            ;
            v = $send(rule.$split(">"), 'map', [], "to_i".$to_proc());
            return $hash2(["from", "to"], {
              "from": v['$[]'](0),
              "to": v['$[]'](1)
            });
          }, _$$5.$$s = self, _$$5.$$arity = 1, _$$5));
        }, $StellarKnights_parse_dice_change_rules$8.$$arity = 1);
        Opal.def(self, '$roll_all_situation_b2_tables', $StellarKnights_roll_all_situation_b2_tables$10 = function $$roll_all_situation_b2_tables() {
          var _$$6,
              self = this;

          return $send($range(1, 6, false), 'map', [], (_$$6 = function $$11(num) {
            var self = _$$6.$$s == null ? this : _$$6.$$s;
            if (self.randomizer == null) self.randomizer = nil;

            if (num == null) {
              num = nil;
            }

            ;
            return $$($nesting, 'TABLES')['$[]']("" + "STB2" + num).$roll(self.randomizer);
          }, _$$6.$$s = self, _$$6.$$arity = 1, _$$6)).$join("\n");
        }, $StellarKnights_roll_all_situation_b2_tables$10.$$arity = 0);
        Opal.def(self, '$roll_all_situation_tables', $StellarKnights_roll_all_situation_tables$12 = function $$roll_all_situation_tables() {
          var _$$7,
              self = this;

          return $send(["STA", "STB", "STC"], 'map', [], (_$$7 = function $$13(command) {
            var self = _$$7.$$s == null ? this : _$$7.$$s;
            if (self.randomizer == null) self.randomizer = nil;

            if (command == null) {
              command = nil;
            }

            ;
            return $$($nesting, 'TABLES')['$[]'](command).$roll(self.randomizer);
          }, _$$7.$$s = self, _$$7.$$arity = 1, _$$7)).$join("\n");
        }, $StellarKnights_roll_all_situation_tables$12.$$arity = 0);
        Opal.def(self, '$roll_personality_table', $StellarKnights_roll_personality_table$14 = function $$roll_personality_table() {
          var $a,
              $b,
              self = this,
              value1 = nil,
              index1 = nil,
              value2 = nil,
              index2 = nil,
              name = nil,
              result = nil;
          $b = self.$get_table_by_d66(self.$translate("StellarKnights.PET.items")), $a = Opal.to_ary($b), value1 = $a[0] == null ? nil : $a[0], index1 = $a[1] == null ? nil : $a[1], $b;
          $b = self.$get_table_by_d66(self.$translate("StellarKnights.PET.items")), $a = Opal.to_ary($b), value2 = $a[0] == null ? nil : $a[0], index2 = $a[1] == null ? nil : $a[1], $b;
          name = self.$translate("StellarKnights.PET.name");
          result = self.$translate("StellarKnights.PET.result", $hash2(["value1", "value2"], {
            "value1": value1,
            "value2": value2
          }));
          return "" + name + "(" + index1 + "," + index2 + ") ＞ " + result;
        }, $StellarKnights_roll_personality_table$14.$$arity = 0);
        Opal.def(self, '$roll_fragment_table', $StellarKnights_roll_fragment_table$15 = function $$roll_fragment_table(num) {
          var _$$8,
              _$$9,
              _$$10,
              self = this,
              results = nil,
              values = nil,
              indexes = nil,
              name = nil;

          if ($truthy($rb_le(num, 0))) {
            return nil;
          }

          ;
          results = $send($$($nesting, 'Array'), 'new', [num], (_$$8 = function $$16() {
            var self = _$$8.$$s == null ? this : _$$8.$$s;
            return self.$get_table_by_d66(self.$translate("StellarKnights.FT.items"));
          }, _$$8.$$s = self, _$$8.$$arity = 0, _$$8));
          values = $send(results, 'map', [], (_$$9 = function $$17(r) {
            var self = _$$9.$$s == null ? this : _$$9.$$s;

            if (r == null) {
              r = nil;
            }

            ;
            return r['$[]'](0);
          }, _$$9.$$s = self, _$$9.$$arity = 1, _$$9));
          indexes = $send(results, 'map', [], (_$$10 = function $$18(r) {
            var self = _$$10.$$s == null ? this : _$$10.$$s;

            if (r == null) {
              r = nil;
            }

            ;
            return r['$[]'](1);
          }, _$$10.$$s = self, _$$10.$$arity = 1, _$$10));
          name = self.$translate("StellarKnights.FT.name");
          return "" + name + "(" + indexes.$join(",") + ") ＞ " + values.$join(",");
        }, $StellarKnights_roll_fragment_table$15.$$arity = 1);

        (function (self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting),
              $translate_tables$19;
          self.$private();
          return (Opal.def(self, '$translate_tables', $translate_tables$19 = function $$translate_tables(locale) {
            var self = this;
            return $hash2(["TT", "STA", "STB", "STB21", "STB22", "STB23", "STB24", "STB25", "STB26", "STC", "GAT", "HOT", "DET", "WIT", "YST", "YSTA", "YSTM", "STM", "YSTL", "YSTR", "STBR", "STCR", "STBS", "STE", "YSTB", "YSTF", "STAL"], {
              "TT": $$$($$($nesting, 'DiceTable'), 'D66GridTable').$from_i18n("StellarKnights.tables.TT", locale),
              "STA": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StellarKnights.tables.STA", locale),
              "STB": $$$($$($nesting, 'DiceTable'), 'D66OneThirdTable').$from_i18n("StellarKnights.tables.STB", locale),
              "STB21": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StellarKnights.tables.STB21", locale),
              "STB22": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StellarKnights.tables.STB22", locale),
              "STB23": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StellarKnights.tables.STB23", locale),
              "STB24": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StellarKnights.tables.STB24", locale),
              "STB25": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StellarKnights.tables.STB25", locale),
              "STB26": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StellarKnights.tables.STB26", locale),
              "STC": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.STC", locale),
              "GAT": $$$($$($nesting, 'DiceTable'), 'Table').$from_i18n("StellarKnights.tables.GAT", locale),
              "HOT": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.HOT", locale),
              "DET": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.DET", locale),
              "WIT": $$$($$($nesting, 'DiceTable'), 'D66OneThirdTable').$from_i18n("StellarKnights.tables.WIT", locale),
              "YST": $$$($$($nesting, 'DiceTable'), 'D66OneThirdTable').$from_i18n("StellarKnights.tables.YST", locale),
              "YSTA": $$$($$($nesting, 'DiceTable'), 'D66OneThirdTable').$from_i18n("StellarKnights.tables.YSTA", locale),
              "YSTM": $$$($$($nesting, 'DiceTable'), 'D66OneThirdTable').$from_i18n("StellarKnights.tables.YSTM", locale),
              "STM": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.STM", locale),
              "YSTL": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.YSTL", locale),
              "YSTR": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.YSTR", locale),
              "STBR": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.STBR", locale),
              "STCR": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.STCR", locale),
              "STBS": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.STBS", locale),
              "STE": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.STE", locale),
              "YSTB": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.YSTB", locale),
              "YSTF": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.YSTF", locale),
              "STAL": $$$($$($nesting, 'DiceTable'), 'D66HalfGridTable').$from_i18n("StellarKnights.tables.STAL", locale)
            });
          }, $translate_tables$19.$$arity = 1), nil) && 'translate_tables';
        })(Opal.get_singleton_class(self), $nesting);

        Opal.const_set($nesting[0], 'TABLES', self.$translate_tables("ja_jp"));
        return self.$register_prefix("\\d+SK", "STB2", "ALLS", "PET", "FT", $$($nesting, 'TABLES').$keys());
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~StellarKnights~index.js.map