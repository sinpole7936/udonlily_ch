(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~TorgEternity~index"],{

/***/ "CaYn":
/*!********************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/TorgEternity.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TorgEternity');
        var $nesting = [self].concat($parent_nesting),
            $TorgEternity_eval_game_system_specific_command$1,
            $TorgEternity_replace_text$2,
            $TorgEternity_torg_check$4,
            $TorgEternity_getRolld20DiceCommandResult$5,
            $TorgEternity_getUpRollDiceCommandResult$6,
            $TorgEternity_getPossibilityRollDiceCommandResult$7,
            $TorgEternity_getBonusDamageDiceCommandResult$8,
            $TorgEternity_getSuccessLevelDiceCommandResult$9,
            $TorgEternity_getDamageResultDiceCommandResult$10,
            $TorgEternity_getRollBonusDiceCommandResult$11,
            $TorgEternity_get_torg_eternity_table_result$12,
            $TorgEternity_get_torg_eternity_modifier$14,
            $TorgEternity_torg_eternity_dice$15,
            $TorgEternity_get_torg_eternity_damage_bonus_dice$16,
            $TorgEternity_get_torg_eternity_success_level$17,
            $TorgEternity_get_torg_eternity_damage_result$18,
            $TorgEternity_get_torg_eternity_bonus$19;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "TorgEternity");
        Opal.const_set($nesting[0], 'NAME', "TORG Eternity");
        Opal.const_set($nesting[0], 'SORT_KEY', "とおくえたあにてい");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定\n" + "　・TG\n" + "　　\"TG[m]\"で1d20をロールします。[]内は省略可能。\n" + "　　mは技能基本値を入れて下さい。Rコマンドに読替されます。\n" + "　　振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n" + "　　(TORGダイスボットと同じ挙動をするコマンドです。ロールボーナスの読み替えのみ、Eternity版となります)\n" + "　・TE\n" + "　　\"TE\"で1d20をロールします。\n" + "　　振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n" + "　　出目1の時には「Mishap!　自動失敗！」と出力されます。\n" + "　・UP\n" + "　　\"UP\"で高揚状態のロール(通常の1d20に加え、1d20を追加で振り足し)を行います。\n" + "　　各ロールでの振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n" + "　　一投目で出目1の時には「Mishap!　自動失敗！」と出力され、二投目は行われません。\n" + "　・POS\n" + "　　\"POSm\"で、ポシビリティ使用による1d20のロールを行います。\n" + "　　mはポシビリティを使用する前のロール結果を入れて下さい。\n" + "　　出目が10未満の場合は、10への読み替えが行われます。\n" + "　　また、振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n" + "・ボーナスダメージロール\n" + "　\"xBD[+y]\"でロールします。[]内は省略可能。\n" + "　xはダメージダイス数。yはダメージ基本値 or 式を入れて下さい。\n" + "　xは1以上が必要です。0だとエラーが出力されます。マイナス値はコマンドとして認識されません。\n" + "　振り足し処理は自動で行われます。(振り足し発生時の目は、「5∞」と出力されます)\n" + "・各種表\n" + "　\"(表コマンド)(数値)\"で振ります。\n" + "　・成功レベル表「RTx or RESULTx」\n" + "　・ダメージ結果表「DTx or DAMAGEx」\n" + "　・ロールボーナス表「BTx+y or BONUSx+y or TOTALx+y」 xは数値, yは技能基本値\n");
        self.$register_prefix("TE", "UP", "POS", "\\d+BD", "TG", "RT", "Result", "DT", "damage", "BT", "bonus", "total", "1R20");
        Opal.def(self, '$eval_game_system_specific_command', $TorgEternity_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {
          var self = this,
              $ret_or_1 = nil,
              $ret_or_2 = nil,
              $ret_or_3 = nil,
              $ret_or_4 = nil,
              $ret_or_5 = nil,
              $ret_or_6 = nil,
              $ret_or_7 = nil;

          if ($truthy($ret_or_1 = function () {
            if ($truthy($ret_or_2 = function () {
              if ($truthy($ret_or_3 = function () {
                if ($truthy($ret_or_4 = function () {
                  if ($truthy($ret_or_5 = function () {
                    if ($truthy($ret_or_6 = function () {
                      if ($truthy($ret_or_7 = self.$torg_check(command))) {
                        return $ret_or_7;
                      } else {
                        return self.$getRolld20DiceCommandResult(command);
                      }

                      ;
                      return nil;
                    }())) {
                      return $ret_or_6;
                    } else {
                      return self.$getUpRollDiceCommandResult(command);
                    }

                    ;
                    return nil;
                  }())) {
                    return $ret_or_5;
                  } else {
                    return self.$getPossibilityRollDiceCommandResult(command);
                  }

                  ;
                  return nil;
                }())) {
                  return $ret_or_4;
                } else {
                  return self.$getBonusDamageDiceCommandResult(command);
                }

                ;
                return nil;
              }())) {
                return $ret_or_3;
              } else {
                return self.$getSuccessLevelDiceCommandResult(command);
              }

              ;
              return nil;
            }())) {
              return $ret_or_2;
            } else {
              return self.$getDamageResultDiceCommandResult(command);
            }

            ;
            return nil;
          }())) {
            return $ret_or_1;
          } else {
            return self.$getRollBonusDiceCommandResult(command);
          }
        }, $TorgEternity_eval_game_system_specific_command$1.$$arity = 1);
        Opal.def(self, '$replace_text', $TorgEternity_replace_text$2 = function $$replace_text(string) {
          var _$$,
              self = this;

          string = $send(string, 'gsub', [/TG(\d+)/i], (_$$ = function $$3() {
            var self = _$$.$$s == null ? this : _$$.$$s;
            return "" + "1R20+" + $$($nesting, 'Regexp').$last_match(1);
          }, _$$.$$s = self, _$$.$$arity = 0, _$$));
          string = string.$gsub(/TG/i, "1R20");
          return string;
        }, $TorgEternity_replace_text$2.$$arity = 1);
        Opal.def(self, '$torg_check', $TorgEternity_torg_check$4 = function $$torg_check(string) {
          var $a,
              $b,
              self = this,
              m = nil,
              mod = nil,
              skilled = nil,
              unskilled = nil,
              dice_str = nil,
              sk_bonus = nil,
              output = nil;
          string = self.$replace_text(string);
          m = /(^|\s)S?(1R20(([+-]\d+)*))(\s|$)/i.$match(string);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          string = m['$[]'](2);
          mod = m['$[]'](3);
          self.$debug(mod);

          if ($truthy(mod)) {
            mod = $$($nesting, 'ArithmeticEvaluator').$eval(mod);
          }

          ;
          self.$debug(mod);
          mod = mod.$to_i();
          $b = self.$torg_eternity_dice(false, false), $a = Opal.to_ary($b), skilled = $a[0] == null ? nil : $a[0], unskilled = $a[1] == null ? nil : $a[1], dice_str = $a[2] == null ? nil : $a[2], $b;
          sk_bonus = self.$get_torg_eternity_bonus(skilled);

          if ($truthy(mod)) {
            if ($truthy($rb_gt(mod, 0))) {
              output = "" + sk_bonus + "[" + dice_str + "]+" + mod;
            } else {
              output = "" + sk_bonus + "[" + dice_str + "]" + mod;
            }
          } else {
            output = "" + sk_bonus + "[" + dice_str + "]";
          }

          ;
          output = $rb_plus(output, $rb_plus(" ＞ ", $rb_plus(sk_bonus, mod).$to_s()));

          if ($truthy(skilled['$!='](unskilled))) {
            output = $rb_plus(output, $rb_plus($rb_plus("(技能無", $rb_plus(self.$get_torg_eternity_bonus(unskilled), mod).$to_s()), ")"));
          }

          ;
          output = "" + "(" + string + ") ＞ " + output;
          return output;
        }, $TorgEternity_torg_check$4.$$arity = 1);
        Opal.def(self, '$getRolld20DiceCommandResult', $TorgEternity_getRolld20DiceCommandResult$5 = function $$getRolld20DiceCommandResult(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              skilled = nil,
              unskilled = nil,
              dice_str = nil,
              mishap = nil,
              output = nil,
              value_skilled = nil,
              value_unskilled = nil;
          self.$debug("Torg Eternity Dice Roll Command ? ", command);
          m = /(^|\s)(S)?(TE)$/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          $b = self.$torg_eternity_dice(false, true), $a = Opal.to_ary($b), skilled = $a[0] == null ? nil : $a[0], unskilled = $a[1] == null ? nil : $a[1], dice_str = $a[2] == null ? nil : $a[2], mishap = $a[3] == null ? nil : $a[3], $b;

          if (mishap['$=='](1)) {
            output = "" + "d20ロール（通常） ＞ 1d20[" + dice_str + "] ＞ Mishap!　絶対失敗！";
          } else {
            value_skilled = self.$format("%+d", self.$get_torg_eternity_bonus(skilled));

            if ($truthy(skilled['$!='](unskilled))) {
              value_unskilled = self.$format("%+d", self.$get_torg_eternity_bonus(unskilled));
              output = "" + "d20ロール（通常） ＞ 1d20[" + dice_str + "] ＞ " + value_skilled + "[" + skilled + "]（技能有） / " + value_unskilled + "[" + unskilled + "]（技能無）";
            } else {
              output = "" + "d20ロール（通常） ＞ 1d20[" + dice_str + "] ＞ " + value_skilled + "[" + skilled + "]";
            }

            ;
          }

          ;
          return output;
        }, $TorgEternity_getRolld20DiceCommandResult$5.$$arity = 1);
        Opal.def(self, '$getUpRollDiceCommandResult', $TorgEternity_getUpRollDiceCommandResult$6 = function $$getUpRollDiceCommandResult(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              skilled1 = nil,
              unskilled1 = nil,
              dice_str1 = nil,
              mishap = nil,
              output = nil,
              skilled2 = nil,
              unskilled2 = nil,
              dice_str2 = nil,
              subtotal_skilled = nil,
              subtotal_unskilled = nil,
              value_skilled = nil,
              value_unskilled = nil;
          self.$debug("Torg Eternity Dice Roll ( UP ) Command ? ", command);
          m = /(^|\s)(S)?(UP)$/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          $b = self.$torg_eternity_dice(false, true), $a = Opal.to_ary($b), skilled1 = $a[0] == null ? nil : $a[0], unskilled1 = $a[1] == null ? nil : $a[1], dice_str1 = $a[2] == null ? nil : $a[2], mishap = $a[3] == null ? nil : $a[3], $b;

          if (mishap['$=='](1)) {
            output = "" + "d20ロール（高揚） ＞ 1d20[" + dice_str1 + "] ＞ Mishap!　絶対失敗！";
          } else {
            $b = self.$torg_eternity_dice(false, false), $a = Opal.to_ary($b), skilled2 = $a[0] == null ? nil : $a[0], unskilled2 = $a[1] == null ? nil : $a[1], dice_str2 = $a[2] == null ? nil : $a[2], $b;
            subtotal_skilled = $rb_plus(skilled1, skilled2);
            subtotal_unskilled = $rb_plus(unskilled1, unskilled2);
            value_skilled = self.$format("%+d", self.$get_torg_eternity_bonus(subtotal_skilled));

            if ($truthy(subtotal_skilled['$!='](subtotal_unskilled))) {
              value_unskilled = self.$format("%+d", self.$get_torg_eternity_bonus(subtotal_unskilled));
              output = "" + "d20ロール（高揚） ＞ 1d20[" + dice_str1 + "] + 1d20[" + dice_str2 + "] ＞ " + value_skilled + "[" + subtotal_skilled + "]（技能有） / " + value_unskilled + "[" + subtotal_unskilled + "]（技能無）";
            } else {
              output = "" + "d20ロール（高揚） ＞ 1d20[" + dice_str1 + "] + 1d20[" + dice_str2 + "] ＞ " + value_skilled + "[" + subtotal_skilled + "]";
            }

            ;
          }

          ;
          return output;
        }, $TorgEternity_getUpRollDiceCommandResult$6.$$arity = 1);
        Opal.def(self, '$getPossibilityRollDiceCommandResult', $TorgEternity_getPossibilityRollDiceCommandResult$7 = function $$getPossibilityRollDiceCommandResult(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              output_modifier = nil,
              skilled = nil,
              unskilled = nil,
              dice_str = nil,
              subtotal_skilled = nil,
              subtotal_unskilled = nil,
              value_skilled = nil,
              value_unskilled = nil,
              output = nil;
          self.$debug("Torg Eternity Possibility Roll Command ? ", command);
          m = /(^|\s)(S)?(POS)((\d+)(\+\d+)?)/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          output_modifier = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](4));
          $b = self.$torg_eternity_dice(true, false), $a = Opal.to_ary($b), skilled = $a[0] == null ? nil : $a[0], unskilled = $a[1] == null ? nil : $a[1], dice_str = $a[2] == null ? nil : $a[2], $b;
          subtotal_skilled = $rb_plus(skilled, output_modifier);
          subtotal_unskilled = $rb_plus(unskilled, output_modifier);
          value_skilled = self.$format("%+d", self.$get_torg_eternity_bonus(subtotal_skilled));

          if ($truthy(subtotal_skilled['$!='](subtotal_unskilled))) {
            value_unskilled = self.$format("%+d", self.$get_torg_eternity_bonus(subtotal_unskilled));
            output = "" + "d20ロール（ポシビリティ） ＞ " + output_modifier + "+1d20[" + dice_str + "] ＞ " + value_skilled + "[" + subtotal_skilled + "]（技能有） / " + value_unskilled + "[" + subtotal_unskilled + "]（技能無）";
          } else {
            output = "" + "d20ロール（ポシビリティ） ＞ " + output_modifier + "+1d20[" + dice_str + "] ＞ " + value_skilled + "[" + subtotal_skilled + "]";
          }

          ;
          return output;
        }, $TorgEternity_getPossibilityRollDiceCommandResult$7.$$arity = 1);
        Opal.def(self, '$getBonusDamageDiceCommandResult', $TorgEternity_getBonusDamageDiceCommandResult$8 = function $$getBonusDamageDiceCommandResult(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              number_bonus_die = nil,
              value_modifier = nil,
              output_modifier = nil,
              output = nil,
              value_roll = nil,
              output_roll = nil,
              output_value = nil;
          self.$debug("TorgEternity Bonus Damage Roll Command ? ", command);
          m = /(\d+)(BD)(([+\-]\d+)*)/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          number_bonus_die = m['$[]'](1).$to_i();
          $b = self.$get_torg_eternity_modifier(m['$[]'](3)), $a = Opal.to_ary($b), value_modifier = $a[0] == null ? nil : $a[0], output_modifier = $a[1] == null ? nil : $a[1], $b;

          if ($truthy($rb_le(number_bonus_die, 0))) {
            output = "エラーです。xBD (x≧1) として下さい";
          } else {
            $b = self.$get_torg_eternity_damage_bonus_dice(number_bonus_die), $a = Opal.to_ary($b), value_roll = $a[0] == null ? nil : $a[0], output_roll = $a[1] == null ? nil : $a[1], $b;
            output_value = $rb_plus(value_roll, value_modifier);
            output = "" + "ボーナスダメージロール(" + number_bonus_die + "BD" + output_modifier + ") ＞ " + value_roll + "[" + output_roll + "]" + output_modifier + " ＞ " + output_value + "ダメージ";
          }

          ;
          return output;
        }, $TorgEternity_getBonusDamageDiceCommandResult$8.$$arity = 1);
        Opal.def(self, '$getSuccessLevelDiceCommandResult', $TorgEternity_getSuccessLevelDiceCommandResult$9 = function $$getSuccessLevelDiceCommandResult(command) {
          var self = this,
              m = nil,
              value = nil,
              output = nil;
          self.$debug("TorgEternity Success Level Table Command ? ", command);
          m = /(RT|Result)(-*\d+([+\-]\d+)*)/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          value = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2));
          self.$debug(value);

          if ($truthy($rb_lt(value, 0))) {
            output = "Failure.";
          } else {
            output = self.$get_torg_eternity_success_level(value);
          }

          ;
          output = "" + "成功レベル表[" + value + "] ＞ " + output;
          self.$debug(output);
          return output;
        }, $TorgEternity_getSuccessLevelDiceCommandResult$9.$$arity = 1);
        Opal.def(self, '$getDamageResultDiceCommandResult', $TorgEternity_getDamageResultDiceCommandResult$10 = function $$getDamageResultDiceCommandResult(command) {
          var self = this,
              m = nil,
              value = nil,
              output = nil;
          self.$debug("TorgEternity Damage Result Table Command ? ", command);
          m = /(DT|Damage)(-*\d+([+\-]\d+)*)/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          value = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2));
          self.$debug(value);
          output = self.$get_torg_eternity_damage_result(value);
          output = "" + "ダメージ結果表[" + value + "] ＞ " + output;
          self.$debug(output);
          return output;
        }, $TorgEternity_getDamageResultDiceCommandResult$10.$$arity = 1);
        Opal.def(self, '$getRollBonusDiceCommandResult', $TorgEternity_getRollBonusDiceCommandResult$11 = function $$getRollBonusDiceCommandResult(command) {
          var $a,
              $b,
              self = this,
              m = nil,
              value_roll = nil,
              output_bonus = nil,
              value_modifier = nil,
              output_modifier = nil,
              output = nil,
              value_result = nil;
          self.$debug("TorgEternity Roll Bonus Table Command ? ", command);
          m = /(BT|Bonus|Total)(\d+)(([+\-]\d+)*)/i.$match(command);

          if ($truthy(m)) {} else {
            return nil;
          }

          ;
          value_roll = m['$[]'](2).$to_i();
          output_bonus = self.$get_torg_eternity_bonus(value_roll);
          self.$debug(output_bonus);
          $b = self.$get_torg_eternity_modifier(m['$[]'](3)), $a = Opal.to_ary($b), value_modifier = $a[0] == null ? nil : $a[0], output_modifier = $a[1] == null ? nil : $a[1], $b;

          if ($truthy($rb_le(value_roll, 1))) {
            output = "" + "ロールボーナス表[" + value_roll + "] ＞ Mishap!!";
          } else if ($truthy(output_modifier['$empty?']())) {
            output = "" + "ロールボーナス表[" + value_roll + "] ＞ " + output_bonus;
          } else {
            value_result = $rb_plus(output_bonus.$to_i(), value_modifier);
            self.$debug(value_result);
            output = "" + "ロールボーナス表[" + value_roll + "]" + output_modifier + " ＞ " + output_bonus + "[" + value_roll + "]" + output_modifier + " ＞ " + value_result;
          }

          ;
          self.$debug(output);
          return output;
        }, $TorgEternity_getRollBonusDiceCommandResult$11.$$arity = 1);
        Opal.def(self, '$get_torg_eternity_table_result', $TorgEternity_get_torg_eternity_table_result$12 = function $$get_torg_eternity_table_result(value, table) {
          var _$$2,
              self = this,
              output = nil;

          output = nil;

          (function () {
            var $brk = Opal.new_brk();

            try {
              return $send(table, 'each', [], (_$$2 = function $$13(item) {
                var self = _$$2.$$s == null ? this : _$$2.$$s,
                    item_index = nil;

                if (item == null) {
                  item = nil;
                }

                ;
                item_index = item['$[]'](0);

                if ($truthy($rb_gt(item_index, value))) {
                  Opal.brk(nil, $brk);
                }

                ;
                return output = item['$[]'](1);
              }, _$$2.$$s = self, _$$2.$$brk = $brk, _$$2.$$arity = 1, _$$2));
            } catch (err) {
              if (err === $brk) {
                return err.$v;
              } else {
                throw err;
              }
            }
          })();

          return output;
        }, $TorgEternity_get_torg_eternity_table_result$12.$$arity = 2);
        Opal.def(self, '$get_torg_eternity_modifier', $TorgEternity_get_torg_eternity_modifier$14 = function $$get_torg_eternity_modifier(string_modifier) {
          var self = this,
              value_modifier = nil,
              output_modifier = nil;
          self.$debug("" + "modifier check : " + string_modifier);

          if (string_modifier['$==']("")) {
            value_modifier = 0;
            output_modifier = "";
          } else {
            value_modifier = $$($nesting, 'ArithmeticEvaluator').$eval(string_modifier);
            output_modifier = self.$format("%+d", value_modifier);
          }

          ;
          self.$debug(value_modifier);
          self.$debug(output_modifier);
          return [value_modifier, output_modifier];
        }, $TorgEternity_get_torg_eternity_modifier$14.$$arity = 1);
        Opal.def(self, '$torg_eternity_dice', $TorgEternity_torg_eternity_dice$15 = function $$torg_eternity_dice(check_pos, check_mishap) {
          var $a,
              self = this,
              isSkilledCritical = nil,
              isCritical = nil,
              skilled = nil,
              unskilled = nil,
              mishap = nil,
              dice_str = nil,
              dice_n = nil,
              dice_str_now = nil;
          isSkilledCritical = true;
          isCritical = true;
          skilled = 0;
          unskilled = 0;
          mishap = 0;
          dice_str = "";

          while ($truthy(isSkilledCritical)) {
            if ($truthy(dice_str['$empty?']())) {} else {
              dice_str = $rb_plus(dice_str, ",");
            }

            ;
            dice_n = self.randomizer.$roll_once(20);

            if ($truthy(check_pos)) {
              if ($truthy($rb_lt(dice_n, 10))) {
                dice_str_now = "" + dice_n + "→10";
                dice_n = 10;
                isSkilledCritical = false;
              } else {
                dice_str_now = dice_n.$to_s();
              }

              ;
              dice_str = $rb_plus(dice_str, dice_str_now);
            } else {
              dice_str = $rb_plus(dice_str, dice_n.$to_s());
            }

            ;
            skilled = $rb_plus(skilled, dice_n);

            if ($truthy(isCritical)) {
              unskilled = $rb_plus(unskilled, dice_n);
            }

            ;

            if (dice_n['$=='](20)) {
              isCritical = false;
            } else if ($truthy(dice_n['$!='](10))) {
              isSkilledCritical = false;
              isCritical = false;

              if ($truthy(check_mishap['$&'](dice_n['$=='](1)))) {
                mishap = 1;
              }

              ;
            }

            ;
            check_pos = false;
            check_mishap = false;
          }

          ;
          return [skilled, unskilled, dice_str, mishap];
        }, $TorgEternity_torg_eternity_dice$15.$$arity = 2);
        Opal.def(self, '$get_torg_eternity_damage_bonus_dice', $TorgEternity_get_torg_eternity_damage_bonus_dice$16 = function $$get_torg_eternity_damage_bonus_dice(number) {
          var $a,
              self = this,
              value_roll = nil,
              output_roll = nil,
              dice_value = nil,
              dice_text = nil;
          self.$debug("" + "bonus dice roll : " + number);
          value_roll = 0;
          output_roll = "";

          if ($truthy($rb_gt(number, 0))) {
            value_roll = 0;
            output_roll = "";

            while ($truthy($rb_gt(number, 0))) {
              if ($truthy(output_roll['$empty?']())) {} else {
                output_roll = "" + output_roll + ",";
              }

              ;
              dice_value = self.randomizer.$roll_once(6);
              dice_text = dice_value.$to_s();

              if (dice_value['$=='](6)) {
                dice_value = 5;
                dice_text = "5∞";
                number = $rb_plus(number, 1);
              }

              ;
              value_roll = $rb_plus(value_roll, dice_value);
              output_roll = "" + output_roll + dice_text;
              self.$debug(value_roll);
              self.$debug(output_roll);
              number = $rb_minus(number, 1);
            }

            ;
          } else {
            output_roll = "0";
          }

          ;
          self.$debug(value_roll);
          self.$debug(output_roll);
          return [value_roll, output_roll];
        }, $TorgEternity_get_torg_eternity_damage_bonus_dice$16.$$arity = 1);
        Opal.def(self, '$get_torg_eternity_success_level', $TorgEternity_get_torg_eternity_success_level$17 = function $$get_torg_eternity_success_level(value) {
          var self = this,
              success_table = nil;
          success_table = [[0, "Success - Standard."], [5, "Success - Good!"], [10, "Success - Outstanding!!"]];
          return self.$get_torg_eternity_table_result(value, success_table);
        }, $TorgEternity_get_torg_eternity_success_level$17.$$arity = 1);
        Opal.def(self, '$get_torg_eternity_damage_result', $TorgEternity_get_torg_eternity_damage_result$18 = function $$get_torg_eternity_damage_result(value) {
          var self = this,
              damage_table = nil;
          damage_table = [[-50, "ノーダメージ"], [-5, "1ショック"], [0, "2ショック"], [5, "1レベル負傷 + 2ショック"], [10, "2レベル負傷 + 4ショック"], [15, "3レベル負傷 + 6ショック"], [20, "4レベル負傷 + 8ショック"], [25, "5レベル負傷 + 10ショック"], [30, "6レベル負傷 + 12ショック"], [35, "7レベル負傷 + 14ショック"], [40, "8レベル負傷 + 16ショック"], [45, "9レベル負傷 + 18ショック"], [50, "10レベル負傷 + 20ショック"]];
          return self.$get_torg_eternity_table_result(value, damage_table);
        }, $TorgEternity_get_torg_eternity_damage_result$18.$$arity = 1);
        return (Opal.def(self, '$get_torg_eternity_bonus', $TorgEternity_get_torg_eternity_bonus$19 = function $$get_torg_eternity_bonus(value) {
          var self = this,
              bonus_table = nil,
              bonus = nil,
              over_value_bonus = nil;
          bonus_table = [[1, -10], [2, -8], [3, -6], [5, -4], [7, -2], [9, -1], [11, 0], [13, 1], [15, 2], [16, 3], [17, 4], [18, 5], [19, 6], [20, 7]];
          bonus = self.$get_torg_eternity_table_result(value, bonus_table);

          if ($truthy($rb_gt(value, 20))) {
            over_value_bonus = $rb_plus($rb_divide($rb_minus(value, 21), 5).$to_i(), 1);
            bonus = $rb_plus(bonus, over_value_bonus);
          }

          ;
          return bonus;
        }, $TorgEternity_get_torg_eternity_bonus$19.$$arity = 1), nil) && 'get_torg_eternity_bonus';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~TorgEternity~index.js.map