{"version":3,"sources":["./node_modules/bcdice/lib/bcdice/game_system/TorgEternity.js"],"names":["require","Opal","$rb_gt","lhs","rhs","$rb_plus","$rb_le","$rb_lt","$rb_minus","$rb_divide","self","top","$nesting","nil","$$$","$$","$module","module","$klass","klass","$truthy","truthy","$send","send","$base","$parent_nesting","concat","$super","$TorgEternity_eval_game_system_specific_command$1","$TorgEternity_replace_text$2","$TorgEternity_torg_check$4","$TorgEternity_getRolld20DiceCommandResult$5","$TorgEternity_getUpRollDiceCommandResult$6","$TorgEternity_getPossibilityRollDiceCommandResult$7","$TorgEternity_getBonusDamageDiceCommandResult$8","$TorgEternity_getSuccessLevelDiceCommandResult$9","$TorgEternity_getDamageResultDiceCommandResult$10","$TorgEternity_getRollBonusDiceCommandResult$11","$TorgEternity_get_torg_eternity_table_result$12","$TorgEternity_get_torg_eternity_modifier$14","$TorgEternity_torg_eternity_dice$15","$TorgEternity_get_torg_eternity_damage_bonus_dice$16","$TorgEternity_get_torg_eternity_success_level$17","$TorgEternity_get_torg_eternity_damage_result$18","$TorgEternity_get_torg_eternity_bonus$19","$$prototype","randomizer","const_set","$register_prefix","def","$$eval_game_system_specific_command","command","$ret_or_1","$ret_or_2","$ret_or_3","$ret_or_4","$ret_or_5","$ret_or_6","$ret_or_7","$torg_check","$getRolld20DiceCommandResult","$getUpRollDiceCommandResult","$getPossibilityRollDiceCommandResult","$getBonusDamageDiceCommandResult","$getSuccessLevelDiceCommandResult","$getDamageResultDiceCommandResult","$getRollBonusDiceCommandResult","$$arity","$$replace_text","string","$$3","$$s","$last_match","$gsub","$$torg_check","$a","$b","m","mod","skilled","unskilled","dice_str","sk_bonus","output","$replace_text","$match","$debug","$eval","$to_i","$torg_eternity_dice","to_ary","$get_torg_eternity_bonus","$to_s","$$getRolld20DiceCommandResult","mishap","value_skilled","value_unskilled","$format","$$getUpRollDiceCommandResult","skilled1","unskilled1","dice_str1","skilled2","unskilled2","dice_str2","subtotal_skilled","subtotal_unskilled","$$getPossibilityRollDiceCommandResult","output_modifier","$$getBonusDamageDiceCommandResult","number_bonus_die","value_modifier","value_roll","output_roll","output_value","$get_torg_eternity_modifier","$get_torg_eternity_damage_bonus_dice","$$getSuccessLevelDiceCommandResult","value","$get_torg_eternity_success_level","$$getDamageResultDiceCommandResult","$get_torg_eternity_damage_result","$$getRollBonusDiceCommandResult","output_bonus","value_result","$$get_torg_eternity_table_result","table","$$13","$brk","new_brk","item","item_index","brk","$$brk","err","$v","$$get_torg_eternity_modifier","string_modifier","$$torg_eternity_dice","check_pos","check_mishap","isSkilledCritical","isCritical","dice_n","dice_str_now","$roll_once","$$get_torg_eternity_damage_bonus_dice","number","dice_value","dice_text","$$get_torg_eternity_success_level","success_table","$get_torg_eternity_table_result","$$get_torg_eternity_damage_result","damage_table","$$get_torg_eternity_bonus","bonus_table","bonus","over_value_bonus"],"mappings":"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","file":"default~TorgEternity~index.js","sourcesContent":["require('./../opal');\n\n/* Generated by Opal 1.1.1 */\n(function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'BCDice');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'GameSystem');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'TorgEternity');\n\n        var $nesting = [self].concat($parent_nesting), $TorgEternity_eval_game_system_specific_command$1, $TorgEternity_replace_text$2, $TorgEternity_torg_check$4, $TorgEternity_getRolld20DiceCommandResult$5, $TorgEternity_getUpRollDiceCommandResult$6, $TorgEternity_getPossibilityRollDiceCommandResult$7, $TorgEternity_getBonusDamageDiceCommandResult$8, $TorgEternity_getSuccessLevelDiceCommandResult$9, $TorgEternity_getDamageResultDiceCommandResult$10, $TorgEternity_getRollBonusDiceCommandResult$11, $TorgEternity_get_torg_eternity_table_result$12, $TorgEternity_get_torg_eternity_modifier$14, $TorgEternity_torg_eternity_dice$15, $TorgEternity_get_torg_eternity_damage_bonus_dice$16, $TorgEternity_get_torg_eternity_success_level$17, $TorgEternity_get_torg_eternity_damage_result$18, $TorgEternity_get_torg_eternity_bonus$19;\n\n        self.$$prototype.randomizer = nil;\n        \n        Opal.const_set($nesting[0], 'ID', \"TorgEternity\");\n        Opal.const_set($nesting[0], 'NAME', \"TORG Eternity\");\n        Opal.const_set($nesting[0], 'SORT_KEY', \"とおくえたあにてい\");\n        Opal.const_set($nesting[0], 'HELP_MESSAGE', \"\" + \"・判定\\n\" + \"　・TG\\n\" + \"　　\\\"TG[m]\\\"で1d20をロールします。[]内は省略可能。\\n\" + \"　　mは技能基本値を入れて下さい。Rコマンドに読替されます。\\n\" + \"　　振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\\n\" + \"　　(TORGダイスボットと同じ挙動をするコマンドです。ロールボーナスの読み替えのみ、Eternity版となります)\\n\" + \"　・TE\\n\" + \"　　\\\"TE\\\"で1d20をロールします。\\n\" + \"　　振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\\n\" + \"　　出目1の時には「Mishap!　自動失敗！」と出力されます。\\n\" + \"　・UP\\n\" + \"　　\\\"UP\\\"で高揚状態のロール(通常の1d20に加え、1d20を追加で振り足し)を行います。\\n\" + \"　　各ロールでの振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\\n\" + \"　　一投目で出目1の時には「Mishap!　自動失敗！」と出力され、二投目は行われません。\\n\" + \"　・POS\\n\" + \"　　\\\"POSm\\\"で、ポシビリティ使用による1d20のロールを行います。\\n\" + \"　　mはポシビリティを使用する前のロール結果を入れて下さい。\\n\" + \"　　出目が10未満の場合は、10への読み替えが行われます。\\n\" + \"　　また、振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\\n\" + \"・ボーナスダメージロール\\n\" + \"　\\\"xBD[+y]\\\"でロールします。[]内は省略可能。\\n\" + \"　xはダメージダイス数。yはダメージ基本値 or 式を入れて下さい。\\n\" + \"　xは1以上が必要です。0だとエラーが出力されます。マイナス値はコマンドとして認識されません。\\n\" + \"　振り足し処理は自動で行われます。(振り足し発生時の目は、「5∞」と出力されます)\\n\" + \"・各種表\\n\" + \"　\\\"(表コマンド)(数値)\\\"で振ります。\\n\" + \"　・成功レベル表「RTx or RESULTx」\\n\" + \"　・ダメージ結果表「DTx or DAMAGEx」\\n\" + \"　・ロールボーナス表「BTx+y or BONUSx+y or TOTALx+y」 xは数値, yは技能基本値\\n\");\n        self.$register_prefix(\"TE\", \"UP\", \"POS\", \"\\\\d+BD\", \"TG\", \"RT\", \"Result\", \"DT\", \"damage\", \"BT\", \"bonus\", \"total\", \"1R20\");\n        \n        Opal.def(self, '$eval_game_system_specific_command', $TorgEternity_eval_game_system_specific_command$1 = function $$eval_game_system_specific_command(command) {\n          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil, $ret_or_6 = nil, $ret_or_7 = nil;\n\n          if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = (function() {if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = self.$torg_check(command)))) {\n            return $ret_or_7\n          } else {\n            return self.$getRolld20DiceCommandResult(command)\n          }; return nil; })()))) {\n            return $ret_or_6\n          } else {\n            return self.$getUpRollDiceCommandResult(command)\n          }; return nil; })()))) {\n            return $ret_or_5\n          } else {\n            return self.$getPossibilityRollDiceCommandResult(command)\n          }; return nil; })()))) {\n            return $ret_or_4\n          } else {\n            return self.$getBonusDamageDiceCommandResult(command)\n          }; return nil; })()))) {\n            return $ret_or_3\n          } else {\n            return self.$getSuccessLevelDiceCommandResult(command)\n          }; return nil; })()))) {\n            return $ret_or_2\n          } else {\n            return self.$getDamageResultDiceCommandResult(command)\n          }; return nil; })()))) {\n            return $ret_or_1\n          } else {\n            return self.$getRollBonusDiceCommandResult(command)\n          }\n        }, $TorgEternity_eval_game_system_specific_command$1.$$arity = 1);\n        \n        Opal.def(self, '$replace_text', $TorgEternity_replace_text$2 = function $$replace_text(string) {\n          var $$3, self = this;\n\n          \n          string = $send(string, 'gsub', [/TG(\\d+)/i], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;\n\n          return \"\" + \"1R20+\" + ($$($nesting, 'Regexp').$last_match(1))}, $$3.$$s = self, $$3.$$arity = 0, $$3));\n          string = string.$gsub(/TG/i, \"1R20\");\n          return string;\n        }, $TorgEternity_replace_text$2.$$arity = 1);\n        \n        Opal.def(self, '$torg_check', $TorgEternity_torg_check$4 = function $$torg_check(string) {\n          var $a, $b, self = this, m = nil, mod = nil, skilled = nil, unskilled = nil, dice_str = nil, sk_bonus = nil, output = nil;\n\n          \n          string = self.$replace_text(string);\n          m = /(^|\\s)S?(1R20(([+-]\\d+)*))(\\s|$)/i.$match(string);\n          if ($truthy(m)) {\n          } else {\n            return nil\n          };\n          string = m['$[]'](2);\n          mod = m['$[]'](3);\n          self.$debug(mod);\n          if ($truthy(mod)) {\n            mod = $$($nesting, 'ArithmeticEvaluator').$eval(mod)};\n          self.$debug(mod);\n          mod = mod.$to_i();\n          $b = self.$torg_eternity_dice(false, false), $a = Opal.to_ary($b), (skilled = ($a[0] == null ? nil : $a[0])), (unskilled = ($a[1] == null ? nil : $a[1])), (dice_str = ($a[2] == null ? nil : $a[2])), $b;\n          sk_bonus = self.$get_torg_eternity_bonus(skilled);\n          if ($truthy(mod)) {\n            if ($truthy($rb_gt(mod, 0))) {\n              output = \"\" + (sk_bonus) + \"[\" + (dice_str) + \"]+\" + (mod)\n            } else {\n              output = \"\" + (sk_bonus) + \"[\" + (dice_str) + \"]\" + (mod)\n            }\n          } else {\n            output = \"\" + (sk_bonus) + \"[\" + (dice_str) + \"]\"\n          };\n          output = $rb_plus(output, $rb_plus(\" ＞ \", $rb_plus(sk_bonus, mod).$to_s()));\n          if ($truthy(skilled['$!='](unskilled))) {\n            output = $rb_plus(output, $rb_plus($rb_plus(\"(技能無\", $rb_plus(self.$get_torg_eternity_bonus(unskilled), mod).$to_s()), \")\"))};\n          output = \"\" + \"(\" + (string) + \") ＞ \" + (output);\n          return output;\n        }, $TorgEternity_torg_check$4.$$arity = 1);\n        \n        Opal.def(self, '$getRolld20DiceCommandResult', $TorgEternity_getRolld20DiceCommandResult$5 = function $$getRolld20DiceCommandResult(command) {\n          var $a, $b, self = this, m = nil, skilled = nil, unskilled = nil, dice_str = nil, mishap = nil, output = nil, value_skilled = nil, value_unskilled = nil;\n\n          \n          self.$debug(\"Torg Eternity Dice Roll Command ? \", command);\n          m = /(^|\\s)(S)?(TE)$/i.$match(command);\n          if ($truthy(m)) {\n          } else {\n            return nil\n          };\n          $b = self.$torg_eternity_dice(false, true), $a = Opal.to_ary($b), (skilled = ($a[0] == null ? nil : $a[0])), (unskilled = ($a[1] == null ? nil : $a[1])), (dice_str = ($a[2] == null ? nil : $a[2])), (mishap = ($a[3] == null ? nil : $a[3])), $b;\n          if (mishap['$=='](1)) {\n            output = \"\" + \"d20ロール（通常） ＞ 1d20[\" + (dice_str) + \"] ＞ Mishap!　絶対失敗！\"\n          } else {\n            \n            value_skilled = self.$format(\"%+d\", self.$get_torg_eternity_bonus(skilled));\n            if ($truthy(skilled['$!='](unskilled))) {\n              \n              value_unskilled = self.$format(\"%+d\", self.$get_torg_eternity_bonus(unskilled));\n              output = \"\" + \"d20ロール（通常） ＞ 1d20[\" + (dice_str) + \"] ＞ \" + (value_skilled) + \"[\" + (skilled) + \"]（技能有） / \" + (value_unskilled) + \"[\" + (unskilled) + \"]（技能無）\";\n            } else {\n              output = \"\" + \"d20ロール（通常） ＞ 1d20[\" + (dice_str) + \"] ＞ \" + (value_skilled) + \"[\" + (skilled) + \"]\"\n            };\n          };\n          return output;\n        }, $TorgEternity_getRolld20DiceCommandResult$5.$$arity = 1);\n        \n        Opal.def(self, '$getUpRollDiceCommandResult', $TorgEternity_getUpRollDiceCommandResult$6 = function $$getUpRollDiceCommandResult(command) {\n          var $a, $b, self = this, m = nil, skilled1 = nil, unskilled1 = nil, dice_str1 = nil, mishap = nil, output = nil, skilled2 = nil, unskilled2 = nil, dice_str2 = nil, subtotal_skilled = nil, subtotal_unskilled = nil, value_skilled = nil, value_unskilled = nil;\n\n          \n          self.$debug(\"Torg Eternity Dice Roll ( UP ) Command ? \", command);\n          m = /(^|\\s)(S)?(UP)$/i.$match(command);\n          if ($truthy(m)) {\n          } else {\n            return nil\n          };\n          $b = self.$torg_eternity_dice(false, true), $a = Opal.to_ary($b), (skilled1 = ($a[0] == null ? nil : $a[0])), (unskilled1 = ($a[1] == null ? nil : $a[1])), (dice_str1 = ($a[2] == null ? nil : $a[2])), (mishap = ($a[3] == null ? nil : $a[3])), $b;\n          if (mishap['$=='](1)) {\n            output = \"\" + \"d20ロール（高揚） ＞ 1d20[\" + (dice_str1) + \"] ＞ Mishap!　絶対失敗！\"\n          } else {\n            \n            $b = self.$torg_eternity_dice(false, false), $a = Opal.to_ary($b), (skilled2 = ($a[0] == null ? nil : $a[0])), (unskilled2 = ($a[1] == null ? nil : $a[1])), (dice_str2 = ($a[2] == null ? nil : $a[2])), $b;\n            subtotal_skilled = $rb_plus(skilled1, skilled2);\n            subtotal_unskilled = $rb_plus(unskilled1, unskilled2);\n            value_skilled = self.$format(\"%+d\", self.$get_torg_eternity_bonus(subtotal_skilled));\n            if ($truthy(subtotal_skilled['$!='](subtotal_unskilled))) {\n              \n              value_unskilled = self.$format(\"%+d\", self.$get_torg_eternity_bonus(subtotal_unskilled));\n              output = \"\" + \"d20ロール（高揚） ＞ 1d20[\" + (dice_str1) + \"] + 1d20[\" + (dice_str2) + \"] ＞ \" + (value_skilled) + \"[\" + (subtotal_skilled) + \"]（技能有） / \" + (value_unskilled) + \"[\" + (subtotal_unskilled) + \"]（技能無）\";\n            } else {\n              output = \"\" + \"d20ロール（高揚） ＞ 1d20[\" + (dice_str1) + \"] + 1d20[\" + (dice_str2) + \"] ＞ \" + (value_skilled) + \"[\" + (subtotal_skilled) + \"]\"\n            };\n          };\n          return output;\n        }, $TorgEternity_getUpRollDiceCommandResult$6.$$arity = 1);\n        \n        Opal.def(self, '$getPossibilityRollDiceCommandResult', $TorgEternity_getPossibilityRollDiceCommandResult$7 = function $$getPossibilityRollDiceCommandResult(command) {\n          var $a, $b, self = this, m = nil, output_modifier = nil, skilled = nil, unskilled = nil, dice_str = nil, subtotal_skilled = nil, subtotal_unskilled = nil, value_skilled = nil, value_unskilled = nil, output = nil;\n\n          \n          self.$debug(\"Torg Eternity Possibility Roll Command ? \", command);\n          m = /(^|\\s)(S)?(POS)((\\d+)(\\+\\d+)?)/i.$match(command);\n          if ($truthy(m)) {\n          } else {\n            return nil\n          };\n          output_modifier = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](4));\n          $b = self.$torg_eternity_dice(true, false), $a = Opal.to_ary($b), (skilled = ($a[0] == null ? nil : $a[0])), (unskilled = ($a[1] == null ? nil : $a[1])), (dice_str = ($a[2] == null ? nil : $a[2])), $b;\n          subtotal_skilled = $rb_plus(skilled, output_modifier);\n          subtotal_unskilled = $rb_plus(unskilled, output_modifier);\n          value_skilled = self.$format(\"%+d\", self.$get_torg_eternity_bonus(subtotal_skilled));\n          if ($truthy(subtotal_skilled['$!='](subtotal_unskilled))) {\n            \n            value_unskilled = self.$format(\"%+d\", self.$get_torg_eternity_bonus(subtotal_unskilled));\n            output = \"\" + \"d20ロール（ポシビリティ） ＞ \" + (output_modifier) + \"+1d20[\" + (dice_str) + \"] ＞ \" + (value_skilled) + \"[\" + (subtotal_skilled) + \"]（技能有） / \" + (value_unskilled) + \"[\" + (subtotal_unskilled) + \"]（技能無）\";\n          } else {\n            output = \"\" + \"d20ロール（ポシビリティ） ＞ \" + (output_modifier) + \"+1d20[\" + (dice_str) + \"] ＞ \" + (value_skilled) + \"[\" + (subtotal_skilled) + \"]\"\n          };\n          return output;\n        }, $TorgEternity_getPossibilityRollDiceCommandResult$7.$$arity = 1);\n        \n        Opal.def(self, '$getBonusDamageDiceCommandResult', $TorgEternity_getBonusDamageDiceCommandResult$8 = function $$getBonusDamageDiceCommandResult(command) {\n          var $a, $b, self = this, m = nil, number_bonus_die = nil, value_modifier = nil, output_modifier = nil, output = nil, value_roll = nil, output_roll = nil, output_value = nil;\n\n          \n          self.$debug(\"TorgEternity Bonus Damage Roll Command ? \", command);\n          m = /(\\d+)(BD)(([+\\-]\\d+)*)/i.$match(command);\n          if ($truthy(m)) {\n          } else {\n            return nil\n          };\n          number_bonus_die = m['$[]'](1).$to_i();\n          $b = self.$get_torg_eternity_modifier(m['$[]'](3)), $a = Opal.to_ary($b), (value_modifier = ($a[0] == null ? nil : $a[0])), (output_modifier = ($a[1] == null ? nil : $a[1])), $b;\n          if ($truthy($rb_le(number_bonus_die, 0))) {\n            output = \"エラーです。xBD (x≧1) として下さい\"\n          } else {\n            \n            $b = self.$get_torg_eternity_damage_bonus_dice(number_bonus_die), $a = Opal.to_ary($b), (value_roll = ($a[0] == null ? nil : $a[0])), (output_roll = ($a[1] == null ? nil : $a[1])), $b;\n            output_value = $rb_plus(value_roll, value_modifier);\n            output = \"\" + \"ボーナスダメージロール(\" + (number_bonus_die) + \"BD\" + (output_modifier) + \") ＞ \" + (value_roll) + \"[\" + (output_roll) + \"]\" + (output_modifier) + \" ＞ \" + (output_value) + \"ダメージ\";\n          };\n          return output;\n        }, $TorgEternity_getBonusDamageDiceCommandResult$8.$$arity = 1);\n        \n        Opal.def(self, '$getSuccessLevelDiceCommandResult', $TorgEternity_getSuccessLevelDiceCommandResult$9 = function $$getSuccessLevelDiceCommandResult(command) {\n          var self = this, m = nil, value = nil, output = nil;\n\n          \n          self.$debug(\"TorgEternity Success Level Table Command ? \", command);\n          m = /(RT|Result)(-*\\d+([+\\-]\\d+)*)/i.$match(command);\n          if ($truthy(m)) {\n          } else {\n            return nil\n          };\n          value = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2));\n          self.$debug(value);\n          if ($truthy($rb_lt(value, 0))) {\n            output = \"Failure.\"\n          } else {\n            output = self.$get_torg_eternity_success_level(value)\n          };\n          output = \"\" + \"成功レベル表[\" + (value) + \"] ＞ \" + (output);\n          self.$debug(output);\n          return output;\n        }, $TorgEternity_getSuccessLevelDiceCommandResult$9.$$arity = 1);\n        \n        Opal.def(self, '$getDamageResultDiceCommandResult', $TorgEternity_getDamageResultDiceCommandResult$10 = function $$getDamageResultDiceCommandResult(command) {\n          var self = this, m = nil, value = nil, output = nil;\n\n          \n          self.$debug(\"TorgEternity Damage Result Table Command ? \", command);\n          m = /(DT|Damage)(-*\\d+([+\\-]\\d+)*)/i.$match(command);\n          if ($truthy(m)) {\n          } else {\n            return nil\n          };\n          value = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](2));\n          self.$debug(value);\n          output = self.$get_torg_eternity_damage_result(value);\n          output = \"\" + \"ダメージ結果表[\" + (value) + \"] ＞ \" + (output);\n          self.$debug(output);\n          return output;\n        }, $TorgEternity_getDamageResultDiceCommandResult$10.$$arity = 1);\n        \n        Opal.def(self, '$getRollBonusDiceCommandResult', $TorgEternity_getRollBonusDiceCommandResult$11 = function $$getRollBonusDiceCommandResult(command) {\n          var $a, $b, self = this, m = nil, value_roll = nil, output_bonus = nil, value_modifier = nil, output_modifier = nil, output = nil, value_result = nil;\n\n          \n          self.$debug(\"TorgEternity Roll Bonus Table Command ? \", command);\n          m = /(BT|Bonus|Total)(\\d+)(([+\\-]\\d+)*)/i.$match(command);\n          if ($truthy(m)) {\n          } else {\n            return nil\n          };\n          value_roll = m['$[]'](2).$to_i();\n          output_bonus = self.$get_torg_eternity_bonus(value_roll);\n          self.$debug(output_bonus);\n          $b = self.$get_torg_eternity_modifier(m['$[]'](3)), $a = Opal.to_ary($b), (value_modifier = ($a[0] == null ? nil : $a[0])), (output_modifier = ($a[1] == null ? nil : $a[1])), $b;\n          if ($truthy($rb_le(value_roll, 1))) {\n            output = \"\" + \"ロールボーナス表[\" + (value_roll) + \"] ＞ Mishap!!\"\n          } else if ($truthy(output_modifier['$empty?']())) {\n            output = \"\" + \"ロールボーナス表[\" + (value_roll) + \"] ＞ \" + (output_bonus)\n          } else {\n            \n            value_result = $rb_plus(output_bonus.$to_i(), value_modifier);\n            self.$debug(value_result);\n            output = \"\" + \"ロールボーナス表[\" + (value_roll) + \"]\" + (output_modifier) + \" ＞ \" + (output_bonus) + \"[\" + (value_roll) + \"]\" + (output_modifier) + \" ＞ \" + (value_result);\n          };\n          self.$debug(output);\n          return output;\n        }, $TorgEternity_getRollBonusDiceCommandResult$11.$$arity = 1);\n        \n        Opal.def(self, '$get_torg_eternity_table_result', $TorgEternity_get_torg_eternity_table_result$12 = function $$get_torg_eternity_table_result(value, table) {\n          var $$13, self = this, output = nil;\n\n          \n          output = nil;\n          (function(){var $brk = Opal.new_brk(); try {return $send(table, 'each', [], ($$13 = function(item){var self = $$13.$$s == null ? this : $$13.$$s, item_index = nil;\n\n          \n            \n            if (item == null) {\n              item = nil;\n            };\n            item_index = item['$[]'](0);\n            if ($truthy($rb_gt(item_index, value))) {\n              \n              Opal.brk(nil, $brk)};\n            return (output = item['$[]'](1));}, $$13.$$s = self, $$13.$$brk = $brk, $$13.$$arity = 1, $$13))\n          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n          return output;\n        }, $TorgEternity_get_torg_eternity_table_result$12.$$arity = 2);\n        \n        Opal.def(self, '$get_torg_eternity_modifier', $TorgEternity_get_torg_eternity_modifier$14 = function $$get_torg_eternity_modifier(string_modifier) {\n          var self = this, value_modifier = nil, output_modifier = nil;\n\n          \n          self.$debug(\"\" + \"modifier check : \" + (string_modifier));\n          if (string_modifier['$=='](\"\")) {\n            \n            value_modifier = 0;\n            output_modifier = \"\";\n          } else {\n            \n            value_modifier = $$($nesting, 'ArithmeticEvaluator').$eval(string_modifier);\n            output_modifier = self.$format(\"%+d\", value_modifier);\n          };\n          self.$debug(value_modifier);\n          self.$debug(output_modifier);\n          return [value_modifier, output_modifier];\n        }, $TorgEternity_get_torg_eternity_modifier$14.$$arity = 1);\n        \n        Opal.def(self, '$torg_eternity_dice', $TorgEternity_torg_eternity_dice$15 = function $$torg_eternity_dice(check_pos, check_mishap) {\n          var $a, self = this, isSkilledCritical = nil, isCritical = nil, skilled = nil, unskilled = nil, mishap = nil, dice_str = nil, dice_n = nil, dice_str_now = nil;\n\n          \n          isSkilledCritical = true;\n          isCritical = true;\n          skilled = 0;\n          unskilled = 0;\n          mishap = 0;\n          dice_str = \"\";\n          while ($truthy(isSkilledCritical)) {\n            \n            if ($truthy(dice_str['$empty?']())) {\n            } else {\n              dice_str = $rb_plus(dice_str, \",\")\n            };\n            dice_n = self.randomizer.$roll_once(20);\n            if ($truthy(check_pos)) {\n              \n              if ($truthy($rb_lt(dice_n, 10))) {\n                \n                dice_str_now = \"\" + (dice_n) + \"→10\";\n                dice_n = 10;\n                isSkilledCritical = false;\n              } else {\n                dice_str_now = dice_n.$to_s()\n              };\n              dice_str = $rb_plus(dice_str, dice_str_now);\n            } else {\n              dice_str = $rb_plus(dice_str, dice_n.$to_s())\n            };\n            skilled = $rb_plus(skilled, dice_n);\n            if ($truthy(isCritical)) {\n              unskilled = $rb_plus(unskilled, dice_n)};\n            if (dice_n['$=='](20)) {\n              isCritical = false\n            } else if ($truthy(dice_n['$!='](10))) {\n              \n              isSkilledCritical = false;\n              isCritical = false;\n              if ($truthy(check_mishap['$&'](dice_n['$=='](1)))) {\n                mishap = 1};};\n            check_pos = false;\n            check_mishap = false;\n          };\n          return [skilled, unskilled, dice_str, mishap];\n        }, $TorgEternity_torg_eternity_dice$15.$$arity = 2);\n        \n        Opal.def(self, '$get_torg_eternity_damage_bonus_dice', $TorgEternity_get_torg_eternity_damage_bonus_dice$16 = function $$get_torg_eternity_damage_bonus_dice(number) {\n          var $a, self = this, value_roll = nil, output_roll = nil, dice_value = nil, dice_text = nil;\n\n          \n          self.$debug(\"\" + \"bonus dice roll : \" + (number));\n          value_roll = 0;\n          output_roll = \"\";\n          if ($truthy($rb_gt(number, 0))) {\n            \n            value_roll = 0;\n            output_roll = \"\";\n            while ($truthy($rb_gt(number, 0))) {\n              \n              if ($truthy(output_roll['$empty?']())) {\n              } else {\n                output_roll = \"\" + (output_roll) + \",\"\n              };\n              dice_value = self.randomizer.$roll_once(6);\n              dice_text = dice_value.$to_s();\n              if (dice_value['$=='](6)) {\n                \n                dice_value = 5;\n                dice_text = \"5∞\";\n                number = $rb_plus(number, 1);};\n              value_roll = $rb_plus(value_roll, dice_value);\n              output_roll = \"\" + (output_roll) + (dice_text);\n              self.$debug(value_roll);\n              self.$debug(output_roll);\n              number = $rb_minus(number, 1);\n            };\n          } else {\n            output_roll = \"0\"\n          };\n          self.$debug(value_roll);\n          self.$debug(output_roll);\n          return [value_roll, output_roll];\n        }, $TorgEternity_get_torg_eternity_damage_bonus_dice$16.$$arity = 1);\n        \n        Opal.def(self, '$get_torg_eternity_success_level', $TorgEternity_get_torg_eternity_success_level$17 = function $$get_torg_eternity_success_level(value) {\n          var self = this, success_table = nil;\n\n          \n          success_table = [[0, \"Success - Standard.\"], [5, \"Success - Good!\"], [10, \"Success - Outstanding!!\"]];\n          return self.$get_torg_eternity_table_result(value, success_table);\n        }, $TorgEternity_get_torg_eternity_success_level$17.$$arity = 1);\n        \n        Opal.def(self, '$get_torg_eternity_damage_result', $TorgEternity_get_torg_eternity_damage_result$18 = function $$get_torg_eternity_damage_result(value) {\n          var self = this, damage_table = nil;\n\n          \n          damage_table = [[-50, \"ノーダメージ\"], [-5, \"1ショック\"], [0, \"2ショック\"], [5, \"1レベル負傷 + 2ショック\"], [10, \"2レベル負傷 + 4ショック\"], [15, \"3レベル負傷 + 6ショック\"], [20, \"4レベル負傷 + 8ショック\"], [25, \"5レベル負傷 + 10ショック\"], [30, \"6レベル負傷 + 12ショック\"], [35, \"7レベル負傷 + 14ショック\"], [40, \"8レベル負傷 + 16ショック\"], [45, \"9レベル負傷 + 18ショック\"], [50, \"10レベル負傷 + 20ショック\"]];\n          return self.$get_torg_eternity_table_result(value, damage_table);\n        }, $TorgEternity_get_torg_eternity_damage_result$18.$$arity = 1);\n        return (Opal.def(self, '$get_torg_eternity_bonus', $TorgEternity_get_torg_eternity_bonus$19 = function $$get_torg_eternity_bonus(value) {\n          var self = this, bonus_table = nil, bonus = nil, over_value_bonus = nil;\n\n          \n          bonus_table = [[1, -10], [2, -8], [3, -6], [5, -4], [7, -2], [9, -1], [11, 0], [13, 1], [15, 2], [16, 3], [17, 4], [18, 5], [19, 6], [20, 7]];\n          bonus = self.$get_torg_eternity_table_result(value, bonus_table);\n          if ($truthy($rb_gt(value, 20))) {\n            \n            over_value_bonus = $rb_plus($rb_divide($rb_minus(value, 21), 5).$to_i(), 1);\n            bonus = $rb_plus(bonus, over_value_bonus);};\n          return bonus;\n        }, $TorgEternity_get_torg_eternity_bonus$19.$$arity = 1), nil) && 'get_torg_eternity_bonus';\n      })($nesting[0], $$($nesting, 'Base'), $nesting)\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n})(Opal);\n"],"sourceRoot":"webpack:///"}