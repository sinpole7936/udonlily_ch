(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~TunnelsAndTrolls~index"],{

/***/ "lQxd":
/*!************************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/TunnelsAndTrolls.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send,
      $hash2 = Opal.hash2;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TunnelsAndTrolls');
        var $nesting = [self].concat($parent_nesting),
            $TunnelsAndTrolls_initialize$1,
            $TunnelsAndTrolls_replace_text$2,
            $TunnelsAndTrolls_eval_game_system_specific_command$7,
            $TunnelsAndTrolls_roll_action$13,
            $TunnelsAndTrolls_roll_action_dice$15,
            $TunnelsAndTrolls_same_all_dice$ques$16,
            $TunnelsAndTrolls_interim_expr$17,
            $TunnelsAndTrolls_action_result$19,
            $TunnelsAndTrolls_success_level$20,
            $TunnelsAndTrolls_experience_point$21,
            $TunnelsAndTrolls_int$ques$22,
            $TunnelsAndTrolls_additional_result$23;
        self.$$prototype.dice_total = self.$$prototype.count_6 = self.$$prototype.randomizer = self.$$prototype.dice_list = nil;
        Opal.const_set($nesting[0], 'ID', "TunnelsAndTrolls");
        Opal.const_set($nesting[0], 'NAME', "トンネルズ＆トロールズ");
        Opal.const_set($nesting[0], 'SORT_KEY', "とんねるすあんととろおるす");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定　(nD6+x>=nLV)\n" + "失敗、成功、自動失敗の自動判定とゾロ目の振り足し経験値の自動計算を行います。\n" + "SAVEの難易度を「レベル」で表記することが出来ます。\n" + "例えば「2Lv」と書くと「25」に置換されます。\n" + "判定時以外は悪意ダメージを表示します。\n" + "バーサークとハイパーバーサーク用に専用コマンドが使えます。\n" + "例）2D6+1>=1Lv\n" + "　 (2D6+1>=20) ＞ 7[2,5]+1 ＞ 8 ＞ 失敗\n" + "　判定時にはゾロ目を自動で振り足します。\n" + "\n" + "・バーサークとハイパーバーサーク　(nBS+x or nHBS+x)\n" + "　\"(ダイス数)BS(修正値)\"でバーサーク、\"(ダイス数)HBS(修正値)\"でハイパーバーサークでロールできます。\n" + "　最初のダイスの読替は、個別の出目はそのままで表示。\n" + "　下から２番目の出目をずらした分だけ合計にマイナス修正を追加して表示します。\n");
        self.$register_prefix("\\d+H?BS", "\\d+R6", "\\d+D\\d+");
        Opal.def(self, '$initialize', $TunnelsAndTrolls_initialize$1 = function $$initialize(command) {
          var $iter = $TunnelsAndTrolls_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $TunnelsAndTrolls_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $TunnelsAndTrolls_initialize$1, false, true), 'initialize', [command], null);
          return self.sort_add_dice = true;
        }, $TunnelsAndTrolls_initialize$1.$$arity = 1);
        self.$private();
        Opal.def(self, '$replace_text', $TunnelsAndTrolls_replace_text$2 = function $$replace_text(string) {
          var _$$,
              _$$2,
              _$$3,
              _$$4,
              self = this;

          if ($truthy(/BS/i['$=~'](string))) {
            string = $send(string, 'gsub', [/(\d+)HBS([^\d\s][+\-\d]+)/i], (_$$ = function $$3() {
              var self = _$$.$$s == null ? this : _$$.$$s;
              return "" + $$($nesting, 'Regexp').$last_match(1) + "R6" + $$($nesting, 'Regexp').$last_match(2) + "[H]";
            }, _$$.$$s = self, _$$.$$arity = 0, _$$));
            string = $send(string, 'gsub', [/(\d+)HBS/i], (_$$2 = function $$4() {
              var self = _$$2.$$s == null ? this : _$$2.$$s;
              return "" + $$($nesting, 'Regexp').$last_match(1) + "R6[H]";
            }, _$$2.$$s = self, _$$2.$$arity = 0, _$$2));
            string = $send(string, 'gsub', [/(\d+)BS([^\d\s][+\-\d]+)/i], (_$$3 = function $$5() {
              var self = _$$3.$$s == null ? this : _$$3.$$s;
              return "" + $$($nesting, 'Regexp').$last_match(1) + "R6" + $$($nesting, 'Regexp').$last_match(2);
            }, _$$3.$$s = self, _$$3.$$arity = 0, _$$3));
            string = $send(string, 'gsub', [/(\d+)BS/i], (_$$4 = function $$6() {
              var self = _$$4.$$s == null ? this : _$$4.$$s;
              return "" + $$($nesting, 'Regexp').$last_match(1) + "R6";
            }, _$$4.$$s = self, _$$4.$$arity = 0, _$$4));
          }

          ;
          return string;
        }, $TunnelsAndTrolls_replace_text$2.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $TunnelsAndTrolls_eval_game_system_specific_command$7 = function $$eval_game_system_specific_command(string) {
          var _$$9,
              self = this,
              output = nil,
              m = nil,
              dice_c = nil,
              bonus = nil,
              isHyperBerserk = nil,
              $ret_or_1 = nil,
              dice_arr = nil,
              dice_now = nil,
              dice_str = nil,
              isFirstLoop = nil,
              n_max = nil,
              bonus2 = nil,
              total_n = nil;

          if ($truthy(/^\d+D\d+/i['$match?'](string))) {
            return self.$roll_action(string);
          }

          ;
          string = self.$replace_text(string);
          self.$debug("tandt_berserk string", string);
          output = "1";

          if ($truthy(m = /(^|\s)S?((\d+)[rR]6([+\-\d]*)(\[(\w+)\])?)(\s|$)/i.$match(string))) {} else {
            return output;
          }

          ;
          self.$debug("tandt_berserk matched");
          string = m['$[]'](2);
          dice_c = m['$[]'](3).$to_i();
          bonus = 0;

          if ($truthy(m['$[]'](4))) {
            bonus = $$($nesting, 'ArithmeticEvaluator').$eval(m['$[]'](4));
          }

          ;
          isHyperBerserk = false;

          if ($truthy(function () {
            if ($truthy($ret_or_1 = m['$[]'](5))) {
              return m['$[]'](6)['$=~'](/[Hh]/);
            } else {
              return $ret_or_1;
            }

            ;
            return nil;
          }())) {
            isHyperBerserk = true;
          }

          ;
          dice_arr = [];
          dice_now = 0;
          dice_str = "";
          isFirstLoop = true;
          n_max = 0;
          bonus2 = 0;
          self.$debug("isHyperBerserk", isHyperBerserk);
          dice_arr.$push(dice_c);

          (function () {
            var $brk = Opal.new_brk();

            try {
              return $send(self, 'loop', [], (_$$9 = function $$8() {
                var self = _$$9.$$s == null ? this : _$$9.$$s,
                    _$$5,
                    _$$6,
                    _$$7,
                    _$$8,
                    dice_wk = nil,
                    dice_list = nil,
                    rollTotal = nil,
                    rollDiceMaxCount = nil,
                    dice_num = nil,
                    diceType = nil,
                    dice_face = nil,
                    $ret_or_2 = nil,
                    min1 = nil,
                    min2 = nil;

                if (self.randomizer == null) self.randomizer = nil;
                self.$debug("loop dice_arr", dice_arr);
                dice_wk = dice_arr.$shift();
                self.$debug("roll dice_wk d6", dice_wk);
                dice_list = self.randomizer.$roll_barabara(dice_wk, 6).$sort();
                rollTotal = dice_list.$sum();
                rollDiceMaxCount = dice_list.$count(6);

                if ($truthy($rb_ge(dice_wk, 2))) {
                  dice_num = dice_list;
                  diceType = 6;
                  dice_face = [];
                  $send(diceType, 'times', [], (_$$5 = function $$9(_i) {
                    var self = _$$5.$$s == null ? this : _$$5.$$s;

                    if (_i == null) {
                      _i = nil;
                    }

                    ;
                    return dice_face.$push(0);
                  }, _$$5.$$s = self, _$$5.$$arity = 1, _$$5));
                  $send(dice_num, 'each', [], (_$$6 = function $$10(dice_o) {
                    var self = _$$6.$$s == null ? this : _$$6.$$s,
                        $writer = nil;

                    if (dice_o == null) {
                      dice_o = nil;
                    }

                    ;
                    $writer = [$rb_minus(dice_o, 1), $rb_plus(dice_face['$[]']($rb_minus(dice_o, 1)), 1)];
                    $send(dice_face, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                  }, _$$6.$$s = self, _$$6.$$arity = 1, _$$6));
                  $send(dice_face, 'each', [], (_$$7 = function $$11(dice_o) {
                    var self = _$$7.$$s == null ? this : _$$7.$$s;

                    if (dice_o == null) {
                      dice_o = nil;
                    }

                    ;

                    if ($truthy($rb_ge(dice_o, 2))) {
                      if ($truthy(isHyperBerserk)) {
                        dice_o = $rb_plus(dice_o, 1);
                      }

                      ;
                      return dice_arr.$push(dice_o);
                    } else {
                      return nil;
                    }

                    ;
                  }, _$$7.$$s = self, _$$7.$$arity = 1, _$$7));

                  if ($truthy(function () {
                    if ($truthy($ret_or_2 = isFirstLoop)) {
                      return dice_arr['$empty?']();
                    } else {
                      return $ret_or_2;
                    }

                    ;
                    return nil;
                  }())) {
                    min1 = 0;
                    min2 = 0;
                    $send(diceType, 'times', [], (_$$8 = function $$12(i) {
                      var self = _$$8.$$s == null ? this : _$$8.$$s,
                          index = nil;

                      if (i == null) {
                        i = nil;
                      }

                      ;
                      index = $rb_minus($rb_minus(diceType, i), 1);
                      self.$debug("diceType index", index);

                      if ($truthy($rb_gt(dice_face['$[]'](index), 0))) {
                        min2 = min1;
                        return min1 = index;
                      } else {
                        return nil;
                      }

                      ;
                    }, _$$8.$$s = self, _$$8.$$arity = 1, _$$8));
                    self.$debug("min1, min2", min1, min2);
                    bonus2 = $rb_minus(min2, min1)['$-@']();

                    if (min2['$=='](5)) {
                      rollDiceMaxCount = $rb_minus(rollDiceMaxCount, 1);
                    }

                    ;

                    if ($truthy(isHyperBerserk)) {
                      dice_arr.$push(3);
                    } else {
                      dice_arr.$push(2);
                    }

                    ;
                  }

                  ;
                }

                ;
                dice_now = $rb_plus(dice_now, rollTotal);

                if ($truthy(dice_str['$!='](""))) {
                  dice_str = $rb_plus(dice_str, "][");
                }

                ;
                dice_str = $rb_plus(dice_str, dice_list.$join(","));
                n_max = $rb_plus(n_max, rollDiceMaxCount);
                isFirstLoop = false;
                self.$debug("loop last chek dice_arr", dice_arr);

                if ($truthy(dice_arr['$empty?']())) {
                  Opal.brk(nil, $brk);
                } else {
                  return nil;
                }

                ;
              }, _$$9.$$s = self, _$$9.$$brk = $brk, _$$9.$$arity = 0, _$$9));
            } catch (err) {
              if (err === $brk) {
                return err.$v;
              } else {
                throw err;
              }
            }
          })();

          self.$debug("loop breaked");
          self.$debug("dice_now, bonus, bonus2", dice_now, bonus, bonus2);
          total_n = $rb_plus($rb_plus(dice_now, bonus), bonus2);
          dice_str = "" + "[" + dice_str + "]";
          output = "" + dice_now + dice_str;

          if ($truthy($rb_lt(bonus2, 0))) {
            self.$debug("bonus2", bonus2);
            output = $rb_plus(output, bonus2.$to_s());
          }

          ;
          self.$debug("bonus", bonus);

          if ($truthy($rb_gt(bonus, 0))) {
            output = $rb_plus(output, "" + "+" + bonus);
          } else if ($truthy($rb_lt(bonus, 0))) {
            output = $rb_plus(output, bonus.$to_s());
          }

          ;

          if ($truthy(output['$=~'](/[^\d\[\]]+/))) {
            output = "" + "(" + string + ") ＞ " + output + " ＞ " + total_n;
          } else {
            output = "" + "(" + string + ") ＞ " + total_n;
          }

          ;

          if ($truthy($rb_gt(n_max, 0))) {
            output = $rb_plus(output, "" + " ＞ 悪意" + n_max);
          }

          ;
          return output;
        }, $TunnelsAndTrolls_eval_game_system_specific_command$7.$$arity = 1);
        Opal.def(self, '$roll_action', $TunnelsAndTrolls_roll_action$13 = function $$roll_action(command) {
          var _$$10,
              self = this,
              parser = nil,
              cmd = nil,
              times = nil,
              total = nil,
              target = nil,
              sequence = nil;

          command = $send(command, 'sub', [/\d+LV$/i], (_$$10 = function $$14(level) {
            var self = _$$10.$$s == null ? this : _$$10.$$s;

            if (level == null) {
              level = nil;
            }

            ;
            return $rb_plus($rb_times(level.$to_i(), 5), 15);
          }, _$$10.$$s = self, _$$10.$$arity = 1, _$$10));
          parser = $$$($$($nesting, 'Command'), 'Parser').$new(/\d+D6/, $hash2(["round_type"], {
            "round_type": self.$round_type()
          })).$restrict_cmp_op_to(nil, ">=").$enable_question_target();
          cmd = parser.$parse(command);

          if ($truthy(cmd)) {} else {
            return nil;
          }

          ;
          times = cmd.$command().$to_i();
          self.$roll_action_dice(times);
          total = $rb_plus(self.dice_total, cmd.$modify_number());

          target = function () {
            if ($truthy(cmd['$question_target?']())) {
              return "?";
            } else {
              return cmd.$target_number();
            }

            ;
            return nil;
          }();

          sequence = ["" + "(" + cmd + ")", self.$interim_expr(cmd, self.dice_total), total.$to_s(), self.$action_result(total, self.dice_total, target), self.$additional_result(self.count_6)].$compact();
          return sequence.$join(" ＞ ");
        }, $TunnelsAndTrolls_roll_action$13.$$arity = 1);
        Opal.def(self, '$roll_action_dice', $TunnelsAndTrolls_roll_action_dice$15 = function $$roll_action_dice(times) {
          var $a,
              self = this,
              dice_list = nil,
              dice_list_flatten = nil;
          dice_list = self.randomizer.$roll_barabara(times, 6).$sort();
          self.dice_list = [dice_list];

          while ($truthy(self['$same_all_dice?'](dice_list))) {
            dice_list = self.randomizer.$roll_barabara(times, 6).$sort();
            self.dice_list.$push(dice_list);
          }

          ;
          dice_list_flatten = self.dice_list.$flatten();
          self.dice_total = dice_list_flatten.$sum();
          return self.count_6 = dice_list_flatten.$count(6);
        }, $TunnelsAndTrolls_roll_action_dice$15.$$arity = 1);
        Opal.def(self, '$same_all_dice?', $TunnelsAndTrolls_same_all_dice$ques$16 = function $TunnelsAndTrolls_same_all_dice$ques$16(dice_list) {
          var self = this,
              $ret_or_3 = nil;

          if ($truthy($ret_or_3 = $rb_gt(dice_list.$size(), 1))) {
            return dice_list.$uniq().$size()['$=='](1);
          } else {
            return $ret_or_3;
          }
        }, $TunnelsAndTrolls_same_all_dice$ques$16.$$arity = 1);
        Opal.def(self, '$interim_expr', $TunnelsAndTrolls_interim_expr$17 = function $$interim_expr(cmd, dice_total) {
          var _$$11,
              self = this,
              $ret_or_4 = nil,
              dice_list = nil,
              modifier = nil;

          if ($truthy(function () {
            if ($truthy($ret_or_4 = self.dice_list.$flatten().$size()['$=='](1))) {
              return cmd.$modify_number()['$=='](0);
            } else {
              return $ret_or_4;
            }

            ;
            return nil;
          }())) {
            return nil;
          }

          ;
          dice_list = $send(self.dice_list, 'map', [], (_$$11 = function $$18(ds) {
            var self = _$$11.$$s == null ? this : _$$11.$$s;

            if (ds == null) {
              ds = nil;
            }

            ;
            return "" + "[" + ds.$join(",") + "]";
          }, _$$11.$$s = self, _$$11.$$arity = 1, _$$11)).$join("");
          modifier = $$($nesting, 'Format').$modifier(cmd.$modify_number());
          return [dice_total.$to_s(), dice_list, modifier].$join("");
        }, $TunnelsAndTrolls_interim_expr$17.$$arity = 2);
        Opal.def(self, '$action_result', $TunnelsAndTrolls_action_result$19 = function $$action_result(total, dice_total, target_number) {
          var self = this;

          if (dice_total['$=='](3)) {
            return "自動失敗";
          } else if ($truthy(target_number['$nil?']())) {
            return nil;
          } else if (target_number['$==']("?")) {
            return self.$success_level(total, dice_total);
          } else if ($truthy($rb_ge(total, target_number))) {
            return "" + "成功 ＞ 経験値" + self.$experience_point(target_number, dice_total);
          } else {
            return "失敗";
          }
        }, $TunnelsAndTrolls_action_result$19.$$arity = 3);
        Opal.def(self, '$success_level', $TunnelsAndTrolls_success_level$20 = function $$success_level(total, dice_total) {
          var self = this,
              level = nil;
          level = $rb_divide($rb_minus(total, 15), 5).$to_i();

          if ($truthy($rb_le(level, 0))) {
            return "" + "失敗 ＞ 経験値" + dice_total;
          } else {
            return "" + level + "Lv成功 ＞ 経験値" + dice_total;
          }

          ;
        }, $TunnelsAndTrolls_success_level$20.$$arity = 2);
        Opal.def(self, '$experience_point', $TunnelsAndTrolls_experience_point$21 = function $$experience_point(target_number, dice_total) {
          var self = this,
              ep = nil;
          ep = $rb_times($rb_divide($rb_times(1.0, $rb_minus(target_number, 15)), 5), dice_total);

          if ($truthy($rb_le(ep, 0))) {
            return "0";
          } else if ($truthy(self['$int?'](ep))) {
            return ep.$to_i().$to_s();
          } else {
            return self.$format("%.1f", ep);
          }

          ;
        }, $TunnelsAndTrolls_experience_point$21.$$arity = 2);
        Opal.def(self, '$int?', $TunnelsAndTrolls_int$ques$22 = function $TunnelsAndTrolls_int$ques$22(v) {
          var self = this;
          return v['$=='](v.$to_i());
        }, $TunnelsAndTrolls_int$ques$22.$$arity = 1);
        return (Opal.def(self, '$additional_result', $TunnelsAndTrolls_additional_result$23 = function $$additional_result(count_6) {
          var self = this;

          if ($truthy($rb_gt(count_6, 0))) {
            return "" + "悪意" + count_6;
          } else {
            return nil;
          }
        }, $TunnelsAndTrolls_additional_result$23.$$arity = 1), nil) && 'additional_result';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~TunnelsAndTrolls~index.js.map