(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~Utakaze~index"],{

/***/ "/Bg6":
/*!***************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Utakaze.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Utakaze');
        var $nesting = [self].concat($parent_nesting),
            $Utakaze_initialize$1,
            $Utakaze_eval_game_system_specific_command$2,
            $Utakaze_checkRoll$3,
            $Utakaze_getRollResultString$4,
            $Utakaze_getSuccessInfo$5,
            $Utakaze_getDiceCountHash$7,
            $Utakaze_isNomalDice$9,
            $Utakaze_isDragonDice$10,
            $Utakaze_getValue$11;
        self.$$prototype.randomizer = self.$$prototype.arrayDragonDiceName = nil;
        Opal.const_set($nesting[0], 'ID', "Utakaze");
        Opal.const_set($nesting[0], 'NAME', "ウタカゼ");
        Opal.const_set($nesting[0], 'SORT_KEY', "うたかせ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定ロール（nUK）\n" + "  n個のサイコロで行為判定ロール。ゾロ目の最大個数を成功レベルとして表示。nを省略すると2UK扱い。\n" + "  例）3UK ：サイコロ3個で行為判定\n" + "  例）UK  ：サイコロ2個で行為判定\n" + "  不等号用いた成否判定は現時点では実装してません。\n" + "・クリティカルコール付き行為判定ロール（nUK@c or nUKc）\n" + "　cに「龍のダイス目」を指定した行為判定ロール。\n" + "  ゾロ目ではなく、cと同じ値の出目数x2が成功レベルとなります。\n" + "  例）3UK@5 ：龍のダイス「月」でクリティカルコール宣言したサイコロ3個の行為判定\n");
        self.$register_prefix("\\d*UK");
        Opal.def(self, '$initialize', $Utakaze_initialize$1 = function $$initialize(command) {
          var $iter = $Utakaze_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Utakaze_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Utakaze_initialize$1, false, true), 'initialize', [command], null);
          self.arrayDragonDiceName = ["", "風", "雨", "雲", "影", "月", "歌"];
          return self.enabled_upcase_input = false;
        }, $Utakaze_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Utakaze_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              result = nil,
              $case = nil,
              base = nil,
              $ret_or_1 = nil,
              crit = nil,
              diff = nil;
          self.$debug("eval_game_system_specific_command command", command);
          result = "";
          $case = command;

          if (/(\d+)?UK(@?(\d))?(>=(\d+))?/i['$===']($case)) {
            base = function () {
              if ($truthy($ret_or_1 = $$($nesting, 'Regexp').$last_match(1))) {
                return $ret_or_1;
              } else {
                return 2;
              }

              ;
              return nil;
            }().$to_i();

            crit = $$($nesting, 'Regexp').$last_match(3).$to_i();
            diff = $$($nesting, 'Regexp').$last_match(5).$to_i();
            result = self.$checkRoll(base, crit, diff);
          }

          ;

          if ($truthy(result['$empty?']())) {
            return nil;
          }

          ;
          return "" + command + " ＞ " + result;
        }, $Utakaze_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$checkRoll', $Utakaze_checkRoll$3 = function $$checkRoll(base, crit, diff) {
          var self = this,
              result = nil,
              diceList = nil;

          if (diff == null) {
            diff = 0;
          }

          ;
          result = "";
          base = self.$getValue(base);
          crit = self.$getValue(crit);

          if ($truthy($rb_lt(base, 1))) {
            return result;
          }

          ;

          if ($truthy($rb_gt(crit, 6))) {
            crit = 6;
          }

          ;
          result = $rb_plus(result, "" + "(" + base + "d6)");
          diceList = self.randomizer.$roll_barabara(base, 6).$sort();
          result = $rb_plus(result, "" + " ＞ [" + diceList.$join(",") + "] ＞ ");
          result = $rb_plus(result, self.$getRollResultString(diceList, crit, diff));
          return result;
        }, $Utakaze_checkRoll$3.$$arity = -3);
        Opal.def(self, '$getRollResultString', $Utakaze_getRollResultString$4 = function $$getRollResultString(diceList, crit, diff) {
          var $a,
              $b,
              self = this,
              success = nil,
              maxnum = nil,
              setCount = nil,
              result = nil,
              diffSuccess = nil;
          $b = self.$getSuccessInfo(diceList, crit, diff), $a = Opal.to_ary($b), success = $a[0] == null ? nil : $a[0], maxnum = $a[1] == null ? nil : $a[1], setCount = $a[2] == null ? nil : $a[2], $b;
          result = "";

          if ($truthy(self.$isDragonDice(crit))) {
            result = $rb_plus(result, "" + "龍のダイス「" + self.arrayDragonDiceName['$[]'](crit) + "」(" + crit + ")を使用 ＞ ");
          }

          ;

          if ($truthy(success)) {
            result = $rb_plus(result, "" + "成功レベル:" + maxnum + " (" + setCount + "セット)");

            if ($truthy(diff['$!='](0))) {
              diffSuccess = $rb_ge(maxnum, diff);

              if ($truthy(diffSuccess)) {
                result = $rb_plus(result, " ＞ 成功");
              } else {
                result = $rb_plus(result, " ＞ 失敗");
              }

              ;
            }

            ;
          } else {
            result = $rb_plus(result, "失敗");
          }

          ;
          return result;
        }, $Utakaze_getRollResultString$4.$$arity = 3);
        Opal.def(self, '$getSuccessInfo', $Utakaze_getSuccessInfo$5 = function $$getSuccessInfo(diceList, crit, _diff) {
          var _$$,
              self = this,
              diceCountHash = nil,
              maxnum = nil,
              successDiceList = nil,
              countThreshold = nil;

          self.$debug("checkSuccess diceList, crit", diceList, crit);
          diceCountHash = self.$getDiceCountHash(diceList, crit);
          self.$debug("diceCountHash", diceCountHash);
          maxnum = 0;
          successDiceList = [];

          countThreshold = function () {
            if ($truthy(self.$isDragonDice(crit))) {
              return 1;
            } else {
              return 2;
            }

            ;
            return nil;
          }();

          $send(diceCountHash, 'each', [], (_$$ = function $$6(dice, count) {
            var self = _$$.$$s == null ? this : _$$.$$s;

            if (dice == null) {
              dice = nil;
            }

            ;

            if (count == null) {
              count = nil;
            }

            ;

            if ($truthy($rb_gt(count, maxnum))) {
              maxnum = count;
            }

            ;

            if ($truthy($rb_ge(count, countThreshold))) {
              return successDiceList['$<<'](dice);
            } else {
              return nil;
            }

            ;
          }, _$$.$$s = self, _$$.$$arity = 2, _$$));
          self.$debug("successDiceList", successDiceList);

          if ($truthy($rb_le(successDiceList.$size(), 0))) {
            return [false, 0, 0];
          }

          ;

          if ($truthy(self.$isDragonDice(crit))) {
            maxnum = $rb_times(maxnum, 2);
          }

          ;
          return [true, maxnum, successDiceList.$size()];
        }, $Utakaze_getSuccessInfo$5.$$arity = 3);
        Opal.def(self, '$getDiceCountHash', $Utakaze_getDiceCountHash$7 = function $$getDiceCountHash(dice_list, critical) {
          var _$$2,
              self = this;

          return $send($send($send(dice_list, 'select', [], (_$$2 = function $$8(dice) {
            var self = _$$2.$$s == null ? this : _$$2.$$s,
                $ret_or_2 = nil;

            if (dice == null) {
              dice = nil;
            }

            ;

            if ($truthy($ret_or_2 = self.$isNomalDice(critical))) {
              return $ret_or_2;
            } else {
              return dice['$=='](critical);
            }

            ;
          }, _$$2.$$s = self, _$$2.$$arity = 1, _$$2)), 'group_by', [], "itself".$to_proc()), 'transform_values', [], "size".$to_proc());
        }, $Utakaze_getDiceCountHash$7.$$arity = 2);
        Opal.def(self, '$isNomalDice', $Utakaze_isNomalDice$9 = function $$isNomalDice(crit) {
          var self = this;
          return self.$isDragonDice(crit)['$!']();
        }, $Utakaze_isNomalDice$9.$$arity = 1);
        Opal.def(self, '$isDragonDice', $Utakaze_isDragonDice$10 = function $$isDragonDice(crit) {
          var self = this;
          return crit['$!='](0);
        }, $Utakaze_isDragonDice$10.$$arity = 1);
        return (Opal.def(self, '$getValue', $Utakaze_getValue$11 = function $$getValue(number) {
          var self = this;

          if ($truthy($rb_gt(number, 100))) {
            return 0;
          }

          ;
          return number;
        }, $Utakaze_getValue$11.$$arity = 1), nil) && 'getValue';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~Utakaze~index.js.map