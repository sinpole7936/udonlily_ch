(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~Warhammer~index"],{

/***/ "Ouf3":
/*!*****************************************************************!*\
  !*** ./node_modules/bcdice/lib/bcdice/game_system/Warhammer.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./../opal */ "pQ1d");
/* Generated by Opal 1.1.1 */


(function (Opal) {
  function $rb_le(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs <= rhs : lhs['$<='](rhs);
  }

  function $rb_divide(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs / rhs : lhs['$/'](rhs);
  }

  function $rb_minus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs - rhs : lhs['$-'](rhs);
  }

  function $rb_gt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs > rhs : lhs['$>'](rhs);
  }

  function $rb_lt(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs < rhs : lhs['$<'](rhs);
  }

  function $rb_times(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs * rhs : lhs['$*'](rhs);
  }

  function $rb_plus(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs + rhs : lhs['$+'](rhs);
  }

  function $rb_ge(lhs, rhs) {
    return typeof lhs === 'number' && typeof rhs === 'number' ? lhs >= rhs : lhs['$>='](rhs);
  }

  var self = Opal.top,
      $nesting = [],
      nil = Opal.nil,
      $$$ = Opal.$$$,
      $$ = Opal.$$,
      $module = Opal.module,
      $klass = Opal.klass,
      $send2 = Opal.send2,
      $truthy = Opal.truthy,
      $send = Opal.send;
  return function ($base, $parent_nesting) {
    var self = $module($base, 'BCDice');
    var $nesting = [self].concat($parent_nesting);

    (function ($base, $parent_nesting) {
      var self = $module($base, 'GameSystem');
      var $nesting = [self].concat($parent_nesting);

      (function ($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Warhammer');
        var $nesting = [self].concat($parent_nesting),
            $Warhammer_initialize$1,
            $Warhammer_eval_game_system_specific_command$2,
            $Warhammer_result_1d100$3,
            $Warhammer_result_1d100_text$4,
            $Warhammer_getCriticalResult$5,
            $Warhammer_wh_atpos$6,
            $Warhammer_get_wh_atpos_message$8,
            $Warhammer_getAttackResult$10;
        self.$$prototype.randomizer = nil;
        Opal.const_set($nesting[0], 'ID', "Warhammer");
        Opal.const_set($nesting[0], 'NAME', "ウォーハンマー");
        Opal.const_set($nesting[0], 'SORT_KEY', "うおおはんまあ");
        Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・クリティカル表(whHxx/whAxx/whBxx/whLxx)\n" + "　\"WH部位 クリティカル値\"の形で指定します。部位は「H(頭部)」「A(腕)」「B(胴体)」「L(足)」の４カ所です。\n" + "　例）whH10 whA5 WHL4\n" + "・命中判定(WHx@t)\n" + "　\"WH(命中値)@(種別)\"の形で指定します。\n" + "　種別は脚の数を数字、翼が付いているものは「W」、手が付いているものは「H」で書きます。\n" + "　「2H(二足)」「2W(有翼二足)」「4(四足)」「4H(半人四足)」「4W(有翼四足)」「W(鳥類)」となります。\n" + "　命中判定を行って、当たれば部位も表示します。\n" + "　なお、種別指定を省略すると「二足」、「@」だけにすると全種別の命中部位を表示します。(コマンドを忘れた時の対応です)\n" + "　例）wh60　　wh43@4W　　WH65@\n");
        self.$register_prefix("WH");
        Opal.def(self, '$initialize', $Warhammer_initialize$1 = function $$initialize(command) {
          var $iter = $Warhammer_initialize$1.$$p,
              $yield = $iter || nil,
              self = this;
          if ($iter) $Warhammer_initialize$1.$$p = null;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Warhammer_initialize$1, false, true), 'initialize', [command], null);
          return self.round_type = $$$($$($nesting, 'RoundType'), 'CEIL');
        }, $Warhammer_initialize$1.$$arity = 1);
        Opal.def(self, '$eval_game_system_specific_command', $Warhammer_eval_game_system_specific_command$2 = function $$eval_game_system_specific_command(command) {
          var self = this,
              output_msg = nil,
              $case = nil,
              attackCommand = nil,
              criticalCommand = nil;
          output_msg = nil;
          $case = command.$upcase();

          if (/^(WH\d+(@[\dWH]*)?)/i['$===']($case)) {
            attackCommand = $$($nesting, 'Regexp').$last_match(1);
            output_msg = self.$getAttackResult(attackCommand);
          } else if (/^(WH[HABTLW]\d+)/i['$===']($case)) {
            criticalCommand = $$($nesting, 'Regexp').$last_match(1);
            output_msg = self.$getCriticalResult(criticalCommand);
          }

          ;
          return output_msg;
        }, $Warhammer_eval_game_system_specific_command$2.$$arity = 1);
        Opal.def(self, '$result_1d100', $Warhammer_result_1d100$3 = function $$result_1d100(total, _dice_total, cmp_op, target) {
          var self = this;

          if (target['$==']("?")) {
            return $$($nesting, 'Result').$nothing();
          }

          ;

          if (cmp_op['$==']("<=")) {} else {
            return nil;
          }

          ;

          if ($truthy($rb_le(total, target))) {
            return $$($nesting, 'Result').$success("" + "成功(成功度" + $rb_divide($rb_minus(target, total), 10).$to_i() + ")");
          } else {
            return $$($nesting, 'Result').$failure("" + "失敗(失敗度" + $rb_divide($rb_minus(total, target), 10).$to_i() + ")");
          }

          ;
        }, $Warhammer_result_1d100$3.$$arity = 4);
        Opal.def(self, '$result_1d100_text', $Warhammer_result_1d100_text$4 = function $$result_1d100_text(total, dice_total, cmp_op, target) {
          var $a,
              self = this,
              result = nil;
          result = ($a = self.$result_1d100(total, dice_total, cmp_op, target), $a === nil || $a == null ? nil : $send($a, 'text', []));

          if ($truthy(result['$nil?']())) {
            return "";
          } else {
            return "" + " ＞ " + result;
          }

          ;
        }, $Warhammer_result_1d100_text$4.$$arity = 4);
        Opal.def(self, '$getCriticalResult', $Warhammer_getCriticalResult$5 = function $$getCriticalResult(string) {
          var self = this,
              whh = nil,
              wha = nil,
              whb = nil,
              whl = nil,
              whw = nil,
              criticalTable = nil,
              partsWord = nil,
              criticalValue = nil,
              whpp = nil,
              whppp = nil,
              $case = nil,
              dice_now = nil,
              crit_no = nil,
              crit_num = nil,
              resultText = nil,
              output = nil;
          whh = ["01:打撃で状況が把握出来なくなる。次ターンは1回の半アクションしか行なえない。", "02:耳を強打された為、耳鳴りが酷く目眩がする。1Rに渡って一切のアクションを行なえない。", "03:打撃が頭皮を酷く傷つけた。【武器技術度】に-10%。治療を受けるまで継続。", "04:鎧が損傷し当該部位のAP-1。修理するには(職能:鎧鍛冶)テスト。鎧を着けていないなら1Rの間アクションを行なえない。", "05:転んで倒れ、頭がくらくらする。1Rに渡ってあらゆるテストに-30で、立ち上がるには起立アクションが必要。", "06:1d10R気絶。", "07:1d10分気絶。以後CTはサドンデス。", "08:顔がずたずたになって倒れ、以後無防備状態。治療を受けるまで毎Rの被害者のターン開始時に20%で死亡。以後CTはサドンデスを適用。【頑強】テストに失敗すると片方の視力を失う。", "09:凄まじい打撃により頭蓋骨が粉砕される。死は瞬時に訪れる。", "10:死亡する。いかに盛大に出血し、どのような死に様を見せたのかを説明してもよい。"];
          wha = ["01:手に握っていたものを落とす。盾はくくりつけられている為、影響なし。", "02:打撃で腕が痺れ、1Rの間使えなくなる。", "03:手の機能が失われ、治療を受けるまで回復できない。手で握っていたもの(盾を除く)は落ちる。", "04:鎧が損傷する。当該部位のAP-1。修理するには(職能:鎧鍛冶)テスト。鎧を着けていないなら腕が痺れ、1Rの間使えなくなる。", "05:腕の機能が失われ、治療を受けるまで回復できない。手で握っていたもの(盾を除く)は落ちる。", "06:腕が砕かれる。手で握っていたもの(盾を除く)は落ちる。出血がひどく、治療を受けるまで毎Rの被害者のターン開始時に20%で死亡。以後CTはサドンデスを適用。", "07:手首から先が血まみれの残骸と化す。手で握っていたもの(盾を除く)は落ちる。出血がひどく、治療を受けるまで毎Rの被害者のターン開始時に20%で死亡。以後CTはサドンデスを適用。【頑健】テストに失敗すると手の機能を失う。", "08:腕は血まみれの肉塊がぶら下がっている状態になる。手で握っていたもの(盾を除く)は落ちる。治療を受けるまで毎Rの被害者のターン開始時に20%で死亡。以後CTはサドンデスを適用。【頑健】テストに失敗すると肘から先の機能を失う。", "09:大動脈に傷が及んだ。コンマ数秒の内に損傷した肩から血を噴出して倒れる。ショックと失血により、ほぼ即死する。", "10:死亡する。いかに盛大に出血し、どのような死に様を見せたのかを説明してもよい。"];
          whb = ["01:打撃で息が詰まる。1Rの間、キャラクターの全てのテストや攻撃に-20%。", "02:股間への一撃。苦痛のあまり、1Rに渡って一切のアクションを行なえない。", "03:打撃で肋骨がぐちゃぐちゃになる。以後治療を受けるまでの間、【武器技術度】に-10%。", "04:鎧が損傷する。当該部位のAP-1。修理するには(職能:鎧鍛冶)テスト。鎧を着けていないなら股間への一撃、1Rに渡って一切のアクションを行なえない。", "05:転んで倒れ、息が詰まって悶絶する。1Rに渡ってあらゆるテストに-30の修正、立ち上がるには起立アクションが必要。", "06:1d10R気絶。", "07:ひどい内出血が起こり、無防備状態。出血がひどく、治療を受けるまで毎Rの被害者のターン開始時に20%で死亡。", "08:脊髄が粉砕されて倒れ、以後治療を受けるまで無防備状態。以後CTはサドンデスを適用。【頑強】テストに失敗すると腰から下が不随になる。", "09:凄まじい打撃により複数の臓器が破裂し、死は数秒のうちに訪れる。", "10:死亡する。いかに盛大に出血し、どのような死に様を見せたのかを説明してもよい。"];
          whl = ["01:よろめく。次のターン、1回の半アクションしか行なえない。", "02:脚が痺れる。1Rに渡って【移動】は半減し、脚に関連する【敏捷】テストに-20%。回避が出来なくなる。", "03:脚の機能が失われ、治療を受けるまで回復しない。【移動】は半減し、脚に関連する【敏捷】テストに-20%。回避が出来なくなる。", "04:鎧が損傷する。当該部位のAP-1。修理するには(職能:鎧鍛冶)テスト。鎧を着けていないなら脚が痺れる、1Rに渡って【移動】は半減し、脚に関連する【敏捷】テストに-20%、回避不可になる。", "05:転んで倒れ、頭がくらくらする。1Rに渡ってあらゆるテストに-30の修正、立ち上がるには起立アクションが必要。", "06:脚が砕かれ、無防備状態。出血がひどく、治療を受けるまで毎Rの被害者のターン開始時に20%で死亡。以後CTはサドンデスを適用。", "07:脚は血まみれの残骸と化し、無防備状態になる。治療を受けるまで毎Rの被害者のターン開始時に20%で死亡。以後CTはサドンデスを適用。【頑強】テストに失敗すると足首から先を失う。", "08:脚は血まみれの肉塊がぶらさがっている状態。以後無防備状態。治療を受けるまで毎Rの被害者のターン開始時に20%で死亡。以後CTはサドンデスを適用。【頑強】テストに失敗すると膝から下を失う。", "09:大動脈に傷が及ぶ。コンマ数秒の内に脚の残骸から血を噴出して倒れ、ショックと出血で死は瞬時に訪れる。", "10:死亡する。いかに盛大に出血し、どのような死に様を見せたのかを説明してもよい。"];
          whw = ["01:軽打。1ラウンドに渡って、あらゆるテストに-10％。", "02:かすり傷。+10％の【敏捷】テストを行い、失敗なら直ちに高度を1段階失う。地上にいるクリーチャーは、次のターンには飛び立てない。", "03:損傷する。【飛行移動力】が2点低下する。-10％の【敏捷】テストを行い、失敗なら直ちに高度を1段階失う。地上にいるクリーチャーは、次のターンには飛び立てない。", "04:酷く損傷する。【飛行移動力】が4点低下する。-30％の【敏捷】テストを行い、失敗なら直ちに高度を1段階失う。地上にいるクリーチャーは、1d10ターンが経過するまで飛び立てない。", "05:翼が使えなくなる。【飛行移動力】が0に低下する。飛行中のものは落下し、高度に応じたダメージを受ける。地上にいるクリーチャーは、怪我が癒えるまで飛び立てない。", "06:翼の付け根に傷が開く。【飛行移動力】が0に低下する。飛行中のものは落下し、高度に応じたダメージを受ける。地上にいるクリーチャーは、怪我が癒えるまで飛び立てない。治療を受けるまで毎R被害者のターン開始時に20％の確率で死亡。以後CTはサドンデスを適用。", "07:翼は血まみれの残骸と化し、無防備状態になる。【飛行移動力】が0に低下する。飛行中のものは落下し、高度に応じたダメージを受ける。地上にいるクリーチャーは、怪我が癒えるまで飛び立てない。治療を受けるまで毎R被害者のターン開始時に20％の確率で死亡。以後CTはサドンデスを適用。【頑強】テストに失敗すると飛行能力を失う。", "08:翼が千切れてバラバラになり、無防備状態になる。【飛行移動力】が0に低下する。飛行中のものは落下し、高度に応じたダメージを受ける。地上にいるクリーチャーは、怪我が癒えるまで飛び立てない。治療を受けるまで毎R被害者のターン開始時に20％の確率で死亡。以後CTはサドンデスを適用。飛行能力を失う。", "09:大動脈が切断された。コンマ数秒の内に血を噴き上げてくずおれる、ショックと出血で死は瞬時に訪れる。", "10:死亡する。いかに盛大に出血し、どのような死に様を見せたのかを説明してもよい。"];
          criticalTable = [5, 7, 9, 10, 10, 10, 10, 10, 10, 10, 5, 6, 8, 9, 10, 10, 10, 10, 10, 10, 4, 6, 8, 9, 9, 10, 10, 10, 10, 10, 4, 5, 7, 8, 9, 9, 10, 10, 10, 10, 3, 5, 7, 8, 8, 9, 9, 10, 10, 10, 3, 4, 6, 7, 8, 8, 9, 9, 10, 10, 2, 4, 6, 7, 7, 8, 8, 9, 9, 10, 2, 3, 5, 6, 7, 7, 8, 8, 9, 9, 1, 3, 5, 6, 6, 7, 7, 8, 8, 9, 1, 2, 4, 5, 6, 6, 7, 7, 8, 8];

          if ($truthy(/WH([HABTLW])(\d+)/['$=~'](string))) {} else {
            return "1";
          }

          ;
          partsWord = $$($nesting, 'Regexp').$last_match(1);
          criticalValue = $$($nesting, 'Regexp').$last_match(2).$to_i();

          if ($truthy($rb_gt(criticalValue, 10))) {
            criticalValue = 10;
          }

          ;

          if ($truthy($rb_lt(criticalValue, 1))) {
            criticalValue = 1;
          }

          ;
          whpp = "";
          whppp = "";
          $case = partsWord;

          if (/H/i['$===']($case)) {
            whpp = "頭部";
            whppp = whh;
          } else if (/A/i['$===']($case)) {
            whpp = "腕部";
            whppp = wha;
          } else if (/[TB]/i['$===']($case)) {
            whpp = "胴体";
            whppp = whb;
          } else if (/L/i['$===']($case)) {
            whpp = "脚部";
            whppp = whl;
          } else if (/W/i['$===']($case)) {
            whpp = "翼部";
            whppp = whw;
          }

          ;
          dice_now = self.randomizer.$roll_once(100);
          crit_no = $rb_times($rb_divide($rb_minus(dice_now, 1), 10).$to_i(), 10);
          crit_num = criticalTable['$[]']($rb_minus($rb_plus(crit_no, criticalValue), 1));
          resultText = whppp['$[]']($rb_minus(crit_num, 1));

          if ($truthy($rb_ge(crit_num, 5))) {
            resultText = $rb_plus(resultText, "サドンデス×");
          } else {
            resultText = $rb_plus(resultText, "サドンデス○");
          }

          ;
          output = "" + whpp + "CT表(" + dice_now + "+" + criticalValue + ") ＞ " + resultText;
          return output;
        }, $Warhammer_getCriticalResult$5.$$arity = 1);
        Opal.def(self, '$wh_atpos', $Warhammer_wh_atpos$6 = function $$wh_atpos(pos_num, pos_type) {
          var _$$,
              self = this,
              pos_2l = nil,
              pos_2lw = nil,
              pos_4l = nil,
              pos_4la = nil,
              pos_4lw = nil,
              pos_b = nil,
              wh_pos = nil,
              pos_t = nil,
              $case = nil,
              output = nil,
              pos_i = nil;

          self.$debug("wh_atpos begin pos_type", pos_type);
          pos_2l = ["二足", 15, "頭部", 35, "右腕", 55, "左腕", 80, "胴体", 90, "右脚", 100, "左脚"];
          pos_2lw = ["有翼二足", 15, "頭部", 25, "右腕", 35, "左腕", 45, "右翼", 55, "左翼", 80, "胴体", 90, "右脚", 100, "左脚"];
          pos_4l = ["四足", 15, "頭部", 60, "胴体", 70, "右前脚", 80, "左前脚", 90, "右後脚", 100, "左後脚"];
          pos_4la = ["半人四足", 10, "頭部", 20, "右腕", 30, "左腕", 60, "胴体", 70, "右前脚", 80, "左前脚", 90, "右後脚", 100, "左後脚"];
          pos_4lw = ["有翼四足", 10, "頭部", 20, "右翼", 30, "左翼", 60, "胴体", 70, "右前脚", 80, "左前脚", 90, "右後脚", 100, "左後脚"];
          pos_b = ["鳥", 15, "頭部", 35, "右翼", 55, "左翼", 80, "胴体", 90, "右脚", 100, "左脚"];
          wh_pos = [pos_2l, pos_2lw, pos_4l, pos_4la, pos_4lw, pos_b];
          pos_t = 0;
          self.$debug("pos_type", pos_type);

          if ($truthy(pos_type['$!='](""))) {
            $case = pos_type;

            if (/@(2W|W2)/i['$===']($case)) {
              pos_t = 1;
            } else if (/@(4W|W4)/i['$===']($case)) {
              pos_t = 4;
            } else if (/@(4H|H4)/i['$===']($case)) {
              pos_t = 3;
            } else if (/@4/i['$===']($case)) {
              pos_t = 2;
            } else if (/@W/i['$===']($case)) {
              pos_t = 5;
            } else {
              if ($truthy(/@(2H|H2|2)/i['$=~'](pos_type))) {} else {
                pos_t = -1;
              }
            }
          }

          ;
          output = "";
          self.$debug("pos_t", pos_t);

          if ($truthy($rb_lt(pos_t, 0))) {
            $send(wh_pos, 'each', [], (_$$ = function $$7(pos_i) {
              var self = _$$.$$s == null ? this : _$$.$$s;

              if (pos_i == null) {
                pos_i = nil;
              }

              ;
              return output = $rb_plus(output, self.$get_wh_atpos_message(pos_i, pos_num));
            }, _$$.$$s = self, _$$.$$arity = 1, _$$));
          } else {
            pos_i = wh_pos['$[]'](pos_t);
            output = $rb_plus(output, self.$get_wh_atpos_message(pos_i, pos_num));
          }

          ;
          return output;
        }, $Warhammer_wh_atpos$6.$$arity = 2);
        Opal.def(self, '$get_wh_atpos_message', $Warhammer_get_wh_atpos_message$8 = function $$get_wh_atpos_message(pos_i, pos_num) {
          var _$$2,
              self = this,
              output = nil;

          output = "";
          output = $rb_plus(output, $rb_plus($rb_plus(" ", pos_i['$[]'](0)), ":"));

          (function () {
            var $brk = Opal.new_brk();

            try {
              return $send(1, 'step', [$rb_plus(pos_i.$length(), 1), 2], (_$$2 = function $$9(i) {
                var self = _$$2.$$s == null ? this : _$$2.$$s;

                if (i == null) {
                  i = nil;
                }

                ;

                if ($truthy($rb_le(pos_num, pos_i['$[]'](i)))) {
                  output = $rb_plus(output, pos_i['$[]']($rb_plus(i, 1)));
                  Opal.brk(nil, $brk);
                } else {
                  return nil;
                }

                ;
              }, _$$2.$$s = self, _$$2.$$brk = $brk, _$$2.$$arity = 1, _$$2));
            } catch (err) {
              if (err === $brk) {
                return err.$v;
              } else {
                throw err;
              }
            }
          })();

          return output;
        }, $Warhammer_get_wh_atpos_message$8.$$arity = 2);
        return (Opal.def(self, '$getAttackResult', $Warhammer_getAttackResult$10 = function $$getAttackResult(string) {
          var self = this,
              pos_type = nil,
              diff = nil,
              total_n = nil,
              output = nil,
              pos_num = nil;
          self.$debug("getAttackResult begin string", string);
          pos_type = "";

          if ($truthy(/(.+)(@.*)/['$=~'](string))) {
            string = $$($nesting, 'Regexp').$last_match(1);
            pos_type = $$($nesting, 'Regexp').$last_match(2);
            self.$debug("pos_type", pos_type);
          }

          ;

          if ($truthy(/WH(\d+)/i['$=~'](string))) {} else {
            return "1";
          }

          ;
          diff = $$($nesting, 'Regexp').$last_match(1).$to_i();
          total_n = self.randomizer.$roll_once(100);
          output = "" + "(" + string + ") ＞ " + total_n;
          output = $rb_plus(output, self.$result_1d100_text(total_n, total_n, "<=", diff));
          pos_num = $rb_plus($rb_times(total_n['$%'](10), 10), $rb_divide(total_n, 10).$to_i());

          if ($truthy($rb_ge(total_n, 100))) {
            pos_num = 100;
          }

          ;

          if ($truthy($rb_le(total_n, diff))) {
            output = $rb_plus(output, self.$wh_atpos(pos_num, pos_type));
          }

          ;
          return output;
        }, $Warhammer_getAttackResult$10.$$arity = 1), nil) && 'getAttackResult';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting);
  }($nesting[0], $nesting);
})(Opal);

/***/ })

}]);
//# sourceMappingURL=default~Warhammer~index.js.map